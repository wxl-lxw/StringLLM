[
    {
        "manipulations": [
            "indexing"
        ],
        "solution": "```python\nanswer = a[x]\nprint(answer)\n```",
        "variables": {
            "a": "\u07d6\u07ca\u07f2\u07ec\u07d5\u07cf\u07ec\u07d2\u07ec\u07d6\u07d8\u07cd\u07ec\u07d8\u07d0\u07ec \u07e1\u07ca\u07ec\u07db\u07cd\u07ec\u07df\u07cd\u07f2\u07ec\u07d3\u07cd\u07ec \u07dd\u07db\u07cf\u07ec\u07dd\u07db\u07ca\u07ec\u07d3\u07e3\u07ca \u07e6\u07f4\u07ca\u07ec \u07e3\u07d0\u07ed \u07df\u07ca\u07eb \u07df\u07ca\u07eb \u07d8\u07cb\u07f2\u07e3\u07cd\u07f2\u07eb \u07dc\u07d8\u07cd \u07df\u07ce\u07eb \u07dd\u07cd\u07ec \u07dc\u07cb\u07f2\u07ec\u07de\u07d8\u07ce\u07ec\u07e2\u07d0\u07f2\u07f0\u07e6\u07ca \u07df\u07ca\u07eb \u07f8 \u07e1\u07cd\u07f2 \u07e0\u07ce\u07ec \u07d5\u07f4\u07db\u07cb\u07eb \u07df\u07f4\u07ca\u07ec \u07e2\u07ca\u07e6\u07cb\u07eb \u07df\u07ca\u07eb \u07de\u07cf\u07eb \u07e1\u07ce\u07f2\u07ec \u07e0\u07f4\u07ca\u07ec\u07df\u07ce\u07ec \u07e6\u07cb\u07eb \u07de\u07cf \u07df\u07ce\u07ec \u07df\u07ca\u07d5\u07ca\u07ef\u07e1\u07ca\u07eb \u07df\u07ca\u07eb \u07e2\u07ca\u07eb \u07db\u07ce\u07ee \u07d8\u07cf\u07eb \u07de\u07ca\u07f2\u07ec \u07ca\u07ec\u07df\u07ce\u07ec \u07e6\u07cb\u07eb \u07e1\u07cd\u07f2 \u07de\u07cd\u07eb \u07df\u07ca\u07eb\u07f8 \u07e5\u07df\u07f4\u07ca\u07ec\u07df\u07ce\u07ec \u07e6\u07cb\u07eb \u07d6\u07ca\u07e1\u07ca\u07f2 \u07e1\u07cd\u07f2 \u07de\u07cd\u07eb \u07df\u07f4\u07ca\u07ec\u07df\u07ce\u07ec \u07de\u07cf\u07de\u07cd\u07e2\u07ca \u07df\u07ce\u07ec \u07d8\u07d0\u07eb\u07f8 \u07e5\u07df\u07f4\u07ca\u07ec\u07df\u07ce\u07ec \u07df\u07ca\u07eb \u07de\u07cf\u07eb \u07df\u07ca\u07dd\u07cf\u07e2\u07ca \u07de\u07ca\u07d3\u07cb \u07dd\u07cf\u07ec\u07d8\u07cf \u07d8\u07d0\u07eb \u07e2\u07d0\u07f2\u07ee \u07e1\u07ca\u07ec.",
            "x": 5
        },
        "query": [
            "Return the character from the string {a} at the {x+1}-th position.",
            "Determine the {x+1}-th character from the string {a}.",
            "Find the character in the string {a} at index {x}."
        ],
        "language": "nqo_Nkoo"
    },
    {
        "manipulations": [
            "slicing"
        ],
        "solution": "```python\nanswer = a[x:y]\nprint(answer)\n```",
        "variables": {
            "a": "\u0428\u044b\u0432 \u043c\u043e\u043b\u0435\u043a\u0443\u043b\u0438\u0441\u0435\u043c \u0448\u044b\u0432 \u04ab\u0438\u0439\u0115\u043f\u0435 \u043a\u0443\u04ab\u0430 \u043a\u0443\u0440\u04d1\u043d\u043c\u0430\u043d \u00e7\u0443\u0440\u0445\u0430\u0445 \u043f\u0443\u043b\u0441\u0430 \u0442\u04d1\u0440\u0430\u04ab\u04ab\u04d7, \u0432\u04d1\u043b \u0439\u04d7\u043f \u043f\u0435\u043a \u044f\u043f\u0430\u043b\u0430\u0441\u0435\u043d\u0435 \u0448\u044b\u0432 \u04ab\u0438\u0439\u04d7\u043f\u0435 \u0438\u0448\u043c\u0435 \u043c\u0430\u0439 \u043f\u0430\u0440\u0430\u0442\u044c.",
            "x": 10,
            "y": 20
        },
        "query": [
            "Find the section of string {a} from index {x} to just before {y}.",
            "Get the substring from the character at index {x} to the character just before index {y} in the string {a}.",
            "Retrieve the portion of string {a} from {x} to {y}."
        ],
        "language": "chv_Cyrl"
    },
    {
        "manipulations": [
            "slicing"
        ],
        "solution": "```python\nanswer = a[:y]\nprint(answer)\n```",
        "variables": {
            "a": "\u0b1f\u0b4d\u0b30\u0b3e\u0b07\u0b38\u0b47\u0b30\u0b3e\u0b1f\u0b2a\u0b4d\u0b38 \u0b0f\u0b39\u0b3e\u0b30 \u0b17\u0b1b\u0b30 \u0b17\u0b23\u0b4d\u0b21\u0b3f \u0b16\u0b3e\u0b07\u0b2c\u0b3e \u0b2a\u0b42\u0b30\u0b4d\u0b2c\u0b30\u0b41 \u0b24\u0b3e\u2019\u0b30 \u0b36\u0b15\u0b4d\u0b24 \u0b25\u0b23\u0b4d\u0b1f\u0b30\u0b47 \u0b2a\u0b24\u0b4d\u0b30\u0b17\u0b41\u0b21\u0b3f\u0b15 \u0b16\u0b3e\u0b07\u0b2a\u0b3e\u0b30\u0b3f\u0b25\u0b3e\u0b28\u0b4d\u0b24\u0b3e \u0964",
            "y": 10
        },
        "query": [
            "Retrieve the first {y} characters from string {a}.",
            "Get the portion of {a} from the start until just before position {y}.",
            "Identify the characters in {a} up to index {y}."
        ],
        "language": "ory_Orya"
    },
    {
        "manipulations": [
            "slicing"
        ],
        "solution": "```python\nanswer = a[x:]\nprint(answer)\n```",
        "variables": {
            "a": "\u0938\u093f\u0916 \u0927\u0930\u094d\u092e \u092d\u093e\u0930\u0924\u0940\u092f \u0909\u092a\u092e\u0939\u093e\u0926\u094d\u0935\u0940\u092a \u0915\u093e \u090f\u0915 \u0927\u0930\u094d\u092e \u0939\u0948\u0964 \u092f\u0939 15\u0935\u0940\u0902 \u0936\u0924\u093e\u092c\u094d\u0926\u0940 \u0915\u0947 \u0926\u094c\u0930\u093e\u0928 \u092a\u0902\u091c\u093e\u092c \u0915\u094d\u0937\u0947\u0924\u094d\u0930 \u092e\u0947\u0902 \u0939\u093f\u0902\u0926\u0942 \u092a\u0930\u0902\u092a\u0930\u093e \u0915\u0947 \u092d\u0940\u0924\u0930 \u090f\u0915 \u0938\u093e\u0902\u092a\u094d\u0930\u0926\u093e\u092f\u093f\u0915 \u0935\u093f\u092d\u093e\u091c\u0928 \u0938\u0947 \u0909\u0924\u094d\u092a\u0928\u094d\u0928 \u0939\u0941\u0906 \u0925\u093e\u0964",
            "x": 10
        },
        "query": [
            "Retrieve the substring in {a} from {x} to the end.",
            "Identify the section of {a} starting at index {x} and continuing to the end.",
            "Find the tail part of {a} starting at index {x}."
        ],
        "language": "hin_Deva"
    },
    {
        "manipulations": [
            "slicing"
        ],
        "solution": "```python\nanswer = a[x::z]\nprint(answer)\n```",
        "variables": {
            "a": "\u07ca\u07f0 \u07dd\u07d0\u07eb \u07df\u07ca\u07eb \u07de\u07d9\u07ce\u07ec\u07de\u07ca\u07f2\u07ec\u07e0\u07ca \u07e2\u07cc\u07f2\u07ec \u07e0\u07ce\u07eb \u07e1\u07ca\u07ec \u07df\u07cb\u07ec \u07ca\u07ec \u07db\u07cc\u07e6\u07ca\u07e1\u07ca\u07f2 \u07d8\u07d0\u07eb \u07de\u07cf\u07eb \u00ab\u2009vidde\u2009\u00bb\u07f8 \u07de\u07ca\u07ec\u07df\u07ca\u07e5\u07cc\u07ec\u07df\u07cc\u07eb \u07dd\u07ca\u07f2\u07ec\u07dd\u07d8\u07ca\u07eb \u07d8\u07d0\u07e6\u07d9\u07cc\u07e5\u07ca\u07e3\u07cd\u07f2\u07d3\u07ca \u07d8\u07ca\u07f2\u07ec\u07e0\u07ca\u07d5\u07cd\u07f0 \u07de\u07ca\u07e1\u07ca\u07ec \u07e6\u07d9\u07cc\u07eb \u07d5\u07cd\u07eb \u07e1\u07cd\u07f2 \u07d8\u07d0\u07eb \u07f8 \u07ca\u07ec \u07e3\u07cc\u07eb \u07dd\u07ca\u07f2\u07ec\u07de\u07e3\u07d0\u07eb \u07d8\u07ca\u07f2\u07ec \u07d5\u07cd\u07eb \u07e1\u07cd\u07f2 \u07e0\u07ca\u07eb.",
            "x": 5,
            "z": 3
        },
        "query": [
            "Obtain the characters in {a} from {x} to the end with step {z}.",
            "Get the part of {a} from position {x} to the end, selecting every {z}-th character.",
            "Select the substring in {a} from {x} to the end, every {z} characters."
        ],
        "language": "nqo_Nkoo"
    },
    {
        "manipulations": [
            "slicing"
        ],
        "solution": "```python\nanswer = a[::z]\nprint(answer)\n```",
        "variables": {
            "a": "\u0424\u0435\u043b\u0438\u0441\u0438\u044f, \u0443\u043b \u043a\u0430\u0439\u0447\u0430\u043d\u0434\u044b\u0440 \u0443\u0440\u0430\u0433\u0430\u043d\u043d\u0430\u0440 \u0448\u043a\u0430\u043b\u0430\u0441\u044b \u0431\u0443\u0435\u043d\u0447\u0430 4 \u043d\u0447\u0435 \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u044f\u043b\u0435 \u0421\u0430\u0444\u0444\u0438\u0440\u0430-\u0421\u0438\u043c\u043f\u0441\u043e\u043d \u0434\u0430\u0432\u044b\u043b\u044b \u0431\u0443\u043b\u0433\u0430\u043d, \u0442\u0440\u043e\u043f\u0438\u043a \u0497\u0438\u043b\u0435\u043d\u04d9 \u043a\u0430\u0434\u04d9\u0440 \u0439\u043e\u043c\u0448\u0430\u0440\u0433\u0430\u043d, \u04d9 \u0441\u0438\u0448\u04d9\u043c\u0431\u0435 \u043a\u04e9\u043d\u043d\u0435 \u0442\u0430\u0440\u043a\u0430\u043b\u0433\u0430\u043d.",
            "z": 3
        },
        "query": [
            "Identify every {z}-th character in {a}.",
            "Return the string {a} with every {z}-th character.",
            "Extract every {z}-th character from the entire string {a}."
        ],
        "language": "tat_Cyrl"
    },
    {
        "manipulations": [
            "slicing"
        ],
        "solution": "```python\nanswer = a[:y:z]\nprint(answer)\n```",
        "variables": {
            "a": "\u0628\u0633\u0628\u0628 \u062d\u0631\u0627\u0631\u0629 \u0627\u0644\u0646\u0647\u0627\u0631\u060c \u0627\u062d\u062a\u0645\u0627\u0644 \u064a\u0634\u0648\u0641 \u0627\u0644\u0645\u0633\u0627\u0641\u0631\u064a\u0646 \u0627\u0644\u0633\u0631\u0627\u0628 \u0627\u0644\u0644\u064a \u064a\u0648\u0647\u0645 \u0628\u0648\u062c\u0648\u062f \u0627\u0644\u0645\u0627\u0621 (\u0623\u0648 \u0623\u0634\u064a\u0627\u0621 \u0623\u062e\u0631\u0649).",
            "y": 20,
            "z": 2
        },
        "query": [
            "Take every {z}-th character from the start of {a} up to the {y}-th character.",
            "Retrieve the initial {y} characters of {a} with a step of {z}.",
            "Get the first {y} characters of {a}, selecting every {z}-th character."
        ],
        "language": "acm_Arab"
    },
    {
        "manipulations": [
            "slicing"
        ],
        "solution": "```python\nanswer = a[x:y:z]\nprint(answer)\n```",
        "variables": {
            "a": "MySpace \u2014 \u043d\u0430\u0439\u043f\u043e\u043f\u0443\u043b\u044f\u0440\u043d\u0456\u0448\u0438\u0439 \u0441\u0430\u0439\u0442, \u044f\u043a\u0438\u043c \u043a\u043e\u0440\u0438\u0441\u0442\u0443\u044e\u0442\u044c\u0441\u044f \u0443 \u0421\u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u0445 \u0428\u0442\u0430\u0442\u0430\u0445, \u0456 \u043d\u0430\u0440\u0430\u0437\u0456 \u0432 \u043d\u044c\u043e\u043c\u0443 54 \u043c\u0456\u043b\u044c\u0439\u043e\u043d\u0438 \u043f\u0440\u043e\u0444\u0456\u043b\u0456\u0432.",
            "x": 10,
            "y": 50,
            "z": 2
        },
        "query": [
            "Return the slice of {a} from {x} to {y} with steps of {z}.",
            "Get a portion of {a} from position {x} to {y} (not including {y}), selecting every {z}-th character.",
            "Identify the substring in {a} from {x} to {y} with every {z}-th step."
        ],
        "language": "ukr_Cyrl"
    },
    {
        "manipulations": [
            "reverse"
        ],
        "solution": "```python\nanswer = a[::-1]\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u06af\u0631 \u0627\u0632 \u0631\u0648\u06cc \u067e\u0644 \u0639\u0628\u0648\u0631 \u06a9\u0646\u06cc\u062f \u06cc\u0627 \u062f\u0631 \u0645\u0633\u06cc\u0631\u0647\u0627\u06cc \u067e\u06cc\u0627\u062f\u0647 \u0631\u0648\u06cc \u0646\u0632\u062f\u06cc\u06a9 \u0622\u0628\u0634\u0627\u0631\u0647\u0627 \u0642\u062f\u0645 \u0628\u0632\u0646\u06cc\u062f\u060c \u062e\u06cc\u0633 \u0634\u062f\u0646 \u0634\u0645\u0627 \u062a\u0636\u0645\u06cc\u0646 \u0634\u062f\u0647 \u0627\u0633\u062a."
        },
        "query": [
            "Retrieve {a} with its characters in reverse order.",
            "Reverse the order of characters in {a}.",
            "Get the reverse of the string {a}."
        ],
        "language": "pes_Arab"
    },
    {
        "manipulations": [
            "length"
        ],
        "solution": "```python\nanswer = len(a)\nprint(answer)\n```",
        "variables": {
            "a": "\ud604\uc7ac\uae4c\uc9c0\ub294 \uc778\uac04\uc740 \ud0c0\uc778\uc758 \ub9c8\uc74c\uc744 \uc77d\ub294\ub370 \uac00\uc7a5 \ub6f0\uc5b4\ub09c \uc7ac\ub2a5\uc744 \uac00\uc9c4 \uc885\uc785\ub2c8\ub2e4."
        },
        "query": [
            "Measure the number of characters in {a}.",
            "Determine the number of characters in the string {a}.",
            "Tell me the length of string {a}."
        ],
        "language": "kor_Hang"
    },
    {
        "manipulations": [
            "endswith"
        ],
        "solution": "```python\nanswer = a.endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0647\u06cc\u0644\u06cc \u06a9\u0627\u067e\u067c\u0631 \u062f \u0689\u0644\u06d0 \u067c\u0648\u0644 \u062f\u0648\u0644\u0633 \u063a\u0693\u06cc \u0648\u0698\u063a\u0648\u0631\u0644 \u06cc\u0648\u0627\u0681\u0646\u06cc \u0632\u062e\u0645 \u062f \u06cc\u0648\u06d0 \u0645\u0627\u062a\u06cc \u0634\u0648\u064a \u067e\u0648\u0632\u06cc \u0648",
            "x": "\u067e\u0648\u0632\u06cc \u0648"
        },
        "query": [
            "Determine if {a} concludes with the substring {x}.",
            "Check if the string {a} ends with the substring {x}.",
            "Find out if {a} terminates with {x}."
        ],
        "language": "pbt_Arab"
    },
    {
        "manipulations": [
            "startswith"
        ],
        "solution": "```python\nanswer = a.startswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0416\u0430\u0440\u043a \u0442\u0443\u0445\u0430\u0439\u043d \u04e9\u0434\u04e9\u0440 \u044d\u0440\u0442 \u0418\u0442\u0430\u043b\u0438\u0439\u043d \u041a\u043e\u0432\u0435\u0440\u0447\u0438\u0430\u043d\u043e\u0434 \u0443\u043b\u0438\u0440\u043b\u044b\u043d \u04e9\u043c\u043d\u04e9\u0445 \u0431\u044d\u043b\u0442\u0433\u044d\u043b\u0438\u0439\u0433 \u0445\u0438\u0439\u0436 \u0431\u0430\u0439\u0436\u044d\u044d. \u0422\u044d\u0440 \u041d\u044f\u043c \u0433\u0430\u0440\u0430\u0433\u0442 \u0411\u043e\u043b\u043e\u043d\u0438\u0430\u0433\u0438\u0439\u043d \u044d\u0441\u0440\u044d\u0433 \u0442\u04e9\u043b\u04e9\u0432\u043b\u04e9\u0441\u04e9\u043d \u0442\u043e\u0433\u043b\u043e\u043b\u0442\u043e\u043e\u0441 \u04e9\u043c\u043d\u04e9 \u0431\u0430\u0433\u0438\u0439\u043d \u0437\u043e\u0447\u0438\u0434 \u0431\u0443\u0443\u0434\u0430\u043b\u0434 \u0431\u0430\u0439\u0440\u043b\u0430\u0436 \u0431\u0430\u0439\u0432.",
            "x": "\u0416\u0430\u0440\u043a"
        },
        "query": [
            "Identify if {a} starts with {x}.",
            "Confirm if {a} starts with {x}.",
            "Determine if {a} starts with the substring {x}."
        ],
        "language": "khk_Cyrl"
    },
    {
        "manipulations": [
            "contain"
        ],
        "solution": "```python\nanswer = x in y\nprint(answer)\n```",
        "variables": {
            "x": "\u667a\u5229",
            "y": "\u96d6\u7136\u667a\u5229\u5728 1810 \u5e74\u5373\u5ba3\u4f48\u7368\u7acb\uff08\u7576\u6642\u6b63\u503c\u62ff\u7834\u4f96\u6230\u722d\uff0c\u897f\u73ed\u7259\u6709\u597d\u5e7e\u5e74\u90fd\u6c92\u6709\u6b63\u5e38\u904b\u4f5c\u7684\u4e2d\u592e\u653f\u5e9c\uff09\uff0c\u4f46\u76f4\u5230 1818 \u5e74\u624d\u64ca\u6557\u897f\u73ed\u7259\uff0c\u53d6\u5f97\u6c7a\u5b9a\u6027\u7684\u52dd\u5229\u3002"
        },
        "query": [
            "Does string {y} contain substring {x}?",
            "Check whether {x} is included in {y}.",
            "Identify if {x} is in {y}."
        ],
        "language": "cmn_Hant"
    },
    {
        "manipulations": [
            "capitalize"
        ],
        "solution": "```python\nanswer = a.capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "Tornado ngrejek wewidangan sane cupit yening kasaihang teken badai ageng lianan, nanging ipun polih ngusak sami sane wenten ring margine."
        },
        "query": [
            "Capitalize the first letter of {a} and lowercase the rest.",
            "Set the first letter of {a} to upper case and the remaining characters to lower case.",
            "Adjust {a} to have an uppercase initial letter and lowercase the rest."
        ],
        "language": "ban_Latn"
    },
    {
        "manipulations": [
            "casefold"
        ],
        "solution": "```python\nanswer = a.casefold()\nprint(answer)\n```",
        "variables": {
            "a": "Ha \u0253awo njamdi 11:00, yim\u0253e wurti wolwa \u0253ernde ma\u0253\u0253e aati lawol gefe so\u0253\u0253iire hortol ha Pellel fottugo danejum."
        },
        "query": [
            "Alter {a} to be in lowercase.",
            "Transform the string {a} to lowercase.",
            "Set every character in {a} to its lowercase form."
        ],
        "language": "fuv_Latn"
    },
    {
        "manipulations": [
            "center"
        ],
        "solution": "```python\nanswer = a.center(x,y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0a17\u0a48\u0a38 \u0a15\u0a70\u0a2a\u0a28\u0a40 \u0a26\u0a47 \u0a07\u0a15 \u0a05\u0a27\u0a3f\u0a15\u0a3e\u0a30\u0a40 \u0a28\u0a42\u0a70 \u0a07\u0a15 \u0a17\u0a41\u0a06\u0a02\u0a22\u0a40 \u0a28\u0a47 \u0a17\u0a48\u0a38 \u0a32\u0a40\u0a15 \u0a39\u0a41\u0a70\u0a26\u0a40 \u0a26\u0a47\u0a16\u0a23 \u0a24\u0a4b\u0a02 \u0a2c\u0a3e\u0a05\u0a26 \u0a15\u0a3e\u0a32 \u0a15\u0a30\u0a15\u0a47 \u0a26\u0a71\u0a38\u0a3f\u0a06 \u0a38\u0a40\u0964",
            "x": 100,
            "y": "\u0a2a"
        },
        "query": [
            "Align {a} to the center of a string of {x} length, with {y} on both sides.",
            "Create a string of length {x} with {a} centered and padded with the character {y} on both sides.",
            "Center {a} within a string of {x} characters, using {y} for padding."
        ],
        "language": "pan_Guru"
    },
    {
        "manipulations": [
            "count"
        ],
        "solution": "```python\nanswer = a.count(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0905\u0907\u0938\u0947 \u090f\u091c\u0947\u0902\u091f \u0915\u0947 \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0928\u093e \u092c\u0947\u0939\u0924\u0930 \u0939\u094b \u0938\u0915\u0925\u0947 \u091c\u094b \u0905\u0915\u094d\u0938\u0930 \u0906\u092a \u092e\u0928 \u0915\u0947 \u0938\u092e\u093e\u0928 \u092f\u093e\u0924\u094d\u0930\u093e \u0932\u093e \u092c\u0941\u0915 \u0915\u0930\u0925\u0947\u0964",
            "x": "\u0915\u0947"
        },
        "query": [
            "Check the occurrence of {x} within {a}.",
            "Find the number of occurrences of the substring {x} in the string {a}.",
            "Assess how many times {x} is found in {a}."
        ],
        "language": "hne_Deva"
    },
    {
        "manipulations": [
            "expandtabs"
        ],
        "solution": "```python\nanswer = a.expandtabs(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u041f\u0440\u043e\u0442\u0435\t\u043c\u0430\u0439\u0436\u0435\t\u0443\t\u0432\u0441\u0456\u0445\t\u043f\u0435\u0440\u0435\u0440\u0430\u0445\u043e\u0432\u0430\u043d\u0438\u0445\t\u0432\u0438\u0449\u0435\t\u043a\u0430\u0437\u0438\u043d\u043e\t\u043f\u043e\u0434\u0430\u044e\u0442\u044c\t\u043d\u0430\u043f\u043e\u0457,\t\u0430\t\u0432\t\u0434\u0435\u044f\u043a\u0438\u0445\t\u0437\t\u043d\u0438\u0445\t\u043f\u0440\u043e\u0432\u043e\u0434\u044f\u0442\u044c\u0441\u044f\t\u0444\u0456\u0440\u043c\u043e\u0432\u0456\t\u0440\u043e\u0437\u0432\u0430\u0433\u0438\t(\u043f\u0435\u0440\u0435\u0432\u0430\u0436\u043d\u043e\t\u0443\t\u0432\u0435\u043b\u0438\u043a\u0438\u0445\t\u043a\u0430\u0437\u0438\u043d\u043e,\t\u044f\u043a\u0456\t\u0440\u043e\u0437\u0442\u0430\u0448\u043e\u0432\u0430\u043d\u0456\t\u0431\u0435\u0437\u043f\u043e\u0441\u0435\u0440\u0435\u0434\u043d\u044c\u043e\t\u0431\u0456\u043b\u044f\t\u0410\u043b\u044c\u0431\u0443\u043a\u0435\u0440\u043a\u0435\t\u0456\t\u0421\u0430\u043d\u0442\u0430-\u0424\u0435).",
            "x": 4
        },
        "query": [
            "Set each tab character in {a} to be equivalent to {x} whitespace characters.",
            "Set the tab size of the string {a} to {x} whitespaces.",
            "Change tabs in {a} to be {x} spaces long."
        ],
        "language": "ukr_Cyrl"
    },
    {
        "manipulations": [
            "find"
        ],
        "solution": "```python\nanswer = a.find(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0d86\u0dbb\u0dca\u0db8\u0dda\u0db1\u0dd2\u0dba\u0dcf\u0db1\u0dd4 \u0db4\u0dd2\u0da7\u0dd4\u0db6\u0dbd\u0dba \u0d87\u0dad\u0dd2\u0dc0 \u0db1\u0dc0 \u0da2\u0db1\u0dbb\u0da2\u0dba\u0d9a\u0dca \u0db1\u0dd2\u0dbb\u0dca\u0db8\u0dcf\u0dab\u0dba \u0d9a\u0dbb\u0db1 \u0dbd\u0daf\u0dd3. \u0d9a\u0dd9\u0dc3\u0dda \u0dc0\u0dd9\u0dad\u0dad\u0dca, \u0d9a\u0dd2\u0dc3\u0dd2\u0db3\u0dd4 \u0dc3\u0dca\u0dae\u0dcf\u0db4\u0dd2\u0dad \u0da2\u0dcf\u0dad\u0dd2\u0dba\u0d9a\u0dca - \u0d86\u0dbb\u0dca\u0db8\u0dda\u0db1\u0dd2\u0dba\u0dcf\u0dc0\u0dc0\u0dad\u0dca - \u0d91\u0dba \u0db1\u0dd2\u0dbd \u0dc0\u0dc1\u0dba\u0dd9\u0db1\u0dca \u0db4\u0dd2\u0dc5\u0dd2\u0d9c\u0db1\u0dca\u0db1\u0dda \u0db1\u0dd0\u0dad.",
            "x": "\u0da2\u0db1\u0dbb\u0da2\u0dba\u0d9a\u0dca"
        },
        "query": [
            "Determine the first position of {x} in {a}.",
            "Get the index of the first instance of {x} in {a}.",
            "Identify the index of the first occurrence of {x} in {a}."
        ],
        "language": "sin_Sinh"
    },
    {
        "manipulations": [
            "isalnum"
        ],
        "solution": "```python\nanswer = a.isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u0a86 \u0aa7\u0ab0\u0acd\u0aae\u0aa8\u0ac0 \u0ab8\u0acd\u0aa5\u0abe\u0aaa\u0aa8\u0abe 15\u0aae\u0ac0 \u0ab8\u0aa6\u0ac0\u0aae\u0abe\u0a82 \u0a97\u0ac1\u0ab0\u0ac1 \u0aa8\u0abe\u0aa8\u0a95 (1469-1539) \u0aa6\u0acd\u0ab5\u0abe\u0ab0\u0abe \u0a95\u0ab0\u0ab5\u0abe\u0aae\u0abe\u0a82 \u0a86\u0ab5\u0ac0 \u0ab9\u0aa4\u0ac0. \u0aa4\u0ac7\u0aae\u0aa8\u0abe \u0aac\u0abe\u0aa6 \u0a85\u0aa8\u0ac1\u0a97\u0abe\u0aae\u0ac0 \u0aac\u0ac0\u0a9c\u0abe \u0aa8\u0ab5 \u0a97\u0ac1\u0ab0\u0ac1 \u0aa5\u0aaf\u0abe."
        },
        "query": [
            "Verify if all characters in {a} are either letters or numbers.",
            "Verify that all characters in {a} are letters or digits.",
            "Check if all characters in string {a} are alphanumeric."
        ],
        "language": "guj_Gujr"
    },
    {
        "manipulations": [
            "isalpha"
        ],
        "solution": "```python\nanswer = a.isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Ev bahoz\u00ean qerase bay\u00ean xwe hene ku dikarin derkevin heta 480 km/h (133 m/s; 300 mph)."
        },
        "query": [
            "Verify if all characters in {a} are alphabetic.",
            "Verify that all characters in {a} are from the alphabet.",
            "Check whether {a} has only letters."
        ],
        "language": "kmr_Latn"
    },
    {
        "manipulations": [
            "isascii"
        ],
        "solution": "```python\nanswer = a.isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Capsule man tokkai dillugo ha 12.8km kobo 8 miles ha hour, daga san francisco yahugo los angelos hosai minti gootel."
        },
        "query": [
            "Identify if all characters in {a} are from the ASCII set.",
            "Verify if all characters in {a} belong to the ASCII character set.",
            "See if {a} is made up of ASCII characters only."
        ],
        "language": "fuv_Latn"
    },
    {
        "manipulations": [
            "isdecimal"
        ],
        "solution": "```python\nanswer = a.isdecimal()\nprint(answer)\n```",
        "variables": {
            "a": "\u4ece\u4e0b\u9762\u5f80\u4e0a\u770b\u6709\u70b9\u5413\u4eba\uff0c\u800c\u4e14\u662f\u9661\u5ced\u800c\u8270\u96be\u7684\u4e0a\u5761\u8def\uff0c\u4f46\u5927\u591a\u6570\u8eab\u4f53\u72b6\u51b5\u826f\u597d\u7684\u4eba\u5e94\u8be5\u80fd\u5728 45 \u5206\u949f\u5185\u5b8c\u6210\u3002"
        },
        "query": [
            "Confirm if {a} is composed entirely of decimal characters.",
            "Check if all characters in the string {a} are decimals.",
            "Verify that all characters in {a} are decimal."
        ],
        "language": "cmn_Hans"
    },
    {
        "manipulations": [
            "isdigit"
        ],
        "solution": "```python\nanswer = a.isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u0924\u0947 \u0935\u093e\u0926\u0933\u0940 \u0922\u0917\u093e\u0924\u0942\u0928 \u0928\u0930\u0938\u093e\u0933\u094d\u092f\u093e \u092a\u094d\u0930\u092e\u093e\u0923\u0947 \u0916\u093e\u0932\u0940 \u092f\u093e\u092f\u0932\u093e \u0938\u0941\u0930\u0941\u0935\u093e\u0924 \u0915\u0930\u0924\u093e\u0924 \u0906\u0923\u093f \u091c\u0947\u0935\u094d\u0939\u093e \u0924\u0947 \u091c\u092e\u093f\u0928\u0940\u0932\u093e \u0938\u094d\u092a\u0930\u094d\u0936 \u0915\u0930\u0924\u093e\u0924 \u0924\u0947\u0935\u094d\u0939\u093e \u0924\u0947 '\u091f\u094b\u0930\u094d\u0928\u0947\u0921\u094b' \u092c\u0928\u0924\u093e\u0924."
        },
        "query": [
            "Determine if the string {a} consists only of digit characters.",
            "Confirm if {a} is composed entirely of digit characters.",
            "Identify if all characters in {a} are digits."
        ],
        "language": "mar_Deva"
    },
    {
        "manipulations": [
            "isidentifier"
        ],
        "solution": "```python\nanswer = a.isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0632\u06cc\u0627\u062a\u0631\u0647 \u0634\u06cc\u0627\u0646 \u0686\u06d0 \u062f Tutankhamun \u0633\u0631\u0647 \u062e\u069a \u06a9\u0693\u0627\u06cc \u0634\u0648\u064a \u069a\u0647 \u0633\u0627\u062a\u0644 \u0634\u0648\u064a\u060c \u062f \u0647\u063a\u0647 \u062a\u0627\u0631\u06cc\u062e\u064a \u0634\u06cc\u0627\u0646\u0648 \u067e\u0647 \u06ab\u0689\u0648\u0646 \u0686\u06d0 \u062f \u0642\u06cc\u0645\u062a\u064a \u0641\u0644\u0632\u0627\u062a\u0648 \u0627\u0648 \u0646\u0627\u062f\u0631\u0647 \u062a\u06cc\u0696\u0648 \u0685\u062e\u0647 \u062c\u0648\u0693 \u0634\u0648\u064a."
        },
        "query": [
            "Confirm if {a} can be used as an identifier.",
            "Ensure that {a} follows the identifier rules.",
            "See if {a} qualifies as an identifier."
        ],
        "language": "pbt_Arab"
    },
    {
        "manipulations": [
            "islower"
        ],
        "solution": "```python\nanswer = a.islower()\nprint(answer)\n```",
        "variables": {
            "a": "Atom, t\u00fcm maddelerin esas yap\u0131 elemanlar\u0131ndan biri olarak kabul edilir."
        },
        "query": [
            "Ensure that {a} consists solely of lowercase letters.",
            "Verify that all characters in {a} are lowercase.",
            "Assess if {a} includes only lowercase letters."
        ],
        "language": "tur_Latn"
    },
    {
        "manipulations": [
            "isnumeric"
        ],
        "solution": "```python\nanswer = a.isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u0418\u0441\u043b\u0430\u043d\u0434\u044b\u043d \u0446\u0430\u0433 \u0443\u0443\u0440\u044b\u043d \u0433\u0430\u0437\u0440\u0430\u0430\u0441 \u0441\u04af\u04af\u043b\u0438\u0439\u043d 48 \u0446\u0430\u0433\u0442 \u0425\u0435\u043a\u043b\u0430 \u0431\u04af\u0441\u044d\u0434 \u044f\u043c\u0430\u0440 \u0447 \u0433\u0430\u0437\u0430\u0440 \u0445\u04e9\u0434\u043b\u04e9\u043b\u0442 \u0431\u043e\u043b\u043e\u043e\u0433\u04af\u0439 \u043c\u04e9\u043d \u043c\u044d\u0434\u044d\u044d\u043b\u044d\u0432."
        },
        "query": [
            "Check if all characters in the string {a} are numeric.",
            "Ensure that {a} consists solely of numeric characters.",
            "Determine if the string {a} consists only of numeric characters."
        ],
        "language": "khk_Cyrl"
    },
    {
        "manipulations": [
            "isprintable"
        ],
        "solution": "```python\nanswer = a.isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u064a\u0648 \u0643\u064a\u062a \u0645\u0627\u0645\u0648\u0644\u0627\u064a \u0644\u0627\u0648\u0627\u0646 \u06a4\u0646\u062c\u0627\u0644\u0627\u0633\u0646 \u062a\u0646\u062a\u06a0 \u0631\u0646\u0686\u0627\u0646-\u0631\u0646\u0686\u0627\u0646 \u0625\u064a\u0637\u0627\u0644\u064a\u0627\u0627. \u0625\u064a\u0637\u0627\u0644\u064a\u0627\u0627 \u06a0\u064a\u0646\u0628 \"\u0627\u062f\u064a\u06a0 \u0647\u0627\u0644\u0648\u0633\" \u06bd \u062c\u0631\u0645\u0627\u0646 \u0648\u0627\u0646 \u062c\u0627\u06a4\u06a0."
        },
        "query": [
            "See if {a} is made up of printable characters only.",
            "Confirm if {a} is composed entirely of printable characters.",
            "Check if all characters in the string {a} are printable."
        ],
        "language": "bjn_Arab"
    },
    {
        "manipulations": [
            "isspace"
        ],
        "solution": "```python\nanswer = a.isspace()\nprint(answer)\n```",
        "variables": {
            "a": "\u0645\u0646\u0646 \u0686\u064a\u062a, \u0628\u0643 \u0686\u0648\u0627\u0686 \u0633\u0626\u0648\u0645 \u0628\u0627\u0686\u0648\u062a, \u0643\u0645\u0648\u0646 \u062c\u064a\u062a\u064a\u0645\u0648\u0647 \u0633\u064a\u0628 \u0628\u0627\u0762\u0633 \u06a0\u0646 \u0627\u0648\u062f\u06a4 \u062c\u064a\u0647 \u062a\u0647\u062a \u062a\u0631\u064a\u0628 \u062f\u0644\u0648\u0627\u0631 \u062a\u0648\u0628\u0648\u0647."
        },
        "query": [
            "Check if all characters in the string {a} are whitespaces.",
            "Determine if the string {a} consists only of whitespace characters.",
            "Assess if {a} includes only whitespace characters."
        ],
        "language": "ace_Arab"
    },
    {
        "manipulations": [
            "istitle"
        ],
        "solution": "```python\nanswer = a.istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Sa k\u04d9nasarra kulastin-a kuru ikkuro notin-a lan, am so-a kuru am r\u04d9btaana sammaso-aye taidaza darajawa-a, awo diobe-a, kuru awo karapka d\u04d9\u2019a goz\u04d9na lejin isa nozayin."
        },
        "query": [
            "Determine if the string {a} follows title case capitalization rules.",
            "Assess if {a} is in title case.",
            "Verify if {a} is in title case."
        ],
        "language": "knc_Latn"
    },
    {
        "manipulations": [
            "isupper"
        ],
        "solution": "```python\nanswer = a.isupper()\nprint(answer)\n```",
        "variables": {
            "a": "Chakudya cha chi Hangi chimaphikidwa mudzenje lotentha pansi pa nthaka."
        },
        "query": [
            "Check whether {a} has only uppercase characters.",
            "Check if all characters in the string {a} are upper case.",
            "Confirm if {a} is made up entirely of uppercase characters."
        ],
        "language": "nya_Latn"
    },
    {
        "manipulations": [
            "ljust"
        ],
        "solution": "```python\nanswer = a.ljust(x,y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0db6\u0dca\u200d\u0dbb\u0dd2\u0dad\u0dcf\u0db1\u0dca\u200d\u0dba \u0dbb\u0dcf\u0da2\u0d9a\u0dd3\u0dba \u0db4\u0dc0\u0dd4\u0dbd\u0dda \u0d8b\u0db4\u0dcf\u0db0\u0dd2\u0dba\u0d9a\u0dca \u0db4\u0dd2\u0dbb\u0dd2\u0db1\u0db8\u0db1\u0dd4 \u0dbd\u0dd0\u0db6\u0dd6 \u0db4\u0dc5\u0db8\u0dd4 \u0dc3\u0dcf\u0db8\u0dcf\u0da2\u0dd2\u0d9a\u0dba\u0dcf \u0da0\u0dcf\u0dbd\u0dca\u0dc3\u0dca \u0d9a\u0dd4\u0db8\u0dbb\u0dd4 \u0dc0\u0dd2\u0dba.",
            "x": 100,
            "y": " "
        },
        "query": [
            "Align {a} to the left in a field of {x} characters, using {y} to fill the space.",
            "Produce a left-justified string of {x} length with {a}, using {y} as padding.",
            "Return the string {a} left-aligned in a field of {x} characters, with the empty space filled by {y}."
        ],
        "language": "sin_Sinh"
    },
    {
        "manipulations": [
            "lower"
        ],
        "solution": "```python\nanswer = a.lower()\nprint(answer)\n```",
        "variables": {
            "a": "Di banyak bagian di dunia, malambai adolah garik ramah, nan artinyo \"halo.\""
        },
        "query": [
            "Make every letter in {a} lowercase.",
            "Format {a} to have all lowercase characters.",
            "Set every character in {a} to its lowercase form."
        ],
        "language": "min_Latn"
    },
    {
        "manipulations": [
            "lstrip"
        ],
        "solution": "```python\nanswer = a.lstrip(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u1c5e\u1c5f\u1c66\u1c5f \u1c68\u1c6e\u1c71\u1c5f\u1c5c \u1c65\u1c5b\u1c77\u1c64\u1c5b\u1c64 \u1c6b\u1c5a \u1c60\u1c6e\u1c74\u1c6e\u1c61 \u1c5f\u1c71\u1c64\u1c61 \u1c65\u1c5f\u1c6d\u1c71\u1c64\u1c60 \u1c68\u1c6e \u1c60\u1c5f\u1c68\u1c71\u1c5f\u1c5e \u1c61\u1c5f\u1c79\u1c71 \u1c65\u1c74\u1c5f\u1c68\u1c60 \u1c5f\u1c68 \u1c61\u1c6e\u1c62\u1c65 \u1c68\u1c64\u1c70 (\u1c75\u1c5f\u1c71\u1c5f\u1c68 \u1c5c\u1c6e \u1c5b\u1c5f\u1c6d\u1c5a\u1c62 \u1c5b\u1c6e \u1c61\u1c5f\u1c71\u1c68\u1c5f\u1c5e \u1c75\u1c5f\u1c71\u1c5f\u1c63 \u1c6e\u1c71\u1c5f \u1c60\u1c64\u1c71) \u1c5a\u1c71\u1c5f \u1c5b\u1c5f\u1c66\u1c5f\u1c5b \u1c52\u1c50\u1c50 \u1c75\u1c5f\u1c75\u1c5f \u1c66\u1c5a\u1c72 \u1c60\u1c5a \u1c6f\u1c69\u1c6d\u1c5e\u1c69 \u1c5f\u1c68 \u1c5b\u1c6e\u1c65\u1c5f\u1c68 \u1c71\u1c6d\u1c69 \u1c6f\u1c6e\u1c62\u1c65\u1c5f\u1c6d\u1c5f\u1c68 \u1c68\u1c6e\u1c61\u1c64\u1c62\u1c6e\u1c71\u1c74 \u1c62\u1c6e\u1c65\u1c5f \u1c5b\u1c5f\u1c66\u1c6e\u1c78 \u1c60\u1c5f\u1c71\u1c5f\u1c7e",
            "x": "\u1c5e\u1c5f\u1c66\u1c5f"
        },
        "query": [
            "Remove the leading characters in {x} from {a}.",
            "Delete any leading {x} characters from the start of {a}.",
            "Trim leading characters in {x} from {a}."
        ],
        "language": "sat_Olck"
    },
    {
        "manipulations": [
            "replace"
        ],
        "solution": "```python\nanswer = a.replace(x,y)\nprint(answer)\n```",
        "variables": {
            "a": "\u1001\u101c\u102f\u1010\u103a\u1021\u102c\u1038\u101c\u102f\u1036\u1038\u1000\u102d\u102f \u1019\u103e\u1014\u103a\u1000\u1014\u103a\u1005\u103d\u102c\u1010\u102e\u1038\u1001\u1010\u103a\u1014\u1031\u1005\u1009\u103a\u1010\u103d\u1004\u103a \u101e\u1004\u103a\u104f\u101c\u1000\u103a\u1000\u102d\u102f \u1010\u1010\u103a\u1014\u102d\u102f\u1004\u103a\u101e\u1019\u103b\u103e \u1016\u103c\u1031\u101c\u103b\u103e\u1031\u102c\u1037\u1011\u102c\u1038\u1015\u102b - \u1011\u102d\u102f\u1037\u1021\u1010\u1030 \u101c\u1000\u103a\u1001\u103b\u1031\u102c\u1004\u103a\u1038\u1019\u103b\u102c\u1038\u1000\u102d\u102f \u1019\u101c\u102d\u102f\u1021\u1015\u103a\u1018\u1032\u1021\u101c\u103d\u1014\u103a\u1021\u1019\u1004\u103a\u1038\u101c\u103e\u102f\u1015\u103a\u101b\u103e\u102c\u1038\u1001\u103c\u1004\u103a\u1038\u1019\u103b\u102d\u102f\u1038\u1019\u101c\u102f\u1015\u103a\u1019\u102d\u101b\u1014\u103a \u1000\u103c\u102d\u102f\u1038\u1005\u102c\u1038\u1015\u102b\u104b",
            "x": "\u101c\u1000\u103a",
            "y": "\u1001\u103c\u1031"
        },
        "query": [
            "Switch {x} with {y} in {a}.",
            "Alter {a} by replacing {x} with {y}.",
            "Replace all instances of {x} with {y} in the string {a}."
        ],
        "language": "mya_Mymr"
    },
    {
        "manipulations": [
            "rfind"
        ],
        "solution": "```python\nanswer = a.rfind(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0391\u03bd \u03ba\u03ac\u03c0\u03bf\u03b9\u03bf\u03c2 \u03b5\u03c0\u03b9\u03c3\u03ba\u03ad\u03c0\u03c4\u03b5\u03c4\u03b1\u03b9 \u03ad\u03bd\u03b1 \u03c3\u03c5\u03b3\u03ba\u03b5\u03ba\u03c1\u03b9\u03bc\u03ad\u03bd\u03bf \u03bc\u03ad\u03c1\u03bf\u03c2 \u03bc\u03b5 \u03c3\u03c4\u03cc\u03c7\u03bf \u03bd\u03b1 \u03b3\u03bd\u03c9\u03c1\u03af\u03c3\u03b5\u03b9 \u03c4\u03b7\u03bd \u03b9\u03c3\u03c4\u03bf\u03c1\u03af\u03b1 \u03ba\u03b1\u03b9 \u03c4\u03bf\u03bd \u03c0\u03bf\u03bb\u03b9\u03c4\u03b9\u03c3\u03bc\u03cc \u03b1\u03c5\u03c4\u03bf\u03cd \u03c4\u03bf\u03c5 \u03bc\u03ad\u03c1\u03bf\u03c5\u03c2, \u03c4\u03cc\u03c4\u03b5 \u03b1\u03c5\u03c4\u03cc \u03c4\u03bf \u03b5\u03af\u03b4\u03bf\u03c2 \u03c4\u03bf\u03c5\u03c1\u03b9\u03c3\u03bc\u03bf\u03cd \u03b5\u03af\u03bd\u03b1\u03b9 \u03b3\u03bd\u03c9\u03c3\u03c4\u03cc \u03c9\u03c2 \u03c0\u03bf\u03bb\u03b9\u03c4\u03b9\u03c3\u03c4\u03b9\u03ba\u03cc\u03c2 \u03c4\u03bf\u03c5\u03c1\u03b9\u03c3\u03bc\u03cc\u03c2.",
            "x": "\u03c4\u03bf\u03c5\u03c1\u03b9\u03c3\u03bc\u03cc\u03c2"
        },
        "query": [
            "Identify the index of the final occurrence of {x} in {a}.",
            "What position is the last occurrence of the substring {x} in string {a}?",
            "Locate where {x} last appears in {a}."
        ],
        "language": "ell_Grek"
    },
    {
        "manipulations": [
            "rjust"
        ],
        "solution": "```python\nanswer = a.rjust(x,y)\nprint(answer)\n```",
        "variables": {
            "a": "\u2d5c\u2d49\u2d57\u2d30\u2d42\u2d4e\u2d49\u2d4f \u2d30\u2d36\u2d53\u2d5c\u2d4f\u2d49\u2d4f\u2d5c <\u2d3e\u2d4f\u2d30\u2d4f<\u2d5c \u2d5c\u2d49\u2d42\u2d53\u2d59\u2d59\u2d30\u2d62 \u2d37\u2d30\u2d57 \u2d30\u2d42\u2d30\u2d4f\u2d30\u2d62 \u2d37 \u2d30\u2d59\u2d30\u2d61\u2d30\u2d39 \u2d59<\u2d54 \u2d5c\u2d30\u2d57\u2d30\u2d42\u2d30\u2d4e\u2d5c \u2d5c\u2d30 \u2d4e<\u2d48\u2d48\u2d53\u2d54<\u2d5c \u2d4e\u2d49\u2d57 \u2d59<\u2d54 \u2d61\u2d49\u2d4f\u2d37\u2d53\u2d53 \u2d62<\u2d48\u2d48\u2d30\u2d4d \u2d30 \u2d49\u2d42\u2d53\u2d59\u2d59\u2d49\u2d4f \u2d37\u2d30\u2d57 \u2d5c\u2d49\u2d5f\u2d30\u2d61\u2d49\u2d4f.",
            "x": 100,
            "y": " "
        },
        "query": [
            "Return the string {a} right-aligned in a field of {x} characters, with the empty space filled by {y}.",
            "Create a right-justified version of the string {a} that is {x} characters long, using the character {y} to pad the extra space.",
            "Give me a {x} characters long, right justified version of string {a}, using character {y} to fill the missing space."
        ],
        "language": "taq_Tfng"
    },
    {
        "manipulations": [
            "rsplit"
        ],
        "solution": "```python\nanswer = a.rsplit(x,y)\nprint(answer)\n```",
        "variables": {
            "a": "\u062a\u0631\u06a9\u06cc \u06c1\u064f\u0646\u062f \u0639\u0644\u0627\u0642\u06c1 \u0686\u064f\u06be 1\u060c600 \u06a9\u0644\u0648\u0645\u06cc\u0679\u0631 (1\u060c000 \u0645\u06cc\u0644) \u062e\u06c4\u062a\u06c1 \u0632\u06cc\u0627\u062f\u06c1 \u0632\u06cc\u0648\u0679\u06be \u062a\u06c1 800 \u06a9\u0644\u0648\u0645\u06cc\u0679\u0631 (500 \u0645\u06cc\u0644) \u06a9\u06be\u06c4\u0644\u060c \u06cc\u062a\u06be \u062a\u0642\u0631\u06cc\u0628\u0627\u064b \u0631\u06cc\u06a9\u062a\u06cc\u0646\u06af\u06cc\u0648\u0644\u0631 \u0634\u06a9\u0644 \u0686\u0650\u06be\u06d4",
            "x": " ",
            "y": 5
        },
        "query": [
            "Divide {a} by {x} into a list, starting splits from the right and limiting to {y} times.",
            "Split {a} by {x} into a list, making up to {y} splits from the right.",
            "Divide {a} into a list of substrings at each occurrence of {x}, with a maximum of {y} splits, starting from the right."
        ],
        "language": "kas_Arab"
    },
    {
        "manipulations": [
            "rstrip"
        ],
        "solution": "```python\nanswer = a.rstrip(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0f68\u0f0b\u0f63\u0f71\u0f66\u0f72\u0f0b\u0f40\u0f0b\u0f42\u0f72\u0f0b\u0f63\u0fb7\u0f7c\u0f0b\u0f55\u0fb1\u0f7c\u0f42\u0f66\u0f0b \u0f55\u0f7a\u0f0b\u0f61\u0f62\u0f0b\u0f56\u0f7a\u0f44\u0f66\u0f72\u0f0b\u0f63\u0f74\u0f0b \u0f58\u0f0b\u0f59\u0f42\u0f0b\u0f54\u0f60\u0f72\u0f0b\u0f58\u0f62\u0f0b\u0f41\u0f74\u0f0b \u0f62\u0f92\u0fb1\u0f0b\u0f5b\u0f72\u0f0b\u0f66\u0f9f\u0f7c\u0f44\u0f0b\u0f55\u0fb2\u0f42\u0f0b\u0f63\u0f66\u0f0b\u0f56\u0f45\u0f51\u0f0b\u0f51\u0f7a\u0f0b \u0f60\u0f56\u0f7c\u0f0b\u0f58\u0f72\u0f0b\u0f63\u0f66\u0f0b\u0f56\u0f62\u0f9f\u0f7a\u0f53\u0f0b\u0f4f\u0f7a\u0f0b \u0f58\u0f60\u0f72\u0f63\u0f0b\u0f28\u0f20\u0f20\u0f51\u0f7a\u0f0b\u0f45\u0f72\u0f42\u0f0b\u0f61\u0f7c\u0f51\u0f0b\u0f58\u0f72\u0f0b \u0f40\u0fb2\u0f71\u0f53\u0f66\u0f72\u0f0b\u0f68\u0f0b\u0f63\u0f71\u0f66\u0f72\u0f0b\u0f40\u0f0b\u0f54\u0f0b\u0f61\u0f56\u0f0b\u0f63\u0f71\u0f60\u0f72\u0f53\u0f0b\u0f66\u0f72\u0f66\u0f72\u0f0b\u0f40\u0fb2\u0f58\u0f0b\u0f5f\u0f7a\u0f62\u0f0b\u0f58\u0f72\u0f0b \u0f58\u0f62\u0f0b\u0f41\u0f74\u0f60\u0f72\u0f0b\u0f51\u0f74\u0f44\u0f0b\u0f63\u0f58\u0f0b\u0f60\u0f51\u0f72\u0f0b \u0f66\u0f92\u0f7c\u0f0b\u0f56\u0f66\u0fa1\u0f58\u0f0b\u0f61\u0f7c\u0f51\u0f54\u0f0b\u0f68\u0f72\u0f53\u0f0d",
            "x": "\u0f0d"
        },
        "query": [
            "Strip any characters in {x} from the end of {a}.",
            "Strip the end of {a} from characters in {x}.",
            "Remove the trailing characters in {x} from {a}."
        ],
        "language": "dzo_Tibt"
    },
    {
        "manipulations": [
            "split"
        ],
        "solution": "```python\nanswer = a.split(x,y)\nprint(answer)\n```",
        "variables": {
            "a": "\u07e6\u07df\u07cd\u07ec\u07d8\u07d0\u07ec\u07de\u07cd\u07eb \u07db\u07ca\u07ec\u07d3\u07ca\u07eb \u07d5\u07ca\u07ec\u07e1\u07cc\u07f2\u07ec\u07e3\u07cd\u07f2 \u07de\u07ce\u07f2\u07ec\u07d5\u07ca\u07f0 \u07de\u07e3\u07d0\u07eb\u07f8 \u07d6\u07e1\u07ca\u07ec\u07e3\u07ca \u07df\u07ca\u07eb \u07d8\u07cd\u07ec\u07df\u07de\u07ca\u07ec\u07e6\u07ca \u07de\u07ce\u07f2\u07ec\u07e0\u07ca\u07ec\u07db\u07cc\u07f0\u07e6\u07ca\u07ec\u07df\u07cc \u07e3\u07f4\u07ca\u07ec \u07d5\u07ca\u07eb\u07f8 \u07db\u07cc\u07ef\u07e3\u07cc\u07f2\u07eb \u07de\u07f5\u07ca\u07ec \u07df\u07ca\u07eb \u07e1\u07ca\u07ec\u07de\u07d0\u07ec\u07d9\u07d0\u07f2\u07ec\u07de\u07d0\u07ec\u07d9\u07d0\u07f2\u07ec\u07e0\u07cc\u07f2 \u07df\u07d0\u07ef\u07dd\u07cd \u07df\u07ca\u07e5\u07d9\u07ce\u07de\u07cc\u07eb.",
            "x": "\u07eb",
            "y": 3
        },
        "query": [
            "Divide the string {a} into a list of substrings using {x} as the delimiter, making up to {y} splits.",
            "Segment {a} by {x} into substrings, making up to {y} splits.",
            "Split the string {a} into a list of substrings, using {x} as the separator, performing at most {y} splits."
        ],
        "language": "nqo_Nkoo"
    },
    {
        "manipulations": [
            "strip"
        ],
        "solution": "```python\nanswer = a.strip(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0628\u0633 \u0622\u062b\u0627\u0631 \u0627\u0644\u0643\u0627\u0631\u062b\u0629\u060c \u0648\u0627\u0644\u0627\u0643\u062a\u0626\u0627\u0628 \u0648\u0627\u0644\u062e\u0648\u0641 \u0645\u0643\u0646\u0648\u0634 \u0634\u0631\u0637 \u0641\u064a \u062c\u0644\u0633\u0627\u062a \u0646\u0634\u0627\u0637 \u0628\u062f\u0646\u064a \u0645\u0646\u062a\u0638\u0645\u0629 \u0643\u0644 \u0623\u0633\u0628\u0648\u0639.",
            "x": "\u0628"
        },
        "query": [
            "Delete any {x} characters from the start and end of {a}.",
            "Trim leading and trailing characters in {x} from {a}.",
            "Eliminate characters in {x} from both ends of {a}."
        ],
        "language": "arz_Arab"
    },
    {
        "manipulations": [
            "swapcase"
        ],
        "solution": "```python\nanswer = a.swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "Ju\u0257e go\u0257\u0257o yottai ko\u0257e mako jutugo, ko e\u2019al man \u0257o dari."
        },
        "query": [
            "Switch the case of each character in {a}, turning lowercase letters to uppercase and vice versa.",
            "Invert the case of all letters in {a}.",
            "Flip the case of each character in {a}."
        ],
        "language": "fuv_Latn"
    },
    {
        "manipulations": [
            "title"
        ],
        "solution": "```python\nanswer = a.title()\nprint(answer)\n```",
        "variables": {
            "a": "Die Drukgyal Dzong is \u2018n geru\u00efneerde fort en Budhisteklooster in die boonste deel van die Paro Distrik (in die dorpie, Phondey)."
        },
        "query": [
            "Change the first letter of every word in {a} to uppercase.",
            "Convert the first character of each word of string {a} to upper case.",
            "Set the first letter of each word in {a} to uppercase."
        ],
        "language": "afr_Latn"
    },
    {
        "manipulations": [
            "upper"
        ],
        "solution": "```python\nanswer = a.upper()\nprint(answer)\n```",
        "variables": {
            "a": "Nanggroe-nanggroe nyang ikot geu peulemah seuni deungoen pendidikan nyang geupamer bak pavilion nasional keu neuk peudeuh haba-haba d\u00f4nya atawa budaya ngoen seujarah nanggroe awak nyan."
        },
        "query": [
            "Adjust {a} so all characters are uppercase.",
            "Format {a} to have all uppercase characters.",
            "Make every letter in {a} uppercase."
        ],
        "language": "ace_Latn"
    },
    {
        "manipulations": [
            "zfill"
        ],
        "solution": "```python\nanswer = a.zfill(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0dc3\u0dd6\u0dbb\u0dca\u0dba\u0dba\u0dcf \u0daf\u0dd9\u0dc3 \u0db6\u0dbd\u0db1 \u0dc0\u0dd2\u0da7 \u0d85\u0db4 \u0daf\u0d9a\u0dd2\u0db1 \u0db4\u0dd2\u0da7\u0dad \u0d9a\u0ddc\u0da7\u0dc3 \u0da1\u0dcf\u0dba\u0dcf \u0d9c\u0ddd\u0dbd\u0dba \u0dbd\u0dd9\u0dc3 \u0dc4\u0dd0\u0db3\u0dd2\u0db1\u0dca\u0dc0\u0dda, \u0d91\u0dc4\u0dd2 \u0dad\u0dda\u0dbb\u0dd4\u0db8 \u201c\u0d86\u0dbd\u0ddd\u0d9a \u0db6\u0ddd\u0dbd\u0dba\u201d \u0dba\u0db1\u0dca\u0db1\u0dba\u0dd2.",
            "x": 100
        },
        "query": [
            "Expand {a} to {x} characters by adding zeros at the beginning.",
            "Fill the beginning of the string {a} with zeros so that its total length is {x} characters.",
            "Fill the string with zeros at the beginning, until it is {x} characters long."
        ],
        "language": "sin_Sinh"
    },
    {
        "manipulations": [
            "encode"
        ],
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace')\nprint(answer)\n```",
        "variables": {
            "a": "\u2d46\u2d53\u2d5c\u2d30\u2d4e \u2d5c\u2d30\u2d4f \u2d61\u2d30\u2d4f \u2d30\u2d5c\u2d49\u2d36\u2d54\u2d30\u2d53\u2d30\u2d4f \u2d3c\u2d30\u2d4d \u2d30\u2d49\u2d53\u2d54 \u2d3c\u2d53\u2d3e \u2d4f<\u2d5c \u2d5c\u2d53\u2d4d\u2d30\u2d59 \u2d30\u2d63\u2d36\u2d30\u2d54 \u2d30\u2d37 \u2d30\u2d59 \u2d5c-\u2d30\u2d61\u2d30\u2d54 \u2d5c\u2d30\u2d4f \u2d5c\u2d30\u2d4f\u2d49\u2d3e \u2d30\u2d4f\u2d37\u2d30\u2d54\u2d54\u2d30\u2d4f, \u2d42\u2d30\u2d54\u2d30\u2d5c <\u2d48\u2d48\u2d30\u2d4d\u2d30\u2d4f \u2d59\u2d30\u2d4e\u2d30\u2d4d \u2d4f \u2d30\u2d59 \u2d42\u2d30\u2d54\u2d30\u2d5c\u2d30\u2d4f \u2d53\u2d30 \u2d37\u2d30\u2d57 \u2d30\u2d57\u2d4f\u2d30\u2d4f <\u2d62\u2d4f\u2d30 \u2d62\u2d30\u2d4f.",
            "x": "taq_Tfng"
        },
        "query": [
            "Encode {a} with {x} and replace non-encodable characters with a question mark.",
            "Format {a} to {x} encoding, replacing unencodable characters.",
            "Convert {a} to {x} encoding, using a question mark for characters that can't be encoded."
        ],
        "language": "taq_Tfng"
    },
    {
        "manipulations": [
            "join"
        ],
        "solution": "```python\nanswer = a.join(x)\nprint(answer)\n```",
        "variables": {
            "a": " ",
            "x": [
                "\u041f\u043e\u0441\u0442\u043e\u0458\u0430\u0442",
                "\u0440\u0430\u0437\u043b\u0438\u0447\u043d\u0438",
                "\u043f\u0440\u043e\u0446\u0435\u043d\u0438",
                "\u0437\u0430",
                "\u0442\u043e\u0430",
                "\u043a\u043e\u043b\u043a\u0443",
                "\u043b\u0443\u0453\u0435",
                "\u0437\u0431\u043e\u0440\u0443\u0432\u0430\u0430\u0442",
                "\u0445\u0438\u043d\u0434\u0438.",
                "\u0421\u0435",
                "\u0441\u043c\u0435\u0442\u0430",
                "\u0434\u0435\u043a\u0430",
                "\u0445\u0438\u043d\u0434\u0438",
                "\u0435",
                "\u043c\u0435\u0453\u0443",
                "\u0432\u0442\u043e\u0440\u0438\u043e\u0442",
                "\u0438",
                "\u0447\u0435\u0442\u0432\u0440\u0442\u0438\u043e\u0442",
                "\u043d\u0430\u0458\u0437\u0431\u043e\u0440\u0443\u0432\u0430\u043d",
                "\u0458\u0430\u0437\u0438\u043a",
                "\u0432\u043e",
                "\u0441\u0432\u0435\u0442\u043e\u0442."
            ]
        },
        "query": [
            "Combine the items in {x} into a string, interspersing {a} between each.",
            "Assemble the elements of {x} into a string, using {a} as the joiner.",
            "Create a string from {x} by inserting {a} between each element."
        ],
        "language": "mkd_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).upper()\nprint(answer)\n```",
        "variables": {
            "a": "Adet \u00fczre, PSTN telefonlar\u0131na sizge telefon etmege imk\u00e2n bergen global bir nomeran\u0131 ayr\u0131 sat\u0131n almaq kereksi\u00f1iz. Nomeran\u0131\u00f1 ait ol\u011fan yeri sizge telefon etken insanlar i\u00e7\u00fcn m\u00fcimdir.",
            "x": "telefon",
            "y": "telefon"
        },
        "query": [
            "Replace all occurrences of {x} in {a} with {y} and convert the result to uppercase.",
            "Substitute every instance of {x} in {a} with {y} and change the entire string to uppercase.",
            "Change all {x} in {a} to {y} and transform the resulting string to uppercase."
        ],
        "language": "crh_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).split(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u4e16\u754c\u56ed\u827a\u535a\u89c8\u4f1a\u662f\u5c55\u793a\u82b1\u5349\u3001\u690d\u7269\u56ed\u548c\u4e0e\u690d\u7269\u6709\u5173\u7684\u4e00\u5207\u3002",
            "x": "\u4e16",
            "y": "\u3001"
        },
        "query": [
            "Remove any leading and trailing {x} characters from {a} and then split the result by {y}.",
            "Trim the {x} characters from both ends of {a} and then divide the string by {y}.",
            "Strip {x} from the start and end of {a}, then split the string using {y} as the delimiter."
        ],
        "language": "cmn_Hans"
    },
    {
        "solution": "```python\nanswer = a.startswith(x) and a.endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0422\u0430\u043a\u0432\u0438\u0442\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u0438 \u043f\u0440\u0438\u043a\u0430\u0437\u043d\u0438 \u0433\u043e \u043d\u0430\u043c\u0430\u043b\u0438\u043b\u0435 \u0441\u0442\u0440\u0430\u0432\u043e\u0442 \u043e\u0434 \u043f\u0440\u043e\u043c\u0435\u043d\u0430, \u043f\u0440\u0438\u0442\u043e\u0430 \u0441\u043e\u0437\u0434\u0430\u0432\u0430\u0458\u045c\u0438 \u043f\u043e\u0437\u0438\u0442\u0438\u0432\u043d\u0430 \u043d\u0430\u043a\u043b\u043e\u043d\u043e\u0441\u0442 \u0441\u043f\u0440\u0435\u043c\u0430 \u043f\u0440\u043e\u043c\u0435\u043d\u0430 \u0432\u043e \u0438\u0434\u043d\u0438\u043d\u0430.",
            "x": "\u0422\u0430\u043a\u0432\u0438\u0442\u0435",
            "y": "\u0438\u0434\u043d\u0438\u043d\u0430."
        },
        "query": [
            "Check if {a} starts with {x} and ends with {y}.",
            "Verify whether {a} begins with {x} and concludes with {y}.",
            "Determine if {a} initiates with {x} and terminates with {y}."
        ],
        "language": "mkd_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.find(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0397 \u03c0\u03bf\u03bb\u03b9\u03c4\u03b9\u03ba\u03ae \u03c4\u03b7\u03c2 \u039a\u03cc\u03bc\u03b5\u03bd \u03b1\u03c0\u03ad\u03ba\u03bb\u03b5\u03b9\u03c3\u03b5 \u03c4\u03b7\u03bd \u03a0\u03bb\u03b1\u03bd\u03c4 \u03a0\u03ac\u03c1\u03b5\u03bd\u03c4\u03c7\u03bf\u03c5\u03bd\u03c4 \u03b5\u03be\u03b1\u03b9\u03c4\u03af\u03b1\u03c2 \u03bc\u03b9\u03b1\u03c2 \u03ad\u03c1\u03b5\u03c5\u03bd\u03b1\u03c2 \u03b7 \u03bf\u03c0\u03bf\u03af\u03b1 \u03b5\u03ba\u03ba\u03c1\u03b5\u03bc\u03b5\u03af \u03c3\u03c7\u03b5\u03c4\u03b9\u03ba\u03ac \u03bc\u03b5 \u03c4\u03bf\u03bd \u03c4\u03c1\u03cc\u03c0\u03bf \u03bc\u03b5 \u03c4\u03bf\u03bd \u03bf\u03c0\u03bf\u03af\u03bf \u03b7 \u03a0\u03bb\u03b1\u03bd\u03c4 \u03a0\u03ac\u03c1\u03b5\u03bd\u03c4\u03c7\u03bf\u03c5\u03bd\u03c4 \u03be\u03bf\u03b4\u03b5\u03cd\u03b5\u03b9 \u03ba\u03b1\u03b9 \u03b4\u03b7\u03bb\u03ce\u03bd\u03b5\u03b9 \u03c4\u03b1 \u03c7\u03c1\u03ae\u03bc\u03b1\u03c4\u03ac \u03c4\u03b7\u03c2, \u03ba\u03b1\u03b9 \u03b4\u03b9\u03b5\u03be\u03ac\u03b3\u03b5\u03c4\u03b1\u03b9 \u03b1\u03c0\u03cc \u03c4\u03bf\u03bd \u03b1\u03bd\u03c4\u03b9\u03c0\u03c1\u03cc\u03c3\u03c9\u03c0\u03bf \u039a\u03bb\u03b9\u03c6 \u03a3\u03c4\u03b5\u03c1\u03bd\u03c2.",
            "x": "\u03a0\u03bb\u03b1\u03bd\u03c4",
            "y": 0
        },
        "query": [
            "Find the position of the first occurrence of {x} in {a} starting from index {y}.",
            "Locate the first instance of {x} in {a} beginning at index {y}.",
            "Determine the index of the first appearance of {x} in {a} starting from position {y}."
        ],
        "language": "ell_Grek"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).islower()\nprint(answer)\n```",
        "variables": {
            "a": "Urang tu saliang maibua jo carito masiang-masiang tentang kampuang nyo surang-surang, mancaritoan aksennyo nan babeda-beda jo dialek lokalnyo.",
            "x": "a",
            "y": "o"
        },
        "query": [
            "Replace all occurrences of {x} in {a} with {y} and check if the result is in lowercase.",
            "Substitute every instance of {x} in {a} with {y} and verify if the outcome is in lowercase.",
            "Change all {x} in {a} to {y} and determine if the resulting string is in lowercase."
        ],
        "language": "min_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y]\nprint(answer)\n```",
        "variables": {
            "a": "\u30d8\u30c3\u30af\u3068\u30b8\u30e7\u30f3\u30bd\u30f3\u306f\u3001The Daily Show\u3084The Colbert Report\u3088\u308a\u3082\u305a\u3063\u3068\u4ee5\u524d\u306e1988\u5e74\u306bUW\u306e\u5b66\u751f\u3060\u3063\u305f\u9803\u306e\u30cb\u30e5\u30fc\u30b9\u3092\u30d1\u30ed\u30c7\u30a3\u30fc\u5316\u3057\u305f\u51fa\u7248\u7269\u3092\u69cb\u60f3\u3057\u3066\u3044\u307e\u3057\u305f\u3002",
            "x": "\u3001",
            "y": 1
        },
        "query": [
            "Split {a} by {x} and get the {y}th element of the result.",
            "Divide {a} using {x} as the delimiter and retrieve the {y}th part.",
            "Separate {a} by {x} and obtain the {y}th segment."
        ],
        "language": "jpn_Jpan"
    },
    {
        "solution": "```python\nanswer = a.swapcase().count(x)\nprint(answer)\n```",
        "variables": {
            "a": "Iude\u00fd ba\u00fdyrlaryndaky gadymy \u015f\u00e4heri\u0148 m\u00fc\u0148ler\u00e7e \u00fdyly \u00f6z i\u00e7ine al\u00fdan ha\u00fdran galdyryjy taryhy bardyr.",
            "x": "A"
        },
        "query": [
            "Swap the case of all characters in {a} and count how many times {x} appears.",
            "Convert all characters in {a} to their opposite case and determine the frequency of {x}.",
            "Change the case of each character in {a} and find the number of occurrences of {x}."
        ],
        "language": "tuk_Latn"
    },
    {
        "solution": "```python\nanswer = a.title().rjust(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Tid er ogs\u00e5 hvordan vi sammenligner varigheten (lengden) p\u00e5 hendelser.",
            "x": 80,
            "y": "*"
        },
        "query": [
            "Convert {a} to title case and right-justify it within {x} characters, using {y} for padding.",
            "Transform {a} to title case and align it to the right within {x} characters, padding with {y}.",
            "Change {a} to title case and right-align it within {x} characters, using {y} as the padding character."
        ],
        "language": "nob_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u10d0\u10db \u10db\u10dd\u10db\u10e1\u10d0\u10ee\u10e3\u10e0\u10d4\u10d1\u10d4\u10d1\u10d6\u10d4 \u10ec\u10d5\u10d3\u10dd\u10db\u10d0 \u10ee\u10e8\u10d8\u10e0\u10d0\u10d3 \u10ee\u10d3\u10d4\u10d1\u10d0 \u10d8\u10e1\u10d4\u10d7 \u10dc\u10dd\u10db\u10e0\u10d4\u10d1\u10d6\u10d4, \u10e0\u10dd\u10db\u10da\u10d4\u10d1\u10d8\u10ea \u10e3\u10e4\u10d0\u10e1\u10dd\u10d0 \u10d3\u10d0 \u10e0\u10dd\u10db\u10da\u10d4\u10d1\u10d6\u10d4\u10ea \u10d3\u10d0\u10e0\u10d4\u10d9\u10d5\u10d0 \u10dc\u10d4\u10d1\u10d8\u10e1\u10db\u10d8\u10d4\u10e0\u10d8 \u10e5\u10e1\u10d4\u10da\u10d8\u10e1 \u10e2\u10d4\u10da\u10d4\u10e4\u10dd\u10dc\u10d4\u10d1\u10d8\u10d3\u10d0\u10dc \u10e3\u10e4\u10d0\u10e1\u10dd\u10d3 \u10d0\u10e0\u10d8\u10e1 \u10e8\u10d4\u10e1\u10d0\u10eb\u10da\u10d4\u10d1\u10d4\u10da\u10d8.",
            "x": "utf-8"
        },
        "query": [
            "Encode {a} to UTF-8 and then decode it using {x} encoding.",
            "Convert {a} to UTF-8 encoding and then transform it back using {x} encoding.",
            "First encode {a} in UTF-8, then decode it with {x} encoding."
        ],
        "language": "kat_Geor"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).strip(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u05d0\u05e4\u05d0\u05e8 \u05de\u05d3\u05d9\u05e0\u05d5\u05ea \u05d4\u05d0\u05d1\u05df \u05d0\u05d5\u05d9\u05e1\u05d8\u05e2\u05e8\u05dc\u05d9\u05e9 \u05d2\u05e2\u05e4\u05e2\u05e8\u05dc\u05d9\u05db\u05e2 \u05e9\u05d8\u05e8\u05d0\u05e4\u05df \u05d0\u05e4\u05d9\u05dc\u05d5 \u05e4\u05d0\u05e8 \u05e2\u05e8\u05e9\u05d8\u05e2 \u05de\u05d0\u05dc \u05e4\u05d0\u05e8\u05dc\u05e2\u05e6\u05d5\u05e0\u05d2\u05e2\u05df; \u05d3\u05d9 \u05e7\u05e2\u05e0\u05e2\u05df \u05d0\u05e8\u05d9\u05d9\u05e0\u05e8\u05e2\u05db\u05e2\u05e0\u05e2\u05df \u05d8\u05d5\u05e8\u05de\u05e2 \u05d0\u05d5\u05e8\u05d8\u05d9\u05d9\u05dc\u05df \u05e4\u05d5\u05df \u05d0\u05d9\u05d1\u05e2\u05e8 10 \u05d9\u05d0\u05e8 \u05d0\u05d3\u05e2\u05e8 \u05d8\u05d5\u05d9\u05d8.",
            "x": 150,
            "y": " ",
            "z": ";"
        },
        "query": [
            "Center {a} within {x} characters using {y} for padding, then strip any {z} characters from the result.",
            "Pad {a} to a total width of {x} using {y} as the fill character, then remove any {z} characters from the edges.",
            "Align {a} in the center of a string of length {x} with {y} as padding, and then trim any {z} characters from the start and end."
        ],
        "language": "ydd_Hebr"
    },
    {
        "solution": "```python\nanswer = a[x:y].isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u098f\u09a8\u09cd\u09a4\u09be\u09b0\u09cd\u0995\u09cd\u09a4\u09bf\u0995\u09be \u0985\u09b8\u09bf \u09ae\u09be\u09b2\u09c7\u09ae\u0997\u09c0 \u0996\u09cd\u09ac\u09be\u0987\u09a6\u0997\u09c0 \u0987\u0999\u09ac\u09be \u09b2\u09ae\u09cd\u09a8\u09bf \u0985\u09ae\u09b8\u09c1\u0982 \u09b8\u09be\u0989\u09a5 \u09aa\u09cb\u09b2\u09a8\u09be \u0995\u09cb\u0987\u09b6\u09bf\u09b2\u09cd\u09b2\u09bf\u0964",
            "x": 0,
            "y": 5
        },
        "query": [
            "Check if the substring from {x} to {y} in {a} contains only digits.",
            "Verify if the section of {a} from index {x} to {y} is numeric.",
            "Determine if the part of {a} between {x} and {y} consists solely of digits."
        ],
        "language": "mni_Beng"
    },
    {
        "solution": "```python\nanswer = a.lower().startswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "Masuwa ya 100 metele ezalaki na nzela mpona kokende kozwa biloko na yango mpe na ebandeli bakonzi bazalaki kobanga ete masuwa ekokweyisa biloko ememi.",
            "x": "masuwa"
        },
        "query": [
            "Verify if the lowercase version of {a} begins with {x}.",
            "Check if {a} in lowercase starts with {x}.",
            "Determine if the lowercase form of {a} starts with {x}."
        ],
        "language": "lin_Latn"
    },
    {
        "solution": "```python\nanswer = a[::-1].find(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0639\u0644\u0627\u0645\u062a \u06a9\u0648 \u062c\u0633\u0645\u0627\u0646\u06cc \u0637\u0648\u0631 \u067e\u0631 \u0628\u062f\u0644\u0627 \u0646\u06c1\u06cc\u06ba \u06af\u06cc\u0627 \u062a\u06be\u0627\u06d4 \u0628\u0644\u06a9\u06c1 \u06cc\u06c1 \u062a\u0628\u062f\u06cc\u0644\u06cc \"O\" \u06a9\u0648 \u0628\u062f\u0644 \u06a9\u0631 \u0686\u06be\u0648\u0679\u06d2 \u062d\u0631\u0641 \"e\" \u06a9\u0648 \u067e\u0691\u06be\u0646\u06d2 \u06a9\u06d2 \u0644\u06cc\u06d2 \u0627\u0645\u0646 \u0627\u0648\u0631 \u062f\u0644 \u06a9\u06cc \u0639\u0644\u0627\u0645\u062a\u0648\u06ba \u0633\u06d2 \u0622\u0631\u0627\u0633\u062a\u06c1 \u0633\u06cc\u0627\u06c1 \u062a\u0631\u067e\u0627\u0644\u0648\u06ba \u06a9\u0627 \u0627\u0633\u062a\u0639\u0645\u0627\u0644 \u06a9\u0631 \u06a9\u06d2 \u06af\u0626\u06cc \u062a\u06be\u06cc\u06d4",
            "x": "O"
        },
        "query": [
            "Find the position of {x} in the reversed string {a}.",
            "Locate the index of {x} in the string {a} after reversing it.",
            "Determine the position of {x} within the reversed version of {a}."
        ],
        "language": "urd_Arab"
    },
    {
        "solution": "```python\nanswer = a.strip(x).title()\nprint(answer)\n```",
        "variables": {
            "a": "Matenda a attention deficit disorder \u201cndi matenda amitsempha odziwika kuti ali ndi zizindikiro zophatikiza kusowa chidwi, kusachita bwino, kapena kukhala ndi mphamvu zochulukirapo\u201d",
            "x": "a"
        },
        "query": [
            "Remove leading and trailing {x} from {a} and convert it to title case.",
            "Trim {x} from both ends of {a} and change it to title case.",
            "Strip {x} from the start and end of {a} and transform it to title case."
        ],
        "language": "nya_Latn"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "Baitu pulo sabagai mantan juara Olimpiade dan Dunia, Saito adolah kapalo komite latian Federasi Judo Saluruah Japang di akia maso iduiknyo.",
            "x": 150,
            "y": "-"
        },
        "query": [
            "Left-align {a} in a field of {x} characters, fill with {y}, and swap the case of the result.",
            "Align {a} to the left within a width of {x} characters, pad with {y}, and invert the case.",
            "Pad {a} to the left up to {x} characters using {y}, then change the case of the string."
        ],
        "language": "min_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "2400 \u0938\u0948\u0928\u093f\u0915\u093e\u0928\u093e\u0902 \u092e\u0941\u0916\u094d\u092f\u093e\u0915\u094d\u0930\u092e\u0923\u0915\u093e\u0930\u093f\u0923\u0940 \u0938\u0947\u0928\u093e \u091f\u094d\u0930\u0947\u0902\u091f\u0928\u092a\u094d\u0930\u0926\u0947\u0936\u0924\u0903 9 \u092e\u0940\u0932\u0926\u0942\u0930\u0938\u094d\u0925\u093e\u0902 \u0928\u0926\u0940\u092e\u094d \u0909\u0932\u094d\u0932\u0919\u094d\u0918\u092f\u0924\u0947\u0964 \u0924\u0924\u0903 \u092a\u094d\u0930\u092d\u093e\u0924\u092a\u0942\u0930\u094d\u0935\u092e\u093e\u0915\u094d\u0930\u092e\u0923\u0902 \u0915\u0930\u094d\u0924\u0941\u0902 \u0926\u094d\u0935\u092f\u094b\u0903 \u0938\u092e\u0942\u0939\u092f\u094b\u0903, \u092f\u092f\u094b\u0903 \u090f\u0915\u0903 \u0917\u094d\u0930\u0940\u0928\u092e\u0939\u094b\u0926\u092f\u093e\u0927\u0940\u0928\u0903 \u0905\u092a\u0930\u0903 \u091a \u0938\u0941\u0932\u093f\u0935\u0928\u092e\u0939\u094b\u0926\u092f\u093e\u0927\u0940\u0928\u0903\u0938\u094d\u0924\u0903, \u092e\u0927\u094d\u092f\u0947 \u0935\u093f\u092d\u093e\u091c\u093f\u0924\u093e \u092d\u0935\u093f\u0937\u094d\u092f\u0924\u093f\u0964",
            "x": 5,
            "y": 15
        },
        "query": [
            "Check if the substring from {x} to {y} in {a} is alphanumeric.",
            "Determine if the substring of {a} from index {x} to {y} is alphanumeric.",
            "Is the substring from {x} to {y} in the string {a} alphanumeric?"
        ],
        "language": "san_Deva"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).endswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0905\u0927\u093f\u0915\u093e\u0902\u0936 \u0932\u094b\u0917 \u092e\u0941\u0930\u094d\u0917\u0940 \u092a\u093e\u0932\u0928 \u0915\u0930\u0924\u0947 \u0939\u0948\u0902, \u0932\u0947\u0915\u093f\u0928 \u092a\u0915\u094d\u0937\u0940 \u092a\u093e\u0932\u0928 \u092e\u0947\u0902 \u0915\u0941\u091b \u091c\u094b\u0916\u093f\u092e \u092d\u0940 \u0939\u0948\u0964",
            "x": "\u092e\u0941\u0930\u094d\u0917\u0940",
            "y": "\u092a\u0915\u094d\u0937\u0940",
            "z": "\u091c\u094b\u0916\u093f\u092e \u092d\u0940 \u0939\u0948\u0964"
        },
        "query": [
            "Replace {x} with {y} in {a} and check if the result ends with {z}.",
            "Substitute {x} with {y} in {a} and verify if the final string ends with {z}.",
            "Change {x} to {y} in {a} and determine if the new string concludes with {z}."
        ],
        "language": "hin_Deva"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).count(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u092e\u093e\u0928\u093f\u0938\u0939\u0930\u0942\u0932\u0947 \u0909\u0928\u0940\u0939\u0930\u0942\u0915\u094b \u0935\u094d\u092f\u0915\u094d\u0924\u093f\u0917\u0924, \u092a\u093e\u0930\u093f\u0935\u093e\u0930\u093f\u0915, \u0930 \u0938\u0902\u0917\u0920\u0928\u093e\u0924\u094d\u092e\u0915 \u0915\u0925\u093e\u0939\u0930\u0942 \u092c\u0924\u093e\u0909\u0901\u0926\u093e \u0938\u0941\u0928\u094d\u0928\u0947 \u0915\u094d\u0930\u092e\u092e\u093e, \u0939\u093e\u092e\u0940\u0932\u0947 \u0935\u093f\u0917\u0924 \u0930 \u0938\u0902\u0917\u0920\u0928\u0915\u094b \u0938\u0902\u0938\u094d\u0915\u0943\u0924\u093f\u0932\u093e\u0908 \u0930\u093e\u092e\u094d\u0930\u094b \u0935\u093e \u0928\u0930\u093e\u092e\u094d\u0930\u094b \u092a\u094d\u0930\u092d\u093e\u0935 \u092a\u093e\u0930\u0947\u0915\u093e \u0915\u0947\u0939\u0940 \u0935\u094d\u092f\u0915\u094d\u0924\u093f\u0924\u094d\u0935\u0939\u0930\u0942\u0915\u094b \u092e\u0942\u0932\u094d\u092f\u0935\u093e\u0928 \u0905\u0928\u094d\u0924\u0930\u0926\u0943\u0937\u094d\u091f\u093f \u092a\u094d\u0930\u093e\u092a\u094d\u0924 \u0917\u0930\u094d\u092f\u094c\u0902\u0964",
            "x": 4,
            "y": "\u0938\u0902\u0917\u0920\u0928"
        },
        "query": [
            "Convert tabs in {a} to {x} spaces and count the occurrences of {y}.",
            "Replace tabs in {a} with {x} spaces and find how many times {y} appears.",
            "Change tabs in {a} to {x} spaces and determine the count of {y}."
        ],
        "language": "npi_Deva"
    },
    {
        "solution": "```python\nanswer = a.casefold().rfind(x)\nprint(answer)\n```",
        "variables": {
            "a": "Innaren n uxeddim imeqq\u1e5banen yakk d ime\u1e93la imsudar, anaba\u1e0d, tadrimt, tanezzut, akked tte\u1e25was.",
            "x": "imeqq\u1e5banen"
        },
        "query": [
            "Find the last occurrence of {x} in the casefolded version of {a}.",
            "Locate the final position of {x} in the casefolded string {a}.",
            "Determine the last index of {x} in the casefolded form of {a}."
        ],
        "language": "kab_Latn"
    },
    {
        "solution": "```python\nanswer = a[::-1].startswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0435Bay \u0430\u043b\u0435 Craigslist \u0433\u0430\u0439 \u0430\u0443\u043a\u0446\u0438\u043e\u043d \u0441\u0430\u0439\u0442\u043b\u0430 \u0433\u044b\u0447 \u0418\u043d\u0442\u0435\u0440\u043d\u0435\u0442\u044b\u0448\u0442\u0435 \u0443\u0436\u0430\u043b\u0430\u043b\u0442\u0448\u0435 \u0448\u0443\u043a\u043e \u0431\u0438\u043b\u0435\u0442 \u0442\u044b\u043c\u0430\u0440\u0442\u0435 \u0438\u0437\u0438\u0448\u0430\u043a \u043a\u0443\u0447\u044b\u043b\u0442\u043c\u043e \u0448\u0443\u043a\u043e \u043a\u0435\u0447\u0430\u0448 \u0431\u0438\u043b\u0435\u0442 \u0443\u043b\u044b\u0442, \u043d\u0443\u043d\u044b\u043d \u0434\u0435\u043d\u0435 \u0438\u043a \u043a\u0435\u0447\u044b\u0448\u0442\u0435 \u0438\u043a\u043c\u044b\u043d\u044f\u0440 \u043f\u0430\u0440\u043a\u044b\u0448 \u043c\u0438\u0435\u043d \u0442\u043e\u043b\u0430\u0448 \u043b\u0438\u0435\u0448.",
            "x": "\u043b\u0438\u0435\u0448."
        },
        "query": [
            "Does the reverse of {a} start with {x}?",
            "Is {x} the starting substring of the reversed {a}?",
            "When {a} is reversed, does it begin with {x}?"
        ],
        "language": "mhr_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.lower().count(x)\nprint(answer)\n```",
        "variables": {
            "a": "Dylech sicrhau bod eich llaw wedi ymlacio cymaint \u00e2 phosibl tra'n taro'r holl nodau yn gywir - hefyd ceisiwch beidio \u00e2 gwneud llawer o symudiadau di-angen gyda'ch bysedd.",
            "x": "a"
        },
        "query": [
            "How many times does {x} appear in {a} when both are in lowercase?",
            "Count the occurrences of {x} in {a} after converting both to lowercase.",
            "What is the frequency of {x} in {a} when both are converted to lowercase?"
        ],
        "language": "cym_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u064a\u0645\u0643\u0646 \u064a\u0648\u0641\u0631 \u0627\u0644\u0641\u0644\u0648\u0633 \u0643\u064a \u062a\u0634\u0631\u064a \u062e\u0631\u0627\u0626\u0637 \u062c\u062f\u064a\u062f\u0629 \u0644\u0646\u0638\u0627\u0645 \u062a\u062d\u062f\u064a\u062f \u0627\u0644\u0645\u0648\u0627\u0642\u0639 \u0627\u0644\u0639\u0627\u0644\u0645\u064a (GPS)\u060c \u0648\u0627\u0644\u0627 \u0645\u0627\u0643\u064a\u0646\u0629 \u0628\u0631\u0648\u062d\u0647\u0627 \u0644\u0646\u0638\u0627\u0645 \u062a\u062d\u062f\u064a\u062f \u0627\u0644\u0645\u0648\u0627\u0642\u0639 \u0627\u0644\u0639\u0627\u0644\u0645\u064a (GPS)\u060c \u0648\u0627\u0644\u0627 \u062a\u0643\u0631\u064a \u062c\u0647\u0645\u0627\u0643\u064a\u0646\u0629\u0627\u0632 \u0645\u0646 \u0634\u0631\u0643\u0629 \u0643\u0631\u0627\u0621 \u0627\u0644\u0643\u0631\u0627\u0647\u0628.",
            "x": "\u064a\u0645\u0643\u0646",
            "y": "\u0627\u0644\u0643\u0631\u0627\u0647\u0628."
        },
        "query": [
            "After stripping {x} from both ends of {a}, does it end with {y}?",
            "Does {a} end with {y} after removing {x} from both ends?",
            "If you strip {x} from both ends of {a}, does it end with {y}?"
        ],
        "language": "aeb_Arab"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u12dd\u1245\u1270\u129b \u121e\u1308\u12f5 \u1263\u1215\u1228 \u1230\u120b\u1324\u12cd \u1230\u121c\u1295 \u121d\u1235\u122b\u1245 \u12a0\u1245\u1323\u132b \u1260\u121a\u1235\u1272\u12ad \u12c8\u1295\u12dd \u1260\u12a9\u120d \u12a0\u1295\u12f5 \u12ad\u134d\u1270\u1275 \u1232\u1348\u1325\u122d\u1363 \u1260\u12a0\u134b\u1323\u129d \u12a0\u1325\u1229\u1295 \u1260\u12a0\u132d\u122d \u12e8\u12f5\u1295\u130b\u12ed \u130d\u12f5\u130d\u12f3 \u12c8\u12f0 \u1230\u121c\u1295 \u12a0\u1230\u1349\u1363 \u12ed\u1205\u121d \u12e8\u12cd\u1203\u12cd\u1295 \u1320\u122d\u12dd \u1260\u12a0\u1295\u12f5 \u12a0\u1290\u1235\u1270\u129b \u1263\u1205\u122d \u12f3\u122d\u127b \u12a5\u1295\u12f2\u12eb\u1260\u1243 \u12a0\u12f0\u1228\u1308\u12cd\u1362",
            "x": " ",
            "y": 5
        },
        "query": [
            "Is the {y+1}-th substring of {a} split by {x} composed entirely of digits?",
            "Does the {y+1}-th part of {a} when split by {x} consist only of digits?",
            "Is the {y+1}-th segment of {a} after splitting by {x} made up solely of digits?"
        ],
        "language": "amh_Ethi"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).islower()\nprint(answer)\n```",
        "variables": {
            "a": "E n\u0254 zan odinat\u025b bo n\u0254 s\u0254nu nu video e e n\u0254 zan \u0256\u00f2 telivizy\u0254n al\u01d2 fimu l\u025b m\u025b e.",
            "x": 100,
            "y": " "
        },
        "query": [
            "Is the string {a} centered to length {x} with {y} and all in lowercase?",
            "Does centering the string {a} to length {x} with {y} result in all lowercase characters?",
            "When the string {a} is centered to length {x} using {y}, is it entirely in lowercase?"
        ],
        "language": "fon_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='ignore').decode(x).isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u062f \u0646\u0648\u0631\u0648 \u0628\u064a\u0632\u0648\u06ab\u0627\u0646\u0648 \u0628\u0631\u062e\u0644\u0627\u0641\u060c \u064a\u0632\u0648\u06ab\u0627\u0646\u0648 \u06a9\u0648\u0631\u0646\u06cd \u0646\u0648\u0631 \u062e\u067e\u0644 \u0644\u0627\u0633\u0648\u0646\u0647 \u062f \u062d\u0631\u06a9\u062a \u06a9\u0648\u0644\u0648 \u06cc\u0627 \u0648\u0632\u0646 \u0644\u0631\u0644\u0648 \u06cc\u0627 \u062f \u0648\u0646\u0648 \u0644\u0647 \u0644\u0627\u0631\u06d0 \u0632\u0627\u0646\u06ab\u0644\u0648 \u06a9\u06d0 \u0646\u0647 \u06a9\u0627\u0631\u0648\u0626.",
            "x": "pbt_Arab"
        },
        "query": [
            "Is {a} printable after encoding and decoding with {x} and ignoring errors?",
            "Can {a} be printed after being encoded and decoded using {x} with errors ignored?",
            "Will {a} remain printable if encoded and decoded with {x} while ignoring errors?"
        ],
        "language": "pbt_Arab"
    },
    {
        "solution": "```python\nanswer = a.swapcase().find(x)\nprint(answer)\n```",
        "variables": {
            "a": "Kemah mobil iku mungkin yen sampeyan duwe minivan gedhe, SUV, Sedan utawa Gerbong Stasiun kanthi kursi-kursi sing diglethakake.",
            "x": "S"
        },
        "query": [
            "What is the position of {x} in {a} after swapping the case of each character?",
            "After changing the case of each character in {a}, where does {x} appear?",
            "In the string {a} with swapped case, at what index is {x} found?"
        ],
        "language": "jav_Latn"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).rfind(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0414\u044d\u0432\u0438\u0434 \u041e'\u0428\u0430\u043d\u043d\u0435\u0441\u0441\u0438, \u0433\u043b\u0430\u0432\u043d\u044b\u0439 \u0438\u043d\u0441\u043f\u0435\u043a\u0442\u043e\u0440 RSPCA \u0432 \u041d\u043e\u0432\u043e\u043c \u042e\u0436\u043d\u043e\u043c \u0423\u044d\u043b\u044c\u0441\u0435, \u0441\u043e\u043e\u0431\u0449\u0438\u043b ABC, \u0447\u0442\u043e \u0438\u043d\u0441\u043f\u0435\u043a\u0446\u0438\u0438 \u0438 \u043d\u0430\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u044f \u0437\u0430 \u0441\u043a\u043e\u0442\u043e\u0431\u043e\u0439\u043d\u044f\u043c\u0438 \u0432 \u0410\u0432\u0441\u0442\u0440\u0430\u043b\u0438\u0438 \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u043e\u0431\u044b\u0434\u0435\u043d\u043d\u043e\u0441\u0442\u044c\u044e.",
            "x": "\u0414",
            "y": "\u0438"
        },
        "query": [
            "Find the last occurrence of {y} in {a} after removing leading {x} characters.",
            "After stripping leading {x} characters from {a}, locate the last position of {y}.",
            "Determine the final position of {y} in {a} once the leading {x} characters are removed."
        ],
        "language": "rus_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "Mukontolodi mwimanyinyi wa RSPCA wa mu Nouvelle-Galles wa ku Sud, David O'Shannessy, uvua mwambe ku ABC bua se bulami ni.",
            "x": "wa",
            "y": "na"
        },
        "query": [
            "Replace {x} with {y} in {a} and capitalize the first character of the result.",
            "Substitute {x} with {y} in {a} and make the first letter uppercase.",
            "Change {x} to {y} in {a} and capitalize the initial character of the outcome."
        ],
        "language": "lua_Latn"
    },
    {
        "solution": "```python\nanswer = a.endswith(x[::-1])\nprint(answer)\n```",
        "variables": {
            "a": "\u0625\u0630\u0627 \u0643\u0646\u062a \u062a\u0631\u064a\u062f \u0623\u0646 \u062a\u062a\u0639\u0644\u0645 \u0631\u0645\u064a \u0627\u0644\u062e\u0634\u0628\u0629 \u0627\u0644\u0645\u0631\u062a\u062f\u0629 \u0627\u0644\u062a\u064a \u062a\u0639\u0648\u062f \u0625\u0644\u0649 \u064a\u062f\u0643 \u0628\u0639\u062f \u0631\u0645\u064a\u0647\u0627\u060c \u0641\u062a\u0623\u0643\u062f \u0645\u0646 \u0623\u0646 \u0644\u062f\u064a\u0643 \u0627\u0644\u062e\u0634\u0628\u0629 \u0627\u0644\u0645\u0646\u0627\u0633\u0628\u0629 \u0644\u0643\u064a \u062a\u0639\u0648\u062f \u0644\u0643.",
            "x": "\u0629\u0628\u0634\u062e\u0644\u0627"
        },
        "query": [
            "Does the string {a} end with the reverse of the substring {x}?",
            "Is the reverse of the substring {x} found at the end of the string {a}?",
            "Does {a} have {x[::-1]} as its ending substring?"
        ],
        "language": "arb_Arab"
    },
    {
        "solution": "```python\nanswer = a.find(x) == a.rfind(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0648\u0623\u0635\u0628\u062d\u062a \u0645\u062d\u0644\u0627\u062a \u0627\u0644\u0633\u0648\u0628\u0631 \u0645\u0627\u0631\u0643\u062a \u062a\u0645\u062a\u0644\u0643 \u0639\u0644\u0649 \u0646\u062d\u0648 \u0645\u062a\u0632\u0627\u064a\u062f \u0623\u0642\u0633\u0627\u0645 \u0623\u0637\u0639\u0645\u0629 \u062c\u0627\u0647\u0632\u0629 \u0623\u0643\u062b\u0631 \u062a\u0646\u0648\u0639\u0627\u064b. \u062d\u062a\u0649 \u0623\u0646 \u0628\u0639\u0636\u0647\u0627 \u064a\u0648\u0641\u0631 \u0641\u0631\u0646 \u0645\u064a\u0643\u0631\u0648\u0648\u064a\u0641 \u0623\u0648 \u0648\u0633\u0627\u0626\u0644 \u0623\u062e\u0631\u0649 \u0644\u062a\u0633\u062e\u064a\u0646 \u0627\u0644\u0637\u0639\u0627\u0645.",
            "x": "\u062a"
        },
        "query": [
            "Check if the first and last occurrence of {x} in {a} are at the same position.",
            "Determine if {x} appears only once in {a}.",
            "Verify if {x} is found at the same index from both ends in {a}."
        ],
        "language": "ars_Arab"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).title()\nprint(answer)\n```",
        "variables": {
            "a": "Komentar tersebut, yang disiarkan langsung di televisi, adalah pertama kalinya sumber senior Iran mengakui bahwa sanksi itu berpengaruh.",
            "x": "sanksi",
            "y": "hukuman"
        },
        "query": [
            "Replace {x} with {y} in {a} and convert the first character of each word to uppercase.",
            "Substitute {x} with {y} in {a} and capitalize the first letter of each word.",
            "Change {x} to {y} in {a} and make the first letter of each word uppercase."
        ],
        "language": "ind_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].islower()\nprint(answer)\n```",
        "variables": {
            "a": "\u012asacejums p\u012bjam, ka ce\u013cuotuoji naz\u016bg, nap\u012bsadola nalegalaj\u0101 tierg\u0101, naubogoj voi cytai\u017ei naizmontoj cytus cylv\u0101kus sov\u0101 lob\u0101.",
            "x": 10,
            "y": 20
        },
        "query": [
            "Determine if the substring of {a} from index {x} to {y} is entirely in lowercase.",
            "Check if the substring of {a} from index {x} to {y} is all lowercase.",
            "Is the substring of {a} from index {x} to {y} completely in lowercase?"
        ],
        "language": "ltg_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "Brazil kanjum on leddi bibbe deftere katolika Ruum buri dudugo ha duniya, bo riwitirde katolika Ruum buri limga luuri do ta be acca daakare en banga ha leddi majum.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Split {a} by {x} and capitalize the {y}-th segment.",
            "Divide {a} using {x} and capitalize the {y}-th part.",
            "Break {a} at each {x} and capitalize the {y}-th section."
        ],
        "language": "fuv_Latn"
    },
    {
        "solution": "```python\nanswer = a[::-1].count(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u06af\u0641\u062a\u0647 \u0645\u06cc\u200c\u0634\u0648\u062f Zhabdrung Ngawang Namgyel \u0642\u0644\u0639\u0647 \u0631\u0627 \u062f\u0631 \u0633\u0627\u0644 1649 \u0633\u0627\u062e\u062a \u062a\u0627 \u067e\u06cc\u0631\u0648\u0632\u06cc\u200c\u0627\u0634 \u0645\u0642\u0627\u0628\u0644 \u0646\u06cc\u0631\u0648\u0647\u0627\u06cc \u062a\u0628\u062a\u06cc-\u0645\u063a\u0648\u0644\u06cc \u0631\u0627 \u0628\u0647\u200c\u06cc\u0627\u062f\u0628\u0648\u062f \u062c\u0634\u0646 \u0628\u06af\u06cc\u0631\u062f.",
            "x": "\u0627"
        },
        "query": [
            "Count the occurrences of {x} in the reversed string {a}.",
            "How many times does {x} appear in the string {a} when it is reversed?",
            "Find the number of times {x} occurs in the reverse of the string {a}."
        ],
        "language": "pes_Arab"
    },
    {
        "solution": "```python\nanswer = a.strip(x).startswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0cb8\u0ccd\u0c95\u0ccd\u0cb5\u0cbe\u0cb7\u0ccd, \u0c95\u0cb0\u0cbe\u0c9f\u0cc6 \u0cae\u0ca4\u0ccd\u0ca4\u0cc1 \u0cb0\u0ccb\u0cb2\u0cb0\u0ccd \u0c95\u0ccd\u0cb0\u0cc0\u0ca1\u0cc6\u0c97\u0cb3\u0cc1 \u0c85\u0c82\u0ca4\u0cc6\u0caf\u0cc7 2005 \u0cb0 \u0c92\u0cb2\u0cbf\u0c82\u0caa\u0cbf\u0c95\u0ccd \u0c97\u0cc7\u0cae\u0ccd\u0cb8\u0ccd\u200c\u0ca8\u0cbf\u0c82\u0ca6 \u0c95\u0cc8\u0cac\u0cbf\u0c9f\u0ccd\u0c9f\u0cbf\u0ca6\u0ccd\u0ca6 \u0cac\u0cc7\u0cb8\u0ccd\u200c\u0cac\u0cbe\u0cb2\u0ccd \u0cb9\u0cbe\u0c97\u0cc2 \u0cb8\u0cbe\u0cab\u0ccd\u0c9f\u0ccd\u200c\u0cac\u0cbe\u0cb2\u0ccd \u0c95\u0ccd\u0cb0\u0cc0\u0ca1\u0cc6\u0c97\u0cb3\u0ca8\u0ccd\u0ca8\u0cc1 \u0cb8\u0cb9 \u0c92\u0cb2\u0cbf\u0c82\u0caa\u0cbf\u0c95\u0ccd \u0c95\u0ccd\u0cb0\u0cc0\u0ca1\u0cbe\u0c95\u0cc2\u0c9f\u0c95\u0ccd\u0c95\u0cc6 \u0cae\u0cb0\u0cb3\u0cbf \u0ca4\u0cb0\u0cb2\u0cc1 \u0cb6\u0ca4\u0caa\u0ccd\u0cb0\u0caf\u0ca4\u0ccd\u0ca8\u0c97\u0cb3\u0cc1 \u0ca8\u0ca1\u0cc6\u0ca6\u0cbf\u0ca6\u0ccd\u0ca6\u0cb5\u0cc1.",
            "x": " ",
            "y": "\u0cb8\u0ccd\u0c95\u0ccd\u0cb5\u0cbe\u0cb7\u0ccd"
        },
        "query": [
            "Check if the string {a} without leading and trailing {x} starts with {y}.",
            "Determine if the string {a} with {x} removed from both ends begins with {y}.",
            "Verify if the string {a} stripped of {x} at both ends starts with {y}."
        ],
        "language": "kan_Knda"
    },
    {
        "solution": "```python\nanswer = a.lower().find(x)\nprint(answer)\n```",
        "variables": {
            "a": "Mu Rogaland ne Agder, bagiyita \u201cHei\u201d ekitegezza ensozi omutali miti egibikidwa .",
            "x": "hei"
        },
        "query": [
            "Find the index of the first occurrence of {x} in the lowercase version of {a}.",
            "Locate the position of the first instance of {x} in the lowercase form of {a}.",
            "Determine the index where {x} first appears in the lowercase version of {a}."
        ],
        "language": "lug_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].strip(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0422\u043e\u0440\u043d\u0430\u0434\u043e \u2014 \u0442\u0435\u0433\u0435\u0440\u0435\u0433\u0438\u043d\u0434\u0435\u0433\u0438 \u0430\u0431\u0430\u043d\u044b \u0438\u0447\u0438\u043d\u0435 \u0441\u043e\u0440\u0443\u043f, \u0436\u043e\u0433\u043e\u0440\u0443 \u043a\u04e9\u0442\u04e9\u0440\u0433\u04e9\u043d \u0431\u0430\u0441\u044b\u043c\u044b \u04e9\u0442\u04e9 \u0442\u04e9\u043c\u04e9\u043d \u0431\u043e\u043b\u0433\u043e\u043d \u0430\u0439\u043b\u0430\u043d\u043c\u0430 \u0430\u0431\u0430 \u043a\u043e\u043b\u043e\u043d\u043d\u0430\u0441\u044b.",
            "x": " ",
            "y": 3,
            "z": "\u0430\u0431\u0430\u043d\u044b"
        },
        "query": [
            "Split {a} by {x}, take the {y}th element, and strip {z} from it.",
            "Divide {a} using {x} as the delimiter, select the {y}th part, and remove {z} from it.",
            "Separate {a} by {x}, pick the {y}th segment, and trim {z} from it."
        ],
        "language": "kir_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.capitalize().endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "A mad\u00e1rinfluenza madarakat \u00e9s eml\u0151s\u00f6ket egyar\u00e1nt megfert\u0151zhet.",
            "x": "megfert\u0151zhet."
        },
        "query": [
            "Check if the capitalized version of {a} ends with {x}.",
            "Determine if {a} when capitalized ends with {x}.",
            "See if the capitalized form of {a} has {x} at the end."
        ],
        "language": "hun_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).find(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0905\u0917\u0930 \u0908 \u0935\u093e\u0923\u093f\u091c\u094d\u092f\u093f\u0915 \u0939\u094b \u091c\u093e\u0908 \u0939\u0908, \u0924 \u0939\u092e\u093e\u0930\u093e \u092a\u093e\u0938 \u0939\u094b\u090f \u0915\u0947 \u091a\u093e\u0939\u0940\u0964 \u092f\u093e\u0928\u0940, \u092a\u0930\u092e\u093e\u0923\u0941 \u090a\u0930\u094d\u091c\u093e \u092a\u0930 \u0915\u094b\u0908 \u0938\u0948\u0926\u094d\u0927\u093e\u0902\u0924\u093f\u0915 \u0906\u092a\u0924\u094d\u0924\u093f \u0928\u092f \u0939\u0908,\" \u0936\u094d\u0930\u0940 \u0915\u0949\u0938\u094d\u091f\u0947\u0932\u094b \u0915\u0939\u0932\u0915\u0908\u0964",
            "x": "\u0908",
            "y": "\u0907",
            "z": "\u092a\u0930\u092e\u093e\u0923\u0941"
        },
        "query": [
            "Replace {x} with {y} in {a} and find the index of {z} in the result.",
            "In the string {a}, replace {x} with {y} and then find the position of {z}.",
            "Substitute {x} with {y} in {a} and determine the index of {z} in the new string."
        ],
        "language": "mag_Deva"
    },
    {
        "solution": "```python\nanswer = a.strip(x).upper().count(y)\nprint(answer)\n```",
        "variables": {
            "a": "Pandan l ak ofisy\u00e8l yo, li te asire sitwayen Tekzas yo ke yo t ap pran div\u00e8s mezi pou pwoteje sekirite piblik la.",
            "x": "P",
            "y": "YO"
        },
        "query": [
            "Strip {x} from both ends of {a}, convert the result to uppercase, and count the occurrences of {y}.",
            "Remove {x} from the start and end of {a}, change the result to uppercase, and find the number of times {y} appears.",
            "Trim {x} from both sides of {a}, turn the result to uppercase, and count how many times {y} occurs."
        ],
        "language": "hat_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].upper()\nprint(answer)\n```",
        "variables": {
            "a": "2004 maranw chinuqa phaxs\u00efkipan Couchsurfing ukx u\u00f1stayawiyapxi, Casey Fenton atamir wakt'ayiriw Islandia markar juk'a qullqimp awiyunat sara\u00f1 jikxatawiyi, ukhamarus janiw kawkhan qhipara\u00f1apas utjk\u00e4nti ukatat u\u00f1stayawiyapxi.",
            "x": 5,
            "y": 12
        },
        "query": [
            "Convert the substring of {a} from index {x} to {y} to uppercase.",
            "Change the substring of {a} ranging from index {x} to {y} to uppercase.",
            "Transform the substring of {a} between indices {x} and {y} to uppercase."
        ],
        "language": "ayr_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).replace(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0416\u0438\u0432\u043e\u0442\u043d\u044b\u0435 \u0441\u043e\u0441\u0442\u043e\u044f\u0442 \u0438\u0437 \u0431\u043e\u043b\u044c\u0448\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u043a\u043b\u0435\u0442\u043e\u043a. \u041e\u043d\u0438 \u0435\u0434\u044f\u0442 \u043f\u0438\u0449\u0443 \u0438 \u043f\u0435\u0440\u0435\u0432\u0430\u0440\u0438\u0432\u0430\u044e\u0442 \u0435\u0451 \u0432\u043d\u0443\u0442\u0440\u0438. \u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445 \u043c\u043e\u0433\u0443\u0442 \u0434\u0432\u0438\u0433\u0430\u0442\u044c\u0441\u044f.",
            "x": "\u0416",
            "y": "\u0436\u0438\u0432\u043e\u0442\u043d\u044b\u0445",
            "z": "\u0441\u0443\u0449\u0435\u0441\u0442\u0432"
        },
        "query": [
            "Remove leading and trailing {x} from {a}, then replace {y} with {z}.",
            "Trim {x} from both ends of {a} and then substitute {y} with {z}.",
            "Strip {x} from the start and end of {a}, followed by replacing {y} with {z}."
        ],
        "language": "rus_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).center(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "\u0905\u0928\u0941\u0938\u0928\u094d\u0927\u093e\u0928\u0915\u093e \u0932\u093e\u0917\u093f \u090f\u0915 \u091c\u093e\u0901\u091a \u0938\u092e\u093f\u0924\u093f \u0938\u094d\u0925\u093e\u092a\u093f\u0924 \u0917\u0930\u093f\u090f\u0915\u094b \u0925\u093f\u092f\u094b\u0964",
            "x": "\u091c\u093e\u0901\u091a",
            "y": "\u092a\u0930\u0940\u0915\u094d\u0937\u0923",
            "z": 50,
            "w": " "
        },
        "query": [
            "Replace {x} with {y} in {a} and center it within {z} characters, using {w} as the fill character.",
            "Substitute {x} with {y} in {a} and align it centrally within {z} characters, using {w} as the padding character.",
            "Change {x} to {y} in {a} and center it to fit {z} characters, filling with {w}."
        ],
        "language": "npi_Deva"
    },
    {
        "solution": "```python\nanswer = a[x:y].swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "Sissan, mini Japon tay\u00e9. Japon t\u00e8 gouni djaman l\u00e9h\u00e9, t\u00f4ni inaf\u00f4 B\u00e9r\u00e9tagni.",
            "x": 7,
            "y": 21
        },
        "query": [
            "Swap the case of the substring of {a} from {x} to {y}.",
            "Change the case of the substring of {a} between {x} and {y}.",
            "Toggle the case of the substring of {a} from index {x} to {y}."
        ],
        "language": "dyu_Latn"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).rstrip(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0938\u092e\u093e\u0905\u0924 \u091b\u0941 \u092e\u0941\u0932\u094d\u095b\u093f\u092e \u0938\u093f\u0902\u091c \u0924\u0947\u095b \u091f\u094d\u0930\u093e\u092f\u0932 \u0939\u0941\u0915 \u0939\u0958 \u0915\u093f \u0924\u093e\u0930\u0940\u0916 \u0924\u093f \u0928\u093f\u0936\u093e\u0928 \u095b\u0926 \u0915\u093e\u0930\u093e\u0902\u0964",
            "x": "\u0938\u092e\u093e\u0905\u0924",
            "y": "\u0915\u093e\u0930\u093e\u0902\u0964"
        },
        "query": [
            "Remove leading {x} and trailing {y} from {a}.",
            "Trim {x} from the start and {y} from the end of {a}.",
            "Strip {x} at the beginning and {y} at the end from {a}."
        ],
        "language": "kas_Deva"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).endswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u041f\u0430\u044f\u043d \u0438\u0440\u0445\u0438\u043d\u0435 \u0438\u0441\u043b\u0430\u043c \u0442\u0115\u043d\u0115\u043d \u0441\u0103\u0432\u0430\u043f\u043b\u0103 \u041c\u0435\u043a\u043a\u0430 \u0445\u0443\u043b\u0438\u043d\u0447\u0435, \u0432\u044b\u0440\u04d1\u043d\u0442\u0438 \u0432\u04d1\u0445\u04d1\u0442\u043f\u0430 10 \u0441\u0435\u0445\u0435\u0442 \u0442\u04d7\u043b\u043d\u0435\u043b\u043b\u0435, \u0445\u043e\u0441\u0442\u0435\u043b \u0438\u0448\u04d7\u043b\u0441\u0435 \u0430\u043d\u043d\u04d1.",
            "x": 100,
            "y": " ",
            "z": "\u0430\u043d\u043d\u04d1."
        },
        "query": [
            "Center {a} in a string of length {x} with {y} padding and check if it ends with {z}.",
            "Pad {a} to a total length of {x} using {y} and verify if it ends with {z}.",
            "Align {a} centrally in a string of length {x} with {y} padding and determine if it ends with {z}."
        ],
        "language": "chv_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x:y].count(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u092f\u0926\u093f \u0924\u094d\u0935\u0902 \u0906\u0935\u0936\u094d\u092f\u0915\u0924\u093e, \u091c\u0940\u0935\u0928 \u0936\u0948\u0932\u0940 \u090f\u0935\u0902 \u092a\u094d\u0930\u0924\u094d\u092f\u093e\u0939\u094d\u0935\u093e\u0928\u0902 \u092a\u094d\u0930\u0924\u093f \u0935\u093f\u0936\u094d\u0935\u0928\u093e\u0902 \u0905\u0932\u094d\u092a\u092e\u0942\u0932\u094d\u092f\u0947 \u0926\u094d\u0930\u0937\u094d\u091f\u0941\u0902 \u0907\u091a\u094d\u091b\u0924\u093f, \u0924\u0924\u0903 \u0907\u0926\u0902 \u0915\u093e\u0930\u0923\u0938\u094d\u092f \u0915\u0924\u093f\u092a\u092f \u092a\u0925\u0903 \u092d\u0935\u0924\u093f\u0964",
            "x": 10,
            "y": 50,
            "z": "\u0905"
        },
        "query": [
            "Count the occurrences of {z} in the substring of {a} from {x} to {y}.",
            "How many times does {z} appear in the substring of {a} between {x} and {y}?",
            "Find the number of times {z} occurs in the part of {a} from index {x} to {y}."
        ],
        "language": "san_Deva"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].zfill(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u0644\u0633\u0643\u0627\u0646 \u0627\u0644\u0623\u0635\u0644\u064a\u064a\u0646 \u0645\u062a\u0627\u0639 \u063a\u0631\u064a\u0646\u0644\u0627\u0646\u062f \u064a\u0633\u0645\u064a\u0648 \u0631\u0648\u0627\u062d\u0647\u0645 \u0627\u0644\u0625\u0646\u0648\u064a\u062a \u0641\u064a \u0643\u0646\u062f\u0627 \u0648\u0627\u0644\u0643\u0644\u0627\u0644\u064a\u0643 (\u0645\u0641\u0631\u062f \u0643\u0627\u0644\u0627\u0644\u064a\u062a)\u060c \u0645\u0646 \u0633\u0643\u0627\u0646 \u063a\u0631\u064a\u0646\u0644\u0627\u0646\u062f \u0641\u064a \u063a\u0631\u064a\u0646\u0644\u0627\u0646\u062f.",
            "x": " ",
            "y": 5,
            "z": 10
        },
        "query": [
            "Split {a} by {x}, take the {y}th element, and pad it with zeros to make it {z} characters long.",
            "Divide {a} using {x} as the delimiter, select the {y}th part, and add leading zeros to ensure it is {z} characters in length.",
            "Break {a} at each {x}, pick the {y}th segment, and prepend zeros to make its length {z} characters."
        ],
        "language": "aeb_Arab"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('utf-8').find(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0628\u0631\u0627\u06cc \u0628\u0631\u0631\u0633\u06cc \u0642\u0631\u0628\u0627\u0646\u06cc\u060c \u0627\u0628\u062a\u062f\u0627 \u0628\u0627\u06cc\u062f \u0635\u062d\u0646\u0647 \u0631\u0627 \u0628\u0631\u0631\u0633\u06cc \u06a9\u0646\u06cc\u062f \u062a\u0627 \u0627\u0632 \u0627\u0645\u0646\u06cc\u062a \u062e\u0648\u062f \u0645\u0637\u0645\u0626\u0646 \u0634\u0648\u06cc\u062f.",
            "x": "\u0628\u0631\u0631\u0633\u06cc"
        },
        "query": [
            "Encode {a} to UTF-8, decode it back, and find the position of {x}.",
            "Convert {a} to UTF-8 encoding, then decode it and locate the index of {x}.",
            "Transform {a} into UTF-8, revert it back, and determine the position of {x}."
        ],
        "language": "pes_Arab"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].strip()\nprint(answer)\n```",
        "variables": {
            "a": "\u0924\u093f\u0928\u0940\u0939\u0930\u0942\u0915\u093e \u0927\u0947\u0930\u0948 \u0932\u0947\u0916\u0915\u0939\u0930\u0942 Jon Stewart \u0930 Stephen Colbert \u0915\u093e \u0938\u092e\u093e\u091a\u093e\u0930 \u092a\u094d\u092f\u093e\u0930\u094b\u0921\u0940 \u0936\u094b\u0939\u0930\u0942\u092e\u093e \u0920\u0942\u0932\u094b \u092a\u094d\u0930\u092d\u093e\u0935 \u092a\u093e\u0930\u094d\u0928 \u0938\u092b\u0932 \u092d\u090f\u0964",
            "x": " ",
            "y": 5
        },
        "query": [
            "Split {a} by {x}, take the {y}-th element, and strip whitespace from it.",
            "Divide {a} using {x} as the delimiter, select the {y}-th part, and remove leading and trailing spaces.",
            "Using {x} to split {a}, get the {y}-th segment, and trim any surrounding whitespace."
        ],
        "language": "npi_Deva"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "u k\u025bt\u0254la k'o k\u025b u b\u025b yeelen fitini d\u0254 fili min t\u0254k\u0254 ye \"photon\" ye.",
            "x": "k\u025b",
            "y": "ka"
        },
        "query": [
            "Replace {x} with {y} in {a} and swap the case of all letters.",
            "Substitute {x} with {y} in {a} and invert the case of every character.",
            "Change {x} to {y} in {a} and toggle the case of all characters."
        ],
        "language": "bam_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().split(x)[y].upper()\nprint(answer)\n```",
        "variables": {
            "a": "Adakpih padum-padum droe sarjana berspekulasi bahwasajih sabab peuradaban nyan sit na i ceukungan Krueng Sarasvati nyang jinoe thoe, nyang pah takheun Peuradaban Krueng Sarasvati, seumentara na padum-padum droe geukheunjih Peuradaban Harappan lheuh nyan Harappa, nyang phon bak situsjih ikueh bak thon 1920-an.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Strip whitespace from {a}, split it by {x}, take the {y}-th element, and convert it to uppercase.",
            "Remove leading and trailing spaces from {a}, divide it by {x}, select the {y}-th part, and change it to uppercase.",
            "Trim spaces from {a}, split it using {x}, get the {y}-th segment, and turn it into uppercase."
        ],
        "language": "ace_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(y).upper()\nprint(answer)\n```",
        "variables": {
            "a": "M\u00e5den at t\u00e6nke p\u00e5 forbindes med specifikke videnskabelige procedurer eller standardprocedurer.",
            "y": "M\u00e5den"
        },
        "query": [
            "Remove characters in {y} from both ends of {a} and convert the result to uppercase.",
            "Trim characters in {y} from the start and end of {a} and change the result to uppercase.",
            "Strip characters in {y} from both sides of {a} and transform the result to uppercase."
        ],
        "language": "dan_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).split(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0631\u0627\u062d \u062a\u0628\u0644\u0644 \u0645\u0644\u0627\u0628\u0633\u0643 \u0628\u0643\u0644 \u062a\u0623\u0643\u064a\u062f \u0625\u0630\u0627 \u0639\u0628\u0631\u062a \u0627\u0644\u062c\u0633\u0631 \u0623\u0648 \u062a\u0645\u0634\u064a\u062a \u0639\u0644\u0649 \u0637\u0648\u0644 \u0627\u0644\u0637\u0631\u0642 \u0627\u0644\u0645\u0644\u062a\u0648\u064a\u0629 \u0628\u0627\u0644\u0642\u0631\u0628 \u0645\u0646 \u0634\u0644\u0627\u0644\u0627\u062a \u0641\u064a\u0643\u062a\u0648\u0631\u064a\u0627.",
            "x": "\u062a",
            "y": "\u062b",
            "z": " "
        },
        "query": [
            "Replace all occurrences of {x} with {y} in {a} and then split the result by {z}.",
            "Substitute every {x} in {a} with {y} and then divide the string by {z}.",
            "Change each {x} in {a} to {y} and then separate the string using {z}."
        ],
        "language": "acm_Arab"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).rstrip(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u09b8\u09b9\u09be\u09df\u0995 \u09ad\u09be\u09b7\u09be\u09b8\u09ae\u09c2\u09b9 \u09b9'\u09b2 \u0995\u09c3\u09a4\u09cd\u09f0\u09bf\u09ae \u09a8\u09be\u0987\u09ac\u09be \u09a4\u09c8\u09df\u09be\u09f0 \u0995\u09f0\u09be \u09ad\u09be\u09b7\u09be \u09af\u09be\u09f0 \u0989\u09a6\u09cd\u09a6\u09c7\u09b6\u09cd\u09af \u09b9'\u09b2 \u098f\u09a8\u09c7\u0995\u09c1\u09f1\u09be \u09ae\u09be\u09a8\u09c1\u09b9\u09f0 \u09ae\u09be\u099c\u09a4 \u09b8\u09ae\u09cd\u09aa\u09f0\u09cd\u0995 \u09b8\u09cd\u09a5\u09be\u09aa\u09a8 \u0995\u09f0\u09be \u09af\u09be\u09f0 \u09b2\u0997\u09a4 \u09b8\u09c7\u0987 \u09ad\u09be\u09b7\u09be\u099f\u09cb\u09f0 \u0985\u09ac\u09bf\u09b9\u09a8\u09c7 \u09b8\u09ae\u09cd\u09ac\u09a8\u09cd\u09a7 \u09b8\u09cd\u09a5\u09be\u09aa\u09a8 \u0995\u09f0\u09be \u0995\u09a0\u09bf\u09a8 \u09b9'\u09b2\u09b9\u09c7\u0981\u09a4\u09c7\u09a8\u0964",
            "x": 150,
            "y": " ",
            "z": "\u0964"
        },
        "query": [
            "Left justify {a} within {x} characters using {y} as the fill character, then strip characters in {z} from the end.",
            "Justify {a} to the left within {x} characters using {y} as the padding character, then remove characters in {z} from the end.",
            "Pad {a} to the left within {x} characters using {y}, then trim characters in {z} from the end."
        ],
        "language": "asm_Beng"
    },
    {
        "solution": "```python\nanswer = a.swapcase().split(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "V\u1ee5 t\u1ea5n c\u00f4ng \u0111\u00e3 g\u00e2y ra c\u0103ng th\u1eb3ng l\u1edbn trong m\u1ed1i quan h\u1ec7 gi\u1eefa \u1ea4n \u0110\u1ed9 v\u00e0 Pakistan.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Swap the case of all characters in {a} and split the result by {x} with a maximum of {y} splits.",
            "Change the case of each character in {a} and then divide the string by {x} up to {y} times.",
            "Convert uppercase to lowercase and vice versa in {a}, then split the string by {x} with a limit of {y} splits."
        ],
        "language": "vie_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].upper().startswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "Os elementos e os compostos poden pasar dun estado a outro sen cambios.",
            "x": 3,
            "y": 12,
            "z": "ELEMENTOS"
        },
        "query": [
            "Check if the substring of {a} from {x} to {y}, converted to uppercase, starts with {z}.",
            "Determine if the uppercase version of the substring of {a} from index {x} to {y} begins with {z}.",
            "Verify if the substring of {a} sliced from {x} to {y} and converted to uppercase starts with {z}."
        ],
        "language": "glg_Latn"
    },
    {
        "solution": "```python\nanswer = a.lower().rfind(x)\nprint(answer)\n```",
        "variables": {
            "a": "Khi nh\u1eefng chi\u1ebfc xe ph\u00eda tr\u01b0\u1edbc ph\u1ea3i v\u00e0o n\u1ea1p nhi\u00ean li\u1ec7u theo l\u1ec7nh c\u1ee7a xe b\u1ea3o \u0111\u1ea3m an to\u00e0n, Alonso \u0111\u00e3 v\u01b0\u1ee3t l\u00ean \u0111\u1ec3 gi\u00e0nh chi\u1ebfn th\u1eafng.",
            "x": "xe"
        },
        "query": [
            "Find the last occurrence of {x} in the lowercase version of {a}.",
            "Locate the final position of {x} in the lowercase form of {a}.",
            "Determine the last index of {x} in the lowercase variant of {a}."
        ],
        "language": "vie_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].replace(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "\u0639\u0644\u0649 \u0627\u0644\u0623\u0643\u0648\u0631\u062f\u064a\u0648\u0646 \u060c \u0644\u062a\u0627\u062e\u062f \u0635\u0648\u062a \u0625\u0636\u0627\u0641\u064a \u060c\u0628\u062a\u0642\u062f\u0631 \u062a\u0633\u062a\u062e\u062f\u0645 \u0627\u0644\u0645\u0646\u0641\u0627\u062e \u0628\u0632\u064a\u0627\u062f\u0629 \u0627\u0644\u0636\u063a\u0637 \u0623\u0648 \u0627\u0644\u0633\u0631\u0639\u0629.",
            "x": 5,
            "y": 20,
            "z": "\u0627",
            "w": "\u0623"
        },
        "query": [
            "Replace {z} with {w} in the substring of {a} from {x} to {y}.",
            "Substitute {z} with {w} in the slice of {a} starting at index {x} and ending at index {y}.",
            "In the segment of {a} from {x} to {y}, change {z} to {w}."
        ],
        "language": "apc_Arab_sout3123"
    },
    {
        "solution": "```python\nanswer = a[x::y].isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u04b2\u0430\u0434\u0430\u0444\u04b3\u043e\u0438 \u0430\u0441\u043e\u0441\u0438\u0438 \u0418\u0442\u0430\u043b\u0438\u044f \u043a\u0438\u0448\u0432\u0430\u0440\u04b3\u043e\u0438 \u0410\u0444\u0440\u0438\u049b\u043e \u0431\u0430 \u0448\u0443\u043c\u043e\u0440 \u043c\u0435\u0440\u0430\u0444\u0442\u0430\u043d\u0434. \u0411\u0430\u0440\u043e\u0438 \u0493\u0430\u0441\u0431 \u043a\u0430\u0440\u0434\u0430\u043d\u0438 \u043a\u0438\u0448\u0432\u0430\u0440\u04b3\u043e\u0438 \u043c\u0430\u0437\u043a\u0443\u0440, \u0431\u0430 \u043e\u043d\u04b3\u043e \u044f\u043a \u043f\u043e\u0439\u0433\u043e\u04b3\u0438 \u0441\u0430\u0440 \u0434\u043e\u0434\u0430\u043d\u0438 \u043b\u0430\u0448\u043a\u0430\u0440\u043e\u043d \u043b\u043e\u0437\u0438\u043c \u0430\u0441\u0442\u0442\u043e \u043a\u0438 \u049b\u0443\u0432\u0432\u0430\u04b3\u043e\u044f\u0448\u043e\u043d \u0442\u0430\u0432\u043e\u043d\u0430\u043d\u0434 \u0442\u0430\u0432\u0430\u0441\u0441\u0443\u0442\u0438 \u0431\u0430\u04b3\u0440\u0438 \u041c\u0438\u0451\u043d\u0430\u0437\u0430\u043c\u0438\u043d \u0448\u0438\u043d\u043e \u043a\u0430\u0440\u0434\u0430, \u0431\u0430 \u0410\u0444\u0440\u0438\u049b\u043e \u04b3\u0430\u043c\u043b\u0430 \u043a\u0443\u043d\u0430\u043d\u0434.",
            "x": 5,
            "y": 10
        },
        "query": [
            "Check if every {y}-th character starting from position {x} in {a} is numeric.",
            "Verify if each {y}-th character from position {x} in {a} is a digit.",
            "Determine if all characters at every {y}-th position starting from position {x} in {a} are numeric."
        ],
        "language": "tgk_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x:y].title().endswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "Skur\u00f0l\u00e6knar \u00feekktu \u00fdmsar tegundir r\u00f3andi lyfja, \u00feeir \u00feekktu m.a. morf\u00edn sem unni\u00f0 var \u00far valm\u00faafr\u00e6jum og sk\u00f3p\u00f3lam\u00edn sem unni\u00f0 var \u00far grasafr\u00e6jum.",
            "x": 10,
            "y": 30,
            "z": "Lyfja"
        },
        "query": [
            "Check if the substring of {a} from {x} to {y}, converted to title case, ends with {z}.",
            "Determine if the title-cased substring of {a} from index {x} to {y} ends with {z}.",
            "Verify if the portion of {a} between {x} and {y}, after converting to title case, ends with {z}."
        ],
        "language": "isl_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].upper().replace(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "Tesne pod vrcholom je mal\u00e1 jasky\u0148a, cez ktor\u00fa sa mus\u00ed prejs\u0165, je pomerne n\u00edzka a\u00a0poriadne tesn\u00e1.",
            "x": 10,
            "y": 20,
            "z": "O",
            "w": "X"
        },
        "query": [
            "Convert the slice of {a} from {x} to {y} to uppercase and replace {z} with {w}.",
            "Transform the substring of {a} from index {x} to {y} to uppercase and substitute {z} with {w}.",
            "Change the portion of {a} between {x} and {y} to uppercase and swap {z} with {w}."
        ],
        "language": "slk_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().split(x)[y].capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "Min andi himbe duddum je siyasa, andiibe fasaha, be himbe yimata ha greek. amma mo be buri andugo ha alada do homer on, bumdo je vindata, mo vindi kujeji didi je wala ba majum ha biindi Greek: biindi Lliad be Odyssey.",
            "x": ",",
            "y": 1
        },
        "query": [
            "Remove leading and trailing spaces from {a}, split it by {x}, and capitalize the {y}-th segment.",
            "Trim spaces from both ends of {a}, divide it by {x}, and capitalize the {y}-th part.",
            "Strip spaces from the start and end of {a}, split it using {x}, and capitalize the {y}-th section."
        ],
        "language": "fuv_Latn"
    },
    {
        "solution": "```python\nanswer = a.title().endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "Ns\u025bmfua a \u025bw\u0254 Hundi ne Urdu mu no ses\u025b nanso w\u0254n atwer\u025b ny\u025b p\u025b, daadaa nk\u0254mm\u0254b\u0254 mu no nnipa a w\u0254ka kasa yi tumi te w\u0254n mu biara kasa a w\u0254reka no ase.",
            "x": "Ase."
        },
        "query": [
            "Capitalize the first letter of each word in {a} and check if it ends with {x}.",
            "Convert the first letter of each word in {a} to uppercase and verify if it ends with {x}.",
            "Make the first letter of each word in {a} uppercase and determine if it ends with {x}."
        ],
        "language": "twi_Latn_akua1239"
    },
    {
        "solution": "```python\nanswer = a[x:y].swapcase().find(z)\nprint(answer)\n```",
        "variables": {
            "a": "The militaristic nature of the Roman empire aided in the development of medical advances.",
            "x": 4,
            "y": 15,
            "z": "TARISTIC"
        },
        "query": [
            "Swap the case of the slice of {a} from {x} to {y} and find the index of {z}.",
            "Find the index of {z} in the case-swapped slice of {a} from {x} to {y}.",
            "Get the index of {z} after swapping the case of the substring of {a} from {x} to {y}."
        ],
        "language": "eng_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u5728\u5176\u4ed6\u60c5\u51b5\u4e0b\uff0c\u53ea\u6709\u4f4f\u5728\u65c5\u6e38\u4f4f\u5bbf\u8bbe\u65bd\u4ee5\u5916\u7684\u4eba\u9700\u8981\u767b\u8bb0\u3002\u4e0d\u8fc7\u8fd9\u6837\u4e00\u6765\uff0c\u6cd5\u5f8b\u6a21\u7cca\u4e86\u5f88\u591a\uff0c\u6240\u4ee5\u8981\u4e8b\u5148\u4e86\u89e3\u3002",
            "x": "\u65c5\u6e38\u4f4f\u5bbf\u8bbe\u65bd",
            "y": "\u9152\u5e97"
        },
        "query": [
            "Replace {x} with {y} in {a} and check if the result is a valid Python identifier.",
            "Substitute {x} with {y} in {a} and determine if the outcome is a valid Python identifier.",
            "Swap {x} with {y} in {a} and verify if the resulting string is a valid Python identifier."
        ],
        "language": "cmn_Hans"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u041c\u044d\u0434\u043b\u044d\u0433\u0438\u0439\u0433 \u043e\u043b\u0436 \u0430\u0432\u0430\u0445, \u0441\u0443\u0440\u0430\u0445 \u0447\u0430\u0434\u0432\u0430\u0440 \u0434\u044d\u044d\u0440 \u0434\u0443\u0440\u0434\u0441\u0430\u043d \u0448\u0438\u0433 \u0431\u0430\u0439\u0434\u043b\u0430\u0430\u0440 \u04e9\u04e9\u0440\u0447\u043b\u04e9\u0433\u0434\u0441\u04e9\u043d \u0431\u043e\u043b\u043e\u0445\u043e\u043e\u0440 \u043c\u044d\u0434\u043b\u044d\u0433\u0438\u0439\u0433 \u043e\u043b\u0436 \u0430\u0432\u0441\u0430\u043d \u04af\u043d\u0434\u0441\u044d\u043d \u0441\u0443\u0443\u0440\u044c \u04e9\u04e9\u0440\u0447\u043b\u04e9\u0433\u0434\u0436\u044d\u044d.",
            "x": " ",
            "y": 3
        },
        "query": [
            "Split {a} by {x} and check if the {y}-th segment is numeric.",
            "Divide {a} using {x} and verify if the {y}-th part is a number.",
            "Separate {a} with {x} and determine if the {y}-th section is numeric."
        ],
        "language": "khk_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('utf-8').startswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u30b7\u30e3\u30fc\u30ed\u30c3\u30c8\u3067\u306f\u4e00\u822c\u7684\u306b\u5bb6\u65cf\u9023\u308c\u304c\u30bf\u30af\u30b7\u30fc\u3092\u5229\u7528\u3059\u308b\u7fd2\u6163\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u72b6\u6cc1\u306b\u3088\u3063\u3066\u306f\u5229\u7528\u3067\u304d\u308b\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u3002",
            "x": "\u30b7\u30e3\u30fc\u30ed\u30c3\u30c8"
        },
        "query": [
            "Encode {a} to UTF-8 and decode it back, then check if it starts with {x}.",
            "Convert {a} to UTF-8 and back, then verify if it begins with {x}.",
            "Transform {a} to UTF-8 and decode it, then determine if it starts with {x}."
        ],
        "language": "jpn_Jpan"
    },
    {
        "solution": "```python\nanswer = a.strip().title()\nprint(answer)\n```",
        "variables": {
            "a": "Mulipoti latsopano la OPEC, yasonyeza kuti mafuta womwe amatulutsidwa agwa kwambiri mudzaka makumi awiri apitawo pa zigubu mamiliyoni 2.8 patsiku."
        },
        "query": [
            "Remove leading and trailing whitespace from {a} and capitalize the first letter of each word.",
            "Trim spaces from the start and end of {a} and convert it to title case.",
            "Strip whitespace from both ends of {a} and make each word's first letter uppercase."
        ],
        "language": "nya_Latn"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).upper()\nprint(answer)\n```",
        "variables": {
            "a": "L\u01ddman karaayeso au wanaye shaktana au luwalama so. k\u01ddndaaram d\u01dd wanaye amusu, kawudowa, au biya kuttu.",
            "x": 100,
            "y": "-"
        },
        "query": [
            "Left-justify {a} with {x} characters, padded by {y}, and convert the result to uppercase.",
            "Pad {a} to the left with {y} until it reaches {x} characters, then change it to uppercase.",
            "Make {a} left-aligned with a total length of {x} characters using {y} as padding, and turn it into uppercase."
        ],
        "language": "knc_Latn"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u101c\u103d\u1004\u103a\u1088\u1022\u103d\u1075\u103a\u1087\u1076\u1062\u101d\u103a\u1038\u1010\u1062\u1004\u103a\u1038\u1015\u1086\u107c\u1082\u103a\u1038\u1011\u102d\u1030\u107c\u103a\u1087\u107c\u107c\u103a\u1089 \u1015\u1035\u107c\u103a\u101c\u103d\u1004\u103a\u1088\u1010\u1030\u1004\u103a\u1089\u107c\u102d\u102f\u1004\u103a\u1010\u1062\u1004\u103a\u1038\u107c\u103d\u1075\u103a\u1088 \u1022\u107c\u103a\u1076\u101d\u103a\u1088\u1015\u1083\u1038\u1010\u1004\u103a\u1038 \u101c\u103d\u1004\u103a\u1088\u1015\u1086\u107c\u1082\u103a\u1038\u101e\u107d\u1083\u1087\u101d\u101d\u1085\u1010\u103a\u1089\u101c\u103d\u1019\u103a\u1089 \u1075\u1019\u103a\u107c\u1019\u103a\u107c\u1019\u103a\u1015\u1035\u107c\u103a \u101c\u103d\u1004\u103a\u1088\u1015\u1086\u107c\u102d\u1030\u101d\u103a\u101e\u1035\u107c\u103a\u1088\u1010\u1062\u1004\u103a\u1038 \u1022\u103d\u1075\u103a\u1087\u1076\u1062\u101d\u103a\u1038\u1010\u1062\u1004\u103a\u1038\u1015\u1086\u107c\u1082\u103a\u1038\u1011\u102d\u1030\u107c\u103a\u1087\u107c\u107c\u103a\u1089\u101a\u101d\u103a\u1089\u104b",
            "x": 4
        },
        "query": [
            "Expand tabs in {a} to {x} spaces and check if the result is printable.",
            "Replace tabs in {a} with {x} spaces and determine if the output is printable.",
            "Convert tabs in {a} to {x} spaces and verify if the resulting string is printable."
        ],
        "language": "shn_Mymr"
    },
    {
        "solution": "```python\nanswer = a[x:y].isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Zaradi odpiranja ventilov se je v sistemu zni\u017eal tlak in nafta je iz zbiralnika iztekla v rezervoar, ki lahko sprejme 55.000 sod\u010dkov (2,3 milijona galon).",
            "x": 0,
            "y": 10
        },
        "query": [
            "Check if the substring of {a} from index {x} to {y} consists only of ASCII characters.",
            "Determine if the segment of {a} between indices {x} and {y} contains only ASCII characters.",
            "Verify if the portion of {a} from position {x} to {y} is made up entirely of ASCII characters."
        ],
        "language": "slv_Latn"
    },
    {
        "solution": "```python\nanswer = a.casefold().find(x)\nprint(answer)\n```",
        "variables": {
            "a": "Wcze\u015bniej tego dnia Jarque bra\u0142 udzia\u0142 w treningu przedsezonowym w Coverciano we W\u0142oszech. Zatrzyma\u0142 si\u0119 w hotelu dru\u017cyny przed meczem z Boloni\u0105 zaplanowanym na niedziel\u0119.",
            "x": "w\u0142oszech"
        },
        "query": [
            "Find the index of the first occurrence of {x} in the casefolded version of {a}.",
            "Determine the position of the first appearance of {x} in the casefolded string {a}.",
            "Locate the index of the initial occurrence of {x} in the casefolded form of {a}."
        ],
        "language": "pol_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).startswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u092e\u0942\u0938: (\u092f\u093e\u092e \u090f\u0932\u094d\u0915 \u0905\u092a\u093f \u0915\u0925\u094d\u092f\u0924\u0947) \u0938\u094d\u0935\u093e\u092d\u093e\u0935\u093f\u0915 \u0930\u0942\u092a\u0947\u0928 \u0906\u0915\u094d\u0930\u093e\u092e\u0915: \u0928 \u092d\u0935\u0924\u093f, \u092a\u0930\u0928\u094d\u0924\u0941 \u092f\u0926\u093f \u0924\u093e\u0902 \u0915\u094b\u093d\u092a\u093f \u0935\u093f\u092a\u0926\u0903 \u0907\u0924\u093f \u0905\u0928\u0941\u092d\u0935\u0903, \u0924\u0947 \u0938\u094d\u0935\u092f\u0902 \u0930\u0915\u094d\u0937\u0923\u0902 \u0915\u0930\u093f\u0937\u094d\u092f\u0924\u093f \u0964",
            "x": "\u092e\u0942\u0938",
            "y": "\u0939\u093f\u0930\u0923",
            "z": "\u0939\u093f\u0930\u0923: (\u092f\u093e\u092e \u090f\u0932\u094d\u0915 \u0905\u092a\u093f \u0915\u0925\u094d\u092f\u0924\u0947)"
        },
        "query": [
            "Check if {a} starts with {z} after replacing {x} with {y}.",
            "Determine if {a} begins with {z} once {x} is replaced by {y}.",
            "See if {a} commences with {z} after substituting {x} with {y}."
        ],
        "language": "san_Deva"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].upper()\nprint(answer)\n```",
        "variables": {
            "a": "Prevlado nad temi \u0161efi je prevzel Provenzano, ko je pod vodstvom Riine kon\u010dal vojno z dr\u017eavo, ki je leta 1992 vzela \u017eivljenja mafijskih kri\u017earjev Giovannija Falconeja in Paola Borsellina.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Split {a} by {x} and convert the {y}-th segment to uppercase.",
            "Divide {a} using {x} as the delimiter and change the {y}-th part to uppercase.",
            "Break {a} at each {x} and transform the {y}-th section to uppercase."
        ],
        "language": "slv_Latn"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).encode('ascii', errors='ignore')\nprint(answer)\n```",
        "variables": {
            "a": "\u0d17\u0d4d\u0d30\u0d40\u0d7b\u200c\u0d32\u0d3e\u0d7b\u200c\u0d21\u0d3f\u0d32\u0d46 \u0d24\u0d26\u0d4d\u0d26\u0d47\u0d36\u0d40\u0d2f\u0d7c\u200c \u0d15\u0d3e\u0d28\u0d21\u0d2f\u0d3f\u0d7d \u0d07\u0d7b\u200c\u0d2f\u0d42\u0d1f\u0d4d\u0d1f\u0d4d \u0d0e\u0d28\u0d4d\u0d28\u0d41\u0d02 \u0d17\u0d4d\u0d30\u0d40\u0d7b\u200c\u0d32\u0d3e\u0d7b\u200c\u0d21\u0d3f\u0d7d \u0d15\u0d32\u0d3e\u0d32\u0d46\u0d15\u0d4d\u0d15\u0d4d (\u0d2c\u0d39\u0d41\u0d35\u0d1a\u0d28\u0d02 \u0d15\u0d32\u0d3e\u0d32\u0d3f\u0d31\u0d4d\u0d31\u0d4d) \u0d0e\u0d28\u0d4d\u0d28\u0d41\u0d02 \u0d38\u0d4d\u0d35\u0d2f\u0d02 \u0d35\u0d3f\u0d33\u0d3f\u0d15\u0d4d\u0d15\u0d41\u0d28\u0d4d\u0d28\u0d24\u0d4d.",
            "x": 100,
            "y": "*"
        },
        "query": [
            "Center {a} with a total width of {x} using {y} as padding, then encode it in ASCII ignoring errors.",
            "Align {a} in the center with a width of {x} using {y} as the fill character, and encode it to ASCII while ignoring errors.",
            "Pad {a} to a total width of {x} with {y} and center it, then convert it to ASCII encoding, ignoring any errors."
        ],
        "language": "mal_Mlym"
    },
    {
        "solution": "```python\nanswer = a.title().replace(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Ke\u00e7ken y\u0131l birinci kere Q\u0131tay, Almaniyadan daa \u00e7oq araba ihra\u00e7 etip, bu saada e\u00f1 b\u00fcy\u00fck bazar olaraq AQ\u015e-n\u0131 oz\u0131p ke\u00e7ti.",
            "x": "Q\u0131tay",
            "y": "\u00c7in"
        },
        "query": [
            "Replace {x} with {y} in {a} after capitalizing the first letter of each word.",
            "After capitalizing the first letter of each word in {a}, replace {x} with {y}.",
            "In {a}, replace {x} with {y} after capitalizing the first letter of each word."
        ],
        "language": "crh_Latn"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).islower()\nprint(answer)\n```",
        "variables": {
            "a": "acorde\u00e3o",
            "x": 20,
            "y": " "
        },
        "query": [
            "Check if {a} is entirely lowercase after left-justifying it to length {x} with {y} as padding.",
            "Determine if the string {a} is all lowercase after padding it to the left to a length of {x} with {y}.",
            "Verify if {a} remains in lowercase after being left-justified to {x} characters using {y} as the padding character."
        ],
        "language": "por_Latn"
    },
    {
        "solution": "```python\nanswer = a[:x].rstrip(y).isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Bu protsessten so\u00f1, HJR-3 protseste qalmaq i\u00e7\u00fcn, 2015 ya da 2016 senesi sayl\u00e2n\u011fan nevbetteki  qanun \u00e7\u0131qar\u0131c\u0131 organ taraf\u0131ndan tekrar k\u00f6zden ke\u00e7irilecek.",
            "x": 50,
            "y": " "
        },
        "query": [
            "Check if the substring of {a} up to {x} characters, after stripping {y} from the end, is composed entirely of ASCII characters.",
            "Determine if the first {x} characters of {a}, with {y} removed from the end, consist only of ASCII characters.",
            "Verify if the substring of {a} up to {x} characters, after removing trailing {y}, contains only ASCII characters."
        ],
        "language": "crh_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).upper()\nprint(answer)\n```",
        "variables": {
            "a": "D\u00e9 C\u00e9adaoin, chuir Cumann N\u00e1isi\u00fanta Cispheile na St\u00e1t Aontaithe a sh\u00e9as\u00far cispheile gairmi\u00fail ar fionra\u00ed mar gheall ar imn\u00ed i dtaobh COVID-19.",
            "x": "D\u00e9"
        },
        "query": [
            "Remove leading and trailing {x} from {a} and convert the result to uppercase.",
            "Trim {x} from both ends of {a} and change the result to uppercase.",
            "Strip {x} from the start and end of {a} and make the result uppercase."
        ],
        "language": "gle_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].islower()\nprint(answer)\n```",
        "variables": {
            "a": "E le\u2019i fa\u2019aleagaina le fa\u2019ailoilo; sa faia le suiga e fa\u2019aaog\u0101 ai tapoleni uli ua teuteuina i faailoga o le filemu ma le fatu e suia le \"O\" e faitau ai le mata\u2019itusi laitiiti \"e\".",
            "x": " ",
            "y": 5
        },
        "query": [
            "Split {a} by {x} and check if the {y}-th segment is in lowercase.",
            "Divide {a} using {x} and verify if the {y}-th part is in lowercase.",
            "Separate {a} by {x} and determine if the {y}-th section is in lowercase."
        ],
        "language": "smo_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Brazilec utrp\u011bl v\u00e1\u017en\u00e9 poran\u011bn\u00ed hlavy po hav\u00e1rii b\u011bhem Velk\u00e9 ceny Ma\u010farska v roce 2009.",
            "x": "Brazilec",
            "y": "Brazilsk\u00fd jezdec"
        },
        "query": [
            "After replacing {x} with {y} in {a}, verify if the result follows title case rules.",
            "Check if the string {a} becomes title case after replacing {x} with {y}.",
            "Determine if the result is in title case after substituting {x} with {y} in {a}."
        ],
        "language": "ces_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::z].isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Wilayah Turki, itamoeng dano, iduek 783.562 kilometer peutsagoe (300.948 sq mi), na keuh 755.688 kilometer peutsagoe (291.773 sq mi) sapat i Asia barat daya ng\u00f6n 23.764 kilometer peutsagoe (9.174 sq mi) i Eropa.",
            "x": 5,
            "z": 10
        },
        "query": [
            "Check if every {z}-th character from position {x} in {a} is an ASCII character.",
            "Verify if each {z}-th character starting from index {x} in {a} is an ASCII character.",
            "Determine if every {z}-th character from the {x}-th position in {a} is an ASCII character."
        ],
        "language": "ace_Latn"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0c05\u0c28\u0c47\u0c15\t\u0c26\u0c47\u0c36\u0c3e\u0c32\u0c41\t\u0c2a\u0c42\u0c30\u0c4d\u0c24\u0c3f\u0c17\u0c3e\t\u0c06\u0c02\u0c17\u0c4d\u0c32\u0c02\u0c32\u0c4b\t\u0c05\u0c28\u0c30\u0c4d\u0c17\u0c33\u0c02\u0c17\u0c3e\t\u0c2e\u0c3e\u0c1f\u0c4d\u0c32\u0c3e\u0c21\u0c17\u0c32\u0c35\u0c41,\t\u0c07\u0c02\u0c15\u0c3e\t\u0c0e\u0c15\u0c4d\u0c15\u0c41\u0c35\t\u0c2e\u0c4a\u0c24\u0c4d\u0c24\u0c02\u0c32\u0c4b\t\u0c2e\u0c41\u0c16\u0c4d\u0c2f\u0c02\u0c17\u0c3e\t\u0c2f\u0c41\u0c35\u0c24\u0c32\u0c4b.\u0c2e\u0c40\u0c30\u0c41\t\u0c2a\u0c30\u0c3f\u0c2e\u0c3f\u0c24\t\u0c1c\u0c4d\u0c1e\u0c3e\u0c28\u0c3e\u0c28\u0c4d\u0c28\u0c3f\t\u0c06\u0c36\u0c3f\u0c02\u0c1a\u0c35\u0c1a\u0c4d\u0c1a\u0c41\t-",
            "x": 4,
            "y": "\u0c06\u0c36\u0c3f\u0c02\u0c1a\u0c35\u0c1a\u0c4d\u0c1a\u0c41\t-"
        },
        "query": [
            "Convert tabs in {a} to {x} spaces and check if the result ends with {y}.",
            "Replace tabs in {a} with {x} spaces and verify if it concludes with {y}.",
            "Change tabs in {a} to {x} spaces and determine if it finishes with {y}."
        ],
        "language": "tel_Telu"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).find(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0633\u064e\u0645\u062d \u0641\u062a\u062d\u064f \u0627\u0644\u0635\u0645\u0627\u0645\u0627\u062a \u0628\u062a\u062d\u0631\u064a\u0631 \u0636\u063a\u0637\u064d \u0644\u0644\u0646\u0638\u0627\u0645 \u0648\u062a\u062f\u0641\u0651\u0642\u064e \u0627\u0644\u0632\u064a\u062a \u0625\u0644\u0649 \u062e\u0632\u0627\u0646\u064d \u064a\u0645\u0643\u0646 \u0623\u0646 \u064a\u0633\u062a\u0648\u0639\u0628 \u0665\u0665\u0660\u0660\u0660 \u0628\u0631\u0645\u064a\u0644 (\u0662\u066b\u0663 \u0645\u0644\u064a\u0648\u0646 \u062c\u0627\u0644\u0648\u0646).",
            "x": "\u0633\u064e",
            "y": "\u0627\u0644\u0632\u064a\u062a"
        },
        "query": [
            "Remove leading {x} characters from {a} and find the position of {y}.",
            "Strip leading {x} from {a} and locate the index of {y}.",
            "Trim {x} from the start of {a} and determine where {y} is found."
        ],
        "language": "arb_Arab"
    },
    {
        "solution": "```python\nanswer = a.casefold().rjust(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Na maua foi e le ACMA e ui lava ina sa fa\u2019aalia le ata vitio i luga o le Initaneti, e le i solia e Tuagane Matua (Big Brother) le tulafono o anotusi fa\u2019asaina ona e le i teuina i luga o le \u2018upega tafa\u2019ilagi a Tuagane Matua.",
            "x": 100,
            "y": " "
        },
        "query": [
            "Convert {a} to lowercase and right-align it in a field of {x} characters, using {y} to fill the space.",
            "Transform {a} to lowercase and align it to the right within a width of {x} characters, padding with {y}.",
            "Change {a} to lowercase and right-justify it in a space of {x} characters, filling with {y}."
        ],
        "language": "smo_Latn"
    },
    {
        "solution": "```python\nanswer = a.swapcase().isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Bio ti maboko ngb\u00eane fossile ti ngu \u00fbse wara ota ti kutu a fa gbian ngo ti maboko so ayeke fade tene ti tambula."
        },
        "query": [
            "Swap the case of each character in {a} and check if all characters are ASCII.",
            "Change the case of each character in {a} and verify if all characters are ASCII.",
            "Toggle the case of each character in {a} and determine if all characters are ASCII."
        ],
        "language": "sag_Latn"
    },
    {
        "solution": "```python\nanswer = a[y:].startswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u53ea\u6709\u52d5\u7269\u5148\u81f3\u6709\u5927\u8166\uff08\u4f46\u4e26\u5514\u4fc2\u6240\u6709\u52d5\u7269\u90fd\u6709\uff1b\u8b6c\u5982\u6c34\u6bcd\u5c31\u5187\u5927\u8166\uff09\u3002",
            "x": "\u5927\u8166",
            "y": 7
        },
        "query": [
            "Check if the substring of {a} starting from position {y} begins with {x}.",
            "Determine if {a} sliced from index {y} starts with {x}.",
            "Verify if the portion of {a} from {y} onwards starts with {x}."
        ],
        "language": "yue_Hant"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('ascii', 'ignore')\nprint(answer)\n```",
        "variables": {
            "a": "\u0c17\u0c41\u0c30\u0c4d\u0c24\u0c41 \u0c2d\u0c4c\u0c24\u0c3f\u0c15\u0c02\u0c17\u0c3e \u0c26\u0c46\u0c2c\u0c4d\u0c2c\u0c24\u0c3f\u0c28\u0c32\u0c47\u0c26\u0c41; \u0c1a\u0c3f\u0c28\u0c4d\u0c28 \"\u0c07\" \u0c1a\u0c26\u0c35\u0c21\u0c3e\u0c28\u0c3f\u0c15\u0c3f \"\u0c13\" \u0c28\u0c41 \u0c2e\u0c3e\u0c30\u0c4d\u0c1a\u0c21\u0c3e\u0c28\u0c3f\u0c15\u0c3f \u0c36\u0c3e\u0c02\u0c24\u0c3f \u0c2e\u0c30\u0c3f\u0c2f\u0c41 \u0c39\u0c43\u0c26\u0c2f \u0c38\u0c02\u0c15\u0c47\u0c24\u0c3e\u0c32\u0c24\u0c4b \u0c05\u0c32\u0c02\u0c15\u0c30\u0c3f\u0c02\u0c1a\u0c2c\u0c21\u0c3f\u0c28 \u0c28\u0c32\u0c4d\u0c32 \u0c1f\u0c3e\u0c30\u0c4d\u0c2a\u0c3e\u0c32\u0c3f\u0c28\u0c4d\u200c\u0c32\u0c28\u0c41 \u0c09\u0c2a\u0c2f\u0c4b\u0c17\u0c3f\u0c02\u0c1a\u0c3f \u0c08 \u0c2e\u0c3e\u0c30\u0c4d\u0c2a\u0c41 \u0c1c\u0c30\u0c3f\u0c17\u0c3f\u0c02\u0c26\u0c3f."
        },
        "query": [
            "Encode {a} in UTF-8 and then decode it in ASCII, ignoring errors.",
            "Convert {a} to UTF-8 encoding and then decode it to ASCII, ignoring any errors.",
            "Transform {a} using UTF-8 encoding and subsequently decode it to ASCII, while ignoring errors."
        ],
        "language": "tel_Telu"
    },
    {
        "solution": "```python\nanswer = a.swapcase().rjust(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Ubwubatsi bwuzuzanya cyane n\u2019ibindi bisata birimo igenamigambi ry\u2019imijyi, ubwubatsi bw\u2019ibikorwaremezo, ubu bw\u2019imitako, gutaka imbere mu nzu ndetse no gutunganya ubusitani.",
            "x": 150,
            "y": "*"
        },
        "query": [
            "Flip the case of each character in {a} and right justify the result within {x} characters, using {y} as the fill character.",
            "Change the case of each letter in {a} and align the result to the right within {x} spaces, filling with {y}.",
            "Convert each character in {a} to its opposite case and pad the left side with {y} until the total length is {x}."
        ],
        "language": "kin_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().split(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u041f\u043e\u0440\u0430\u043d\u0435\u0448\u0435\u043d \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u0440\u0435\u0447\u0435 \u0434\u0435\u043a\u0430 \u201e\u0442\u043e\u0458 \u043a\u043e\u0440\u0438\u0441\u0442\u0435\u043b \u0441\u043b\u0435\u043d\u0433 \u043d\u0430 \u0447\u0430\u0441, \u043f\u0440\u0435\u0434\u0430\u0432\u0430\u043b \u0432\u0435\u0448\u0442\u0438\u043d\u0438 \u0437\u0430 \u0441\u043e\u0441\u0442\u0430\u043d\u0443\u0432\u0430\u045a\u0435 \u043f\u0440\u0435\u043a\u0443 \u0431\u0435\u043b\u0435\u0448\u043a\u0438 \u0438 \u0441\u0435 \u043e\u0434\u043d\u0435\u0441\u0443\u0432\u0430\u043b \u043a\u0430\u043a\u043e \u043f\u0440\u0438\u0458\u0430\u0442\u0435\u043b \u0441\u043e \u0443\u0447\u0435\u043d\u0438\u0446\u0438\u0442\u0435\u201c.",
            "x": " "
        },
        "query": [
            "Remove leading and trailing spaces from {a} and then split it by {x}.",
            "Trim the spaces from the start and end of {a} and then divide it using {x}.",
            "Strip spaces from both ends of {a} and then use {x} to split it."
        ],
        "language": "mkd_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).endswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u09b2\u0995\u099c\u09c7\u09ae\u09cd\u09ac\u09b0\u09cd\u0997\u0995\u09c0",
            "x": 20,
            "y": "\u09b6",
            "z": "\u09ab\u0982\u0996\u09bf\u0964"
        },
        "query": [
            "Check if the left-justified version of {a} with length {x} and padding {y} ends with {z}.",
            "Determine if the left-padded string of {a} to length {x} using {y} ends with {z}.",
            "Verify if the string {a}, left-justified to {x} characters with {y} padding, ends with {z}."
        ],
        "language": "mni_Beng"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).find(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0d0e\u0d32\u0d4d\u0d32\u0d3e\u0d35\u0d7c\u0d37\u0d35\u0d41\u0d02 \u0d12\u0d15\u0d4d\u0d1f\u0d4b\u0d2c\u0d7c \u0d05\u0d1f\u0d41\u0d2a\u0d4d\u0d2a\u0d3f\u0d1a\u0d4d\u0d1a\u0d4d \u0d0f\u0d24\u0d3e\u0d23\u0d4d\u0d1f\u0d4d 1.5 \u0d26\u0d36\u0d32\u0d15\u0d4d\u0d37\u0d02 \u0d38\u0d38\u0d4d\u0d2f\u0d2d\u0d4b\u0d1c\u0d3f\u0d15\u0d7e \u0d2e\u0d34\u0d15\u0d4d\u0d15\u0d3e\u0d2f\u0d3f \u0d35\u0d1f\u0d15\u0d4d\u0d15\u0d7b \u0d2a\u0d7c\u0d35\u0d4d\u0d35\u0d24\u0d19\u0d4d\u0d19\u0d33\u0d3f\u0d7d \u0d28\u0d3f\u0d28\u0d4d\u0d28\u0d41\u0d02 \u0d2e\u0d3e\u0d30\u0d3e \u0d28\u0d26\u0d3f \u0d15\u0d1f\u0d28\u0d4d\u0d28\u0d4d \u0d24\u0d46\u0d15\u0d4d\u0d15\u0d7b \u0d38\u0d2e\u0d24\u0d32\u0d19\u0d4d\u0d19\u0d33\u0d3f\u0d32\u0d47\u0d15\u0d4d\u0d15\u0d4d \u0d2f\u0d3e\u0d24\u0d4d\u0d30 \u0d1a\u0d46\u0d2f\u0d4d\u0d2f\u0d41\u0d28\u0d4d\u0d28\u0d41.",
            "x": 200,
            "y": " ",
            "z": "\u0d2e\u0d3e\u0d30\u0d3e"
        },
        "query": [
            "Find the position of {z} in the centered version of {a} with length {x} and padding {y}.",
            "Determine the index of {z} in the centered string {a} with a total length of {x} and padding character {y}.",
            "Locate the position of {z} within the centered string {a}, which has a length of {x} and is padded with {y}."
        ],
        "language": "mal_Mlym"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('utf-8').upper()\nprint(answer)\n```",
        "variables": {
            "a": "Imwe muri porogaramu zizwi cyane muri iki cyiciro ni Google Translate, ifasha gukora ubusemuzi utari kuri interineti nyuma yo kumanura amakuru y\u2019ururimi ushaka."
        },
        "query": [
            "Encode {a} to UTF-8, decode it back, and convert the result to uppercase.",
            "Convert {a} to UTF-8 encoding, decode it, and change it to uppercase.",
            "Transform {a} by encoding to UTF-8, decoding it, and then converting to uppercase."
        ],
        "language": "kin_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).title().split(z)\nprint(answer)\n```",
        "variables": {
            "a": "Inesfl\u0103sen n sofiya war uli d \u01ddnefl\u0103sen w\u01dd ha\u1e0den, antan tagen haret n iwe\u1e93l\u0103n wi n taflest war ugda d w\u01ddn ddunet wiya\u1e0d, ahenney-nsen \u01dd t\u0103meddurt ta\u0263 war tuli, sufen ab\u0103raqa n teflest wa yula\u0263en., antani jm\u0103yen t\u0103mudri ta tahussayet war i\u01e7a d-es bahu mi\u0263 a-wa yecca\u1e0den.",
            "x": "war",
            "y": "with",
            "z": ","
        },
        "query": [
            "Replace {x} with {y} in {a}, convert the result to title case, and then split it by {z}.",
            "Substitute {x} with {y} in {a}, change the result to title case, and split it by {z}.",
            "Swap {x} with {y} in {a}, transform the result to title case, and then divide it by {z}."
        ],
        "language": "taq_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u092f\u0947 \u0939\u094b\u091f\u0932 \u0930\u0939\u093f\u0938 \u091c\u093f\u0939\u093e\u0902 \u0905\u092e\u0940\u0930 \u0905\u0909 \u0926\u093f\u0928 \u0915\u0947 \u092a\u094d\u0930\u0938\u093f\u0926\u094d\u0927 \u092e\u0928\u0916\u0947 \u092e\u0928 \u0920\u0939\u0930\u0924 \u0930\u0939\u093f\u0938, \u0905\u0909 \u0905\u0915\u094d\u0938\u0930 \u092c\u0922\u093c\u093f\u092f\u093e \u092d\u094b\u091c\u0928 \u0905\u0909 \u0928\u093e\u0907\u091f\u0932\u093e\u0907\u092b\u093c \u0939\u094b\u0924 \u0930\u0939\u093f\u0938\u0964",
            "x": "\u0905",
            "y": "1"
        },
        "query": [
            "Check if the string {a} becomes entirely digits after replacing {x} with {y}.",
            "Verify if replacing {x} with {y} in the string {a} results in a string of only digits.",
            "Determine if the string {a} is composed solely of digits after substituting {x} with {y}."
        ],
        "language": "hne_Deva"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).find(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0907\u0902\u0938\u093e\u0928\u0940 \u091c\u093e\u0924\u0940, \u097f\u093f\u092f\u0928\u093f \u091c\u094b \u0926\u093f\u092e\u093e\u095a\u0941 \u092a\u095d\u0923\u0941 \u0935\u093e\u0930\u0940 \u0905\u097c\u0941 \u097e\u0940\u0902\u0939\u0941\u0902 \u0924\u093e\u0908\u0902 \u091c\u0940 \u0938\u092d\u093f\u0928\u0940 \u0916\u093e\u0902 \u0938\u092e\u0941\u091d \u0935\u093e\u0930\u0940 \u091c\u093e\u0924\u0940 \u0906\u0939\u0947\u0964",
            "x": "\u0964",
            "y": "\u0926\u093f\u092e\u093e\u095a\u0941"
        },
        "query": [
            "Find the position of {y} in {a} after removing trailing characters in {x}.",
            "Locate the index of {y} in {a} after trimming trailing {x}.",
            "Determine the position of {y} in {a} once trailing {x} characters are removed."
        ],
        "language": "snd_Deva"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u0628\u064a\u0623\u062e\u0630 \u0627\u0644\u062c\u0646\u0631\u0627\u0644 \u062c\u064a\u0645\u0633 \u0623\u0648\u064a\u0646\u062c 700 \u0645\u0646 \u0639\u0646\u0627\u0635\u0631 \u0627\u0644\u0645\u0644\u064a\u0634\u064a\u0629 \u0639\u0628\u0631 \u0627\u0644\u0646\u0647\u0631 \u0641\u0648\u0642 \u0639\u0628\u0627\u0631\u0629 \u062a\u0631\u064a\u0646\u062a\u0648\u0646\u060c \u0648\u064a\u0633\u062a\u0648\u0644\u064a \u0639\u0644\u0649 \u0627\u0644\u062c\u0633\u0631 \u0641\u0648\u0642 \u062e\u0644\u064a\u062c \u0623\u0633\u0648\u0646\u0628\u064a\u0646\u0643\u060c \u0648\u0645\u0627 \u0634\u064a\u062e\u0644\u064a\u0634 \u0623\u064a \u0642\u0648\u0627\u062a \u0645\u0639\u0627\u062f\u064a\u0629 \u062a\u0647\u0631\u0628.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Check if the {y}-th substring of {a} split by {x} is alphanumeric.",
            "Determine if the {y}-th segment of {a} when divided by {x} contains only alphanumeric characters.",
            "Is the {y}-th part of {a} obtained by splitting with {x} alphanumeric?"
        ],
        "language": "acq_Arab"
    },
    {
        "solution": "```python\nanswer = a.split(x).count(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0628\u06d5\u06b5\u0627\u0645 \u0644\u06d5 \u0626\u06ce\u0633\u062a\u0627\u062f\u0627 \u0647\u0648\u0646\u06d5\u0631\u0645\u06d5\u0646\u062f\u06cc \u0648\u06ce\u0646\u06d5\u06cc \u0633\u06d5\u0631 \u062f\u06cc\u0648\u0627\u0631 \u0648 \u0628\u06c6\u0646\u06d5\u06cc \u0648\u06ce\u0646\u06d5\u06cc \u0633\u06d5\u0631 \u062f\u06cc\u0648\u0627\u0631\u06cc \u0695\u06ce\u06af\u0647\u200c\u067e\u06ce\u062f\u0631\u0627\u0648 \u0648 \u062f\u06cc\u0648\u0627\u0631\u06cc \"\u06cc\u0627\u0633\u0627\u06cc\u06cc\" \u0647\u06d5\u0646. \u0626\u06d5\u0645 \u062c\u06c6\u0631\u06d5 \u0648\u06ce\u0646\u0627\u0646\u06d5 \u0632\u06c6\u0631\u062c\u0627\u0631 \u0626\u0627\u0645\u0627\u0698\u06d5\u0646 \u0628\u06d5 \u06a9\u0627\u0631\u06ce\u06a9\u06cc \u0647\u0648\u0646\u06d5\u0631\u06cc \u0646\u06d5\u06a9 \u0646\u0648\u0648\u0633\u06cc\u0646\u06ce\u06a9 \u06a9\u06d5 \u0646\u0627\u062a\u0648\u0627\u0646\u062f\u0631\u06ce \u0628\u062e\u0648\u06ce\u0646\u062f\u0631\u06ce\u062a\u06d5\u0648\u06d5.",
            "x": " ",
            "y": "\u062f\u06cc\u0648\u0627\u0631"
        },
        "query": [
            "Split {a} by {x} and count the occurrences of {y} in the resulting list.",
            "Divide {a} using {x} and find how many times {y} appears in the list.",
            "Separate {a} with {x} and determine the number of times {y} is present in the resulting array."
        ],
        "language": "ckb_Arab"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u062a\u0635\u062f\u064a\u0642 \u0627\u0644\u0644\u062c\u0646\u0629 \u0627\u0644\u0623\u0648\u0644\u0645\u0628\u064a\u0629 \u0627\u0644\u062f\u0648\u0644\u064a\u0629 \u0628\u0634\u0643\u0644 \u0643\u0627\u0645\u0644 \u0639\u0644\u0649 \u0627\u0644\u062a\u0635\u0648\u064a\u062a \u0644\u0633\u0647 \u0644\u0627\u0632\u0645 \u0641\u064a \u0627\u062c\u062a\u0645\u0627\u0639\u0647\u0627 \u0641\u064a \u0634\u0647\u0631 \u0623\u0643\u062a\u0648\u0628\u0631 \u0641\u064a \u0645\u062f\u064a\u0646\u0629 \u0643\u0648\u0628\u0646\u0647\u0627\u062c\u0646.",
            "x": 100,
            "y": " "
        },
        "query": [
            "Center {a} within a string of {x} characters using {y} for padding, then check if the result is printable.",
            "Pad {a} to a total width of {x} characters with {y} and verify if the resulting string is printable.",
            "Align {a} in the center of a string of length {x} using {y} as the fill character, then determine if the final string is printable."
        ],
        "language": "arz_Arab"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u0939\u0947 \u0935\u093e\u0926\u0933 \u091c\u0947 \u092e\u093f\u092f\u093e\u092e\u0940, \u092b\u094d\u0932\u094b\u0930\u093f\u0921\u093e\u092a\u093e\u0938\u0942\u0928 \u0905\u0902\u0926\u093e\u091c\u0947 3,000 \u092e\u0948\u0932 \u0905\u0902\u0924\u0930\u093e\u0935\u0930 \u0938\u094d\u0925\u093f\u0924 \u0906\u0939\u0947 \u0924\u094d\u092f\u093e\u092e\u0927\u094d\u092f\u0947 40 \u092e\u0948\u0932 \u092a\u094d\u0930\u0924\u0940 \u0924\u093e\u0938 (64 \u0915\u093f\u092e\u0940 \u092a\u094d\u0930\u0924\u0940 \u0924\u093e\u0938) \u0915\u092e\u093e\u0932 \u0938\u0924\u0924 \u0935\u093e\u0930\u093e \u0906\u0939\u0947.",
            "x": "\u0935\u093e\u0926\u0933",
            "y": "\u0924\u0941\u092b\u093e\u0928"
        },
        "query": [
            "Replace {x} with {y} in {a}, then check if the result consists only of numeric characters.",
            "Substitute {x} with {y} in {a} and verify if the resulting string is numeric.",
            "Change {x} to {y} in {a} and determine if the final string contains only numbers."
        ],
        "language": "mar_Deva"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).startswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0c2e\u0c48\u0c15\u0c4d\u0c30\u0c4b\u0c38\u0c4d\u0c15\u0c4b\u0c2a\u0c4d \u0c32\u0c4b \u0c1c\u0c40\u0c35\u0c3f\u0c02\u0c1a\u0c3f \u0c09\u0c28\u0c4d\u0c28\u0c35\u0c3e\u0c1f\u0c3f\u0c28\u0c3f \u0c2e\u0c40\u0c30\u0c41 \u0c1a\u0c42\u0c38\u0c4d\u0c24\u0c47 ,\u0c05\u0c35\u0c3f \u0c1a\u0c3f\u0c28\u0c4d\u0c28 \u0c1a\u0c24\u0c41\u0c30\u0c38\u0c4d\u0c30\u0c3e\u0c32\u0c41 \u0c32\u0c47\u0c26\u0c3e \u0c2c\u0c02\u0c24\u0c41\u0c32\u0c24\u0c4b \u0c24\u0c2f\u0c3e\u0c30\u0c41 \u0c1a\u0c47\u0c38\u0c3f\u0c28\u0c1f\u0c4d\u0c32\u0c41 \u0c2e\u0c40\u0c15\u0c41 \u0c15\u0c28\u0c3f\u0c2a\u0c3f\u0c38\u0c4d\u0c24\u0c3e\u0c2f\u0c3f.",
            "x": 4,
            "y": "\u0c2e\u0c48\u0c15\u0c4d\u0c30\u0c4b\u0c38\u0c4d\u0c15\u0c4b\u0c2a\u0c4d"
        },
        "query": [
            "Expand tabs in {a} to {x} spaces, then check if the result starts with {y}.",
            "Convert tabs in {a} to {x} spaces and verify if the resulting string begins with {y}.",
            "Replace tabs in {a} with {x} spaces and determine if the modified string starts with {y}."
        ],
        "language": "tel_Telu"
    },
    {
        "solution": "```python\nanswer = a.strip(x).isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "18\u0c35 \u0c36\u0c24\u0c3e\u0c2c\u0c4d\u0c26\u0c02\u0c32\u0c4b \u0c25\u0c3e\u0c2f\u0c4d\u200b\u0c32\u0c41 \u0c15\u0c02\u0c2c\u0c4b\u0c21\u0c3f\u0c2f\u0c3e\u0c2a\u0c48 \u0c05\u0c28\u0c47\u0c15\u0c38\u0c3e\u0c30\u0c4d\u0c32\u0c41 \u0c26\u0c3e\u0c21\u0c3f \u0c1a\u0c47\u0c36\u0c3e\u0c30\u0c41 \u0c2e\u0c30\u0c3f\u0c2f\u0c41 1772\u0c32\u0c4b \u0c35\u0c3e\u0c30\u0c41 \u0c28\u0c3e\u0c2e\u0c4d \u0c2b\u0c46\u0c28\u0c4d\u200c\u0c28\u0c41 \u0c27\u0c4d\u0c35\u0c02\u0c38\u0c02 \u0c1a\u0c47\u0c36\u0c3e\u0c30\u0c41.",
            "x": "18\u0c35 \u0c36\u0c24\u0c3e\u0c2c\u0c4d\u0c26\u0c02\u0c32\u0c4b"
        },
        "query": [
            "Remove leading and trailing characters in {x} from {a}, then check if the result is a valid identifier.",
            "Trim characters in {x} from both ends of {a} and verify if the outcome is a valid identifier.",
            "Strip characters in {x} from the start and end of {a}, then determine if the resulting string is a valid identifier."
        ],
        "language": "tel_Telu"
    },
    {
        "solution": "```python\nanswer = a.upper().startswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "Halaber, copyright-eskubideak urratzea ere leporatu diote, baina ez da kargurik aurkeztu.",
            "x": "HALABER"
        },
        "query": [
            "Check if the uppercase version of {a} starts with {x}.",
            "Determine if {a} in uppercase begins with {x}.",
            "Verify if the uppercase form of {a} starts with {x}."
        ],
        "language": "eus_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).count(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u092e\u093e-\u092e\u093e \u0928\u093e\u0902\u0917\u094c \u092c\u093f\u0928\u093f \u0917\u0941\u0926\u093f-\u0916\u093f\u0925\u093e \u092e\u093f\u0928\u0925\u093f\u0928\u094b \u0925\u093e\u0916\u093e\u092f \u0928\u094b\u0902 \u091c\u0947\u0930\u093e\u0935 \u092b\u0930\u093e\u092f\u0939\u0948\u0917\u094b\u0928 \u092c\u0947 \u092b\u0938\u0902\u0925\u093e\u0928\u091c\u094b\u0902 \u0932\u094b\u0917\u094b\u0938\u0947 \u092c\u0947 \u0939\u093e\u0926\u094b\u0930\u0928\u093f \u0907\u092e\u093f\u0917\u094d\u0930\u0947\u0936\u0928 \u092c\u093f\u092b\u093e\u0928\u093e\u0935 \u0938\u094b\u0902\u0928\u093e\u0928\u0948 \u0932\u093e\u0964",
            "x": "\u092e\u093e",
            "y": "\u092c\u0947"
        },
        "query": [
            "Count the occurrences of {y} in {a} after stripping characters in {x} from both ends.",
            "After removing characters in {x} from both ends of {a}, count how many times {y} appears.",
            "How many times does {y} occur in {a} after trimming characters in {x} from the start and end?"
        ],
        "language": "brx_Deva"
    },
    {
        "solution": "```python\nanswer = a.lower().endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "Jaqix qunu\u00f1anakampiw qhispillunak t'unsu\u00f1 munapx\u00e4na, ukhamarus qhispillunakax jan t'unjtkir\u00efnwa.",
            "x": "wa."
        },
        "query": [
            "Determine if the lowercase version of {a} ends with {x}.",
            "Check if {a} in lowercase ends with {x}.",
            "Is the lowercase form of {a} ending with {x}?"
        ],
        "language": "ayr_Latn"
    },
    {
        "solution": "```python\nanswer = a.swapcase().zfill(x)\nprint(answer)\n```",
        "variables": {
            "a": "De\u011fi\u015fik yap\u0131lar\u0131n de\u011fi\u015fik \u00f6zellikleri vard\u0131r, de\u011fi\u015fik dalga boylar\u0131na duyarl\u0131d\u0131rlar ve de\u011fi\u015fik zeka derecelerine sahiptirler. Ayr\u0131ca giren bilgiyi anlaml\u0131 hale getirmek amac\u0131yla de\u011fi\u015fik i\u015flemler uygularlar ve en iyi \u015fekilde \u00e7al\u0131\u015fmak i\u00e7in farkl\u0131 say\u0131lar kullan\u0131rlar.",
            "x": 200
        },
        "query": [
            "Swap the case of {a} and then pad it with zeros to make its length {x}.",
            "Change the case of {a} and then add leading zeros until its length is {x}.",
            "Convert the case of {a} and pad it with zeros so that its total length becomes {x}."
        ],
        "language": "tur_Latn"
    },
    {
        "solution": "```python\nanswer = a.capitalize().center(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Las autoridades hicieron pocas declaraciones oficiales aparte de confirmar el arresto de hoy.",
            "x": 100,
            "y": "*"
        },
        "query": [
            "Capitalize {a} and then center it within {x} characters, using {y} as the padding character.",
            "Make the first letter of {a} uppercase and center it in a field of {x} characters, filling with {y}.",
            "Convert {a} to have an initial capital letter and center it in a space of {x} characters, padded with {y}."
        ],
        "language": "spa_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].center(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "\u091c\u093f\u0935 \u091c\u0941\u0928\u093e\u0930\u092b\u094b\u0930\u093e \u0917\u094b\u092c\u093e\u0902 \u091c\u093f\u092c\u0916\u094d\u0930\u093f\u092b\u094b\u0930 \u0932\u094b\u0917\u094b \u0928\u093e\u0902\u091c\u093e\u092c\u0928\u093e\u0928\u0948 \u092c\u093e\u0928\u093e\u092f\u091c\u093e\u0928\u093e\u092f\u0964 \u092c\u093f\u0938\u094b\u0930\u094b \u0913\u0930\u0948 \u092c\u093e\u092f\u0926\u093f \u092e\u0941\u0935\u093e\u092b\u094b\u0930 \u091c\u093e\u092f\u094b \u091c\u093e\u092f \u092c\u093f\u0938\u094b\u0930\u0928\u093f \u0938\u093f\u0919\u093e\u0935 \u0939\u091c\u092e \u0916\u093e\u0932\u093e\u092e\u094b\u0964 \u092c\u093e\u0902\u0938\u093f\u0928 \u091c\u093f\u0935 \u091c\u0941\u0928\u093e\u0930\u092b\u094b\u0930\u093e\u0928\u094b \u0925\u093e\u092c\u093e\u092f\u0928\u094b \u090f\u092c\u093e \u092c\u093f\u0930\u0928\u094b \u0939\u093e\u092f\u094b\u0964",
            "x": 4,
            "y": 14,
            "z": 20,
            "w": "\u0928"
        },
        "query": [
            "Center the substring of {a} from {x} to {y} within a width of {z} using {w} as padding.",
            "Pad the substring of {a} from index {x} to {y} to a total width of {z} with {w}.",
            "Center the slice of {a} from {x} to {y} in a field of width {z} using {w} as the fill character."
        ],
        "language": "brx_Deva"
    },
    {
        "solution": "```python\nanswer = a.split(x, y)[z]\nprint(answer)\n```",
        "variables": {
            "a": "\u0633\u0645\u062a \u0623\u0644\u0645\u0627\u0646\u064a\u0627 \u0627\u0644\u0647\u062c\u0648\u0645 \u0628\u0627\u0633\u0645 \u201cOperation Sealion\u201d. \u062e\u0633\u0631\u0648 \u0623\u063a\u0644\u0628 \u0627\u0644\u0623\u0633\u0644\u062d\u0629 \u0627\u0644\u062a\u0642\u064a\u0644\u0629 \u0648\u0627\u0644\u0625\u0645\u062f\u0627\u062f\u0627\u062a \u0627\u0644\u0644\u064a \u0643\u0627\u0646\u062a \u0645\u0639 \u0627\u0644\u062c\u064a\u0634 \u0627\u0644\u0628\u0631\u064a\u0637\u0627\u0646\u064a \u0644\u0645\u0627 \u0637\u0644\u0639\u0648\u0647 \u0645\u0646 \u062f\u0648\u0646\u0643\u064a\u0631\u0643 \u060c \u0644\u0647\u064a\u0643 \u0643\u0627\u0646 \u0627\u0644\u062c\u064a\u0634 \u0636\u0639\u064a\u0641 \u0646\u0648\u0639\u0627 \u0645\u0627.",
            "x": " ",
            "y": 10,
            "z": 3
        },
        "query": [
            "After splitting {a} at {x} into at most {y} parts, what is the {z+1}-th substring?",
            "What is the {z+1}-th part after splitting {a} at {x} into a maximum of {y} segments?",
            "If you split {a} at {x} into no more than {y} sections, which part is the {z+1}-th?"
        ],
        "language": "apc_Arab_sout3123"
    },
    {
        "solution": "```python\nanswer = a.zfill(x).isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u06cf\u064a\u0631\u062c\u064a\u0646 \u0647\u0627\u06bd \u0762\u06a4\u0648\u0628\u0644\u0648 '\u0628\u06a0\u200c\u06a9 \u06bd\u06a0 \u0762\u064a\u062a' \u062f\u064a \u0646\u0648\u0631\u062b\u064a\u0631\u0646 \u0631\u0648\u06a9\u060c \u06a9\u0648\u0646 \u06a4\u0631\u0648\u0633\u0647\u0627\u0621\u0646 \u0645\u0646\u062c\u0645\u064a\u0646 \u0627\u0633\u064a\u062a.",
            "x": 100
        },
        "query": [
            "Pad {a} with leading zeros to make its length {x} and check if the result is composed entirely of digits.",
            "Add leading zeros to {a} until its length is {x} and verify if the resulting string contains only digits.",
            "Ensure {a} has a length of {x} by padding with zeros at the start and determine if the final string is all digits."
        ],
        "language": "ace_Arab"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('ascii', errors='ignore')\nprint(answer)\n```",
        "variables": {
            "a": "\u06a4\u064a\u06a9\u0649 \u062c\u0648\u0646\u064a\u0648\u0631 \u0762\u06a4\u0686\u062a \u0627\u0648\u0647 \u0644\u0647\u0648\u0647 \u0762\u0631\u0627\u0646\u200c\u062f \u06a4\u0631\u064a \u0647\u0648\u0646\u0762\u0627\u0631\u064a\u0627 \u06f2\u06f0\u06f0\u06f9."
        },
        "query": [
            "Encode {a} to UTF-8 and then decode it to ASCII, ignoring characters that can't be decoded.",
            "Convert {a} to UTF-8 encoding and then decode it to ASCII, skipping any characters that can't be decoded.",
            "Transform {a} into UTF-8 and then decode it to ASCII, omitting characters that are not decodable."
        ],
        "language": "ace_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:y].zfill(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0905\u0928\u0947\u0915\u093e\u0903 \u091c\u0928\u093e\u0903 \u0939\u093f\u0928\u094d\u0926\u0940 \u092d\u093e\u0937\u092f\u093e \u0935\u094d\u092f\u093e\u0935\u0939\u093e\u0930\u0902 \u0915\u0941\u0930\u094d\u0935\u0928\u094d\u0924\u093f, \u090f\u0924\u0938\u094d\u092e\u093f\u0928\u094d \u092a\u094d\u0930\u0924\u093f \u092a\u0943\u0925\u0915\u094d-\u092a\u0943\u0925\u0915\u094d \u0905\u0928\u0941\u092e\u093e\u0928\u0903 \u0905\u0938\u094d\u0924\u093f \u0964 \u0905\u0938\u094d\u092e\u093f\u0928\u094d \u0935\u093f\u0936\u094d\u0935\u0947 \u0926\u094d\u0935\u093f\u0924\u0940\u092f \u0905\u092a\u093f \u091a \u091a\u0924\u094d\u0935\u093e\u0930\u0903 \u0938\u0930\u094d\u0935\u093e\u0927\u093f\u0915 \u0935\u094d\u092f\u0935\u0939\u093e\u0930 \u092d\u093e\u0937\u093e\u0923\u093e\u0902 \u092e\u0927\u094d\u092f\u0947 \u0938\u094d\u0925\u093f\u0924\u0903 \u0907\u0924\u093f \u0905\u0928\u0941\u092e\u093e\u0928\u094d\u092f\u0924\u0947 \u0964",
            "x": 10,
            "y": 20,
            "z": 15
        },
        "query": [
            "Zero-fill the substring of {a} from index {x} to {y} to length {z}.",
            "Pad the substring of {a} from index {x} to {y} with zeros to make its length {z}.",
            "Fill the substring of {a} from index {x} to {y} with leading zeros to reach length {z}."
        ],
        "language": "san_Deva"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).rstrip(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0645\u0633\u0627\u062d\u062a \u062a\u0631\u06a9\u06cc\u0647",
            "x": 50,
            "y": " ",
            "z": " "
        },
        "query": [
            "Center {a} in a string of length {x} using {y} as padding, then remove trailing {z}.",
            "Pad {a} to a total length of {x} with {y} and strip trailing {z}.",
            "Align {a} centrally in a string of length {x} with {y} padding, then trim trailing {z}."
        ],
        "language": "pes_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:y].isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Leluokuo da\u013ca Australej\u0101 da\u012bmam\u016bs bumerangu pat\u012bseib\u0101 naatsagr\u012b\u017e. \u012asuociejim vyslobuok ir naraudzeit sv\u012bst viej\u0101.",
            "x": 10,
            "y": 15
        },
        "query": [
            "Check if the substring from {x} to {y} in {a} contains only alphabetic characters.",
            "Verify if the segment from {x} to {y} in {a} is composed solely of letters.",
            "Determine if the portion from {x} to {y} in {a} consists exclusively of alphabetic characters."
        ],
        "language": "ltg_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::z].endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0414\u044d\u0432\u0438\u0434 \u0425\u0435\u0434\u043b\u0438\u043d \u0440\u0437\u0432\u0435\u0434\u043a\u0435 \u0434\u0435\u043d \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0439\u044b\u043c \u043f\u043e\u0433\u044b\u043c\u044b\u0436\u043e \u041f\u0430\u043a\u0438\u0441\u0442\u0430\u043d\u044b\u0441\u0435 \"\u041b\u0430\u0448\u043a\u0430\u0440-\u0435-\u0422\u0430\u0439\u0431\u0430\" \u0433\u0440\u0443\u043f\u043f\u0438\u0440\u043e\u0432\u043a\u043e \u0433\u044b\u0447 10 \u0431\u043e\u0435\u0432\u0438\u043a\u043b\u0430\u043d \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439\u044b\u043c \u044d\u0440\u0442\u0430\u0440\u0430\u0448 \u043f\u043e\u043b\u0448\u0435\u043d\u044b\u0442.",
            "x": 10,
            "y": "\u043f\u043e\u043b\u0448\u0435\u043d\u044b\u0442.",
            "z": 3
        },
        "query": [
            "Verify if the substring of {a} starting from position {x} with steps of {z} ends with {y}.",
            "Check if the substring of {a} beginning at index {x} with a step of {z} ends with {y}.",
            "Determine if the slice of {a} starting at index {x} and stepping by {z} ends with {y}."
        ],
        "language": "mhr_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.capitalize().find(x)\nprint(answer)\n```",
        "variables": {
            "a": "Tuan Reid kawa manyupir mubil A1GP Selandia Baru-nya, Black Beauty wan kacapatan 160km/jam sabanyak tujuh kali.",
            "x": "A1GP"
        },
        "query": [
            "Find the position of {x} in {a} after capitalizing the first character.",
            "After capitalizing the first letter of {a}, find the index of {x}.",
            "Locate the position of {x} in {a} once the first character is capitalized."
        ],
        "language": "bjn_Latn"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u0639\u0645 \u064a\u062d\u0643\u0648\u0627 \u0623\u0646\u0647 \u0647\u064a \u0627\u0644\u0645\u0631\u0629 \u0627\u0644\u062e\u0627\u0645\u0633\u0629 \u0641\u064a \u0627\u0644\u062a\u0627\u0631\u064a\u062e \u0627\u0644\u0644\u064a \u0627\u0646\u062a\u0628\u0647 \u0641\u064a\u0647\u0627 \u0627\u0644\u0646\u0627\u0633 \u0623\u0646\u0647 \u0645\u0627\u062f\u0629 \u0645\u0631\u064a\u062e\u064a\u0629 \u0645\u0624\u0643\u062f\u0629 \u0643\u064a\u0645\u064a\u0627\u0626\u064a\u064b\u0627 \u062a\u0633\u0642\u0637 \u0639\u0644\u0649 \u0627\u0644\u0623\u0631\u0636.",
            "x": 100,
            "y": " "
        },
        "query": [
            "Check if the centered version of {a} with width {x} and fill character {y} is alphanumeric.",
            "Determine if the string {a}, when centered to width {x} using {y} as the fill character, is alphanumeric.",
            "Is the string {a}, centered to a width of {x} with {y} as the fill character, alphanumeric?"
        ],
        "language": "apc_Arab_sout3123"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode(x).isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u2d5b\u2d49\u2d33\u2d30\u2d4f \u2d4f \u2d5c\u2d4f\u2d3c\u2d53\u2d4d\u2d49\u2d4f \u2d49\u2d4f\u2d63\u2d63\u2d30\u2d4f \u2d33 \u2d61\u2d30\u2d4f\u2d5c\u2d54\u2d4f\u2d49\u2d5c \u2d59\u2d33 \u2d61\u2d30\u2d4f\u2d59\u2d30 \u2d4f \u2d5c\u2d37\u2d4d\u2d4d\u2d30\u2d4d\u2d5c \u2d30\u2d4e eBay \u2d4f\u2d56 Craigslist \u2d30\u2d54 \u2d59\u2d59\u2d4e\u2d54\u2d30\u2d59\u2d4f \u2d5c\u2d49\u2d4f\u2d3c\u2d53\u2d4d\u2d49\u2d4f \u2d4f \u2d53\u2d63\u2d62\u2d30\u2d63\u2d63\u2d30\u2d4d- \u2d40\u2d53\u2d31\u2d31\u2d54 \u2d56\u2d54 \u2d4d\u2d30\u2d4f \u2d5b\u2d49\u2d33\u2d30\u2d4f \u2d4f \u2d61\u2d53\u2d59\u2d59\u2d30\u2d4f.",
            "x": "utf-8"
        },
        "query": [
            "Determine if {a} can be used as an identifier after encoding and decoding with {x}.",
            "Check if {a} remains a valid identifier after being encoded and decoded using {x}.",
            "Verify whether {a} is a valid identifier post encoding and decoding with {x}."
        ],
        "language": "zgh_Tfng"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).startswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0907\u0925 \u092a\u093e\u0920\u093f",
            "x": 20,
            "y": "\u091a",
            "z": "\u0907\u0925"
        },
        "query": [
            "Check if the left-justified version of {a} with width {x} and fill character {y} starts with {z}.",
            "Determine if the string {a}, when left-justified to a width of {x} using {y} as the fill character, begins with {z}.",
            "Verify whether the left-justified string of {a} with a width of {x} and filled with {y} starts with {z}."
        ],
        "language": "kas_Deva"
    },
    {
        "solution": "```python\nanswer = a.zfill(x).isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Ivi vikuchitiska kuti magalasi yakutchipa ya kukuzgira vithuzi ya\u0175e yakusuzga kugwiriska ntchito para ungweru njuchoko, para palije ungweru unyakhe wakusazgirako kungweruska.",
            "x": 150
        },
        "query": [
            "Check if the zero-filled version of {a} with width {x} contains only ASCII characters.",
            "Determine if the zero-padded string of {a} to a width of {x} is composed solely of ASCII characters.",
            "Verify whether the zero-filled string of {a} with a total length of {x} consists only of ASCII characters."
        ],
        "language": "tum_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('ascii', errors='ignore').decode('ascii')\nprint(answer)\n```",
        "variables": {
            "a": "\u0926\u093f\u0928 \u0915\u0947 \u0932\u0902\u092c\u093e \u092a\u0948\u0926\u0932 \u092f\u093e\u0924\u094d\u0930\u093e \u092e \u090f\u0915 \u092e\u0940\u0932 \u0932\u0947 \u092d\u0940 \u0915\u092e \u0926\u0942\u0930\u0940 \u0924\u0915 \u0915\u0947 \u0926\u0942\u0930\u0940 \u0936\u093e\u092e\u093f\u0932 \u0939\u094b\u0925\u0947 \u091c\u0947\u0932\u093e \u090f\u0915 \u0939\u0940 \u0926\u093f\u0928 \u092e \u092a\u0942\u0930\u093e \u0915\u093f\u092f\u0947 \u091c\u093e \u0938\u0915\u0925\u0947\u0964"
        },
        "query": [
            "Encode {a} to ASCII, ignoring errors, and then decode it back to a string.",
            "Convert {a} to an ASCII-encoded string, ignoring any errors, and then decode it back to a regular string.",
            "Transform {a} by encoding it to ASCII while ignoring errors, and then decode it back to a string."
        ],
        "language": "hne_Deva"
    },
    {
        "solution": "```python\nanswer = a[x::z].isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Na nekaterih \u010dezmejnih vlakih preglede izvajajo med samo vo\u017enjo, zato morate imeti s sabo veljavno osebno izkaznico, ko se vkrcate na tak vlak.",
            "x": 5,
            "z": 3
        },
        "query": [
            "Check if every {z}-th character starting from position {x} in {a} is alphabetic.",
            "Verify if each {z}-th character from position {x} in {a} is a letter.",
            "Determine if all characters at every {z}-th position starting from position {x} in {a} are alphabetic."
        ],
        "language": "slv_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('utf-8').count(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u12a8\u12f3\u12ed\u122c\u12ad\u1272\u1295\u130d \u12cd\u132d \u12e8\u126e\u1272\u12e8\u122d \u1235\u12ac\u1276\u127d \u12a5.\u12a4.\u12a0. \u1260 1973 \u12a5\u1295\u12f0 \u1356\u1208\u1272\u12ab \u1233\u1295\u1231\u122d \u1246\u1325\u122e\u1275 \u1260\u1290\u1260\u1228\u12cd \u120b\u12ed \u12e8\u1228\u1203\u1265 \u12a0\u12f5\u121b \u12eb\u1320\u1243\u120d\u120b\u120d\u1361\u1361",
            "x": "\u12a5"
        },
        "query": [
            "Encode {a} to UTF-8 and decode it back, then count the occurrences of {x}.",
            "Convert {a} to UTF-8 and back, then find how many times {x} appears.",
            "Transform {a} to UTF-8 and revert it, then tally the number of {x}."
        ],
        "language": "amh_Ethi"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).rfind(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0417\u0430\u0440\u0430\u0434\u0438 \u043d\u0438\u0432\u043d\u0438\u043e\u0442 \u0443\u0441\u043f\u0435\u0445 \u0441\u043e \u043f\u043e\u0434\u043c\u043e\u0440\u043d\u0438\u0446\u0438\u0442\u0435, \u043f\u043e \u0432\u043e\u0458\u043d\u0430\u0442\u0430, \u043d\u0435 \u0441\u0435 \u0432\u0435\u0440\u0443\u0432\u0430 \u0434\u0435\u043a\u0430 \u0413\u0435\u0440\u043c\u0430\u043d\u0446\u0438\u0442\u0435 \u0438\u043c\u0430\u0430\u0442 \u043c\u043d\u043e\u0433\u0443 \u043e\u0434 \u043d\u0438\u0432.",
            "x": 120,
            "y": " ",
            "z": "\u043d\u0438\u0432"
        },
        "query": [
            "Left-justify {a} to a length of {x} using {y} as padding, then find the last occurrence of {z}.",
            "Pad {a} to the left to make its length {x} with {y}, then locate the last position of {z}.",
            "Extend {a} to {x} characters with {y} on the left, and find the last index of {z}."
        ],
        "language": "mkd_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x:y].istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Wadde nga endabika yakyo eyinza okukyuuka, embeera yaakyo eya sayansi ejja kusigala yeemu.",
            "x": 0,
            "y": 5
        },
        "query": [
            "Check if the substring of {a} from {x} to {y} is in title case.",
            "Determine if the section of {a} between {x} and {y} is in title case.",
            "Verify if the part of {a} from index {x} to {y} is in title case."
        ],
        "language": "lug_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].title().isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "Sophocles en Aristophanes zien nog ummertouw populaire toneelsjrievers en hun toneelst\u00f6kke woorte besjouwd es ein vaan de groetste werke vaan de wereldliteratuur.",
            "x": 10,
            "y": 20
        },
        "query": [
            "Check if the substring of {a} from {x} to {y}, converted to title case, is a valid identifier.",
            "Determine if the title-cased substring of {a} from index {x} to {y} is a valid identifier.",
            "Verify if the substring of {a} sliced from {x} to {y} and converted to title case is a valid identifier."
        ],
        "language": "lim_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::z].islower()\nprint(answer)\n```",
        "variables": {
            "a": "Kol\u014dni\u015bci, kej widzieli te dzia\u0142ania, ty\u017c zawo\u0142ali posiy\u0142ki.",
            "x": 10,
            "z": 3
        },
        "query": [
            "Verify if the substring of {a} starting from position {x+1}-th character to the end, taking every {z}-th character, is in lowercase.",
            "Check if the substring of {a} starting from the {x+1}-th character and taking every {z}-th character is in lowercase.",
            "Determine if the substring of {a} from the {x+1}-th character to the end, taking every {z}-th character, is in lowercase."
        ],
        "language": "szl_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('utf-8').isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "Animal Liberation \u0905\u0909\u0930 Royal Society for the Prevention of Cruelty to Animals (RSPCA) \u092b\u093f\u0930\u0942 \u0938\u0947 \u0908 \u0905\u092d\u093f\u092f\u093e\u0928 \u0938\u0941\u0930\u0942 \u0915\u0907\u0932\u0947 \u092c\u093e \u0915\u0940 \u0911\u0938\u094d\u091f\u094d\u0930\u0947\u0932\u093f\u092f\u093e \u0915\u0947 \u0915\u0941\u0932 \u092c\u0942\u091a\u095c\u0916\u093e\u0928\u0928 \u092e\u0947\u0902 CCTV \u0915\u0948\u092e\u0930\u093e \u0939\u094b\u0916\u0939\u0940\u0902 \u0915\u0947 \u091a\u093e\u0939\u0940\u0902."
        },
        "query": [
            "Check if {a}, after being encoded to UTF-8 and then decoded back, consists only of printable characters.",
            "Determine if {a} contains only printable characters after UTF-8 encoding and decoding.",
            "Verify if {a} is made up of printable characters once it has been encoded to UTF-8 and decoded back."
        ],
        "language": "bho_Deva"
    },
    {
        "solution": "```python\nanswer = a[x:y].replace(z, '').isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u0623\u0642\u0644 \u0645\u0646 \u0623\u0644\u0641 \u062d\u0627\u0644\u0629 \u0628\u0627\u0644\u0628\u0634\u0631 \u0628\u0644\u063a\u0648 \u0639\u0646\u0647\u0627 \u060c \u0648 \u0628\u0639\u0636\u0647\u0627 \u0643\u0627\u0646 \u0645\u0645\u064a\u062a.",
            "x": 7,
            "y": 10,
            "z": " "
        },
        "query": [
            "Determine if the substring of {a} from {x} to {y} with all occurrences of {z} removed is numeric.",
            "Check if the substring of {a} between indices {x} and {y} is numeric after removing all instances of {z}.",
            "Is the substring of {a} from {x} to {y} numeric after deleting all occurrences of {z}?"
        ],
        "language": "apc_Arab_sout3123"
    },
    {
        "solution": "```python\nanswer = a[x:y].rstrip(z).capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "Azwela we mu kitumu kimoxi: \u201cJingendesi ala mukindala kiki mukalakala phala kusanga ndungi ya-mbote ya kusunga ulungu\u201d.",
            "x": 10,
            "y": 30,
            "z": "a"
        },
        "query": [
            "Get the substring of {a} from {x} to {y}, strip trailing characters in {z}, and capitalize the result.",
            "Extract the substring from {a} starting at index {x} and ending at index {y}, remove trailing {z}, and capitalize it.",
            "Take the substring of {a} between indices {x} and {y}, strip the trailing {z}, and convert it to capitalized form."
        ],
        "language": "kmb_Latn"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).islower()\nprint(answer)\n```",
        "variables": {
            "a": "Laj\u025bli \"tigitigi\" ye ka pan ka Orlando ayerop\u0254ru la, ka bisi ta ka o y\u0254r\u0254 Disney \u0254t\u025bli, ka dugunu fila \u0272\u0254g\u0254na k\u025b yani kab\u0254 Disney dugu k\u0254n\u0254n ani ka segin so.",
            "x": "Laj\u025bli "
        },
        "query": [
            "Check if {a} without leading characters in {x} is entirely lowercase.",
            "Determine if the string {a} is all lowercase after removing any leading characters found in {x}.",
            "Verify if {a} becomes completely lowercase after stripping leading characters present in {x}."
        ],
        "language": "bam_Latn"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u5750\u8fdb\u81ea\u5df1\u7684\u8f66\uff0c\u5f00\u542f\u4e00\u6bb5\u6f2b\u957f\u7684\u516c\u8def\u4e4b\u65c5\uff0c\u672c\u8eab\u5c31\u6709\u4e00\u79cd\u7b80\u5355\u7eaf\u7cb9\u7684\u5438\u5f15\u529b\u3002",
            "x": "\u3002"
        },
        "query": [
            "Verify if {a} without trailing characters in {x} is numeric.",
            "Check if {a} with trailing {x} characters removed is a number.",
            "Determine if {a} is numeric after removing trailing {x} characters."
        ],
        "language": "cmn_Hans"
    },
    {
        "solution": "```python\nanswer = a.title().split(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Sin'winnya l\u025b\u0301\u025b h\u025bn \u0254\u0301\u201a y\u011b n\u0254 s\u00edns\u00edn b\u00f3 n\u0254\u0301 s\u00fa f\u00ed \u00e9 k\u00f3 z\u025b l\u025b\u0301\u025b \u00e9.",
            "x": " ",
            "y": 3
        },
        "query": [
            "Split the title-cased version of {a} at each occurrence of {x}, with a maximum of {y} splits.",
            "Take the title-cased string of {a} and split it at each {x}, up to {y} times.",
            "Convert {a} to title case and split it by {x}, allowing for a maximum of {y} splits."
        ],
        "language": "fon_Latn"
    },
    {
        "solution": "```python\nanswer = a.isalnum() and a.isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u0411\u0440\u0430\u0437\u0438\u043b \u0431\u043e\u043b \u0414\u044d\u043b\u0445\u0438\u0439 \u0434\u044d\u044d\u0440\u0445 \u0445\u0430\u043c\u0433\u0438\u0439\u043d \u0442\u043e\u043c \u0420\u043e\u043c\u044b\u043d \u043a\u0430\u0442\u043e\u043b\u0438\u043a \u0443\u043b\u0441 \u0431\u04e9\u0433\u04e9\u04e9\u0434 \u0420\u043e\u043c\u044b\u043d \u043a\u0430\u0442\u043e\u043b\u0438\u043a \u0441\u04af\u043c \u043d\u044c \u0443\u0433 \u0443\u043b\u0441 \u0434\u0430\u0445\u044c \u0438\u0436\u0438\u043b \u0445\u04af\u0439\u0441\u0438\u0439\u043d \u0433\u044d\u0440\u043b\u044d\u043b\u0442\u0438\u0439\u043d \u0445\u0443\u0443\u043b\u044c \u0442\u043e\u0433\u0442\u043e\u043e\u043c\u0436\u0438\u0439\u0433 \u044d\u0441\u044d\u0440\u0433\u04af\u04af\u0446\u0441\u044d\u044d\u0440 \u0438\u0440\u0436\u044d\u044d."
        },
        "query": [
            "Check if {a} is both alphanumeric and printable.",
            "Determine if {a} is alphanumeric and can be printed.",
            "Verify if {a} is a printable alphanumeric string."
        ],
        "language": "khk_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x:y].upper().isupper()\nprint(answer)\n```",
        "variables": {
            "a": "A voltis il lescjament al \u00e8 il soreli che al scjalde la n\u00eaf, altris voltis al \u00e8 altre n\u00eaf che e cole, altris ancjem\u00f2 a son altris events natur\u00e2i, spes a son i oms.",
            "x": 10,
            "y": 20
        },
        "query": [
            "Verify if the substring of {a} from index {x} to {y} is entirely uppercase after converting it to uppercase.",
            "Check if the substring of {a} from index {x} to {y} becomes all uppercase when converted to uppercase.",
            "Determine if the substring of {a} from index {x} to {y} is fully uppercase after being converted to uppercase."
        ],
        "language": "fur_Latn"
    },
    {
        "solution": "```python\nanswer = a[::-1].islower()\nprint(answer)\n```",
        "variables": {
            "a": "La8ad balagha wazn Nadya al-mawludtu fi 17 Sibtimber 2007 bi3amaliya 8ay9ariya fy 3iyadti al-2umwma fy Alayska Rusya 7awalay 17 ra6lan lil 2uwn9a."
        },
        "query": [
            "Check if the reverse of {a} is entirely lowercase.",
            "Verify if the reversed string of {a} is all in lowercase.",
            "Determine if the reverse of {a} consists solely of lowercase letters."
        ],
        "language": "arb_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u7c73\u56fd\u306e\u30b0\u30ea\u30fc\u30f3\u30ab\u30fc\u30c9\u3092\u4fdd\u6709\u3059\u308b\u30ad\u30e5\u30fc\u30d0\u5e02\u6c11\u306f\u3001\u30a8\u30af\u30a2\u30c9\u30eb\u9818\u4e8b\u9928\u3092\u8a2a\u308c\u3066\u514d\u9664\u3092\u53d7\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002",
            "x": 5,
            "y": 10
        },
        "query": [
            "Verify if the substring of {a} from {x} to {y} is numeric.",
            "Check if the substring of {a} between indices {x} and {y} consists of numeric characters.",
            "Determine if the portion of {a} from index {x} to {y} is a numeric string."
        ],
        "language": "jpn_Jpan"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).upper()\nprint(answer)\n```",
        "variables": {
            "a": "Y\u00e4i \u0263\u00e4n c\u00e4\u00e4r Kerala aka p\u0254th ap\u025bi b\u00eb ka t\u00ef\u014b, kek ak\u00f6\u00f6n cath ka c\u00ef dh\u00eb\u014b, temple orchestra ku y\u025bth k\u0254\u0308k.",
            "x": "k."
        },
        "query": [
            "Remove trailing {x} from {a} and convert the result to uppercase.",
            "Trim the trailing {x} from {a} and change the result to uppercase.",
            "Strip the trailing {x} from {a} and transform the result to uppercase."
        ],
        "language": "dik_Latn"
    },
    {
        "solution": "```python\nanswer = a.casefold().endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "Izinkampani zezindiza ezinikeza lokhu zihlanganisa i-Air Canada, i-Delta Air lines, neLufthansa yezindiza ezinze eMelika noma e-Canada, kanye ne-WestJet.",
            "x": "westjet."
        },
        "query": [
            "Determine if the casefolded version of {a} ends with {x}.",
            "Check if {a} in lowercase ends with {x}.",
            "Verify if the lowercase version of {a} has {x} at the end."
        ],
        "language": "zul_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u0928\u0949\u0930\u094d\u0935\u0947\u0935\u093e\u0938\u0940 \u0913\u0932\u093e\u092b\u093c \u091f\u094d\u0930\u0940\u0917\u0935\u093e\u0938\u0928 \u092a\u0902\u0939\u093f\u0902\u091c\u0947 \u0926\u0947\u0936 \u0916\u0947 \u0921\u0947\u0928\u093f\u0936 \u091c\u0940 \u0939\u0941\u0915\u0942\u092e\u0924 \u0916\u093e\u0902 \u0935\u093e\u092a\u0938 \u0939\u093e\u0938\u093f\u0932\u0941 \u0915\u0930\u0923 \u091c\u0940 \u0959\u094d\u0935\u093e\u0939\u093f\u0936 \u0938\u093e\u0902 \u0939\u093f\u0928 \u097f\u0947\u095c\u0947 \u091c\u0940 \u0905\u097b\u0941\u0935\u093e\u0928\u0940 \u0915\u0908\u0964",
            "x": "\u0921\u0947\u0928\u093f\u0936",
            "y": "\u0938\u094d\u0935\u0940\u0921\u093f\u0936"
        },
        "query": [
            "Replace {x} with {y} in {a} and check if the result is printable.",
            "Substitute {x} with {y} in {a} and determine if the outcome is printable.",
            "Swap {x} with {y} in {a} and verify if the resulting string is printable."
        ],
        "language": "snd_Deva"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).find(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0628\u0648 \u0648\u0631\u0632\u0634 \u062f\u0648\u0626\u0644 \u0635\u0648\u0631\u062a\u0646\u0647 \u0627\u0646\u062c\u0627\u0645 \u0627\u0648\u0644\u0627\u0631 \u0648 \u0628\u06cc\u0631 \u0634\u0645\u0634\u06cc\u0631\u0628\u0627\u0632 \u0627\u0648\u0628\u06cc\u0633\u06cc\u0646\u0646 \u062f\u0648\u0626\u0644 \u0627\u0626\u0644\u06cc\u0631.",
            "x": 4,
            "y": "\u062f\u0648\u0626\u0644"
        },
        "query": [
            "Convert tabs in {a} to {x} spaces and find the first occurrence of {y}.",
            "Replace tabs in {a} with {x} spaces and locate the first instance of {y}.",
            "Change tabs in {a} to {x} spaces and identify the first position of {y}."
        ],
        "language": "azb_Arab"
    },
    {
        "solution": "```python\nanswer = a.zfill(x)[y]\nprint(answer)\n```",
        "variables": {
            "a": "\u0626\u0627\u062f\u06d5\u062a\u062a\u0649\u0643\u0649 \u0626\u0627\u067e\u062a\u0648\u0645\u0648\u0628\u0649\u0644 \u0628\u0649\u0644\u06d5\u0646 \u0643\u0649\u0631\u0633\u0649\u06ad\u0649\u0632\u0645\u06c7 \u0628\u0648\u0644\u0649\u062f\u06c7. \u0644\u06d0\u0643\u0649\u0646 4x4 \u0626\u0627\u067e\u062a\u0648\u0645\u0648\u0628\u0649\u0644 \u0628\u06d5\u0643\u0631\u06d5\u0643 \u062a\u06d5\u06cb\u0633\u0649\u064a\u06d5 \u0642\u0649\u0644\u0649\u0646\u0649\u062f\u06c7\u060c \u0686\u06c8\u0646\u0643\u0649 \u0646\u06c7\u0631\u063a\u06c7\u0646 \u0626\u0648\u0631\u06c7\u0646\u0644\u0627\u0631\u063a\u0627 \u067e\u06d5\u0642\u06d5\u062a 4x4 \u0626\u0627\u067e\u062a\u0648\u0645\u0648\u0628\u0649\u0644\u0644\u0627 \u0628\u0627\u0631\u0627\u0644\u0627\u064a\u062f\u06c7.",
            "x": 100,
            "y": 10
        },
        "query": [
            "Zero-fill {a} to length {x} and get the character at position {y}.",
            "Pad {a} with zeros to make its length {x} and retrieve the character at index {y}.",
            "Fill {a} with leading zeros to reach length {x} and extract the character at position {y}."
        ],
        "language": "uig_Arab"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).count(z)\nprint(answer)\n```",
        "variables": {
            "a": "\uabc0\uabe5\uabc2\uabe6\uabdf\uabd2\uabe4 \uabc3\uabc7\uabdd\uabd7, \uabc3\uabd4\uabe8\uabd1\uabe3\uabcf\uabc5, \uabd1\uabd7\uabe3\uabdd\uabc5 \uabc0\uabd4\uabe4\uabd2\uabe8\uabdd\uabd5 \uabd4\uabe6\uabdf\uabd0\uabe3\uabd4\uabe6\uabc1\uabe0 \uabce\uabc3\uabea\uabd7 \uabc6\uabe0\uabc2\uabe8\uabd2\uabe6 \uabcd\uabe5\uabcf\uabd4\uabd2\uabd7\uabe4 \uabc0\uabe5\uabe1 \uabc2\uabe9\uabd5\uabd4\uabe5 \uabcd\uabe5\uabcf\uabd5\uabc1\uabe4 \uabcd\uabe5\uabdf\uabc5 \uabcc\uabe6\uabe1\uabca\uabe3\uabdb\uabc4 \uabc7\uabe5\uabcf\uabeb",
            "x": "\uabcd\uabe5",
            "y": "\uabc3\uabe5",
            "z": "\uabd4"
        },
        "query": [
            "Replace {x} with {y} in {a} and count the occurrences of {z}.",
            "Substitute {x} with {y} in {a} and find how many times {z} appears.",
            "Change {x} to {y} in {a} and determine the number of times {z} is present."
        ],
        "language": "mni_Mtei"
    },
    {
        "solution": "```python\nanswer = a.split(x).index(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u07d5\u07ce\u07ec\u07e1\u07ca\u07ec\u07d9\u07cb\u07f2 \u07c1\u07c1:\u07c2\u07c0 \u07e0\u07ca\u07eb\u07f8 \u07d5\u07d0\u07f2\u07d3\u07df\u07cf\u07e1\u07ca \u07df\u07ce\u07eb \u07de\u07ca\u07ec \u07de\u07d0\u07db\u07ca\u07e6\u07df\u07cc \u07e2\u07cc\u07e3\u07cc\u07f2\u07eb \u07dd\u07ce\u07ec\u07d9\u07ce\u07f2\u07ec\u07de\u07ce\u07ec\u07df\u07cc\u07ec\u07df\u07ca \u07df\u07ce\u07eb \u07dd\u07cd\u07ec \u07de\u07ca\u07ec \u07d5\u07ca\u07ef \u07de\u07cf\u07f2\u07ec\u07de\u07cf \u07df\u07ca\u07eb\u07f8 \u07ca\u07ec \u07e6\u07cc\u07ec\u07d8\u07ca \u07d8\u07d0\u07eb \u07de\u07cf\u07eb \u07ca\u07ec\u07df\u07ce\u07ec \u07e6\u07cb\u07eb \u07d5\u07cd\u07de\u07e2\u07ca\u07df\u07cc \u07d6\u07cd\u07ec\u07d8\u07cd\u07d6\u07cd\u07ec\u07d8\u07cd \u07df\u07ca\u07d8\u07cf\u07f2\u07ec \u07dd\u07ce\u07ec\u07d9\u07ce\u07f2\u07ec\u07de\u07ce\u07ec\u07df\u07cc \u07d8\u07d0\u07eb\u07f8 \u07db\u07cc\u07df\u07ca \u07df\u07ca\u07eb \u07de\u07ce\u07df\u07ce\u07f2\u07de\u07ce\u07df\u07ce\u07f2\u07e0\u07cc\u07f2 \u07d3\u07ce\u07ef\u07df\u07cc \u07dd\u07cd\u07ec.",
            "x": "\u07f8",
            "y": "\u07de\u07ca\u07ec"
        },
        "query": [
            "Split {a} by {x} and find the index of {y} in the resulting list.",
            "Divide {a} using {x} and determine the position of {y} in the list obtained.",
            "Break {a} at each {x} and locate the index of {y} in the resulting array."
        ],
        "language": "nqo_Nkoo"
    },
    {
        "solution": "```python\nanswer = a.upper().rfind(x)\nprint(answer)\n```",
        "variables": {
            "a": "Yening manusa nenten nganggap moose sakadi madue potensi baya, ipun minab maekin kaliwat nampek tur ngenahang ragan ipun ring resiko.",
            "x": "N"
        },
        "query": [
            "Convert {a} to uppercase and find the last occurrence of {x}.",
            "Transform {a} to uppercase and locate the final position of {x}.",
            "Change {a} to uppercase and determine the last index of {x}."
        ],
        "language": "ban_Latn"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).title()\nprint(answer)\n```",
        "variables": {
            "a": "Niykere strzewiki maj\u014dm cweki, a na g\u0142adke nawiyrchnie je ajnricht\u014dng ekstra z cwekami, co pasuje do wiynkszo\u015bci b\u014dt\u014dw i strzewik\u014dw, na abzace abo abzace i zole.",
            "x": "Niykere"
        },
        "query": [
            "Remove leading {x} from {a} and convert it to title case.",
            "Strip leading {x} from {a} and change it to title case.",
            "Delete leading {x} from {a} and transform it to title case."
        ],
        "language": "szl_Latn"
    },
    {
        "solution": "```python\nanswer = x in a[::-1]\nprint(answer)\n```",
        "variables": {
            "a": "\u2d49\u2d5c\u2d5c\u2d53\u2d54\u2d4f\u2d30 \u2d5c\u2d49\u2d33\u2d49\u2d54\u2d30 \u2d30 \u2d4e\u2d33\u2d30\u2d4d \u2d54\u2d30\u2d62\u2d53\u2d4f\u2d49\u2d3d \u2d33 \u2d31\u2d54\u2d49\u2d59\u2d31\u2d30\u2d4f \u2d49\u2d4f\u2d4f\u2d53\u2d55\u2d65\u2d4e\u2d4f.",
            "x": "\u2d49\u2d54\u2d30"
        },
        "query": [
            "Is the substring {x} present in the reverse of {a}?",
            "Does the reverse of {a} contain the substring {x}?",
            "Can {x} be found in the reversed string of {a}?"
        ],
        "language": "zgh_Tfng"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).zfill(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u09ae\u09c8\u0997\u09c0 \u099a\u09bf\u0982\u0997\u09be \u09ae\u09b0\u09c0 \u09b2\u09c8\u09a8\u09a6\u09ac\u09be \u0985\u09ae\u09c1\u09ac\u09be \u09b2\u09c8\u099a\u09bf\u09b2 \u09b2\u09c8\u09ac\u0997\u09c0 \u09a5\u09cc\u09a6\u09cb\u0995\u09b6\u09bf\u0982 \u099a\u09bf\u0982 \u09ae\u0996\u09cb\u0999\u09a6\u09be \u09a5\u09cb\u0995\u0996\u09bf\u0964",
            "x": "\u09a5\u09cb\u0995\u0996\u09bf\u0964",
            "y": 50
        },
        "query": [
            "Remove trailing characters in {x} from {a} and pad the result with leading zeros to reach a length of {y}.",
            "Strip trailing {x} from {a} and add leading zeros until the length is {y}.",
            "Trim the characters {x} from the end of {a} and prepend zeros to make the length {y}."
        ],
        "language": "mni_Beng"
    },
    {
        "solution": "```python\nanswer = a.casefold().startswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0108i tiu a\u016dtenta komunumo estas en Howe Sound, tuj apud Vankuvero, kaj oni povas facile aliri al \u011di per planitaj akvotaksioj deirantaj de Granville Island en centra Vankuvero.",
            "x": "\u0109i tiu"
        },
        "query": [
            "Convert {a} to casefold and check if it starts with {x}.",
            "Transform {a} to casefold and verify if it begins with {x}.",
            "Change {a} to casefold and determine if it starts with {x}."
        ],
        "language": "epo_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].lower().count(z)\nprint(answer)\n```",
        "variables": {
            "a": "W latach 60. powr\u00f3ci\u0142 do wolnej Algierii, by naucza\u0107 re\u017cyserii filmowej.",
            "x": 10,
            "y": 50,
            "z": "a"
        },
        "query": [
            "Count the occurrences of {z} in the substring of {a} from {x} to {y}, ignoring case.",
            "How many times does {z} appear in the substring of {a} from index {x} to {y}, case insensitive?",
            "Find the number of times {z} occurs in the substring of {a} between {x} and {y}, without considering case."
        ],
        "language": "pol_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::y].isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Ba agences ya voyages kele kubanda 19\u00e8me si\u00e8cle. Muntu ya kisalu ya ba voyage kele kima mosi ya mbote sambu na voyage ya ntama ya kuzaba, kibumuntu, culture, ndinga to ba bwala yai kele na mbongo fioti.",
            "x": 5,
            "y": 3
        },
        "query": [
            "Check if every {y}-th character in {a} starting from position {x} is a letter.",
            "Verify if each {y}-th character in {a} beginning at position {x} is an alphabetic character.",
            "Determine if all characters at every {y}-th position in {a} from index {x} are letters."
        ],
        "language": "ktu_Latn"
    },
    {
        "solution": "```python\nanswer = a.find(x) != -1 and a.islower()\nprint(answer)\n```",
        "variables": {
            "a": "T\u0254m nd\u028b posusi s\u0254n\u0254 y\u0254 t\u0269tas\u0269 tuzuu tama\u0263 \u014bga komina lab\u0269 Lak\u0269\u014b fena\u0263 taa p\u0269na\u0263 kan\u025b se k\u0269ha\u0263 liidiye n\u025b paya l\u0254\u0254\u0256a n\u025b p\u0254s\u0254z\u0269 y\u0254.",
            "x": "posusi"
        },
        "query": [
            "Check if {x} is a substring of {a} and if {a} is entirely in lowercase.",
            "Determine if {x} is contained within {a} and if {a} is all lowercase.",
            "Verify whether {x} is present in {a} and if {a} consists only of lowercase letters."
        ],
        "language": "kbp_Latn"
    },
    {
        "solution": "```python\nanswer = a.count(x) == y and a.isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Kung ang pagkuha ng larawan ng isang bagay ay hindi pinahihintulutan, dapat ay hindi ka na mag-isip na kumuha ng bidyo nito.",
            "x": "a",
            "y": 15
        },
        "query": [
            "Verify that {a} contains {x} exactly {y} times and consists solely of letters.",
            "Check if {a} has {x} exactly {y} times and is made up of only letters.",
            "Confirm that {a} includes {x} exactly {y} times and is composed entirely of letters."
        ],
        "language": "fil_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x)[0].isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u0938\u0930 \u0930\u093f\u091a\u0930\u094d\u0921 \u092c\u094d\u0930\u0948\u0928\u0938\u0928\u0915 \u0935\u0930\u094d\u091c\u093f\u0928 \u0917\u094d\u0930\u0941\u092a \u092c\u0948\u0902\u0915\u0915 \u0930\u093e\u0937\u094d\u091f\u094d\u0930\u0940\u092f\u0915\u0930\u0923 \u0938\u0901 \u092a\u0939\u093f\u0932\u0947 \u092c\u0948\u0902\u0915 \u0932\u0947\u0932 \u092c\u094b\u0932\u0940 \u0932\u0917\u0913\u0928\u093f \u091b\u0932\u0925\u093f \u091c\u0915\u0930\u093e \u0916\u093e\u0930\u093f\u091c \u0915\u090f \u0926\u0947\u0932 \u0917\u0947\u0932 \u091b\u0932\u0964",
            "x": " "
        },
        "query": [
            "Check if the first segment of {a} split by {x} is numeric.",
            "Determine if the first part of {a} when split by {x} is a number.",
            "Is the first section of {a} after splitting by {x} a numeric value?"
        ],
        "language": "mai_Deva"
    },
    {
        "solution": "```python\nanswer = a.rjust(x, y).endswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0939\u0942 \u092e\u0902\u0917\u0932 \u097e\u0940\u0902\u0939\u0941\u0902 \u0913\u0938\u093e\u0915\u093e \u092e\u0947\u0902 \u0917\u0941\u095b\u093e\u0930\u0947 \u0935\u093f\u092f\u094b\u0964",
            "x": 50,
            "y": " ",
            "z": "\u0935\u093f\u092f\u094b\u0964"
        },
        "query": [
            "Right-align {a} in a field of {x} characters, filled with {y}, and check if it ends with {z}.",
            "Pad {a} to the right in a field of {x} characters using {y}, and verify if it ends with {z}.",
            "Align {a} to the right within {x} characters using {y} as padding, and determine if it ends with {z}."
        ],
        "language": "snd_Deva"
    },
    {
        "solution": "```python\nanswer = a.zfill(x)[::-1]\nprint(answer)\n```",
        "variables": {
            "a": "\u041a\u04af\u043f \u043a\u0435\u043d\u04d9 \u044d\u043a\u0437\u043e\u0442\u0438\u043a \u044f\u043d\u0443\u0430\u0440\u0499\u0430\u0440\u0499\u044b \u0442\u0430\u0431\u044b\u0443\u044b \u04a1\u044b\u0439\u044b\u043d, \u04bb\u04d9\u043c \u043f\u0430\u0440\u043a\u0442\u0430\u0440\u0499\u0430 \u04a1\u0430\u0439\u04bb\u044b \u0432\u0430\u04a1\u044b\u0442 \u043a\u043e\u043c\u043c\u0435\u0440\u0446\u0438\u044f \u043c\u0430\u04a1\u0441\u0430\u0442\u0442\u0430\u0440\u044b\u043d\u0434\u0430 \u0444\u043e\u0442\u043e\u0493\u0430 \u0442\u04e9\u0448\u04e9\u0440\u04e9\u04af \u04a1\u0430\u0493\u0438\u0499\u04d9\u043b\u04d9\u0440\u0435 \u0431\u0430\u0440.",
            "x": 150
        },
        "query": [
            "Add leading zeros to {a} until it is {x} characters long and then reverse the string.",
            "Pad {a} with leading zeros to make its length {x} characters, then reverse the result.",
            "Ensure {a} is {x} characters long by adding leading zeros, and then reverse the string."
        ],
        "language": "bak_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).lower()\nprint(answer)\n```",
        "variables": {
            "a": "Luso lapamwamba lopanga zinthu zosayenda kuoneka ngati zikuyenda mumakanema zimatha kuchitikira pamakina akompuyuta, ndipo mtundu wa ntchito ngati imeneyi ikuchulukira kugwiritsidwa ntchito mumakanema apawayilesi komaso makanema ena.",
            "x": "makanema",
            "y": "vidiyo"
        },
        "query": [
            "Replace {x} with {y} in {a} and convert the result to lowercase.",
            "Substitute {x} with {y} in {a} and change the result to lowercase.",
            "Change {x} to {y} in {a} and make the result lowercase."
        ],
        "language": "nya_Latn"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u8fd9\u4f7f\u5f97\u53d8\u7126\u955c\u5934\u53ef\u4ee5\u62cd\u51fa\u4e0e\u56fa\u5b9a\u7126\u8ddd\u955c\u5934\u8d28\u91cf\u76f8\u5ab2\u7f8e\u7684\u7167\u7247\u3002",
            "x": 50,
            "y": "0"
        },
        "query": [
            "Left-align {a} in a field of {x} characters, using {y} to fill the space, and check if the result is numeric.",
            "Align {a} to the left within a field of {x} characters, filling with {y}, and verify if the outcome is numeric.",
            "Pad {a} to the left in a field of {x} characters with {y} and determine if the resulting string is numeric."
        ],
        "language": "cmn_Hans"
    },
    {
        "solution": "```python\nanswer = a.upper().replace(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "B\u0259rni Croatia bed\u0259n shiga casambo, Zagreb, Bobek kam nowata lintaro wallono loktu Partizan Belgrade ro biskejind\u0259n.",
            "x": "Croatia",
            "y": "Serbia"
        },
        "query": [
            "Convert {a} to uppercase and then replace {x} with {y}.",
            "Transform {a} to all uppercase letters and substitute {x} with {y}.",
            "Change {a} to uppercase and swap out {x} for {y}."
        ],
        "language": "knc_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Ko posamezniki in vsi udele\u017eenci ocenjujejo uspehe in prepoznajo svoje neuspehe, globlje odkrijejo vrednote, namen in gonilne sile organizacije.",
            "x": " ",
            "y": 3
        },
        "query": [
            "Split {a} by {x} and check if the {y}-th segment contains only alphabetic characters.",
            "Divide {a} using {x} and verify if the {y}-th part consists solely of letters.",
            "Separate {a} with {x} and determine if the {y}-th section is purely alphabetic."
        ],
        "language": "slv_Latn"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).find(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0644\u062a\u0639\u0644\u0645 \u0625\u0646\u0634\u0627\u0621 \u0648\u0633\u0627\u0626\u0637 \u062a\u0641\u0627\u0639\u0644\u064a\u0629 \u064a\u062c\u0628 \u0623\u0646 \u064a\u0643\u0648\u0646 \u0647\u0646\u0627\u0644\u0643 \u0645\u0647\u0627\u0631\u0627\u062a \u0639\u064f\u0631\u0641\u064a\u0629 \u0648\u062a\u0642\u0644\u064a\u062f\u064a\u0629 \u0628\u0627\u0644\u0625\u0636\u0627\u0641\u0629 \u0625\u0644\u0649 \u0623\u062f\u0648\u0627\u062a \u0645\u062a\u062e\u0635\u0635\u0629 \u0641\u064a \u0627\u0644\u0635\u0641\u0648\u0641 \u0627\u0644\u062a\u0641\u0627\u0639\u0644\u064a\u0629 (\u0627\u0644\u0642\u0635\u0635 \u0627\u0644\u0645\u0635\u0648\u0631\u0629\u060c \u062a\u0639\u062f\u064a\u0644 \u0639\u0644\u0649 \u0627\u0644\u0623\u0635\u0648\u0627\u062a \u0648\u0627\u0644\u0641\u064a\u062f\u064a\u0648\u0647\u0627\u062a\u060c \u0631\u0648\u0627\u064a\u0629 \u0627\u0644\u0642\u0635\u0635... \u0625\u0644\u062e)",
            "x": 200,
            "y": " ",
            "z": "\u0645\u0647\u0627\u0631\u0627\u062a"
        },
        "query": [
            "Left-justify {a} to {x} characters using {y} as padding, and find the position of {z} in the result.",
            "Pad {a} to the left with {y} until it reaches {x} characters, then find the index of {z}.",
            "Make {a} left-justified with a total length of {x} using {y} as the fill character, and locate the position of {z}."
        ],
        "language": "arb_Arab"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).title().count(z)\nprint(answer)\n```",
        "variables": {
            "a": "Ukhamarus aka jan walt'\u00e4w askicha\u00f1ax ch'amawa, apnaqkay fusi\u00f3n reactoranak lurirx walja mara m\u00e4khipatatw u\u00f1jaska\u00f1\u00e4ni.",
            "x": "a",
            "y": "o",
            "z": "O"
        },
        "query": [
            "Replace {x} with {y} in {a}, convert the result to title case, and count the occurrences of {z}.",
            "Substitute {x} with {y} in {a}, change the result to title case, and find the number of times {z} appears.",
            "Swap {x} for {y} in {a}, transform the result to title case, and tally the instances of {z}."
        ],
        "language": "ayr_Latn"
    },
    {
        "solution": "```python\nanswer = a.swapcase().rjust(x, y).isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Y\u0129la w\u0129 \u0129vindan\u0129 ya \u0169th\u0169m\u0169a ya kw\u0129kala vand\u0169, w\u0129th\u0129awa na \u0129vinda ya kw\u0129tan\u0129thya na kwosa ndat\u0129ka ing\u0129 k\u0169ua k\u0129nd\u0169 kya vata.",
            "x": 150,
            "y": "-"
        },
        "query": [
            "Swap the case of {a}, right-justify it to {x} characters using {y} as padding, and check if the result is alphabetic.",
            "Change the case of {a}, pad it to the right to make it {x} characters long with {y}, and verify if the final string contains only letters.",
            "Convert {a} to the opposite case, right-align it to {x} characters with {y} as the padding character, and determine if the resulting string is alphabetic."
        ],
        "language": "kam_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('utf-8').endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0f51\u0f7a\u0f0b\u0f53\u0f66\u0f0b\u0f66\u0fb3\u0f62\u0f0b\u0f61\u0f44\u0f0b\u0f5f\u0fb3\u0f0b\u0f56\u0f0b\u0f56\u0f5e\u0f72\u0f0b\u0f54\u0f60\u0f72\u0f0b\u0f53\u0f44\u0f0b\u0f46\u0f62\u0f0b\u0f51\u0f74\u0f66\u0f0b\u0f62\u0f97\u0f7a\u0f66\u0f0b\u0f66\u0f74\u0f0b\u0f58\u0f0b\u0f62\u0f0b\u0f42\u0f59\u0f44\u0f0b\u0f54\u0f7c\u0f0b\u0f56\u0f62\u0f92\u0f63\u0f0b\u0f53\u0f66\u0f0b\u0f53\u0f74\u0f56\u0f0b\u0f55\u0fb1\u0f7c\u0f42\u0f66\u0f0b\u0f56\u0f62\u0f92\u0fb1\u0f74\u0f51\u0f0b\u0f56\u0fb1\u0f44\u0f0b\u0f55\u0fb1\u0f7c\u0f42\u0f66\u0f0b\u0f66\u0f74\u0f0b\u0f63\u0f7c\u0f42\u0f0b\u0f54\u0f0b\u0f61\u0f72\u0f53\u0f0d",
            "x": "\u0f61\u0f72\u0f53\u0f0d"
        },
        "query": [
            "Encode {a} to UTF-8 and decode it back, then check if it ends with {x}.",
            "Convert {a} to UTF-8 and back, then verify if it ends with {x}.",
            "Transform {a} to UTF-8 and decode it, then determine if it ends with {x}."
        ],
        "language": "bod_Tibt"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).rsplit(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0915\u0942\u091f\u0928\u0940\u0924\u093f\u091c\u094d\u091e\u0939\u0930\u0942\u0932\u0947 \u0905\u092b\u0917\u093e\u0928\u093f\u0938\u094d\u0924\u093e\u0928\u0915\u094b \u0938\u0902\u0935\u093f\u0927\u093e\u0928\u092e\u093e \u0905\u0928\u093e\u0935\u0936\u094d\u092f\u0915 \u0930\u0942\u092a\u092e\u093e \u0905\u092a\u0939\u0930\u0923 \u0928\u093f\u0930\u094d\u0927\u093e\u0930\u093f\u0924 \u0917\u0930\u094d\u0928 \u092a\u0930\u094d\u092f\u093e\u092a\u094d\u0924 \u0905\u0938\u094d\u092a\u0937\u094d\u091f\u0924\u093e \u092b\u0947\u0932\u093e \u092a\u093e\u0930\u0947 \u092d\u0928\u0947\u0964",
            "x": "\u0915",
            "y": " ",
            "z": 3
        },
        "query": [
            "Remove leading {x} from {a} and split the result by {y} from the right, up to {z} times.",
            "Strip leading {x} from {a} and then perform a right split by {y}, limiting to {z} splits.",
            "Eliminate leading {x} from {a} and split the modified string by {y} from the right side, up to {z} occurrences."
        ],
        "language": "npi_Deva"
    },
    {
        "solution": "```python\nanswer = a.isdigit() and a.startswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u07d5\u07d9\u07ce\u07de\u07cc\u07eb",
            "x": "\u07d5"
        },
        "query": [
            "Check if {a} is composed of digits and starts with {x}.",
            "Verify if {a} consists of digits and begins with {x}.",
            "Determine if {a} is made up of digits and starts with {x}."
        ],
        "language": "nqo_Nkoo"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).rjust(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u101d\u1062\u1086\u1038\u101e\u1031\u1078\u103a\u1082\u1089\u1010\u102d\u102f\u101d\u103a\u1038\u1075\u1082\u1083\u1087 \u1078\u1030\u101d\u103a\u1088\u1019\u1030\u1004\u103a\u1038\u1022\u1062\u107c\u103a\u1087\u1015\u1062\u1075\u103a\u1087\u101a\u101d\u103a\u1089\u1078\u102d\u102f\u1004\u103a \u101e\u1062\u1086\u1081\u1084\u1088\u101c\u1035\u1075\u103a\u1089\u1022\u103d\u107c\u103a\u1087(filament) \u1022\u107c\u103a\u1019\u102e\u1038\u107c\u103a\u1082\u1038\u101c\u103d\u1010\u103a\u1087\u107e\u1086\u1038\u107c\u107c\u103a\u1089 \u1075\u1019\u103a\u1038\u101c\u102d\u102f\u107c\u103a\u1038\u1019\u1083\u1038\u1078\u1062\u1004\u103a\u1088\u1019\u1086\u1088\u101e\u1031 \u1081\u1035\u1010\u103a\u1038\u1081\u103a\u1082\u1088\u101c\u103d\u1010\u103a\u1087\u107e\u1086\u1038\u107c\u107c\u103a\u1089 \u1022\u1019\u103a\u1087\u1081\u1035\u1010\u103a\u1038\u1075\u1062\u107c\u103a\u101c\u1086\u1088\u101a\u101d\u103a\u1089\u104b",
            "x": "\u101d\u1062\u1086\u1038",
            "y": 100,
            "z": " "
        },
        "query": [
            "Remove leading characters in {x} from {a} and right-justify it within {y} characters using {z} for padding.",
            "Strip leading characters specified in {x} from {a} and align it to the right within {y} characters, padding with {z}.",
            "Eliminate leading {x} characters from {a} and right-align it in a field of {y} characters, using {z} as the padding character."
        ],
        "language": "shn_Mymr"
    },
    {
        "solution": "```python\nanswer = a.title().swapcase().find(x)\nprint(answer)\n```",
        "variables": {
            "a": "Arias kae s\u025b,\"Mehw\u025b kwan s\u025b mefi m'adwuma nyinaa ase Dwoada\".",
            "x": "K"
        },
        "query": [
            "Convert {a} to title case, swap its case, and find the position of {x}.",
            "Change {a} to title case, invert its case, and locate the index of {x}.",
            "Transform {a} to title case, reverse its case, and determine the position of {x}."
        ],
        "language": "twi_Latn_asan1239"
    },
    {
        "solution": "```python\nanswer = a[x:y].title().encode('ascii')\nprint(answer)\n```",
        "variables": {
            "a": "Efter branden blev f\u00e6stningen bevaret og beskyttet og st\u00e5r nu som en af Bhutans mest sev\u00e6rdige attraktioner.",
            "x": 6,
            "y": 13
        },
        "query": [
            "Title-case the substring of {a} from {x} to {y} and encode it in ASCII.",
            "Convert the substring of {a} from {x} to {y} to title case and encode it using ASCII.",
            "Take the substring of {a} from {x} to {y}, convert it to title case, and encode it in ASCII."
        ],
        "language": "dan_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::z].isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0412\u0438 \u0442\u043e\u0447\u043d\u043e \u0437\u043c\u043e\u043a\u043d\u0435\u0442\u0435, \u044f\u043a\u0449\u043e \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u0442\u0438\u043c\u0435\u0442\u0435 \u043c\u0456\u0441\u0442 \u0430\u0431\u043e \u0433\u0443\u043b\u044f\u0442\u0438\u043c\u0435\u0442\u0435 \u0442\u0440\u043e\u043f\u0430\u043c\u0438, \u0449\u043e \u0437\u0432\u0438\u0432\u0430\u044e\u0442\u044c\u0441\u044f \u043f\u043e\u0440\u0443\u0447 \u0456\u0437 \u0432\u043e\u0434\u043e\u0441\u043f\u0430\u0434\u0430\u043c\u0438.",
            "x": 5,
            "z": 3
        },
        "query": [
            "Is the substring of {a} starting from position {x} and taking every {z}-th character a valid identifier?",
            "Does the substring of {a} that begins at position {x} and includes every {z}-th character form a valid identifier?",
            "Can the substring of {a} starting at index {x} and taking every {z}-th character be considered a valid identifier?"
        ],
        "language": "ukr_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "Pat be \u0257o daayi dige kujeji tsari zamanu jotta, him\u0253e \u0257u\u0257\u0257um \u0257o hata \u0257um be tabi\u2019a wonnugo kujeji him\u0253e je jokkolle en hosi. \u0253e \u0257o naftira kujeji diidol noone \u0253e diida ha bangoru.",
            "x": "Pat"
        },
        "query": [
            "Remove leading {x} from {a} and capitalize the result.",
            "Strip leading {x} from {a} and convert the first character to uppercase.",
            "Delete leading {x} from {a} and change the first letter to uppercase."
        ],
        "language": "fuv_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).center(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0935\u0940\u091c\u093c\u093e \u0915\u0940 \u091c\u0930\u0942\u0930\u0924 \u0905\u090a\u0930 \u0916\u0930\u094d\u091a \u0905\u0932\u0917-\u0905\u0932\u0917 \u0926\u0947\u0936 \u092e\u093e \u0905\u0932\u0917-\u0905\u0932\u0917 \u0939\u0948 \u0905\u090a\u0930 \u0906\u092a \u091c\u090a\u0928\u0947 \u0926\u0947\u0936 \u0915\u093e \u0939\u0948\u0902 \u0913\u0938\u0947 \u092d\u0940 \u0905\u0938\u0930 \u092a\u095c\u0924 \u0939\u0948\u0902\u0964",
            "x": "\u0905",
            "y": 80,
            "z": " "
        },
        "query": [
            "Remove leading and trailing {x} from {a} and center it in a string of length {y} using {z} as the fill character.",
            "Strip {x} from both ends of {a} and then center it in a string of length {y} with {z} as the padding character.",
            "Trim {x} from the start and end of {a}, then center it in a string of length {y} filled with {z}."
        ],
        "language": "awa_Deva"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).rjust(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "\u06a4\u0631\u0648\u062a\u0648\u0646 \u0645\u0645\u06a4\u0648\u06bd\u0648 \u0645\u0648\u0627\u062a\u0646 \u0644\u0633\u062a\u0631\u0642 \u06a4\u0648\u0633\u064a\u062a\u064a\u0641 \u0633\u0627\u062f\u06a0\u0643\u0646 \u0646\u064a\u0648\u062a\u0631\u0648\u0646 \u0627\u0646\u062f\u0642 \u0645\u0645\u06a4\u0648\u06bd\u0648 \u0645\u0648\u0627\u062a\u0646\u06d4 \u0627\u064a\u0644\u064a\u06a9\u062a\u0631\u0648\u0646 \u0645\u0645\u06a4\u0648\u06bd\u0648 \u0645\u0648\u0627\u062a\u0646 \u0644\u0633\u062a\u0631\u0642 \u0646\u064a\u0762\u0627\u062a\u064a\u0641.",
            "x": "\u0645\u0648\u0627\u062a\u0646",
            "y": "\u0634\u062d\u0646\u0629",
            "z": 100,
            "w": " "
        },
        "query": [
            "Replace {x} with {y} in {a} and right-justify the result in a string of length {z} using {w} as the fill character.",
            "Substitute {x} with {y} in {a} and pad the result to the right to make it {z} characters long using {w} as the padding character.",
            "Change {x} to {y} in {a} and align the result to the right in a string of length {z}, filling with {w}."
        ],
        "language": "min_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:y].encode('utf-8').decode('ascii', 'ignore')\nprint(answer)\n```",
        "variables": {
            "a": "\u091c\u093f\u0938\u0932\u0948 \u0924\u0941\u0938 \u0905\u092a\u0928\u0940 \u092e\u093e\u0924\u0943\u092d\u0942\u092e\u093f \u091a \u0914\u0902\u0926\u0947 \u0913, \u0924\u093e\u0902 \u0907\u092e\u093f\u0917\u094d\u0930\u0947\u0936\u0928 \u091a\u0948\u0915\u094d\u0915 \u0906\u092e\u0924\u094c\u0930 \u092a\u0930 \u0928\u0947\u0908\u0902 \u0939\u094b\u0902\u0926\u093e \u091c\u093e\u0902 \u0930\u0938\u094d\u092e\u0940 \u0939\u094b\u0902\u0926\u093e \u0910, \u092a\u0930 \u0938\u0940\u092e\u093e \u0936\u0941\u0932\u094d\u0915 \u0928\u093f\u092f\u0902\u0924\u094d\u0930\u0923 \u0907\u0915 \u092a\u0930\u0947\u0936\u093e\u0928\u0940 \u0939\u094b\u0908 \u0938\u0915\u0926\u0940 \u0910\u0964",
            "x": 10,
            "y": 50
        },
        "query": [
            "Extract the substring from {x} to {y} in {a}, encode it in UTF-8, and decode it in ASCII ignoring errors.",
            "Get the substring from index {x} to {y} in {a}, convert it to UTF-8, and then decode it to ASCII while ignoring errors.",
            "Take the substring from {x} to {y} in {a}, encode it using UTF-8, and decode it to ASCII, ignoring any errors."
        ],
        "language": "dgo_Deva"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).zfill(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0935\u093f\u0936\u0947\u0937 \u0930\u0942\u092a\u0947\u0923 \u0938\u094d\u0935 \u092a\u094d\u0930\u093e\u0930\u0902\u092d\u0928\u0902 \u0926\u093f\u0935\u0938\u0947, \u0905\u0928\u0941\u0915\u0941\u0932\u0928\u0947 \u0938\u0939\u093e\u092f\u0924\u093e \u0915\u0943\u0924\u0902 \u092a\u094d\u0930\u0924\u093f \u092a\u0936\u094d\u091a\u093f\u092e\u0940 \u0936\u0948\u0932\u0940 \u0905\u092a\u093f \u091a \u0917\u0941\u0923\u0935\u0924\u094d\u0924\u093e\u0902 \u0905\u0924\u093f\u0925\u093f\u0936\u093e\u0932\u093e\u092f\u093e\u0902, \u092d\u094b\u091c\u0928 \u0905\u092a\u093f \u091a \u0938\u0947\u0935\u093e\u092d\u094d\u092f\u092e\u094d \u0935\u094d\u092f\u092f\u0902 \u0915\u0943\u0924\u0947 \u0935\u093f\u091a\u093e\u0930\u0902 \u0915\u0930\u0924\u0941 \u0964",
            "x": "\u0935\u093f\u0936\u0947\u0937",
            "y": "\u0935\u093f\u0936\u093f\u0937\u094d\u091f",
            "z": 150
        },
        "query": [
            "Replace {x} with {y} in {a} and pad the result with zeros to make its length {z}.",
            "Substitute {x} with {y} in {a} and zero-fill the result to ensure its length is {z}.",
            "Change {x} to {y} in {a} and add leading zeros to make the total length {z}."
        ],
        "language": "san_Deva"
    },
    {
        "solution": "```python\nanswer = a[x:y].title()\nprint(answer)\n```",
        "variables": {
            "a": "\u2018Sikh\u2019oonni amantaan isaanii kan Hinduyiizimii irraa akka adda ta\u2019etti ilaalu, yooma Hinduu irraa dhufuu isaa fi aadaa Hinduu ta\u2019uu isaa amanan iyyuu.",
            "x": 10,
            "y": 30
        },
        "query": [
            "Convert the substring of {a} from {x} to {y} to title case.",
            "Change the substring of {a} ranging from index {x} to {y} to title case.",
            "Transform the part of {a} between {x} and {y} into title case."
        ],
        "language": "gaz_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "Ndlela yo olova yo sungula bindzu ro tsala hi swa vufambi i ku antswisa vuswikoti bya wena eka webusayiti ya bulogo leyi kumekaka ya swa vufambi.",
            "x": "Ndlela"
        },
        "query": [
            "Remove characters in {x} from both ends of {a} and capitalize the result.",
            "Trim characters in {x} from the start and end of {a}, then capitalize the outcome.",
            "Strip characters in {x} from both sides of {a} and convert the result to capitalized form."
        ],
        "language": "tso_Latn"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).encode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "\u062a\u062d\u0635\u0644 \u0639\u0644\u0649 \u0646\u0633\u062e \u0645\u0646 \u0627\u0644\u0633\u064a\u0627\u0633\u0629 \u0627\u0644\u062e\u0627\u0635\u0629 \u0628\u0643 \u0648\u062a\u0641\u0627\u0635\u064a\u0644 \u0627\u0644\u0627\u062a\u0635\u0627\u0644 \u0627\u0644\u062e\u0627\u0635\u0629 \u0628\u0634\u0631\u0643\u0629 \u0627\u0644\u062a\u0623\u0645\u064a\u0646 \u0648\u0647\u0632\u0647\u0627 \u0645\u0639\u0643.",
            "x": 100,
            "y": " "
        },
        "query": [
            "Left-justify {a} within {x} characters using {y} for padding and encode the result in UTF-8.",
            "Pad {a} to the left with {y} until it reaches {x} characters and then encode it in UTF-8.",
            "Make {a} left-justified with a total width of {x} characters, using {y} as the padding character, and encode it in UTF-8."
        ],
        "language": "aeb_Arab"
    },
    {
        "solution": "```python\nanswer = a.find(x) != -1 and a.isascii()\nprint(answer)\n```",
        "variables": {
            "a": "De \u0253e emimo ko baba man wii, o noti \u201co kasi wiyugo ko\u0257ume, tan o dari o\u0257o laara.\u201d",
            "x": "kasi"
        },
        "query": [
            "Check if {x} is found in {a} and if all characters in {a} are ASCII.",
            "Determine if {x} exists in {a} and verify that all characters in {a} are ASCII.",
            "Verify the presence of {x} in {a} and ensure all characters in {a} are ASCII."
        ],
        "language": "fuv_Latn"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u2d30\u2d4f\u2d30\u2d4e\u2d3d \u2d4f \u2d53\u2d54\u2d4e\u2d4e\u2d53\u2d59 \u2d49\u2d47\u2d47\u2d4f \u2d37 \u2d30\u2d3d\u2d6f \u2d49\u2d56\u2d54\u2d3c\u2d30\u2d4f \u2d4f \u2d5c\u2d53\u2d54\u2d53\u2d3c\u2d5c \u2d30\u2d37 \u2d53\u2d54 \u2d30\u2d4a\u2d4a\u2d4f\u2d5c \u2d62\u2d30\u2d4f \u2d61\u2d30\u2d4e\u2d53\u2d4f \u2d30\u2d37 \u2d49\u2d33 \u2d61\u2d30\u2d4d\u2d4d\u2d49 \u2d31\u2d30\u2d40\u2d54\u2d30 \u2d49\u2d37\u2d53\u2d59\u2d4f, \u2d59 \u2d53\u2d62\u2d30 \u2d37\u2d30 \u2d30\u2d40\u2d30 \u2d59\u2d4f\u2d3c\u2d30\u2d4d\u2d4f\u2d5c \u2d5c\u2d4f\u2d31\u2d30\u2d39\u2d49\u2d4f \u2d5c\u2d49\u2d4f\u2d30\u2d4e\u2d53\u2d54\u2d49\u2d4f \u2d49\u2d4e\u2d59\u2d30\u2d59\u2d30\u2d5c\u2d4f \u2d4f\u2d4f\u2d59\u2d4f\u2d5c \u2d43\u2d40\u2d30 \u2d30\u2d37 \u2d62\u2d49\u2d4d\u2d49 \u2d53\u2d4e\u2d4f\u2d3d\u2d4f\u2d49.",
            "x": "\u2d30"
        },
        "query": [
            "Remove {x} from the start of {a} and check if the result is numeric.",
            "Strip {x} from the beginning of {a} and verify if the remaining string is numeric.",
            "Eliminate {x} from the start of {a} and determine if the outcome is a numeric value."
        ],
        "language": "zgh_Tfng"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='ignore').decode(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0995\u09cd\u09b2\u09be\u09ac\u099f\u09cb\u09f0 \u09ac\u09be\u09ac\u09c7 \u09ac\u2019\u09ac\u09c7\u0995\u09f0 \u09ac\u09be\u09b9\u09bf\u09f0\u09c7 \u0986\u09a8 \u0995\u09cb\u09a8\u09c7\u0993 \u0995\u09c7\u09a4\u09bf\u09df\u09be\u0993 \u0987\u09ae\u09be\u09a8\u09ac\u09be\u09f0 \u0996\u09c7\u09b2\u09be \u09a8\u09be\u099b\u09bf\u09b2 \u09ac\u09be \u0997\u2019\u09b2 \u0995\u09f0\u09be \u09a8\u09be\u099b\u09bf\u09b2\u0964",
            "x": "utf-8"
        },
        "query": [
            "Encode {a} with {x} encoding, ignoring errors, and then decode it back.",
            "Using {x} encoding, encode {a} while ignoring errors, and decode it back.",
            "Encode the string {a} with {x} encoding, ignore any errors, and decode it back to the original."
        ],
        "language": "asm_Beng"
    },
    {
        "solution": "```python\nanswer = a.rsplit(x, y)[-1].islower()\nprint(answer)\n```",
        "variables": {
            "a": "Viphikiro vya pa tempile la Kerala viku\u0175a vyakukondweska comene kuwonerera, paku\u0175a kujumpha kwa mskambo wa zovu zakutoweskeka, kwimba na vinthu vinyake.",
            "x": " ",
            "y": 3
        },
        "query": [
            "Split {a} by {x} up to {y} times from the right and check if the last segment is in lowercase.",
            "Divide {a} by {x} from the right side up to {y} times and verify if the final part is in lowercase.",
            "Separate {a} using {x} from the right up to {y} times and determine if the last section is in lowercase."
        ],
        "language": "tum_Latn"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).split(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0939\u093e\u0932\u093e\u0902-\u0915\u0947, \u0916\u0924\u0930\u0947 \u0926\u0947 \u0917\u0902\u092d\u0940\u0930 \u0938\u094d\u0924\u0930 \u0917\u0940 \u0918\u091f\u094d\u091f \u0915\u0930\u0928\u0947 \u0926\u093e \u092e\u0924\u0932\u092c \u090f\u0939\u094d\u200c\u200c \u0928\u0947\u0908\u0902 \u0910 \u091c\u0947 \u0938\u093e\u0930\u093e \u0916\u0924\u0930\u093e \u091f\u0932\u0940 \u0917\u0947\u0906 \u0910\u0964",
            "x": 4,
            "y": " "
        },
        "query": [
            "Replace tabs in {a} with {x} spaces and then split by {y}.",
            "Convert tabs in {a} to {x} spaces and then divide by {y}.",
            "Substitute tabs in {a} with {x} spaces and then separate by {y}."
        ],
        "language": "dgo_Deva"
    },
    {
        "solution": "```python\nanswer = a.casefold().count(x)\nprint(answer)\n```",
        "variables": {
            "a": "Hetta \u00e1st\u00f8\u00f0i\u00f0 talar \u00edm\u00f3ti upp\u00e1haldinum, at m\u00e1nin yvirh\u00f8vur einki jar\u00f0fr\u00f8\u00f0iligt virksemi hevur.",
            "x": "a"
        },
        "query": [
            "Count occurrences of {x} in the casefolded version of {a}.",
            "Find the number of times {x} appears in the casefolded string {a}.",
            "Determine how often {x} occurs in the casefolded form of {a}."
        ],
        "language": "fao_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).split(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u06cc\u0645 \u0634\u06cc\u065b\u0631 \u0686\u06be\u0655 \u0648\u0627\u0631\u06cc\u06c1 \u0632\u06cc\u0627\u062f\u0655 \u067e\u0631\u06cc\u0634\u0627\u0646\u06cc \u0645\u0646\u0632 \u06c1\u06cc\u0646\u06c1 \u0622\u0645\u062a\u060c \u062a\u06a9\u06cc\u0627\u0632\u0650 \u062a\u0645 \u0686\u0650\u06be \u062f\u0645\u0627\u063a\u0633 \u0645\u062a\u062d\u0631\u06a9 \u06a9\u0670\u0631\u0646\u06c1 \u062e\u0627\u0637\u0631\u0655 \"\u062e\u0637\u0631\u0646\u0627\u06a9 \u0631\u0648\u06cc\u0646 \u0645\u0646\u0632 \u062d\u0635\u06c1 \u0646\u06cc\u0648\u0627\u0646\u060c \u0644\u0691\u0627\u0626\u0646 \u062c\u06be\u06af\u0691\u0646 \u0645\u0646\u0632 \u0645\u0644\u0648\u062b \u0631\u0648\u0632\u0627\u0646 \u062a\u06c1\u0655 \u0627\u062a\u06be\u0627\u0631\u0679\u06cc \u06cc\u0633 \u0686\u06cc\u0644\u0646\u062c \u06a9\u0670\u0631\u0627\u0646\u06d4\"",
            "x": " ",
            "y": "\u060c",
            "z": 3
        },
        "query": [
            "Remove leading and trailing {x} characters from {a} and split by {y} up to {z} times.",
            "Trim {x} from both ends of {a} and then split it by {y} up to {z} occurrences.",
            "Strip {x} from the start and end of {a}, then divide it by {y} up to {z} splits."
        ],
        "language": "kas_Arab"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).title().rfind(y)\nprint(answer)\n```",
        "variables": {
            "a": "Air 28mh dhen \u00d2gmhios, chaidh \u00e0rd-riaghladair Libia agus an t-oighre a bu d\u00f2cha do Mhussolini, Marshall Italo Balbo, a mharbhadh le urchairean o fheachdan c\u00e0irdeil nuair a bha e a\u2019 tighinn a laighe ann an Tobruk.",
            "x": "Air",
            "y": "a"
        },
        "query": [
            "Strip leading characters in {x} from {a}, convert to title case, and find the last occurrence of {y}.",
            "Remove leading {x} from {a}, change to title case, and locate the last position of {y}.",
            "Trim leading {x} from {a}, capitalize each word, and determine the last index of {y}."
        ],
        "language": "gla_Latn"
    },
    {
        "solution": "```python\nanswer = a.isnumeric() and a.isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u0645 \u062f\u0648\u0646\u064a\u062f\u0648 \u062f\u0648\u0627\u0631\u062a\u0627\u0646\u0627\u060c \u0644\u0648\u0643\u062a\u0648 \u0647\u0627\u0633\u062a\u0631 \u0632\u0627\u064a\u062f\u0627 \u0631\u0627\u0633\u0627 \u0641\u0644\u0648\u0632\u064a\u0646\u060c \u0648\u0646\u0648\u064a \u0628\u0644\u0627\u0631\u0648 \u0643\u0648\u0646\u0627 \u0642\u0627\u0646\u0627\u064a \u0628\u064a\u062f\u064a."
        },
        "query": [
            "Check if {a} consists only of numeric and printable characters.",
            "Verify if {a} contains only numeric and printable characters.",
            "Determine if {a} is made up solely of numeric and printable characters."
        ],
        "language": "knc_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:y].encode('utf-8').decode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "2 \u0633\u0627\u0626\u06d5\u062a\u0644\u0649\u0643 \u0646\u06c7\u062a\u06c7\u0642\u0649\u062f\u0627 \u0626\u06c7 \u00ab\u0628\u06c8\u06af\u06c8\u0646 Apple \u062a\u06d0\u0644\u06d0\u0641\u0648\u0646\u0646\u0649 \u0642\u0627\u064a\u062a\u0627 \u0643\u06d5\u0634\u0649\u067e \u0642\u0649\u0644\u062f\u0649\u060c \u0628\u06c8\u06af\u06c8\u0646 \u0628\u0649\u0632 \u062a\u0627\u0631\u0649\u062e \u064a\u0627\u0632\u0649\u0645\u0649\u0632\u00bb \u062f\u06d0\u062f\u0649.",
            "x": 2,
            "y": 15
        },
        "query": [
            "Encode the substring of {a} from {x} to {y} to UTF-8 and then decode it back to a string.",
            "Convert the substring of {a} from {x} to {y} to UTF-8 bytes and then back to a string.",
            "Take the substring of {a} from {x} to {y}, encode it in UTF-8, and decode it back to a string."
        ],
        "language": "uig_Arab"
    },
    {
        "solution": "```python\nanswer = a[x::z].isspace()\nprint(answer)\n```",
        "variables": {
            "a": "\u0417\u0430\u0442\u0432\u043e\u0440\u044a\u0442 \u043f\u0440\u0438\u0434\u043e\u0431\u0438 \u043b\u043e\u0448\u0430 \u0441\u043b\u0430\u0432\u0430, \u0441\u043b\u0435\u0434 \u043a\u0430\u0442\u043e \u0442\u0430\u043c \u0431\u0435 \u043e\u0442\u043a\u0440\u0438\u0442\u043e \u043c\u0430\u043b\u0442\u0440\u0435\u0442\u0438\u0440\u0430\u043d\u0435 \u043d\u0430 \u0437\u0430\u0442\u0432\u043e\u0440\u043d\u0438\u0446\u0438, \u0441\u043b\u0435\u0434 \u043a\u0430\u0442\u043e \u0430\u043c\u0435\u0440\u0438\u043a\u0430\u043d\u0441\u043a\u0438\u0442\u0435 \u0441\u0438\u043b\u0438 \u043f\u043e\u0435\u0445\u0430 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0430.",
            "x": 5,
            "z": 10
        },
        "query": [
            "Check if every {z}-th character from index {x} in {a} is a whitespace character.",
            "Determine if each {z}-th character starting from index {x} in {a} is a space.",
            "Verify if every {z}-th character from position {x} in {a} is a whitespace."
        ],
        "language": "bul_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.title().swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "Deyvid Hedleyin c\u0259suslu\u011fu v\u0259 informasiya toplamas\u0131 say\u0259sind\u0259, Pakistan\u0131n Laskhar-e-Taiba militan qrupundan 10 n\u0259f\u0259rd\u0259n ibar\u0259t silahl\u0131 \u015f\u0259xsin \u0259m\u0259liyyat ba\u015f tutdu."
        },
        "query": [
            "Convert {a} to title case and then swap the case of each character.",
            "Transform {a} to title case and then invert the case of each letter.",
            "Change {a} to title case and then reverse the case of every character."
        ],
        "language": "azj_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0639\u0646\u0635\u0631\u0644\u0627\u0631\u0646\u0627\u0646 \u062a\u0631\u06a9\u06cc\u0628\u0644\u0631 \u0627\u0626\u0644\u06cc\u0647 \u0628\u0648\u0644\u0644\u0631 \u0628\u06cc\u0631 \u062d\u0627\u0644\u062a\u062f\u0646 \u0627\u0648\u0628\u06cc\u0633\u06cc \u062d\u0627\u0644\u062a\u0647 \u062a\u0628\u062f\u06cc\u0644 \u0627\u0648\u0644\u0633\u0648\u0646\u0646\u0627\u0631 \u0648 \u062a\u063a\u06cc\u06cc\u0631 \u062a\u0627\u067e\u0645\u0627\u0633\u0646\u0646\u0627\u0631.",
            "x": 0,
            "y": 8
        },
        "query": [
            "Check if the substring of {a} from {x} to {y} is a valid identifier.",
            "Determine if the portion of {a} between {x} and {y} is a valid identifier.",
            "Verify if the segment of {a} from index {x} to {y} is a valid identifier."
        ],
        "language": "azb_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:y].upper().count(z)\nprint(answer)\n```",
        "variables": {
            "a": "Chi\u1ebfu theo m\u00f4 h\u00ecnh Bohr gi\u1ea3n h\u00f3a, \u0111\u00e2y l\u00e0 m\u1ed9t th\u1ef1c th\u1ec3 v\u00f4 c\u00f9ng ph\u1ee9c t\u1ea1p bao g\u1ed3m m\u1ed9t h\u1ea1t nh\u00e2n c\u00f3 c\u00e1c electron xoay quanh theo qu\u1ef9 \u0111\u1ea1o, g\u1ea7n gi\u1ed1ng nh\u01b0 c\u00e1c h\u00e0nh tinh xoay quanh m\u1eb7t tr\u1eddi - xem H\u00ecnh 1.1.",
            "x": 10,
            "y": 50,
            "z": "O"
        },
        "query": [
            "Count the occurrences of {z} in the uppercase version of the substring of {a} from {x} to {y}.",
            "How many times does {z} appear in the uppercase substring of {a} from index {x} to {y}?",
            "Find the number of occurrences of {z} in the uppercase substring of {a} between indices {x} and {y}."
        ],
        "language": "vie_Latn"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).islower()\nprint(answer)\n```",
        "variables": {
            "a": "250 godina kasnije Guinness je postao globalna tvrtka koja godi\u0161nje ostvari promet od 10 milijardi eura (14,7 milijardi USD).",
            "x": "."
        },
        "query": [
            "Check if the string {a} without trailing {x} characters is in lowercase.",
            "Verify if the string {a} with trailing {x} characters removed is in lowercase.",
            "Determine if the string {a} after removing trailing {x} characters is in lowercase."
        ],
        "language": "hrv_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode(x).isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u0935\u0947\u0928\u0947\u095b\u0941\u090f\u0932\u093e \u0915\u0947 \u0915\u093e\u092e \u0915\u0930\u0928\u0947 \u0935\u093e\u0932\u0947 \u0926\u094b \u0924\u093f\u0939\u093e\u0908 \u0932\u094b\u0917 \u0938\u0947\u0935\u093e \u0915\u094d\u0937\u0947\u0924\u094d\u0930 \u092e\u0947\u0902 \u0915\u093e\u092e \u0915\u0930\u0924\u0947 \u0939\u0948\u0902, \u0909\u0926\u094d\u092f\u094b\u0917 \u092e\u0947\u0902 \u0932\u0917\u092d\u0917 \u090f\u0915 \u091a\u094c\u0925\u093e\u0908 \u0915\u093e\u092e \u0915\u0930\u0924\u0947 \u0939\u0948\u0902 \u0914\u0930 \u0915\u0943\u0937\u093f \u092e\u0947\u0902 \u0907\u0938\u0915\u093e \u092a\u093e\u0901\u091a\u0935\u093e \u092d\u093e\u0917 \u0915\u093e\u092e \u0915\u0930\u0924\u093e \u0939\u0948\u0964",
            "x": "utf-8"
        },
        "query": [
            "Verify if the string {a} encoded and then decoded with {x} encoding is numeric.",
            "Check if the string {a} is numeric after being encoded and decoded using {x} encoding.",
            "Determine if the string {a} remains numeric after encoding and decoding with {x} encoding."
        ],
        "language": "hin_Deva"
    },
    {
        "solution": "```python\nanswer = a.swapcase().endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0190w\u0254 mu s\u025b \u025bny\u025b \u0254man ade\u025b de\u025b, nanso \u025bt\u0254 da bi a w\u0254gye ah\u0254ho\u0254 bi tes\u025b aman mpanyinfo\u0254 na atitire ahodo\u0254.",
            "x": "AHODO\u0186."
        },
        "query": [
            "Check if the case-swapped version of {a} ends with {x}.",
            "Determine if the case-inverted string of {a} has {x} at the end.",
            "Verify if {x} is the suffix of the case-flipped {a}."
        ],
        "language": "twi_Latn_asan1239"
    },
    {
        "solution": "```python\nanswer = a[:x].zfill(y).isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u062a\u06d5\u062e\u0645\u0649\u0646\u06d5\u0646 15-\u0626\u06d5\u0633\u0649\u0631\u062f\u06d5 \u06af\u06d0\u0631\u0645\u0627\u0646\u0649\u064a\u06d5 \u0645\u06d5\u062f\u06d5\u0646\u0649\u064a\u0649\u062a\u0649 \u0634\u0649\u0645\u0627\u0644\u0649\u064a \u0626\u06d0\u0633\u062a\u0648\u0646\u0649\u064a\u06d5\u06af\u06d5 \u0626\u06d0\u063a\u0649\u0631 \u062a\u06d5\u0633\u0649\u0631 \u0643\u06c6\u0631\u0633\u06d5\u062a\u0643\u06d5\u0646.",
            "x": 10,
            "y": 15
        },
        "query": [
            "Check if the first {x} characters of {a} filled with zeros to length {y} form a valid identifier.",
            "Determine if padding the first {x} characters of {a} with zeros to reach length {y} results in a valid identifier.",
            "Verify if the initial {x} characters of {a}, zero-padded to a length of {y}, constitute a valid identifier."
        ],
        "language": "uig_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:y:z].isspace()\nprint(answer)\n```",
        "variables": {
            "a": "\u041d\u0430 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u044f \u043c\u0435\u0436\u0434\u0443 \u0410\u0440\u043c\u0435\u043d\u0438\u0435\u0439 \u0438 \u0410\u0437\u0435\u0440\u0431\u0430\u0439\u0434\u0436\u0430\u043d\u043e\u043c \u043f\u043e-\u043f\u0440\u0435\u0436\u043d\u0435\u043c\u0443 \u043d\u0435\u0433\u0430\u0442\u0438\u0432\u043d\u043e \u0432\u043b\u0438\u044f\u044e\u0442 \u0434\u0438\u043f\u043b\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u043f\u043e\u0440\u044b \u0432 \u043e\u0442\u043d\u043e\u0448\u0435\u043d\u0438\u0438 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u0440\u0435\u0433\u0438\u043e\u043d\u0430.",
            "x": 2,
            "y": 20,
            "z": 2
        },
        "query": [
            "Determine if the substring of {a} from {x} to {y} with step {z} consists only of whitespace characters.",
            "Check if the sliced part of {a} from index {x} to {y} with step {z} contains only whitespace.",
            "Is the substring of {a} from {x} to {y} with step {z} made up entirely of whitespace characters?"
        ],
        "language": "rus_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).replace(y, z).isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u0645\u0639 \u0627\u0644\u062a\u063a\u064a\u064a\u0631 \u0641\u064a \u0645\u0633\u0627\u0641\u0629 \u0627\u0644\u0633\u0628\u0627\u0642 \u0645\u0646 \u0631\u0628\u0639 \u0645\u064a\u0644 \u0625\u0644\u0649 \u0646\u0635\u0641 \u0645\u064a\u0644 \u062a\u064f\u0635\u0628\u062d \u0627\u0644\u0633\u0631\u0639\u0629 \u0623\u0642\u0644 \u0623\u0647\u0645\u064a\u0629 \u0628\u0643\u062b\u064a\u0631 \u0648\u062a\u0635\u0628\u062d \u0627\u0644\u0642\u062f\u0631\u0629 \u0639\u0644\u0649 \u0627\u0644\u062a\u062d\u0645\u0644 \u0636\u0631\u0648\u0631\u0629 \u0645\u0637\u0644\u0642\u0629.",
            "x": 4,
            "y": " ",
            "z": ""
        },
        "query": [
            "Check if the string {a} with tabs expanded to {x} spaces and {y} replaced by {z} is alphanumeric.",
            "Determine if the string {a}, after expanding tabs to {x} spaces and replacing {y} with {z}, is alphanumeric.",
            "Verify if the string {a} is alphanumeric after expanding tabs to {x} spaces and replacing {y} with {z}."
        ],
        "language": "ars_Arab"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].startswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u0646\u0648\u0644\u062f \u0628\u0648\u0628\u064a\u0643 \u0628\u0627\u0644\u0639\u0627\u0635\u0645\u0629 \u0627\u0644\u0643\u0631\u0648\u0627\u062a\u064a\u0629\u060c \u0632\u063a\u0631\u0628\u060c \u0648\u0627\u0646\u0634\u0647\u0631 \u0628\u0633 \u0644\u0639\u0628 \u0645\u0639 \u0628\u0627\u0631\u062a\u064a\u0632\u0627\u0646 \u0628\u0644\u063a\u0631\u0627\u062f.",
            "x": "\u060c",
            "y": 1,
            "z": "\u0648\u0627\u0646\u0634\u0647\u0631"
        },
        "query": [
            "After splitting {a} by {x}, check if the {y}-th segment starts with {z}.",
            "Split {a} using {x} and verify if the {y}-th part begins with {z}.",
            "Check if the {y}-th section of {a}, when split by {x}, starts with {z}."
        ],
        "language": "apc_Arab_nort3139"
    },
    {
        "solution": "```python\nanswer = a[x:y].replace(z, w).isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Bu okeanda 2,2 million km2 dan ko'proq hududga cho'zilgan 15 ta oroldan iborat arxipelag.",
            "x": 11,
            "y": 30,
            "z": "2",
            "w": "o"
        },
        "query": [
            "Extract the substring from {a} starting at index {x} to {y}, replace {z} with {w}, and check if the result contains only alphabetic characters.",
            "Get the substring from {a} between indices {x} and {y}, substitute {z} with {w}, and verify if the outcome is purely alphabetic.",
            "Take the substring from {a} ranging from {x} to {y}, swap {z} with {w}, and determine if the final string consists solely of letters."
        ],
        "language": "uzn_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).strip(z).isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u092a\u093e\u0930\u094d\u0915 \u0938\u0947\u0935\u093e (MINAE) \u0932\u0947 \u0905\u092a\u0947\u0915\u094d\u0937\u093f\u0924 \u0906\u0917\u092e\u0928\u0915\u094b \u090f\u0915 \u092e\u0939\u093f\u0928\u093e\u092d\u0928\u094d\u0926\u093e \u092a\u0939\u093f\u0932\u0947 \u092a\u093e\u0930\u094d\u0915 \u0905\u0928\u0941\u092e\u0924\u093f \u091c\u093e\u0930\u0940 \u0917\u0930\u094d\u0926\u0948\u0928\u0964",
            "x": "MINAE",
            "y": "\u092e\u0928\u094d\u0924\u094d\u0930\u093e\u0932\u092f",
            "z": "\u0964"
        },
        "query": [
            "Replace {x} with {y} in {a}, trim characters in {z} from both ends, and check if the result is printable.",
            "Substitute {x} with {y} in {a}, remove characters in {z} from both ends, and verify if the outcome is printable.",
            "Swap {x} with {y} in {a}, strip characters in {z} from both ends, and determine if the final string is printable."
        ],
        "language": "npi_Deva"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).replace(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "\u0415\u0432\u0440\u043e\u043f\u0430\u043b\u044b\u043a \u0438\u0437\u0438\u043b\u0434\u04e9\u04e9\u0447\u04af\u043b\u04e9\u0440 \u0422\u0430\u0439\u043d\u043e\u0441\u043a\u043e \u043a\u0435\u043b\u0433\u0435\u043d\u0434\u0435\u043d \u043a\u0438\u0439\u0438\u043d \u0430\u0437 \u0436\u044b\u043b\u0434\u044b\u043d \u0438\u0447\u0438\u043d\u0434\u0435 \u044d\u043b\u0435 \u0430\u043d\u044b\u043d \u043a\u0430\u043b\u043a\u044b\u043d\u044b\u043d \u0441\u0430\u043d\u044b\u043d \u0418\u0441\u043f\u0430\u043d \u0431\u0430\u0441\u044b\u043f \u0430\u043b\u0443\u0443\u0447\u0443\u043b\u0430\u0440 \u0430\u0437\u0430\u0439\u0442\u044b\u043f \u0436\u0438\u0431\u0435\u0440\u0438\u0448\u043a\u0435\u043d.",
            "x": 150,
            "y": " ",
            "z": "\u0418\u0441\u043f\u0430\u043d",
            "w": "\u0438\u0441\u043f\u0430\u043d"
        },
        "query": [
            "Center {a} within {x} characters using {y} as padding, then replace {z} with {w}.",
            "Pad {a} to a total width of {x} characters with {y}, then substitute {z} with {w}.",
            "Align {a} in the center of a {x}-character wide field using {y} as the fill character, and then change {z} to {w}."
        ],
        "language": "kir_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "Comprar da magnar in te i supermercati xe speso \u0142a maniera p\u00ed economica pa nutrirse. Sensa posibi\u0142it\u00e0 de cuxinar, \u0142e scelte \u0142e xe limitae al magnar pronto.",
            "x": 4
        },
        "query": [
            "Expand tabs in {a} to {x} spaces and capitalize the first character.",
            "Convert tabs in {a} to {x} spaces and make the first character uppercase.",
            "Replace tabs in {a} with {x} spaces and capitalize the initial character."
        ],
        "language": "vec_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::y].upper()\nprint(answer)\n```",
        "variables": {
            "a": "Theo \u0111\u00f3, \u1edf nh\u1eefng c\u01a1 s\u1edf c\u00f3 c\u00e1ch b\u00e0i tr\u00ed hoa m\u1ef9 nh\u1ea5t, ng\u01b0\u1eddi ta th\u01b0\u1eddng c\u00f3 khuynh h\u01b0\u1edbng t\u00ecm \u0111\u1ebfn c\u0103n ph\u00f2ng ng\u1ee7 xa hoa nh\u1ea5t, c\u00f3 th\u1ec3 l\u00e0 m\u1ed9t chi\u1ebfc ch\u0103n kh\u00e2u tay hay m\u1ed9t chi\u1ebfc gi\u01b0\u1eddng c\u1ed5.",
            "x": 10,
            "y": 3
        },
        "query": [
            "Convert to uppercase the substring of {a} starting from index {x} and taking every {y}-th character.",
            "Transform to uppercase the substring of {a} beginning at index {x} and selecting every {y}-th character.",
            "Change to uppercase the substring of {a} starting at index {x} and picking every {y}-th character."
        ],
        "language": "vie_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u0644\u0642\u062f \u062f\u064f\u0645\u0651\u0631 \u0645\u0639\u0628\u062f \u0623\u0631\u062a\u0645\u064a\u0633 \u0641\u064a \u0623\u0641\u0633\u0633 \u0641\u064a \u0627\u0644\u064021 \u0645\u0646 \u064a\u0648\u0644\u064a\u0648 \u0639\u0627\u0645 356 \u0642\u0628\u0644 \u0627\u0644\u0645\u064a\u0644\u0627\u062f \u0641\u064a \u062d\u0631\u064a\u0642 \u0645\u062a\u0639\u0645\u062f \u062a\u0633\u0628\u0628 \u0641\u064a\u0647 \u0647\u064a\u0631\u0648\u0633\u062a\u0631\u0627\u062a\u0648\u0633.",
            "x": "\u0644"
        },
        "query": [
            "Verify if {a} without leading and trailing {x} characters is composed entirely of digits.",
            "Check if the string {a} with {x} characters removed from both ends consists only of digits.",
            "Determine if {a}, after stripping {x} characters from the start and end, is made up solely of digits."
        ],
        "language": "arb_Arab"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0d8b\u0db4\u0d9a\u0dcf\u0dbb \u0d9a\u0dd2\u0dbb\u0dd3\u0db8\u0da7 \u0d8b\u0dad\u0dca\u0dc3\u0dcf\u0dc4 \u0d9a\u0dd2\u0dbb\u0dd3\u0db8\u0dda \u0daf\u0dd3 \u0d94\u0db6\u0da7 \u0dc4\u0dcf\u0db1\u0dd2\u0dba\u0d9a\u0dca \u0dc3\u0dd2\u0daf\u0dd4\u0dc0\u0dc0\u0dc4\u0ddc\u0dad\u0dca, \u0d94\u0db6 \u0dc3\u0dd2\u0daf\u0dd4 \u0d9a\u0dbb\u0db1\u0dd4\u0dba\u0dda \u0d91\u0db8 \u0dad\u0dad\u0dca\u0dad\u0dca\u0dc0\u0dba \u0dad\u0dc0\u0dad\u0dca \u0d85\u0dba\u0dc4\u0db4\u0dad\u0dca \u0d85\u0dad\u0da7 \u0dc4\u0dd0\u0dbb\u0dc0\u0dd3\u0db8\u0d9a\u0dd2.",
            "x": "\u0d8b",
            "y": "\u0dc4\u0dd0\u0dbb\u0dc0\u0dd3\u0db8\u0d9a\u0dd2."
        },
        "query": [
            "Determine if {a} without leading {x} characters ends with {y}.",
            "Check if {a} after removing leading {x} characters ends with {y}.",
            "Does {a} end with {y} after stripping leading {x} characters?"
        ],
        "language": "sin_Sinh"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Kweni mazu\u0175a ghano kuli \u0175anthu awo luso lawo nkhulemba graffiti, ndipo kuliso vyakucitika vya graffiti kweniso vili\u0175a vyakuzomerezgeka kulembapo graffiti. Vyakulemba vya graffiti ipo vikulingana waka na maluso ghanyake ghose.",
            "x": 200,
            "y": " "
        },
        "query": [
            "Check if the string {a} centered to length {x} with {y} is composed of ASCII characters.",
            "Determine if the string {a} padded to length {x} with {y} is made up of ASCII characters.",
            "Verify if the string {a} centered to a length of {x} using {y} consists of only ASCII characters."
        ],
        "language": "tum_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::z].isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u05d1\u05d9\u05d9 \u05d3\u05d9 \u05e6\u05d9\u05d9\u05d8 \u05e4\u05d5\u05df \u05d3\u05d9 \u05d1\u05d0\u05dc\u05d5\u05d9\u05df, \u05d4\u05d0\u05d1\u05df \u05d0\u05d8\u05dc\u05d0\u05e0\u05d8\u05d0 \u05e9\u05d5\u05dc\u05e2\u05e1 \u05d2\u05e2\u05d6\u05e2\u05d4\u05df \u05d0 \u05e8\u05d9\u05d6\u05d9\u05d2\u05e2 \u05e4\u05d0\u05e8\u05d1\u05e2\u05e1\u05e2\u05e8\u05d5\u05e0\u05d2 \u05d0\u05d5\u05d9\u05e3 \u05d8\u05e2\u05e1\u05d8 \u05e6\u05d9\u05d9\u05db\u05e2\u05e0\u05e1.",
            "x": 5,
            "z": 3
        },
        "query": [
            "Check if every {z}-th character from {x} in {a} is numeric.",
            "Verify if each {z}-th character starting from position {x} in {a} is a number.",
            "Determine if every {z}-th character from position {x} in {a} is a digit."
        ],
        "language": "ydd_Hebr"
    },
    {
        "solution": "```python\nanswer = a.split(x, y)[z].isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u0648\u0646\u0627 \u06af\u0648\u0631\u0647 \u062f\u0647\u0644\u06cc \u0628\u0644\u06cc \u0646\u06cc\u0646 \u062a\u0646\u0628\u06cc\u0647 \u0644\u0631\u06cc\u060c \u0641\u0631\u0639\u0648\u0646\u0646 \u0642\u0627\u0631\u0642\u0634\u06cc\u060c \u0645\u0648\u0646\u062a\u0647 \u0632\u0648\u0645\u0627\u0646\u0646 \u0627\u0646\u062a\u0642\u0627\u0645\u06cc \u0648 \u0627\u0648\u0644\u0627\u0631\u0646 \u0686\u0648\u062e\u0644\u06cc \u062f\u0648\u0633\u062a\u0644\u0627\u0631\u06cc \u0627\u062a\u0641\u0627\u0642 \u062f\u0648\u0634\u062f\u06cc.",
            "x": " ",
            "y": 5,
            "z": 3
        },
        "query": [
            "Determine if the {z}-th segment of {a} split by {x} up to {y} times is a valid identifier.",
            "Check if the {z}-th part of {a} obtained by splitting with {x} up to {y} times is a valid identifier.",
            "Is the {z}-th segment of {a}, after splitting by {x} up to {y} times, a valid identifier?"
        ],
        "language": "azb_Arab"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).strip(z).isdecimal()\nprint(answer)\n```",
        "variables": {
            "a": "\u0993\u09ab\u09bf\u09b8\u09bf\u098f\u09b2\u09b6\u09bf\u0982 \u0985\u09a6\u09c1\u09a8\u09be \u09a4\u09c1\u0982\u0987\u09a8\u09cd\u09a8\u09a6\u09c1\u09a8\u09be, \u09ae\u09b9\u09be\u0995\u09cd\u09a8\u09be \u09a4\u09c7\u0995\u09cd\u09b8\u09b8\u0995\u09c0 \u09aa\u09cd\u09b0\u099c\u09be\u09b6\u09bf\u0982\u09a6\u09be \u09ae\u09c0\u09df\u09be\u09ae\u0997\u09c0 \u09b6\u09be\u09ab\u09a8\u09ac\u09be \u0999\u09be\u0995\u09b6\u09c7\u09b2 \u09aa\u09c0\u09a8\u09ac\u09be \u0996\u09cb\u0999\u09a5\u09be\u0982\u09b6\u09bf\u0982 \u09b2\u09cc\u0996\u09ce\u09b2\u09bf \u09b9\u09be\u09df\u09a8\u09be \u09a5\u09be\u099c\u09ac\u09be \u09aa\u09c0\u0996\u09bf\u0964",
            "x": "\u0985",
            "y": "\u0986",
            "z": "\u0964"
        },
        "query": [
            "Check if {a} with {x} replaced by {y} and stripped of {z} characters is composed of decimal characters.",
            "Determine if {a} is made up of decimal characters after replacing {x} with {y} and stripping {z} characters.",
            "Verify if {a}, after replacing {x} with {y} and removing {z} characters, consists solely of decimal digits."
        ],
        "language": "mni_Beng"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).strip(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0939\u0943\u0926\u092f \u0938\u0947 \u0930\u0915\u094d\u0924 \u0928\u0932\u093f\u092f\u094b\u0902 \u0938\u0947 \u092c\u093e\u0939\u0930 \u091c\u093e\u0924\u093e \u0939\u0948 \u091c\u093f\u0928\u094d\u0939\u0947\u0902 \u0927\u092e\u0928\u0940 \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948 \u0928\u0932\u093f\u0915\u093e\u0913\u0902 \u0938\u0947 \u0939\u0943\u0926\u092f \u092e\u0947\u0902 \u0935\u093e\u092a\u0938 \u0906\u093e\u0924\u093e \u0939\u0948 \u091c\u093f\u0928\u094d\u0939\u0947\u0902 \u0927\u092e\u0928\u0940 \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964 \u0938\u092c\u0938\u0947 \u092a\u0924\u0932\u0940 \u0928\u0932\u093f\u0915\u093e \u0915\u094b \u0915\u0947\u0936\u093f\u0915\u093e \u0915\u0939\u093e \u091c\u093e\u0924\u093e \u0939\u0948\u0964",
            "x": "\u0927\u092e\u0928\u0940",
            "y": "\u0936\u093f\u0930\u093e",
            "z": "\u0964"
        },
        "query": [
            "Replace {x} with {y} in {a} and then remove leading and trailing {z} characters.",
            "Substitute {x} with {y} in {a} and strip {z} characters from both ends.",
            "Change {x} to {y} in {a} and trim {z} characters from the start and end."
        ],
        "language": "hin_Deva"
    },
    {
        "solution": "```python\nanswer = a[y:x:-1].isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u0c05\u0c2f\u0c3f\u0c24\u0c47, \u0c07\u0c26\u0c3f \u0c28\u0c3f\u0c1c\u0c02\u0c17\u0c3e \u0c2e\u0c40 \u0c06\u0c02\u0c26\u0c4b\u0c33\u0c28 \u0c28\u0c41\u0c02\u0c21\u0c3f \u0c26\u0c42\u0c30\u0c02\u0c17\u0c3e \u0c09\u0c02\u0c21\u0c15\u0c42\u0c21\u0c26\u0c41, \u0c0e\u0c02\u0c26\u0c41\u0c15\u0c02\u0c1f\u0c47 \u0c24\u0c30\u0c1a\u0c41\u0c17\u0c3e \u0c2a\u0c30\u0c4d\u0c2f\u0c3e\u0c1f\u0c15\u0c41\u0c32\u0c41 \u0c15\u0c3e\u0c30\u0c4d\u0c32\u0c28\u0c41 \u0c28\u0c3f\u0c02\u0c2a\u0c21\u0c3e\u0c28\u0c3f\u0c15\u0c3f \u0c1a\u0c41\u0c1f\u0c4d\u0c1f\u0c42 \u0c24\u0c3f\u0c30\u0c41\u0c17\u0c41\u0c24\u0c3e\u0c30\u0c41.",
            "x": 10,
            "y": 20
        },
        "query": [
            "Verify if the substring from index {y} to {x} in reverse order in {a} consists of digits.",
            "Check if the reversed substring from index {y} to {x} in {a} is made up of digits.",
            "Determine if the characters from index {y} to {x} in {a}, when reversed, are all digits."
        ],
        "language": "tel_Telu"
    },
    {
        "solution": "```python\nanswer = a.swapcase().replace(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Lu \u2018l g\u2019ha recevud \u2018l\u201cEroe de l'Union Sovietica\u201d, la plu volta onorificenza de l'Union Sovietica, par ol s\u00f2 lavorar.",
            "x": "l",
            "y": "L"
        },
        "query": [
            "Swap the case of each character in {a} and replace all instances of {x} with {y}.",
            "Change the case of each letter in {a} and substitute every occurrence of {x} with {y}.",
            "Invert the case of all characters in {a} and change every {x} to {y}."
        ],
        "language": "lmo_Latn"
    },
    {
        "solution": "```python\nanswer = a.zfill(x).islower()\nprint(answer)\n```",
        "variables": {
            "a": "Ohulumeni abaningi bafuna izivakashi ezingenayo, noma abahlali abahambayo, emazweni abo ukuba bagonyelwe izinhlobonhlobo zezifo.",
            "x": 100
        },
        "query": [
            "Check if the zero-filled version of {a} to length {x} is in lowercase.",
            "Determine if the zero-padded string of {a} to length {x} is all in lowercase.",
            "Verify if the string {a} padded with zeros to length {x} is entirely lowercase."
        ],
        "language": "zul_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode(x).upper()\nprint(answer)\n```",
        "variables": {
            "a": "Chiao na Sharipov bavuze ko hataragera ko bikora ku buhinga butuma ikigendajuru gisubira guhagarara neza.",
            "x": "run_Latn"
        },
        "query": [
            "Convert {a} to uppercase after encoding and decoding it with {x}.",
            "Encode {a} with {x}, decode it, and then convert to uppercase.",
            "Transform {a} to uppercase by encoding and decoding it using {x}."
        ],
        "language": "run_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].swapcase().center(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "The Brazilian suffered a serious head injury after a crash during the 2009 Hungarian Grand Prix.",
            "x": 4,
            "y": 13,
            "z": 30,
            "w": "*"
        },
        "query": [
            "Center the swapcased substring of {a} from {x} to {y} within a width of {z} using {w} as padding.",
            "Take the substring of {a} from index {x} to {y}, swap its case, and center it within a width of {z} using {w} as the padding character.",
            "Extract the substring of {a} from {x} to {y}, change its case, and center it in a field of width {z} with {w} as the fill character."
        ],
        "language": "eng_Latn"
    },
    {
        "solution": "```python\nanswer = a.casefold().rsplit(x, y)[z]\nprint(answer)\n```",
        "variables": {
            "a": "Batten \u0111\u01b0\u1ee3c x\u1ebfp h\u1ea1ng th\u1ee9 190 trong danh s\u00e1ch 400 ng\u01b0\u1eddi M\u1ef9 gi\u00e0u nh\u1ea5t th\u1ebf gi\u1edbi n\u0103m 2008 v\u1edbi kh\u1ed1i t\u00e0i s\u1ea3n \u01b0\u1edbc t\u00ednh l\u00e0 2,3 t\u1ef7 \u0111\u00f4.",
            "x": " ",
            "y": 5,
            "z": 2
        },
        "query": [
            "Get the {z+1}-th segment of the casefolded {a} split by {x} from the right, with a maximum of {y} splits.",
            "Retrieve the {z+1}-th part of the casefolded {a} after splitting it by {x} from the right, allowing up to {y} splits.",
            "Extract the {z+1}-th section of the casefolded {a} by splitting it from the right using {x}, with a limit of {y} splits."
        ],
        "language": "vie_Latn"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).startswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0995\u09c7\u099f\u09be\u09b2\u09be\u09a8\u09f0 \u09f0\u09be\u099c\u09a7\u09be\u09a8\u09c0\u09b2\u09c8 \u09af\u09cb\u09f1\u09be\u09f0 \u09aa\u09be\u099b\u09a4 \u09ad\u09bf\u09a1\u09be\u09b2\u09c7 \u0995\u09cd\u09b2\u09be\u09ac\u099f\u09cb\u09f0 \u09b9\u09c8 \u09ea\u09ef \u0996\u09a8 \u0996\u09c7\u09b2 \u0996\u09c7\u09b2\u09bf\u099b\u09c7\u0964",
            "x": "\u0995\u09c7\u099f\u09be",
            "y": "\u09b2\u09be\u09a8\u09f0"
        },
        "query": [
            "After removing leading characters in {x} from {a}, does it start with {y}?",
            "Does {a} start with {y} after stripping leading characters in {x}?",
            "If you strip leading characters in {x} from {a}, does it begin with {y}?"
        ],
        "language": "asm_Beng"
    },
    {
        "solution": "```python\nanswer = a.swapcase().center(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Jarque ye kene lui pi\u00f6c rot ten\u025b c\u0254l Coverciano Italy yic yak\u00f6lic.ye kene ka t\u0254\u0308u \u0263\u00f6n akut yic ka kam thu\u00eb\u00ebc bi loi Ak\u00f6l Dhorou  kek Bolonia.",
            "x": 150,
            "y": "*"
        },
        "query": [
            "Swap the case of all characters in {a} and then center it in a string of length {x} with {y} as the fill character.",
            "Change the case of each character in {a} and center it in a string of length {x} using {y} as the padding character.",
            "Convert the case of all letters in {a} and then place it in the middle of a string of length {x}, filled with {y}."
        ],
        "language": "dik_Latn"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x)[::-1]\nprint(answer)\n```",
        "variables": {
            "a": "\u0687\u0627\u06aa\u0627\u06bb \u062a\u0647 \u06aa\u0627\u0644\u0648\u0646 \u0627\u0646\u067d\u0631\u0646\u064a\u067d \u062a\u064a \u0631\u0627\u0626\u0648\u067d \u067f\u064a\u0646\u062f\u064a\u0648\u0646 \u0622\u0647\u0646\u060c \u062a\u0648\u0647\u0627\u0646 \u062c\u062a\u064a \u0631\u0647\u0648 \u067f\u0627 \u064a\u0627 \u062c\u062a\u064a \u0633\u0641\u0631 \u06aa\u0631\u064a\u0648 \u067f\u0627 \u0627\u0646 \u0647\u0646\u068c \u062a\u064a \u0645\u0648\u062c\u0648\u062f \u0647\u06aa \u0641\u0648\u0646 \u06aa\u0645\u067e\u0646\u064a \u0627\u0633\u062a\u0639\u0645\u0627\u0644 \u06aa\u0631\u06bb \u062c\u064a \u062a\u0648\u0647\u0627\u0646\u06a9\u064a \u0636\u0631\u0648\u0631\u062a \u0646\u0627\u0647\u064a.",
            "x": "\u0647\u0646\u068c"
        },
        "query": [
            "Remove trailing characters in {x} from {a} and then reverse the string.",
            "Trim the characters in {x} from the end of {a} and reverse the result.",
            "Strip the trailing {x} from {a} and reverse the string."
        ],
        "language": "snd_Arab"
    },
    {
        "solution": "```python\nanswer = a.zfill(x).replace(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0623\u0636\u0627\u0641 \u0633\u062a\u0648\u0641\u0627\u0646\u060c \"\u0639\u0644\u0649 \u062d\u062f \u0639\u0644\u0645\u0646\u0627\u060c \u0623\u0643\u0648 \u062c\u0633\u0645 \u0643\u0648\u0643\u0628\u064a \u0648\u0627\u062d\u062f \u0628\u0633 \u0639\u0646\u062f\u0647 \u062d\u0631\u0643\u064a\u0629 \u0623\u0643\u062b\u0631 \u0645\u0646 \u062a\u064a\u062a\u0627\u0646 \u0648\u0627\u0633\u0645\u0647 \u0627\u0644\u0623\u0631\u0636\".",
            "x": 100,
            "y": "\u062a\u064a\u062a\u0627\u0646",
            "z": "Titan"
        },
        "query": [
            "Prefix {a} with zeros until its length is {x} and then replace all instances of {y} with {z}.",
            "Pad {a} with zeros to make its length {x} and then substitute every {y} with {z}.",
            "Add leading zeros to {a} until its length reaches {x} and then change all occurrences of {y} to {z}."
        ],
        "language": "acm_Arab"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).encode('ascii')\nprint(answer)\n```",
        "variables": {
            "a": "\u0924\u0941\u092e\u091a\u0940 \u092a\u0949\u0932\u093f\u0938\u0940 \u0906\u0923\u093f \u0924\u0941\u092e\u091a\u094d\u092f\u093e \u0935\u093f\u092e\u093e \u0915\u0902\u092a\u0928\u0940\u091a\u0947 \u0938\u0902\u092a\u0930\u094d\u0915 \u0924\u092a\u0936\u0940\u0932 \u092f\u093e\u0902\u091a\u094d\u092f\u093e \u092a\u094d\u0930\u0924\u0940 \u092c\u0928\u0935\u093e \u0906\u0923\u093f \u0938\u094b\u092c\u0924 \u0918\u0947\u090a\u0928 \u091c\u093e.",
            "x": 100,
            "y": " "
        },
        "query": [
            "Left-justify {a} within {x} characters using {y} for padding, then encode the result in ASCII.",
            "Pad {a} to the left with {y} until it reaches {x} characters, then convert it to ASCII encoding.",
            "Make {a} left-aligned in a field of {x} characters with {y} as the padding character, and encode it in ASCII."
        ],
        "language": "mar_Deva"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u0644\u0627\u0632\u0645 \u062a\u0633\u062a\u0634\u064a\u0631 \u0627\u0644\u0645\u0624\u0633\u0633\u0629\u060c \u0648\u0642\u0633\u0645 \u0627\u0644\u0647\u062c\u0631\u0629 \u0644\u0644\u0628\u0644\u062f \u0627\u0644\u0644\u064a \u062a\u0631\u064a\u062f \u062a\u062f\u0631\u0633 \u0628\u064a \u0644\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u0649 \u0645\u062a\u0637\u0644\u0628\u0627\u062a \u0645\u0641\u0635\u0644\u0629.",
            "x": "\u0627\u0644\u0645\u0624\u0633\u0633\u0629",
            "y": "\u0627\u0644\u0647\u064a\u0626\u0629"
        },
        "query": [
            "Replace {x} with {y} in {a} and check if the result is alphanumeric.",
            "Substitute {x} with {y} in {a} and verify if the outcome is alphanumeric.",
            "Swap {x} with {y} in {a} and determine if the resulting string is alphanumeric."
        ],
        "language": "acm_Arab"
    },
    {
        "solution": "```python\nanswer = a[x::z].replace(y, x)\nprint(answer)\n```",
        "variables": {
            "a": "\u067e\u0633 \u0627\u0632 \u0622\u0646\u0643\u0647 \u064a\u0643\u06cc \u0627\u0632 \u0647\u0645\u0633\u0627\u06cc\u0647\u200c\u0647\u0627 \u062f\u0631\u0628\u0627\u0631\u0647 \u0646\u0634\u062a \u06af\u0627\u0632 \u062a\u0645\u0627\u0633 \u06af\u0631\u0641\u062a\u060c \u064a\u0643\u06cc \u0627\u0632 \u0645\u0642\u0627\u0645\u200c\u0647\u0627\u06cc \u0634\u0631\u0643\u062a \u06af\u0627\u0632 \u062f\u0631 \u0645\u062d\u0644 \u0631\u0648\u06cc\u062f\u0627\u062f \u062f\u0631 \u062d\u0627\u0644 \u0627\u0631\u0627\u0626\u0647 \u06af\u0632\u0627\u0631\u0634 \u0628\u0648\u062f.",
            "x": 5,
            "y": "\u06af\u0627\u0632",
            "z": 3
        },
        "query": [
            "From the {x+1}-th character to the end of {a}, taking every {z}-th character, replace {y} with {x}.",
            "Starting from the {x+1}-th character of {a}, take every {z}-th character and replace {y} with {x}.",
            "Take every {z}-th character from the {x+1}-th position to the end of {a} and replace {y} with {x}."
        ],
        "language": "pes_Arab"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).encode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "\u0637\u0628\u0642 \u0627\u06cc\u0646 \u062f\u0627\u0633\u062a\u0627\u0646\u060c \u0627\u0646\u06af\u06cc\u0632\u0647 \u0627\u0648 \u06a9\u0633\u0628 \u0634\u0647\u0631\u062a \u0628\u0647 \u0647\u0631 \u0642\u06cc\u0645\u062a\u06cc \u0628\u0648\u062f. \u0627\u0641\u0633\u0633\u06cc\u0627\u0646 \u0628\u0627 \u0639\u0635\u0628\u0627\u0646\u06cc\u062a \u0627\u0639\u0644\u0627\u0645 \u06a9\u0631\u062f\u0646\u062f \u0646\u0627\u0645 \u0647\u0631\u0648\u0633\u062a\u0631\u0627\u062a\u0648\u0633 \u0647\u0631\u06af\u0632 \u062b\u0628\u062a \u0646\u0634\u0648\u062f.",
            "x": 100,
            "y": " "
        },
        "query": [
            "Center {a} in a string of length {x} using {y} as the fill character, then encode it in UTF-8.",
            "Pad {a} to a total length of {x} with {y} as the padding character, and then encode the result in UTF-8.",
            "Create a string of length {x} with {a} centered and {y} as the padding character, then encode it in UTF-8."
        ],
        "language": "pes_Arab"
    },
    {
        "solution": "```python\nanswer = a.split(x)[0].capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "\u012abrauk\u0161ona D\u012bnvydafrik\u0101 ar ma\u0161ynu ir breineigs veids, kai redz\u0113t vysu regiona skaistumu, kai ari tikt v\u012btuos, kas atsar\u016bn uorpus \u012brostajim turisma mar\u0161rutim.",
            "x": " "
        },
        "query": [
            "Split {a} by {x} and capitalize the first segment.",
            "Divide {a} using {x} and capitalize the initial part.",
            "Break {a} at {x} and capitalize the first portion."
        ],
        "language": "ltg_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x)[-1].islower()\nprint(answer)\n```",
        "variables": {
            "a": "Et netv\u00e6rk til g\u00e6stfrihedsudveksling er en organisation, som forbinder rejsende og lokale beboere i de byer, de skal bes\u00f8ge.",
            "x": " "
        },
        "query": [
            "Split {a} by {x} and check if the last segment is in lowercase.",
            "Divide {a} using {x} and verify if the final part is in lowercase.",
            "Separate {a} by {x} and determine if the last section is in lowercase."
        ],
        "language": "dan_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0932\u0924\u093e\u0935\u093f\u092f\u093e \u0924\u0947 \u0938\u094d\u0932\u094b\u0935\u093e\u0915\u093f\u092f\u093e \u0926\u094c\u0928\u0947\u0902 ACTA \u091a \u0936\u093e\u092e\u0932 \u0939\u094b\u0928\u0947 \u0926\u0940 \u092a\u094d\u0930\u0915\u094d\u0930\u093f\u092f\u093e \u091a \u091a\u093f\u0930 \u0932\u093e\u092f\u093e .",
            "x": "utf-8",
            "y": "utf-16"
        },
        "query": [
            "Encode {a} using {x} encoding with replacement for unencodable characters, then decode it using {y} encoding.",
            "First, encode {a} with {x} encoding, replacing any characters that can't be encoded, then decode it with {y} encoding.",
            "Using {x} encoding, encode {a} and replace unencodable characters, then decode the result with {y} encoding."
        ],
        "language": "dgo_Deva"
    },
    {
        "solution": "```python\nanswer = a.swapcase().istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Hiji alumni nyaritakeun nyaeta manehna 'osok ngagunakeun bahasa santai, ngajarkeun carana bobogohan, jeung sapertos babaturan jang murid.'"
        },
        "query": [
            "Check if the case-swapped version of {a} is in title case.",
            "Determine if swapping the case of {a} results in a title case string.",
            "Is the string {a} in title case after swapping its case?"
        ],
        "language": "sun_Latn"
    },
    {
        "solution": "```python\nanswer = a.join(x).replace(y, z)\nprint(answer)\n```",
        "variables": {
            "a": " ",
            "x": [
                "\u1c5e\u1c5f\u1c63\u1c5f\u1c68\u1c64\u1c65",
                "\u1c75\u1c6e\u1c5c",
                "\u1c60\u1c69\u1c62\u1c75\u1c7d\u1c72\u1c69",
                "\u1c5e\u1c5f\u1c79\u1c5c\u1c64\u1c6b",
                "\u1c62\u1c64\u1c6b\u1c74\u1c5f\u1c5d",
                "\u1c61\u1c5a\u1c65",
                "\u1c62\u1c6e\u1c71\u1c5f\u1c5c\u1c7c\u1c5f",
                "\u1c5f\u1c68",
                "\u1c75\u1c5a\u1c62",
                "\u1c75\u1c5a\u1c5b\u1c5a\u1c68\u1c5f\u1c71",
                "\u1c60\u1c77\u1c5a\u1c71",
                "\u1c65\u1c5a\u1c71\u1c5b\u1c5a\u1c68",
                "\u1c5f\u1c6b\u1c77\u1c64\u1c60\u1c5f\u1c68\u1c64",
                "\u1c60\u1c5a\u1c63\u1c5f\u1c5c",
                "\u1c6b\u1c77\u1c6e\u1c6d\u1c5f\u1c71",
                "\u1c66\u1c5a\u1c78",
                "\u1c5e\u1c5f\u1c63\u1c6e\u1c68",
                "\u1c6b\u1c5f\u1c72\u1c6e\u1c6d\u1c5f\u1c5c",
                "\u1c60\u1c5a\u1c63\u1c5f\u1c7e"
            ],
            "y": "\u1c5f",
            "z": "a"
        },
        "query": [
            "Join the elements of {x} with {a} in between, then replace {y} with {z} in the resulting string.",
            "Combine the items in {x} using {a} as a separator, and then substitute {y} with {z} in the final string.",
            "Merge the elements of {x} with {a} in between each element, and then change {y} to {z} in the resulting string."
        ],
        "language": "sat_Olck"
    },
    {
        "solution": "```python\nanswer = a[:x].isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u0412 \u0434\u043d\u0435\u0448\u043d\u043e \u0432\u0440\u0435\u043c\u0435 \u043e\u0431\u0430\u0447\u0435 \u0438\u043c\u0430 \u0443\u0441\u0442\u0430\u043d\u043e\u0432\u0435\u043d\u0438 \u0445\u0443\u0434\u043e\u0436\u043d\u0438\u0446\u0438 \u043d\u0430 \u0433\u0440\u0430\u0444\u0438\u0442\u0438, \u0441\u044a\u0431\u0438\u0442\u0438\u044f, \u0441\u0432\u044a\u0440\u0437\u0430\u043d\u0438 \u0441 \u0433\u0440\u0430\u0444\u0438\u0442\u0438 \u0438 \u201e\u0437\u0430\u043a\u043e\u043d\u043d\u0438\u201c \u0441\u0442\u0435\u043d\u0438. \u0412 \u0442\u043e\u0437\u0438 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442 \u0413\u0440\u0430\u0444\u0438\u0442\u0438\u0442\u0435, \u0432 \u0442\u043e\u0437\u0438 \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442, \u0447\u0435\u0441\u0442\u043e \u043f\u0440\u0438\u043b\u0438\u0447\u0430\u0442 \u043d\u0430 \u043f\u0440\u043e\u0438\u0437\u0432\u0435\u0434\u0435\u043d\u0438\u044f \u043d\u0430 \u0438\u0437\u043a\u0443\u0441\u0442\u0432\u043e\u0442\u043e, \u043e\u0442\u043a\u043e\u043b\u043a\u043e\u0442\u043e \u043d\u0430 \u043d\u0435\u0447\u0435\u0442\u043b\u0438\u0432\u0438 \u0435\u0442\u0438\u043a\u0435\u0442\u0438.",
            "x": 10
        },
        "query": [
            "Check if the substring from the start of {a} up to index {x} consists only of digits.",
            "Verify if the portion of {a} from the beginning to index {x} contains only numeric characters.",
            "Determine if the segment of {a} from the start to position {x} is made up entirely of digits."
        ],
        "language": "bul_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).zfill(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0938\u0924\u0939\u0940 \u0924\u0928\u093e\u093d \u0907\u0938 \u0915\u0930\u093f\u092f\u0948 \u0939\u094b\u0902\u0926\u093e \u0910 \u0915\u0940 \u091c\u0947 \u092a\u093e\u0928\u0940 \u0926\u0940 \u0938\u0924\u0939\u094d \u0909\u092a\u094d\u092a\u0930 \u092a\u093e\u0928\u0940 \u0926\u0947 \u0915\u0923 \u0906\u092a\u0942\u0902 \u092c\u093f\u091a\u094d\u091a\u0947\u0902 \u0907\u0915-\u0926\u0941\u090f \u0936\u093e \u092e\u0924\u0940 \u0924\u094c\u0932\u0947 \u0906\u0915\u0930\u094d\u0936\u0924 \u0939\u094b\u0902\u0926\u0947 \u0928, \u091c\u093f\u0928\u094d\u0928\u093e \u0915\u0947 \u0913\u0939\u094d\u200c\u200c \u092a\u093e\u0928\u0940 \u0926\u0947 \u0909\u092a\u094d\u092a\u0930 \u092e\u091c\u0942\u0926 \u092c\u094d\u0939\u093e\u090a \u0926\u0947 \u0915\u0923\u0947\u0902 \u0936\u093e \u0939\u094b\u0902\u0926\u0947 \u0928\u0964",
            "x": "\u0938",
            "y": 100
        },
        "query": [
            "Remove leading characters in {x} from {a} and pad the result with zeros to make it {y} characters long.",
            "Strip leading characters specified in {x} from {a} and zero-fill the result to ensure it is {y} characters in length.",
            "Eliminate the leading characters found in {x} from {a} and add leading zeros to the result until it reaches a length of {y} characters."
        ],
        "language": "dgo_Deva"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0938\u093f\u0926\u094d\u0927\u093e\u0902\u0924 \u0939\u0930 \u0924\u092c \u090f \u0935\u093f\u091a\u093e\u0930 \u0932\u093e \u0938\u094d\u0925\u093e\u092a\u093f\u0924 \u0915\u0930\u093f\u0938 \u0915\u0940 \u092e\u093e\u0913\u0930\u0940 \u092e\u0928 \u090f\u0915 \u092e\u0939\u093e\u0928 \u092c\u0947\u0921\u093c\u0947 \u092e \u092a\u094b\u0932\u093f\u0928\u0947\u0936\u093f\u092f\u093e \u0932\u0947 \u091a\u0932\u0947 \u0917\u0908\u0928 \u0905\u090a \u090f\u0915 \u0915\u0943\u0937\u093f \u0938\u092e\u093e\u091c \u0915\u0947 \u0938\u094d\u0925\u093e\u092a\u0928\u093e \u0915\u0930\u0924 \u092e\u094b\u0930\u093f\u092f\u094b\u0930\u0940 \u0932\u0947 \u0928\u094d\u092f\u0942\u091c\u0940\u0932\u0948\u0902\u0921 \u0932\u0947 \u0917\u0908\u0928\u0964",
            "x": "utf-8"
        },
        "query": [
            "Encode {a} using {x} encoding, replacing unencodable characters, and then decode it back.",
            "Using {x} encoding, encode {a} with replacement for unencodable characters, then decode it.",
            "Convert {a} to {x} encoding with replacement for invalid characters, and decode it back."
        ],
        "language": "hne_Deva"
    },
    {
        "solution": "```python\nanswer = a.find(x, y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u062e\u0644\u0627\u0635\u0647 \u0627\u06cc\u0646\u06a9\u0647 \u0647\u0631 \u0642\u062f\u0631 \u062f\u0631 \u06cc\u06a9 \u062a\u0631\u0646 \u0647\u0648\u0627\u06cc\u06cc \u06af\u0631\u0641\u062a\u0627\u0631\u06cc \u0628\u0627\u0634\u06cc\u062f \u0646\u0627\u0631\u0627\u062d\u062a \u06a9\u0646\u0646\u062f\u0647 \u0627\u0633\u062a \u0648 \u062d\u062f\u0627\u0642\u0644 \u06cc\u06a9 \u0633\u0627\u0639\u062a \u0637\u0648\u0644 \u0645\u06cc\u200c\u06a9\u0634\u062f \u062a\u0627 \u0646\u0641\u0631 \u0627\u0648\u0644 \u0627\u0632 \u0622\u0646 \u062e\u0627\u0631\u062c \u0634\u0648\u062f.\u00bb",
            "x": "\u062a\u0631\u0646",
            "y": 0,
            "z": 50
        },
        "query": [
            "Find the position of {x} in {a} starting from position {y} and ending at index {z}.",
            "Locate the index of {x} within {a} beginning at {y} and stopping at {z}.",
            "Determine the position of {x} in the string {a} from index {y} to {z}."
        ],
        "language": "pes_Arab"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).title().center(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "Kristufer Garsya, ane\u1e6d\u1e6daq n Ugezdu n Temsulta n Lus An\u01e7eles, yenna-d d akken argaz-nni armeggay cukken \u1e25ettcen-t \u0263ef unekcum wala \u0263ef usex\u1e63er.",
            "x": "Garsya",
            "y": "Garcia",
            "z": 100,
            "w": "*"
        },
        "query": [
            "Replace {x} with {y} in {a}, convert to title case, and center it within {z} characters using {w}.",
            "Substitute {x} with {y} in {a}, change to title case, and center it in a field of {z} characters using {w}.",
            "Swap {x} for {y} in {a}, transform to title case, and align it centrally within {z} characters using {w}."
        ],
        "language": "kab_Latn"
    },
    {
        "solution": "```python\nanswer = a.lower().count(x, y, z)\nprint(answer)\n```",
        "variables": {
            "a": "Custos non sunt \u00e0giles meda tando sa carrera depet pigare una deviatzione longa a f\u00f9rriu de sos Montes Transant\u00e0rticos pro l\u00f2mpere a sa pianura.",
            "x": "a",
            "y": 0,
            "z": 100
        },
        "query": [
            "Convert {a} to lowercase and count occurrences of {x} from {y} to {z}.",
            "Change {a} to lowercase and find the number of times {x} appears between {y} and {z}.",
            "Transform {a} to lowercase and determine the count of {x} from index {y} to {z}."
        ],
        "language": "srd_Latn"
    },
    {
        "solution": "```python\nanswer = a.partition(x)[y].zfill(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0e19\u0e2d\u0e01\u0e08\u0e32\u0e01\u0e19\u0e35\u0e49 \u0e14\u0e23. \u0e25\u0e35\u0e22\u0e31\u0e07\u0e41\u0e2a\u0e14\u0e07\u0e04\u0e27\u0e32\u0e21\u0e01\u0e31\u0e07\u0e27\u0e25\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e01\u0e31\u0e1a\u0e23\u0e32\u0e22\u0e07\u0e32\u0e19\u0e17\u0e35\u0e48\u0e27\u0e48\u0e32\u0e40\u0e14\u0e47\u0e01 \u0e46 \u0e43\u0e19\u0e15\u0e38\u0e23\u0e01\u0e35\u0e15\u0e34\u0e14\u0e40\u0e0a\u0e37\u0e49\u0e2d\u0e44\u0e27\u0e23\u0e31\u0e2a\u0e44\u0e02\u0e49\u0e2b\u0e27\u0e31\u0e14\u0e19\u0e01\u0e2a\u0e32\u0e22\u0e1e\u0e31\u0e19\u0e18\u0e38\u0e4c A (H5N1) \u0e42\u0e14\u0e22\u0e44\u0e21\u0e48\u0e21\u0e35\u0e2d\u0e32\u0e01\u0e32\u0e23\u0e1b\u0e48\u0e27\u0e22",
            "x": " ",
            "y": 2,
            "z": 50
        },
        "query": [
            "Partition {a} at {x}, take the {y}-th part, and pad it with zeros to make its length {z}.",
            "Split {a} at {x}, select the {y}-th segment, and zero-fill it to a length of {z}.",
            "Divide {a} by {x}, choose the {y}-th section, and add leading zeros to reach a length of {z}."
        ],
        "language": "tha_Thai"
    },
    {
        "solution": "```python\nanswer = a.isalnum() and a.islower()\nprint(answer)\n```",
        "variables": {
            "a": "Byddai pob sioe hefyd yn cynnig argymhellion ar gyfer llyfrau y dylai plant chwilio amdanyn nhw pan roedden nhw'n mynd i'w llyfrgell."
        },
        "query": [
            "Check if all characters in {a} are alphanumeric and in lowercase.",
            "Verify if {a} consists only of lowercase alphanumeric characters.",
            "Determine if {a} contains exclusively lowercase letters and numbers."
        ],
        "language": "cym_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(y).endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u06a4\u0627\u0628\u064a\u0644\u0648 \u06a4\u0627\u06bd\u0648\u0627 \u0645\u0648\u0644\u0627\u0621\u064a \u0645\u0623\u0627\u06ac\u064a\u0647 \u062a\u0627\u0648 \u0627\u06a4\u0648 \u0646\u0646 \u062a\u0627\u062c\u0627\u062f\u064a \u0643 \u0627\u06bd\u0648\u060c \u0633\u0627\u0628\u0627\u06ac\u064a\u0646 \u0762\u0627\u062f\u06a0 \u0643\u0627\u0644\u0648\u0621\u0631\u06ac \u0646\u0646 \u062a\u0627\u0644\u064a\u0628\u0642 \u062a\u064a\u0628\u0648-\u062a\u064a\u0628\u0648 \u0635\u062f\u0631 \u0628\u0627\u0647\u0627\u0633\u0648\u06bd\u0648 \u0686\u0627\u0631\u0648\u0644\u064a\u0646 \u0648\u064a\u0644\u0633\u0648\u0646 \u062f\u0631\u064a \u0627\u0648\u0647 \u0627\u0644\u0647 \u0645\u0627\u0644\u064a\u06a0 \u06a4\u064a\u062a\u0647 \u062c\u0627\u0645\u064a\u0646\u0646 \u0627\u064a\u06bd\u0648 \u060c \u062f\u0627\u0646 \u06a9\u0627\u0628\u0648\u0631 \u0643 \u0644\u0648\u0627\u0631 \u06a9\u0648\u062a\u0627.",
            "x": "\u0643\u0648\u062a\u0627.",
            "y": "\u06a4"
        },
        "query": [
            "After removing {y} from both ends of {a}, does it end with {x}?",
            "Does {a} end with {x} after stripping {y} from both ends?",
            "If you strip {y} from both ends of {a}, does it end with {x}?"
        ],
        "language": "min_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:y].upper().endswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "Koloni mamulai fase nomaden pas makanan nang ada sudah bakurang. Salawas fase ini, koloni maulah sarang pahadangan nang diganti satiap hari.",
            "x": 7,
            "y": 20,
            "z": "FASE"
        },
        "query": [
            "Does the substring of {a} from {x} to {y}, converted to uppercase, end with {z}?",
            "Is the substring of {a} from index {x} to {y}, when changed to uppercase, ending with {z}?",
            "Check if the uppercase version of the substring of {a} from {x} to {y} ends with {z}."
        ],
        "language": "bjn_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::y].islower()\nprint(answer)\n```",
        "variables": {
            "a": "Etiraz\u00e7\u0131lar, noyabr ay\u0131nda Milli Konqres\u0259 t\u0259qdim etm\u0259k \u00fc\u00e7\u00fcn petisiyaya 1,2 milyon imza toplama\u011f\u0131 \u00fcmid edirl\u0259r.",
            "x": 10,
            "y": 3
        },
        "query": [
            "Are all characters in the segment of {a} from {x} onwards, stepping by {y}, in lowercase?",
            "Is every character in the substring of {a} starting at index {x} and taking every {y}th character in lowercase?",
            "Does the segment of {a} starting from index {x} and taking every {y}th character consist entirely of lowercase letters?"
        ],
        "language": "azj_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].find(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0412\u043e\u043d\u0438 \u0441\u0442\u0432\u043e\u0440\u044e\u044e\u0442\u044c \u0441\u0438\u043b\u044c\u043d\u0456 \u0432\u0456\u0442\u0440\u0438 (\u0447\u0430\u0441\u0442\u043e 100-200 \u043c\u0438\u043b\u044c \u043d\u0430 \u0433\u043e\u0434\u0438\u043d\u0443) \u0456 \u043c\u043e\u0436\u0443\u0442\u044c \u043f\u0456\u0434\u043d\u0456\u043c\u0430\u0442\u0438 \u0432 \u043f\u043e\u0432\u0456\u0442\u0440\u044f \u0432\u0430\u0436\u043a\u0456 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0438, \u043f\u0435\u0440\u0435\u0441\u0443\u0432\u0430\u044e\u0447\u0438 \u0457\u0445 \u043f\u0456\u0434 \u0447\u0430\u0441 \u0440\u0443\u0445\u0443 \u0442\u043e\u0440\u043d\u0430\u0434\u043e.",
            "x": " ",
            "y": 5,
            "z": "100-200"
        },
        "query": [
            "Find the index of {z} in the {y}-th substring of {a} split by {x}.",
            "Determine the position of {z} in the {y}-th segment of {a} when divided by {x}.",
            "Locate the index of {z} within the {y}-th part of {a} after splitting it by {x}."
        ],
        "language": "ukr_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.capitalize().rfind(x)\nprint(answer)\n```",
        "variables": {
            "a": "La superficie esterna visibile del Sole \u00e8 detta fotosfera, ovvero \"sfera di luce\".",
            "x": "e"
        },
        "query": [
            "Find the last occurrence of {x} in the capitalized version of {a}.",
            "Locate the final position of {x} in the string {a} after capitalizing it.",
            "Determine the last index of {x} in the capitalized form of {a}."
        ],
        "language": "ita_Latn"
    },
    {
        "solution": "```python\nanswer = a[::-1].zfill(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0648\u0646\u0641\u0649 \u0645\u0642\u062f\u0645 \u0627\u0644\u0628\u0631\u0646\u0627\u0645\u062c\u060c \u0627\u0644\u0644\u064a \u0627\u0639\u062a\u064f\u0642\u0644 \u0641\u064a \u0645\u0643\u0627\u0646 \u0627\u0644\u062d\u0627\u062f\u062b\u060c \u0627\u0644\u0647\u062c\u0648\u0645 \u0648\u0627\u062f\u0639\u0649 \u0627\u0646\u0647 \u0627\u0633\u062a\u062e\u062f\u0645 \u0627\u0644\u0642\u0637\u0628 \u0644\u062d\u0645\u0627\u064a\u0629 \u0646\u0641\u0633\u0647 \u0645\u0646 \u0627\u0644\u0632\u062c\u0627\u062c\u0627\u062a \u0627\u0644\u062a\u064a \u0623\u0644\u0642\u064a\u062a \u0641\u064a \u0648\u062c\u0647\u0647 \u0628\u0648\u0627\u0633\u0637\u0629 \u062b\u0644\u0627\u062b\u064a\u0646 \u0634\u062e\u0635\u0627\u064b.",
            "x": 150
        },
        "query": [
            "Reverse {a} and pad it with zeros until its length is {x}.",
            "Reverse the string {a} and add leading zeros to make its length {x}.",
            "Flip {a} and prepend zeros to reach a total length of {x}."
        ],
        "language": "ars_Arab"
    },
    {
        "solution": "```python\nanswer = a.strip(x).istitle()\nprint(answer)\n```",
        "variables": {
            "a": "\u00ccf\u1eb9\u0300h\u00f3n\u00fah\u00e0n w\u00e1y\u00e9 k\u00e1\u00e0kiri \u00e0gb\u00e1y\u00e9, \u1ecd\u0300p\u1ecd\u0300l\u1ecdp\u1ecd\u0300 \u00ecb\u00e1nij\u1eb9\u0301j\u1ecd\u0301 \u1ecd\u0300dar\u00e0n \u00e1ti \u00e0w\u1ecdn \u00f2l\u00f3r\u00ed \u00ecj\u1ecdba Iceland \u00e0ti Pakistan k\u1ecd\u0300w\u00e9 f\u00ecpos\u00edl\u00e8.",
            "x": "\u00cc"
        },
        "query": [
            "After removing leading and trailing {x} from {a}, is the result in title case?",
            "Is the string {a} in title case after stripping the characters {x} from both ends?",
            "Does the string {a}, after trimming {x} from its edges, become a title-cased string?"
        ],
        "language": "yor_Latn"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).title()\nprint(answer)\n```",
        "variables": {
            "a": "Ch\u00fang\t\u0111\u01b0\u1ee3c\tli\u1ec7t\tk\u00ea\ttrong\tDanh\ts\u00e1ch\tDi\ts\u1ea3n\tTh\u1ebf\tgi\u1edbi\tc\u1ee7a\tUNESCO.",
            "x": 4
        },
        "query": [
            "Convert tabs in {a} to {x} spaces and then transform each word's initial character to uppercase.",
            "Replace tabs in {a} with {x} spaces and capitalize the first letter of each word.",
            "Change tabs in {a} to {x} spaces and capitalize the initial character of every word."
        ],
        "language": "vie_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).rfind(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u041e\u043a\u0440\u044a\u0433 \u041a\u0430\u043d\u0430\u043b (\u043d\u0430 \u043d\u0438\u0434\u0435\u0440\u043b\u0430\u043d\u0434\u0441\u043a\u0438: Grachtengordel) \u0435 \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u0438\u044f\u0442 \u0440\u0430\u0439\u043e\u043d \u043d\u0430 17 - \u0442\u0438 \u0432\u0435\u043a, \u043e\u0431\u0433\u0440\u0430\u0436\u0434\u0430\u0449 \u0432\u044a\u0442\u0440\u0435\u0448\u043d\u0438\u044f \u0433\u0440\u0430\u0434 \u043d\u0430 \u0410\u043c\u0441\u0442\u0435\u0440\u0434\u0430\u043c.",
            "x": "\u041a\u0430\u043d\u0430\u043b",
            "y": "\u043a\u0430\u043d\u0430\u043b",
            "z": "\u0433\u0440\u0430\u0434"
        },
        "query": [
            "Replace {x} with {y} in {a} and find the last occurrence of {z} in the result.",
            "Substitute {x} with {y} in {a} and locate the final position of {z} in the modified string.",
            "Swap {x} with {y} in {a} and determine the last index of {z} in the new string."
        ],
        "language": "bul_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.strip(x).encode('ascii', errors='ignore')\nprint(answer)\n```",
        "variables": {
            "a": "1970 \u062f\u0647\u0647\u0633\u06cc\u0646\u0646Il-76\u0631\u0648\u0633\u06cc\u0647\u0646\u0646\u0634\u0648\u0631\u0648\u06cc\u0646\u0627\u0631\u062a\u0634\u06cc\u0646\u0628\u06cc\u0631\u0645\u0647\u0645\u0628\u062e\u0634\u06cc\u062f\u06cc\u0648\u06af\u0686\u0646\u0622\u06cc\u0631\u0626\u0633\u06cc\u0647\u062f\u0647\u0628\u06cc\u0631\u0634\u062f\u06cc\u062f\u062a\u0635\u0627\u062f\u0641\u0627\u0626\u0644\u0645\u0634\u062f\u06cc.",
            "x": "\u062f\u0647\u0647\u0633\u06cc\u0646\u0646"
        },
        "query": [
            "Remove leading and trailing characters in {x} from {a} and encode the result in ASCII, ignoring errors.",
            "Trim characters in {x} from both ends of {a} and convert the result to ASCII, ignoring any errors.",
            "Strip characters in {x} from the start and end of {a} and encode it in ASCII, ignoring errors."
        ],
        "language": "azb_Arab"
    },
    {
        "solution": "```python\nanswer = a[y:z].count(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u1240\u12f5\u121e\u12cd\u1291 \u1260\u12a5\u1295\u130d\u120a\u12dd\u129b \u12a5\u1293 \u1260\u1303\u1353\u1295\u129b \u122a\u1356\u122d\u1275 \u1260\u121b\u12f5\u1228\u130d \u12d3\u1208\u121d \u12a0\u1240\u1349 \u12f5\u122d\u1305\u1275 \u12e8\u1235\u1354\u1295 \u1363 \u12e8\u1323\u120a\u12eb\u1295 \u12a5\u1293 \u12e8\u12ae\u122a\u12eb \u124b\u1295\u124b \u1355\u122e\u130d\u122b\u121e\u127d\u1295 \u1208\u1274\u120c\u126a\u12e5\u1295 \u1363 \u1208\u12f5\u122d \u12a5\u1293 \u1208\u1270\u1295\u1240\u1233\u1243\u123d \u1218\u1223\u122a\u12eb\u12ce\u127d \u12a5\u12e8\u1300\u1218\u1228 \u1290\u12cd\u1362",
            "x": "\u12a5\u1293",
            "y": 0,
            "z": 50
        },
        "query": [
            "Count the number of times {x} appears in the substring of {a} from index {y} to {z}.",
            "How many times does {x} occur in the slice of {a} starting at index {y} and ending at index {z}?",
            "Determine the frequency of {x} in the segment of {a} between indices {y} and {z}."
        ],
        "language": "amh_Ethi"
    },
    {
        "solution": "```python\nanswer = a[y:z].isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u0e44\u0e21\u0e48\u0e21\u0e35\u0e01\u0e32\u0e23\u0e23\u0e32\u0e22\u0e07\u0e32\u0e19\u0e40\u0e01\u0e35\u0e48\u0e22\u0e27\u0e01\u0e31\u0e1a\u0e01\u0e32\u0e23\u0e08\u0e23\u0e32\u0e08\u0e23\u0e2b\u0e19\u0e32\u0e41\u0e19\u0e48\u0e19\u0e1a\u0e19\u0e16\u0e19\u0e19\u0e27\u0e07\u0e41\u0e2b\u0e27\u0e19\u0e17\u0e35\u0e48\u0e40\u0e1b\u0e47\u0e19\u0e40\u0e2a\u0e49\u0e19\u0e17\u0e32\u0e07\u0e2a\u0e33\u0e23\u0e2d\u0e07\u0e02\u0e2d\u0e07\u0e40\u0e21\u0e37\u0e2d\u0e07",
            "y": 5,
            "z": 10
        },
        "query": [
            "Check if the substring of {a} from index {y} to {z} is numeric.",
            "Determine if the part of {a} from position {y} to {z} consists only of numbers.",
            "Verify if the section of {a} between indices {y} and {z} contains only numeric characters."
        ],
        "language": "tha_Thai"
    },
    {
        "solution": "```python\nanswer = a[y:z].find(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u05d0\u05d5\u05d9\u05d1 \u05d3\u05d9 \u05d0\u05e0\u05d5\u05d5\u05e2\u05e0\u05d3\u05d5\u05e0\u05d2 \u05e4\u05d5\u05df \u05e2\u05de\u05d9\u05e6\u05e2\u05e0'\u05e1 \u05d1\u05d0\u05d6\u05d5\u05da \u05e6\u05d5 \u05d0 \u05d2\u05e2\u05d5\u05d5\u05d9\u05e1\u05e2 \u05e4\u05dc\u05d0\u05e5 \u05d0\u05d9\u05d6 \u05e6\u05d5 \u05d6\u05d9\u05da \u05d1\u05d0\u05e7\u05d0\u05e0\u05d8 \u05de\u05d0\u05db\u05df \u05de\u05d9\u05d8 \u05d3\u05d9 \u05d4\u05d9\u05e1\u05d8\u05d0\u05e8\u05d9\u05e2 \u05d0\u05d5\u05df \u05e7\u05d5\u05dc\u05d8\u05d5\u05e8 \u05d3\u05e2\u05e8\u05e4\u05d5\u05df, \u05d3\u05d0\u05df \u05d5\u05d5\u05e2\u05e8\u05d8 \u05d3\u05e2\u05dd \u05e1\u05d0\u05e8\u05d8 \u05d8\u05d5\u05e8\u05d9\u05d6\u05dd \u05d0\u05e0\u05d2\u05e2\u05e8\u05d5\u05e4\u05df \u05e7\u05d5\u05dc\u05d8\u05d5\u05e8\u05d0\u05dc\u05e2 \u05d8\u05d5\u05e8\u05d9\u05d6\u05dd.",
            "x": "\u05e7\u05d5\u05dc\u05d8\u05d5\u05e8",
            "y": 50,
            "z": 100
        },
        "query": [
            "Find the index of the first occurrence of {x} in the substring of {a} from index {y} to {z}.",
            "Locate the first position of {x} within the substring of {a} starting at index {y} and ending at index {z}.",
            "Determine the index of the initial appearance of {x} in the segment of {a} ranging from index {y} to {z}."
        ],
        "language": "ydd_Hebr"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).count(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0631\u063a\u0645 \u0623\u0646 \u0627\u0644\u0632\u064a\u0627\u0631\u0627\u062a \u0627\u0644\u0642\u0635\u064a\u0631\u0629 \u0644\u0628\u0644\u062f\u0627\u0646 \u0645\u062d\u062f\u062f\u0629 \u0643\u0633\u0627\u0626\u062d \u0623\u0648 \u0639\u0634\u0627\u0646 \u0627\u0644\u0639\u0645\u0644 \u0645\u0645\u0643\u0646 \u0645\u062a\u062d\u062a\u062c\u0634 \u062a\u0623\u0634\u064a\u0631\u0629\u060c \u0644\u0643\u0646 \u0627\u0644\u0630\u0647\u0627\u0628 \u0644\u0644\u0628\u0644\u0627\u062f \u062f\u064a \u0643\u0637\u0627\u0644\u0628 \u062f\u0648\u0644\u064a \u0628\u064a\u062d\u062a\u0627\u062c \u0641\u064a \u0627\u0644\u0639\u0645\u0648\u0645 \u0625\u0642\u0627\u0645\u0629 \u0623\u0637\u0648\u0644 \u0645\u0646 \u0644\u0648 \u0631\u062d\u062a \u0643\u0633\u0627\u0626\u062d \u0639\u0627\u0628\u0631 \u0628\u0633.",
            "x": ".",
            "y": "\u0643\u0633\u0627\u0626\u062d"
        },
        "query": [
            "Count occurrences of {y} in {a} after removing trailing characters in {x}.",
            "After trimming trailing {x} from {a}, count how many times {y} appears.",
            "Find the number of times {y} occurs in {a} after deleting trailing {x}."
        ],
        "language": "arz_Arab"
    },
    {
        "solution": "```python\nanswer = a.strip().upper().startswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "Johnson is twiede m\u00e8t zeve punte achterstand op 2243.",
            "x": "JOHNSON"
        },
        "query": [
            "Check if the trimmed and uppercased version of {a} starts with {x}.",
            "Determine if the trimmed and uppercased string {a} begins with {x}.",
            "Verify if the uppercased and trimmed version of {a} starts with {x}."
        ],
        "language": "lim_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::y].isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u041c\u0435\u0436\u0434\u0443\u043d\u0430\u0440\u043e\u0434\u043d\u044b\u0435 \u0441\u0430\u0434\u043e\u0432\u044b\u0435 \u0432\u044b\u0441\u0442\u0430\u0432\u043a\u0438 \u2014 \u044d\u0442\u043e \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441\u043e\u0431\u044b\u0442\u0438\u044f, \u043d\u0430 \u043a\u043e\u0442\u043e\u0440\u044b\u0445 \u0432\u044b\u0441\u0442\u0430\u0432\u043b\u044f\u044e\u0442\u0441\u044f \u0446\u0432\u0435\u0442\u043e\u0447\u043d\u044b\u0435 \u044d\u043a\u0441\u043f\u043e\u0437\u0438\u0446\u0438\u0438, \u0431\u043e\u0442\u0430\u043d\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0441\u0430\u0434\u044b, \u0430 \u0442\u0430\u043a\u0436\u0435 \u0432\u0441\u0451, \u0447\u0442\u043e \u0441\u0432\u044f\u0437\u0430\u043d\u043e \u0441 \u0440\u0430\u0441\u0442\u0435\u043d\u0438\u044f\u043c\u0438.",
            "x": 5,
            "y": 10
        },
        "query": [
            "Check if every {y}-th character from index {x} in {a} is printable.",
            "Determine if each {y}-th character starting from index {x} in {a} is a printable character.",
            "Verify if the characters in {a} starting from index {x} and taken every {y} steps are printable."
        ],
        "language": "rus_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.rsplit(x, y)[-1].capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "Zik di tmunent n u\u0263lan, tawzut n Teb\u1e25irin n Yim\u0263an n Sangabur t\u03b5awen i wakken ad tbeddel tigzirt \u0263er Te\u0263\u1e5bemt n Teb\u1e25irt Tat\u1e5bubikan.",
            "x": " ",
            "y": 3
        },
        "query": [
            "Split {a} by {x} up to {y} times from the right, and capitalize the last element of the result.",
            "Divide {a} using {x} as the delimiter up to {y} times from the end, and capitalize the final part.",
            "Separate {a} by {x} up to {y} times from the right side, and capitalize the last segment."
        ],
        "language": "kab_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].upper().find(z)\nprint(answer)\n```",
        "variables": {
            "a": "Saray Iurem so posibIin sengegay inkawetwet no kasin walan talagay aktuaI ya sinmabog.",
            "x": 10,
            "y": 50,
            "z": "SENGE"
        },
        "query": [
            "Find the position of {z} in the uppercase version of the substring of {a} from index {x} to {y}.",
            "Locate the index of {z} in the uppercase substring of {a} ranging from {x} to {y}.",
            "Determine the position of {z} within the uppercase segment of {a} between indices {x} and {y}."
        ],
        "language": "pag_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::z].isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u05d0\u05d9\u05d9\u05e0\u05e2\u05e8 \u05e4\u05d5\u05df \u05d3\u05d9 \u05d5\u05d5\u05e2\u05dc\u05d8'\u05e1 \u05e8\u05d9\u05d9\u05db\u05e1\u05d8\u05e2 \u05de\u05e2\u05e0\u05d8\u05e9\u05df, \u05d0\u05dc\u05e2\u05df \u05d4\u05d0\u05d8 \u05d5\u05d5\u05d0\u05e8\u05e9\u05d9\u05d9\u05e0\u05dc\u05e2\u05da \u05d0\u05d9\u05e0\u05d5\u05d5\u05e2\u05e1\u05d8\u05d9\u05e8\u05d8 \u05e4\u05d9\u05dc \u05e4\u05d5\u05df \u05d6\u05d9\u05d9\u05df \u05e8\u05d9\u05d9\u05db\u05d8\u05d5\u05dd \u05d0\u05d9\u05df \u05de\u05d0\u05e8\u05d9\u05e0\u05e2 \u05d0\u05d5\u05d9\u05e1\u05e4\u05d0\u05e8\u05e9\u05d5\u05e0\u05d2 \u05d0\u05d5\u05df \u05d4\u05d0\u05d8 \u05d0\u05e0\u05d2\u05e2\u05d4\u05d5\u05d9\u05d1\u05df \u05d6\u05d9\u05d9\u05df \u05d6\u05d5\u05da \u05e6\u05d5 \u05d8\u05e8\u05e2\u05e4\u05df \u05de\u05d0\u05e1\u05d0\u05e9\u05d9 \u05e6\u05d5\u05dc\u05d9\u05d1 \u05d0 \u05dc\u05e2\u05d1\u05e0\u05e1\u05dc\u05e2\u05e0\u05d2\u05dc\u05d9\u05db\u05e2 \u05d0\u05d9\u05e0\u05d8\u05e2\u05e8\u05e2\u05e1 \u05d0\u05d9\u05e0\u05e2\u05dd \u05e7\u05e8\u05d9\u05d2.",
            "x": 5,
            "z": 3
        },
        "query": [
            "Check if the substring of {a} starting from position {x} with steps of {z} contains only letters and digits.",
            "Verify if the sliced string from {a} starting at index {x} with a step of {z} is alphanumeric.",
            "Determine if the segment of {a} beginning at {x} and taken every {z} characters is composed solely of letters and numbers."
        ],
        "language": "ydd_Hebr"
    },
    {
        "solution": "```python\nanswer = a[x::y].title()\nprint(answer)\n```",
        "variables": {
            "a": "Har\u0129 m\u0129eri \u0129tat\u0169 m\u0129het\u0169ku, mak\u0129ria ma anyitwo m\u0129rongo \u0129nana n\u0129marekereirio kuma Central Booking facility g\u0169tar\u0129 g\u0169cirithio.",
            "x": 5,
            "y": 3
        },
        "query": [
            "Take every {y}-th character from {x} in {a} and convert it to title case.",
            "Extract every {y}-th character starting from index {x} in {a} and change it to title case.",
            "From the string {a}, select every {y}-th character starting at position {x} and transform it to title case."
        ],
        "language": "kik_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "Roumssan b\u00e9nin tab souls kat\u00e8k pougin. Oub rita riibo. Roumss wousgo gongamin.",
            "x": 10,
            "y": 15
        },
        "query": [
            "Extract the substring of {a} from index {x} to {y} and capitalize it.",
            "Get the substring from {a} starting at index {x} and ending at index {y}, then capitalize the result.",
            "Take the portion of {a} between indices {x} and {y} and make the first letter uppercase."
        ],
        "language": "mos_Latn"
    },
    {
        "solution": "```python\nanswer = a.lower().split(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Wakiri me ngumo kuuma Giriki ar\u0128a n\u0128o Sakis Kechagioglou na George Nikolakopoulos n\u0128mohetwo njera-in\u0128 ya Athens tond\u0169 n\u0128manyit\u0128kire na mah\u0128tia ma w\u0128ici na ungumania.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Convert {a} to lowercase and split it at each {x}, with a maximum of {y} splits.",
            "Transform {a} to lowercase and divide it at each {x}, up to {y} times.",
            "Change {a} to lowercase and break it at each {x}, with a limit of {y} splits."
        ],
        "language": "kik_Latn"
    },
    {
        "solution": "```python\nanswer = a[y:z].isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u0907\u0928 \u0935\u0947\u092c\u0938\u093e\u0907\u091f\u094b\u0902 \u0928\u0947 \u092c\u0939\u0941\u0924 \u0927\u094d\u092f\u093e\u0928 \u0906\u0915\u0930\u094d\u0937\u093f\u0924 \u0915\u093f\u092f\u093e \u0939\u0948, \u0916\u093e\u0938\u0915\u0930 \u0936\u093f\u0915\u094d\u0937\u093e \u0938\u0947\u091f\u093f\u0902\u0917 \u092e\u0947\u0902.",
            "y": 4,
            "z": 12
        },
        "query": [
            "Check if the substring of {a} from {y} to {z} consists solely of alphanumeric characters.",
            "Verify if the substring of {a} from index {y} to {z} contains only alphanumeric characters.",
            "Determine if the portion of {a} between {y} and {z} is made up entirely of alphanumeric characters."
        ],
        "language": "hin_Deva"
    },
    {
        "solution": "```python\nanswer = a.lower().find(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Submarines were used in World War I and World War II. Back then they were very slow and had a very limited shooting range.",
            "x": "world",
            "y": 0
        },
        "query": [
            "Convert {a} to lowercase and find the position of {x} starting from index {y}.",
            "Transform {a} to lowercase and locate the index of {x} beginning from position {y}.",
            "Change {a} to lowercase and determine the position of {x} starting at index {y}."
        ],
        "language": "eng_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "\u2018t Is meugelek um verg\u00f6nninge te kriege bij de Ranger Station in Puerto Jim\u00e9nez, meh ze acceptere gein credit cards.",
            "x": " ",
            "y": ""
        },
        "query": [
            "Replace {x} with {y} in {a} and verify if all characters are alphabetic.",
            "Substitute {x} with {y} in {a} and check if the resulting string contains only alphabetic characters.",
            "Change {x} to {y} in {a} and determine if the entire string is composed of alphabetic characters."
        ],
        "language": "lim_Latn"
    },
    {
        "solution": "```python\nanswer = a.zfill(x).startswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0628\u0648\u06af\u0648\u0646\u0648\u0646 \u06af\u0648\u0646 \u0627\u0648\u06cc\u0648\u0646\u0686\u0648\u0633\u0648 \u00ab\u0648\u0627\u0634\u0646\u06af\u062a\u0648\u0646 \u06a9\u067e\u06cc\u062a\u0627\u0644\u0632\u00bb\u062f\u0627\u0646 \u0622\u0644\u06a9\u0633 \u0627\u0648\u0648\u0686\u06a9\u06cc\u0646-\u062f\u06cc\u0631.",
            "x": 50,
            "y": "\u0628\u0648\u06af\u0648\u0646\u0648\u0646"
        },
        "query": [
            "Check if the zero-padded version of {a} (to length {x}) starts with {y}.",
            "Determine if the zero-filled string of {a} (to length {x}) begins with {y}.",
            "Verify if the string {a}, padded with zeros to a length of {x}, starts with {y}."
        ],
        "language": "azb_Arab"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('utf-8').replace(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "\u041a\u0430\u0442\u044b \u0431\u043e\u0437\u0434\u0430\u043d \u0442\u044b\u0448, \u044d\u043a\u0441\u0442\u0440\u0435\u043c\u0430\u043b\u044c \u04bb\u0430\u0432\u0430 \u0448\u0430\u0440\u0442\u043b\u0430\u0440\u044b \u0434\u0430 \u043a\u043e\u0442\u043a\u0430\u0440\u0443 \u0447\u0430\u0440\u0430\u043b\u0430\u0440\u044b\u043d\u0430 \u043a\u043e\u043c\u0430\u0447\u0430\u0443\u043b\u044b\u0439 \u0438\u0434\u0435.",
            "x": "\u043a\u043e\u0442\u043a\u0430\u0440\u0443",
            "y": "\u044f\u0440\u0434\u04d9\u043c"
        },
        "query": [
            "Encode {a} to UTF-8, decode it back, and replace {x} with {y}.",
            "Convert {a} to UTF-8 encoding, then decode it and substitute {x} with {y}.",
            "Transform {a} into UTF-8, decode it, and change {x} to {y}."
        ],
        "language": "tat_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[::-1].upper().startswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "Modern Education w\u00ee gunehbar kir ji ber b\u00ea dest\u00fbr \u00e7apkirina danas\u00een\u00ean mezin li ser otobusan \u00fb vir kirina ku ew serekmamostey\u00ea \u00eengil\u00eez\u00ee ye.",
            "x": "YE."
        },
        "query": [
            "Check if the reversed and uppercased version of {a} starts with {x}.",
            "Determine if {a} reversed and converted to uppercase begins with {x}.",
            "See if the uppercase version of the reversed {a} starts with {x}."
        ],
        "language": "kmr_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Le \u0192e ene megbe la, wox\u037b m\u037b\u0256e\u0256e, si nye m\u037b\u0256e\u0256e g\u00e3t\u037b le xexea me le MRI \u014bud\u037bw\u037bw\u037b me.",
            "x": "e"
        },
        "query": [
            "Check if {a} without leading and trailing {x} characters consists only of alphabetic characters.",
            "Determine if the string {a} with {x} characters removed from both ends contains only letters.",
            "Verify if {a}, after stripping {x} from the start and end, is composed solely of alphabetic characters."
        ],
        "language": "ewe_Latn"
    },
    {
        "solution": "```python\nanswer = a.title().center(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Det ville v\u00e6re n\u00f8dvendigt at d\u00f8mme ham anderledes, hvis han havde mistet sine biln\u00f8gler og det var hans egen bil som han pr\u00f8vede at bryde ind i.",
            "x": 100,
            "y": "*"
        },
        "query": [
            "Center the title-cased version of {a} within a string of length {x}, using {y} as the fill character.",
            "Create a centered string of length {x} with the title-cased version of {a}, filled with {y}.",
            "Generate a string of length {x} with the title-cased {a} centered and filled with {y}."
        ],
        "language": "dan_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u062a\u067e\u0647 \u0627\u06cc\u0633\u062a\u06af\u0627\u0647 \u0644\u0627\u0631\u06cc\u0646\u06cc\u0646 \u062a\u0648\u0631\u06cc\u0633\u0645 \u0641\u0635\u0644\u06cc \u0645\u0639\u0645\u0648\u0644\u0627 \u0647\u0646\u062f\u0648\u0633\u062a\u0627\u0646\u06cc\u0646 \u06cc\u0627\u06cc\u0646\u062f\u0627 \u0627\u0648\u062c \u06cc\u062a\u06cc\u0634\u0631 .",
            "x": " ",
            "y": 3
        },
        "query": [
            "Determine if the {y}-th substring of {a} split by {x} is a valid identifier.",
            "Check if the {y}-th part of {a} obtained by splitting with {x} is a valid identifier.",
            "Is the {y}-th segment of {a} after splitting by {x} a valid identifier?"
        ],
        "language": "azb_Arab"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('utf-8').isupper()\nprint(answer)\n```",
        "variables": {
            "a": "Las familias con hijos son algo que no se ve frecuentemente, pero ciertos albergues los aceptan en cuartos privados."
        },
        "query": [
            "Check if {a} remains in uppercase after encoding to UTF-8 and decoding back.",
            "Verify if {a} is still in uppercase after UTF-8 encoding and decoding.",
            "Determine if {a} stays uppercase after being encoded to UTF-8 and then decoded."
        ],
        "language": "spa_Latn"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).rstrip(y).isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u062f\u0627\u0626\u0645\u0627 \u0643\u0627\u0646\u062a \u0627\u0644\u0642\u0644\u0639\u0629 \u0627\u0644\u062a\u0642\u0644\u064a\u062f\u064a\u0629 \u0641\u064a \u0627\u0644\u0639\u0635\u0648\u0631 \u0627\u0644\u0648\u0633\u0637\u0649 \u062a\u0634\u063a\u0644 \u0627\u0644\u062e\u064a\u0627\u0644 \u060c \u0648\u062a\u062e\u0644\u064a\u0646\u0627 \u0646\u0641\u0643\u0631 \u0628\u0635\u0648\u0631 \u0627\u0644\u0645\u0628\u0627\u0631\u0632\u0627\u062a \u0648\u0627\u0644\u0639\u0632\u0627\u064a\u0645 \u0648\u0627\u0644\u0641\u0631\u0648\u0633\u064a\u0629 \u062a\u0628\u0639 \u0622\u0631\u062b\u0631.",
            "x": "\u062f\u0627\u0626\u0645\u0627",
            "y": "\u0622\u0631\u062b\u0631."
        },
        "query": [
            "Verify if {a} without leading {x} and trailing {y} characters is numeric.",
            "Check if {a} with {x} removed from the start and {y} removed from the end is a number.",
            "Determine if {a} is numeric after stripping leading {x} and trailing {y}."
        ],
        "language": "apc_Arab_sout3123"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Comisiona diye belin cina, kuru shiye buruwu duwo sandi cidau satana diye haf\u01dds\u01ddana d\u01ddga dawar\u01ddz\u01ddna. Kuru buruwu sandima d\u01ddga suro Computer k\u01ddrebe d\u01ddro t\u01ddkin sau k\u01ddla lamar\u01dd diyen kulashi sand\u01ddna d\u01ddga k\u01ddndo nankaro wono.",
            "x": 100,
            "y": " "
        },
        "query": [
            "Is the centered string of {a} with length {x} and padding {y} composed only of letters?",
            "Does the string {a} centered to length {x} with padding {y} contain only alphabetic characters?",
            "When {a} is centered to a length of {x} using {y} as padding, is the resulting string made up entirely of letters?"
        ],
        "language": "knc_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode(x).islower()\nprint(answer)\n```",
        "variables": {
            "a": "Xe st\u00e0 sviupp\u00e0 da John Smith nei anni '70 pa iutare artisti inesperti o co capacit\u00e0 motorie limit\u00e0.",
            "x": "vec_Latn"
        },
        "query": [
            "After encoding {a} with {x} and replacing errors, then decoding it back, are all characters lowercase?",
            "If you encode {a} using {x} with error replacement and decode it back, will all characters be in lowercase?",
            "Are all characters in {a} lowercase after encoding with {x}, replacing errors, and decoding back?"
        ],
        "language": "vec_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].replace(z, w).isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u0395\u03bd\u03c4\u03cc\u03c2 \u03bb\u03af\u03b3\u03c9\u03bd \u03b5\u03c4\u03ce\u03bd \u03ad\u03c0\u03b5\u03b9\u03c4\u03b1 \u03b1\u03c0\u03cc \u03c4\u03b7\u03bd \u03ac\u03c6\u03b9\u03be\u03b7 \u03c4\u03c9\u03bd \u0395\u03c5\u03c1\u03c9\u03c0\u03b1\u03af\u03c9\u03bd \u03b5\u03be\u03b5\u03c1\u03b5\u03c5\u03bd\u03b7\u03c4\u03ce\u03bd, \u03bf \u03c0\u03bb\u03b7\u03b8\u03c5\u03c3\u03bc\u03cc\u03c2 \u03c4\u03c9\u03bd \u03a4\u03b1\u0390\u03bd\u03c9\u03bd \u03c0\u03b1\u03c1\u03bf\u03c5\u03c3\u03af\u03b1\u03c3\u03b5 \u03c3\u03b7\u03bc\u03b1\u03bd\u03c4\u03b9\u03ba\u03ae \u03bc\u03b5\u03af\u03c9\u03c3\u03b7 \u03bb\u03cc\u03b3\u03c9 \u03c4\u03c9\u03bd \u0399\u03c3\u03c0\u03b1\u03bd\u03ce\u03bd \u03ba\u03b1\u03c4\u03b1\u03ba\u03c4\u03b7\u03c4\u03ce\u03bd.",
            "x": 10,
            "y": 20,
            "z": "\u03b5",
            "w": "3"
        },
        "query": [
            "Is the substring of {a} from index {x} to {y} with {z} replaced by {w} numeric?",
            "Does the substring of {a} from {x} to {y} become numeric after replacing {z} with {w}?",
            "After replacing {z} with {w}, is the substring of {a} from index {x} to {y} numeric?"
        ],
        "language": "ell_Grek"
    },
    {
        "solution": "```python\nanswer = a.rjust(x, y).casefold().startswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "Tartuntatauti on patogeenin, kuten viruksen, bakteerin, sienen tai muun loisen aiheuttama tauti.",
            "x": 100,
            "y": " ",
            "z": "tartuntatauti"
        },
        "query": [
            "Does the right-justified string of {a} with length {x} and padding {y}, converted to lowercase, start with {z}?",
            "Is the string {a}, right-justified to length {x} with padding {y} and converted to lowercase, starting with {z}?",
            "When {a} is right-justified to a length of {x} with padding {y} and converted to lowercase, does it start with {z}?"
        ],
        "language": "fin_Latn"
    },
    {
        "solution": "```python\nanswer = a[:x:z].join(y).isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Jos vierailet Gr\u00f6nlannissa kylm\u00e4n\u00e4 vuodenaikana (pit\u00e4en my\u00f6s mieless\u00e4, ett\u00e4 sen pohjoisissa osissa on kaikkein kylmint\u00e4), on ehdottoman t\u00e4rke\u00e4\u00e4 ottaa mukaan tarpeeksi l\u00e4mmint\u00e4 vaatetusta.",
            "x": 50,
            "y": "-",
            "z": 3
        },
        "query": [
            "Is the string formed by joining {y} with every {z}-th character of the substring of {a} up to {x} composed only of ASCII characters?",
            "Does the string created by joining {y} with every {z}-th character from the substring of {a} up to {x} contain only ASCII characters?",
            "Is the resultant string, formed by joining {y} with every {z}-th character from the substring of {a} up to {x}, made up entirely of ASCII characters?"
        ],
        "language": "fin_Latn"
    },
    {
        "solution": "```python\nanswer = a.rsplit(x, y)[z].istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Jede Episode der Sendung konzentriert sich auf ein Thema in einem bestimmten Buch und erforscht dieses Thema dann in mehreren Geschichten.",
            "x": " ",
            "y": 5,
            "z": 2
        },
        "query": [
            "Is the {z}-th element of the list obtained by splitting {a} from the end with {x} at most {y} times in title case?",
            "Does the {z}-th element of the list, which is the result of splitting {a} from the end using {x} up to {y} times, start with a capital letter?",
            "After splitting {a} from the end with {x} up to {y} times, is the {z}-th element in title case?"
        ],
        "language": "deu_Latn"
    },
    {
        "solution": "```python\nanswer = a[:x].rjust(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\uabc3\uabe4\uabd1\uabe3\uabcf\uabd5\uabc1\uabe4\uabe1\uabd2\uabe4 \uabc3\uabd4\uabdb\uabc7 \uabc0\uabe6\uabc1 \uabc2\uabe4\uabc1\uabe4\uabe1\uabc3\uabe8\uabdb\uabc0\uabe4 \uabc3\uabc8\uabe5\uabd7 \uabca\uabe6\uabe1\uabc5\uabd4\uabe6, \uabd1\uabd7\uabe8\uabd5\uabe8 \uabc3\uabc8\uabe3\uabcf \uabc8\uabd4\uabd7\uabe4 \uabc4\uabe8\uabdf\uabc1\uabe4 \uabc7\uabe6\uabdf\uabc1\uabe4\uabdf\uabc5\uabe4\uabc9\uabe5\uabcf \uabd1\uabe3\uabcf\uabeb",
            "x": 10,
            "y": 20,
            "z": "\uabc0"
        },
        "query": [
            "Take the first {x} characters of {a} and right justify them to a width of {y} using {z} as the fill character.",
            "Extract the first {x} characters from {a} and pad them on the left to a total width of {y} with {z}.",
            "Get the first {x} characters of {a} and align them to the right with a total width of {y}, filling with {z}."
        ],
        "language": "mni_Mtei"
    },
    {
        "solution": "```python\nanswer = a[x:y].upper().zfill(z)\nprint(answer)\n```",
        "variables": {
            "a": "El quart\u00e9r intr\u00e9g l\u2019\u00e8 staa deciaraa S\u00ect Patrim\u00f2ni Mundi\u00e0l de l\u2019Umanit\u00e0 UNESCO per el s\u00f2 val\u00f9r colt\u00fcral e istor\u00e8g \u00fcnic, e i val\u00f9r di s\u00f2 prupriet\u00e0 ienn tra i p\u00fcss\u00e9 v\u00f2lt del pa\u00e9s.",
            "x": 10,
            "y": 20,
            "z": 15
        },
        "query": [
            "Take the substring of {a} from {x} to {y}, convert it to uppercase, and pad it with zeros to make it {z} characters long.",
            "Extract the substring from {a} starting at index {x} and ending at index {y}, change it to uppercase, and zero-fill it to ensure it is {z} characters in length.",
            "Get the substring of {a} between indices {x} and {y}, transform it to uppercase, and pad it with leading zeros to reach a total length of {z} characters."
        ],
        "language": "lmo_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().title().startswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "Arias utfolwe kutsi unalo kancane leligciwane, kusho longuMphathiswa waMengameli Rodrigo Arias.",
            "x": "Arias"
        },
        "query": [
            "After stripping whitespace and converting {a} to title case, check if it starts with {x}.",
            "Check if {a}, after removing leading and trailing spaces and converting to title case, begins with {x}.",
            "Determine if {a}, once stripped of whitespace and capitalized, starts with {x}."
        ],
        "language": "ssw_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('utf-8').isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u041f\u0440\u043e\u0431\u043b\u0435\u043c\u044a\u0442 \u0437\u0430\u043f\u043e\u0447\u043d\u0430 \u043d\u0430 1 \u044f\u043d\u0443\u0430\u0440\u0438, \u043a\u043e\u0433\u0430\u0442\u043e \u0434\u0435\u0441\u0435\u0442\u043a\u0438 \u043c\u0435\u0441\u0442\u043d\u0438 \u0436\u0438\u0442\u0435\u043b\u0438 \u0437\u0430\u043f\u043e\u0447\u043d\u0430\u0445\u0430 \u0434\u0430 \u0441\u0435 \u0436\u0430\u043b\u0432\u0430\u0442 \u0432 \u043f\u043e\u0449\u0430\u0442\u0430 \u043d\u0430 \u041e\u0431\u0430\u043d\u0430\u0437\u0430\u0432\u0430, \u0447\u0435 \u043d\u0435 \u0441\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438 \u0440\u0435\u0434\u043e\u0432\u043d\u0438\u0442\u0435 \u0441\u0438 \u0442\u0440\u0430\u0434\u0438\u0446\u0438\u043e\u043d\u043d\u0438 \u043a\u0430\u0440\u0442\u0438\u0447\u043a\u0438 \u0437\u0430 \u041d\u043e\u0432\u0430 \u0433\u043e\u0434\u0438\u043d\u0430."
        },
        "query": [
            "Encode {a} to UTF-8 and then decode it back, then check if it is a valid identifier.",
            "Convert {a} to UTF-8 and back, then verify if it is a valid identifier.",
            "Check if {a}, after being encoded to UTF-8 and decoded back, is a valid identifier."
        ],
        "language": "bul_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x:y:z].islower()\nprint(answer)\n```",
        "variables": {
            "a": "Erope Tirki w\u00e3 ( Thrace winig yitig wa la Rumeli y be Balkan peninsula w\u00e3) y paas t\u1ebdnga 3%.",
            "x": 6,
            "y": 20,
            "z": 2
        },
        "query": [
            "Check if the substring of {a} from index {x} to {y} with a step of {z} is all lowercase.",
            "Determine if the slice of {a} starting at index {x} and ending at index {y} with step {z} consists entirely of lowercase letters.",
            "Verify whether the segment of {a} from position {x} to {y} with an interval of {z} is completely in lowercase."
        ],
        "language": "mos_Latn"
    },
    {
        "solution": "```python\nanswer = a.swapcase().startswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "W\u0254n na w\u0254w\u0254 tumi w\u0254 \u201cweb proxies\u201d so esiane nne\u025bma bi nti: S\u025b ab\u025b\u025bfo kwantemp\u0254n no so y\u025b ma a, w\u0254n na woyi fa baabi foforo, a \u025bny\u025b \u201chttp\u201d nko ara.",
            "x": "w\u0254n na w\u0254w\u0254 tumi w\u0254 \u201cWEB PROXIES\u201d so esiane nne\u025bma bi nti: s\u025b ab\u025b\u025bfo kwantemp\u0254n no so y\u025b ma a, w\u0254n na woyi fa baabi foforo, a \u025bny\u025b \u201cHTTP\u201d nko ara."
        },
        "query": [
            "Check if the swapcased version of {a} starts with {x}.",
            "Verify if {x} is the starting substring of the swapcased {a}.",
            "Determine if the swapcased string of {a} begins with {x}."
        ],
        "language": "twi_Latn_akua1239"
    },
    {
        "solution": "```python\nanswer = a[x:y].lower()\nprint(answer)\n```",
        "variables": {
            "a": "De geleujjamp is daan aon vervaanging touw. \u2018t Is noedzakelek um veurziechteg te zien bij t vervaange vaan de gleujlamp.",
            "x": 3,
            "y": 12
        },
        "query": [
            "Extract the substring from index {x} to {y} in {a}, then convert it to lowercase.",
            "Get the substring from {a} starting at index {x} and ending at index {y}, and change it to lowercase.",
            "Take the part of {a} from index {x} to {y} and make it lowercase."
        ],
        "language": "lim_Latn"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).title()\nprint(answer)\n```",
        "variables": {
            "a": "M\u00e4 mayjt'awiw aka marka irptirinakan tantach\u00e4wipan mayjt'yapxatayna, ukanx pay\u00efr siqi amuy qillqataw uka Khitatanakamp pichsutat\u00e4na, ukatx uka pachpaw Senadorux martis urux pasayataxatayna.",
            "x": 150,
            "y": "-"
        },
        "query": [
            "Left justify {a} within {x} characters using {y} as the fill character, then capitalize the first letter of each word.",
            "Align {a} to the left within {x} spaces using {y} as the padding character, then capitalize the first letter of each word.",
            "Pad {a} to the left with {y} until it reaches {x} characters, then capitalize the first letter of each word."
        ],
        "language": "ayr_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x, y)[z].upper()\nprint(answer)\n```",
        "variables": {
            "a": "Peter Costello, bendahara Australia dan seorang yang paling mungkin menjadi suksesi Perdana Menteri John Howard sebagai pemimpin partai Liberal, telah memberikan dukungan kepada industri tenaga nuklir di Australia.",
            "x": " ",
            "y": 10,
            "z": 5
        },
        "query": [
            "Split {a} at each {x} up to {y} times, then convert the {z}-th segment to uppercase.",
            "Divide {a} by {x} up to {y} splits, and change the {z}-th part to uppercase.",
            "Break {a} at each {x} up to {y} occurrences, then make the {z}-th section uppercase."
        ],
        "language": "ind_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].rjust(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "\u1075\u1030\u107c\u103a\u1038\u101a\u1030\u1087\u1015\u102d\u102f\u107c\u103a\u1089\u1010\u102e\u1088\u1019\u102d\u1030\u1004\u103a\u1038 Greenland \u1081\u103d\u1004\u103a\u1089\u1010\u1030\u101d\u103a\u1076\u101d\u103a\u1076\u102d\u102f\u107c\u103a\u1038\u101d\u1083\u1088\u1015\u1035\u107c\u103a\u1078\u1062\u101d\u103a\u1038 Inuit \u107c\u1082\u103a\u1038\u1019\u102d\u1030\u1004\u103a\u1038 Canada \u200b\u101c\u1084\u1088 \u1078\u1062\u101d\u103a\u1038 Kalaalleq (\u1015\u1031\u1083\u1038\u1010\u1062\u1004\u103a\u1038\u107c\u1019\u103a\u1081\u103d\u1004\u103a\u1089\u101d\u1083\u1088 Kalaallit)\u104a \u1078\u1062\u101d\u103a\u1038 Greenlander\u104a \u107c\u103a\u1082\u1038\u1019\u102d\u1030\u1004\u103a\u1038 Greenland \u107c\u1086\u101a\u101d\u103a\u1089\u104b",
            "x": 10,
            "y": 20,
            "z": 30,
            "w": " "
        },
        "query": [
            "Extract the substring from index {x} to {y} in {a}, then right justify it within {z} characters using {w} as the fill character.",
            "Get the substring from {a} starting at index {x} and ending at index {y}, then pad it on the left to make its length {z} using {w}.",
            "Take the part of {a} from index {x} to {y}, and align it to the right within a field of {z} characters, filling the extra space with {w}."
        ],
        "language": "shn_Mymr"
    },
    {
        "solution": "```python\nanswer = a.upper().endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "Ho sa natswe mantswe a hae o itse o tla tshehetsa baphehisani ba Borithani Diolimpiking tsa 2012 tse tshwaretsweng London.",
            "x": "LONDON."
        },
        "query": [
            "Determine if the uppercase version of {a} ends with {x}.",
            "Check if {a} in uppercase ends with {x}.",
            "Does the uppercase form of {a} end with {x}?"
        ],
        "language": "sot_Latn"
    },
    {
        "solution": "```python\nanswer = a[:y].count(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0645\u0643\u0646\u0634 \u0627\u0644\u0643\u0644 \u0628\u064a\u062f\u0639\u0645 \u0625\u062f\u0631\u0627\u062c \u0631\u062a\u0628 \u0627\u0644\u0633\u062a\u0627\u062a.",
            "x": "\u0627",
            "y": 20
        },
        "query": [
            "Count the occurrences of {x} in the first {y} characters of {a}.",
            "How many times does {x} appear in the first {y} characters of {a}?",
            "Find the number of times {x} occurs within the first {y} characters of {a}."
        ],
        "language": "arz_Arab"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).isupper()\nprint(answer)\n```",
        "variables": {
            "a": "De r\u00e9ir tuairisc\u00ed, phl\u00e9asc \u00e1ras\u00e1n ar Shr\u00e1id Macbeth de dheasca sceitheadh g\u00e1is.",
            "x": "\u00e1",
            "y": "a"
        },
        "query": [
            "Is the string {a} uppercase after replacing {x} with {y}?",
            "After replacing {x} with {y} in the string {a}, is it in uppercase?",
            "Will the string {a} be in uppercase once {x} is replaced with {y}?"
        ],
        "language": "gle_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].title().isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Makikita ang kaibahan ng mistisismo sa ibang uri ng relihiyosong paniniwala at pagsamba sa pagbibigay-diin nito sa direktang personal na pagdanas ng isang natatanging estado ng kamalayan, partikular na ang may mapayapa, may kaunawaan, napakaligaya, o kahit na tuwang-tuwang karakter.",
            "x": 0,
            "y": 8
        },
        "query": [
            "Is the substring of {a} from index {x} to {y} title-cased and composed only of alphabetic characters?",
            "Does the substring of {a} from index {x} to {y} have title case and consist solely of alphabetic characters?",
            "Is the portion of {a} from index {x} to {y} in title case and made up entirely of letters?"
        ],
        "language": "fil_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].strip(z).isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u0907\u0930\u093e\u0915 \u0926\u0940 \u0905\u092c\u0942 \u0917\u093c\u0930\u0940\u092c \u091c\u0947\u0939\u094d\u200c\u0932 \u0917\u0940 \u0926\u0902\u0917\u0947 \u0926\u0941\u0930\u093e\u0928 \u0905\u0917\u094d\u0917 \u0926\u0947 \u0939\u0935\u093e\u0932\u0947 \u0915\u0930\u0940 \u0926\u093f\u0924\u094d\u0924\u093e \u0917\u0947\u0906\u0964",
            "x": 8,
            "y": 20,
            "z": " "
        },
        "query": [
            "Is the substring of {a} from index {x} to {y}, after stripping {z}, composed only of numeric characters?",
            "Does the substring of {a} from {x} to {y}, after removing {z}, contain only numeric characters?",
            "After stripping {z} from the substring of {a} between indices {x} and {y}, is it entirely numeric?"
        ],
        "language": "dgo_Deva"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).count(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0644\u0644\u0646\u064a\u062a\u0631\u0648\u062c\u064a\u0646 \u0643\u063a\u0627\u0632 \u0646\u0641\u0633 \u062e\u0635\u0627\u0626\u0635 \u0627\u0644\u0646\u064a\u062a\u0631\u0648\u062c\u064a\u0646 \u0627\u0644\u0633\u0627\u0626\u0644. \u062a\u0643\u0648\u0646 \u0627\u0644\u062d\u0627\u0644\u0629 \u0627\u0644\u0633\u0627\u0626\u0644\u0629 \u0623\u0643\u062b\u0631 \u0643\u062b\u0627\u0641\u0629 \u0648\u0644\u0643\u0646 \u0627\u0644\u062c\u0632\u064a\u0626\u0627\u062a \u062a\u0628\u0642\u0649 \u0645\u062b\u0644 \u0645\u0627 \u0647\u064a.",
            "x": 100,
            "y": " ",
            "z": "\u0627\u0644\u0646\u064a\u062a\u0631\u0648\u062c\u064a\u0646"
        },
        "query": [
            "Left-align {a} in a string of length {x} padded with {y}, then count occurrences of {z}.",
            "Align {a} to the left in a string of length {x} using {y} as padding, and then count how many times {z} appears.",
            "Pad {a} to the left in a string of length {x} with {y}, and count the number of times {z} occurs."
        ],
        "language": "acm_Arab"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('utf-8').islower()\nprint(answer)\n```",
        "variables": {
            "a": "Ho tswa letsholo hona kapa kapa ho tsamaya ka ho hloma-o-hlomole ho nka matsatsi a ka bang 17."
        },
        "query": [
            "Encode {a} to UTF-8 and decode it back, then check if the result is in lowercase.",
            "Convert {a} to UTF-8 and back, then determine if the final string is all lowercase.",
            "Transform {a} to UTF-8 encoding and decode it, then verify if the resulting string is in lowercase."
        ],
        "language": "sot_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].strip(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0531\u0575\u056a\u0574 \u0561\u057c\u0561\u0576\u0581 \u0561\u057c\u0561\u057b\u056b\u0576 \u0570\u0565\u0580\u0569\u056b\u0576 \u0578\u0580\u0578\u0576\u0578\u0582\u0574 \u056f\u0561\u057f\u0561\u0580\u0565\u056c\u0578\u0582 \u0587 \u0563\u0576\u0565\u0580\u0568 \u0570\u0561\u0574\u0565\u0574\u0561\u057f\u0565\u056c\u0578\u0582` \u0585\u0564\u0561\u0575\u056b\u0576 \u0573\u0561\u0576\u0561\u057a\u0561\u0580\u0570\u0578\u0580\u0564\u0578\u0582\u0569\u0575\u0578\u0582\u0576\u0576\u0565\u0580\u0568 \u0563\u0580\u0565\u0569\u0565 \u0570\u0561\u0566\u057e\u0561\u0564\u0565\u057a \u0565\u0576 \u0561\u0574\u0580\u0561\u0563\u0580\u057e\u0578\u0582\u0574 \u0561\u0576\u0574\u056b\u057b\u0561\u057a\u0565\u057d \u0561\u057e\u056b\u0561\u0568\u0576\u056f\u0565\u0580\u0578\u0582\u0569\u0575\u0561\u0576 \u0574\u056b\u057b\u0578\u0581\u0578\u057e:",
            "x": 5,
            "y": 20,
            "z": "\u0561"
        },
        "query": [
            "Extract a substring from {a} starting at index {x+1}-th character to {y}-th character and strip characters in {z} from it.",
            "Get a substring from {a} ranging from the {x+1}-th character to the {y}-th character and remove characters in {z} from it.",
            "Take a substring from {a} starting at the {x+1}-th character and ending at the {y}-th character, then strip characters in {z} from it."
        ],
        "language": "hye_Armn"
    },
    {
        "solution": "```python\nanswer = a[x:y].isdigit() and a[x:y].islower()\nprint(answer)\n```",
        "variables": {
            "a": "Plyajlar, mavzuli parklar va lager maydonlari ko'pincha hordiq chiqaruvchi sayyohlar tez-tez tashrif buyuradigan eng ommabop joylardir.",
            "x": 10,
            "y": 20
        },
        "query": [
            "Check if the substring of {a} from {x+1}-th to {y}-th character consists only of digits and is in lowercase.",
            "Verify if the substring of {a} from the {x+1}-th to the {y}-th character is composed solely of digits and is in lowercase.",
            "Determine if the substring of {a} from the {x+1}-th to the {y}-th character contains only digits and is in lowercase."
        ],
        "language": "uzn_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('utf-8').isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "A\u0192et\u0254 Rudd w\u0254 tsiatsia be yea da asi le Kyoto \u0192e \u0256o\u0256o si kp\u0254a yame \u0192e dedien\u0254n\u0254 nyawo gb\u0254. Gake Amerika duk\u0254a me le esia me o, eye eya \u0256eka koe nye duk\u0254 de \u014bk\u0254 si gbe be ye mada asi le \u0256o\u0256o sia dzi o."
        },
        "query": [
            "Encode {a} to UTF-8 and decode it back, then check if it contains only alphabetic characters.",
            "Convert {a} to UTF-8 and back, then verify if it has only letters.",
            "Transform {a} to UTF-8 and decode it, then determine if it consists solely of alphabetic characters."
        ],
        "language": "ewe_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u0686\u0627\u0631\u0627 \u0645\u064a\u0644\u0627\u062f \u0631\u0633\u0645\u064a \u0762\u06a4\u062c\u062f\u0648\u0627\u064a \u0648\u0627\u062a\u0649 \u0627\u0648\u0631\u0648 \u0627\u0648\u06a9\u0649\u2e41 \u0762\u062e\u0646 \u0644\u0649 \u0627\u0648\u0642 \u06a4\u062c\u0627\u0628\u062a.",
            "x": "\u06a4\u062c\u0627\u0628\u062a."
        },
        "query": [
            "Does {a} end with {x} after removing leading and trailing whitespace?",
            "After trimming whitespace from {a}, does it end with {x}?",
            "Is {x} the suffix of {a} once the leading and trailing spaces are removed?"
        ],
        "language": "ace_Arab"
    },
    {
        "solution": "```python\nanswer = a.rsplit(x, y)[-1].isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u091a\u093e\u0930\u094d\u0932\u094b\u091f, \u0928\u0949\u0930\u094d\u0925 \u0915\u0945\u0930\u094b\u0932\u093f\u0928\u093e\u091a\u0940 \u0938\u0917\u0933\u094d\u092f\u093e\u0902\u0924 \u092c\u0930\u0940 \u0917\u091c\u093e\u0932 \u092e\u094d\u0939\u0933\u094d\u092f\u093e\u0930 \u0925\u0902\u092f \u0918\u0930\u092c\u094d\u092f\u093e\u0902\u0916\u093e\u0924\u0940\u0930 \u092c\u0931\u094d\u092f\u093e \u0926\u0930\u094d\u091c\u094d\u092f\u093e\u091a\u0947\u0902 \u092a\u0930\u094d\u092f\u093e\u092f \u0909\u092a\u0932\u092c\u094d\u0926 \u0906\u0938\u093e\u0924.",
            "x": " ",
            "y": 3
        },
        "query": [
            "Is the last segment of {a} after splitting by {x} up to {y} times numeric?",
            "After splitting {a} by {x} up to {y} times, is the final segment numeric?",
            "Does the last part of {a}, when split by {x} up to {y} times, consist of numeric characters?"
        ],
        "language": "gom_Deva"
    },
    {
        "solution": "```python\nanswer = a[x:y].isspace()\nprint(answer)\n```",
        "variables": {
            "a": "\u091c\u0948\u0938\u0947 \u0939\u0940 \u0905\u0932\u094b\u0902\u0938\u094b \u0938\u0947 \u0906\u0917\u0947 \u0915\u0947 \u0915\u093e\u0930 \u0938\u0947\u092b\u094d\u091f\u0940 \u0915\u093e\u0930 \u0915\u0947 \u0928\u0940\u091a\u093e \u0908\u0902\u0927\u0928 \u0915\u0947 \u0932\u0947\u0932 \u091a\u0932 \u0917\u0947\u0932\u0908, \u090a \u091c\u0940\u0924 \u0939\u093e\u0938\u093f\u0932 \u0915\u0930\u0947 \u0915\u0947 \u0932\u0947\u0932 \u092a\u0948\u0915 \u0915\u0947 \u090a\u092a\u0930 \u0932\u0947 \u0917\u0947\u0932\u0908\u0964",
            "x": 8,
            "y": 14
        },
        "query": [
            "Is the substring of {a} from index {x} to {y} composed only of whitespace?",
            "Does the substring of {a} from {x} to {y} contain only whitespace characters?",
            "Is the section of {a} between {x} and {y} made up entirely of whitespace?"
        ],
        "language": "mag_Deva"
    },
    {
        "solution": "```python\nanswer = a[x:y].find(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0995\u09ae\u09cd\u09aa\u09c7\u09a8\u09c0 \u0985\u09b8\u09bf\u09a8\u09be \u09ae\u0996\u09cb\u09df\u0997\u09c0 \u09b6\u09c7\u09a8\u09cd\u09a6\u09cb\u0982 \u09ab\u0982\u0997\u09a6\u09ac\u09be \u09ae\u09ab\u09ae\u09b6\u09bf\u0982\u09ac\u09c1 \u09ae\u0993\u0982 \u09df\u09be\u09ae\u09b9\u09a8\u09cd\u09a8\u09ac\u09be \u0985\u09ae\u09b8\u09c1\u0982 \u099a\u09be\u0987\u09a8\u09be, \u09a8\u09cb\u0982\u09aa\u09cb\u0995 \u09df\u09c1\u09b0\u09cb\u09aa \u0985\u09ae\u09b8\u09c1\u0982 \u09ac\u09cd\u09b0\u09be\u099c\u09bf\u09b2\u0997\u09c1\u09ae\u09cd\u09ac\u09be \u09b8\u09cd\u0995\u09be\u0987\u09aa\u0995\u09c0 \u0985\u099a\u09c7\u09ce\u09aa\u09be \u0996\u09cb\u0999\u09ab\u09ae \u09b2\u09c8\u09ac\u09be \u09ae\u09ab\u09ae\u09b6\u09bf\u0982\u09a6\u09be \u09ae\u09ae\u09bf\u0982 \u099a\u09ce\u09aa\u09be \u09aa\u09be\u09ae\u09cd\u09b2\u09bf\u0964",
            "x": 10,
            "y": 50,
            "z": "\u09ae\u09ab\u09ae\u09b6\u09bf\u0982\u09ac\u09c1"
        },
        "query": [
            "Locate the first occurrence of {z} within the substring of {a} from index {x} to {y}.",
            "Find the first position of {z} in the substring of {a} starting at index {x} and ending at index {y}.",
            "Determine the index of the first appearance of {z} in the section of {a} from {x} to {y}."
        ],
        "language": "mni_Beng"
    },
    {
        "solution": "```python\nanswer = a[x::y].endswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u1015\u102f\u101b\u103d\u1000\u103a\u1006\u102d\u1010\u103a\u1010\u1015\u103a\u1005\u102f\u1000\u103c\u102e\u1038\u101e\u100a\u103a \u1019\u1010\u1030\u100a\u102e\u101e\u1031\u102c\u1021\u1006\u1004\u1037\u103a\u1019\u103b\u102c\u1038\u1010\u103d\u1004\u103a \u1001\u103b\u102e\u1010\u1000\u103a\u1000\u102c \u1021\u101e\u102d\u102f\u1000\u103a\u1015\u103c\u102f\u101c\u102f\u1015\u103a\u1000\u103c\u1015\u102b\u101e\u100a\u103a\u104b",
            "x": 5,
            "y": 2,
            "z": "\u1015\u103c\u102f\u101c\u102f\u1015\u103a\u1000\u103c\u1015\u102b\u101e\u100a\u103a\u104b"
        },
        "query": [
            "Check if the substring of {a} starting from position {x} with step {y} ends with {z}.",
            "Verify if the slice of {a} beginning at {x} with a step of {y} concludes with {z}.",
            "Determine if the portion of {a} starting at index {x} and stepping by {y} ends with {z}."
        ],
        "language": "mya_Mymr"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).rsplit(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "\u041a\u0435\u0439\u0434\u0435 \u0431\u0456\u0440 \u0440\u0435\u0439\u0441\u0442\u0456\u04a3 \u0431\u0430\u0493\u0430\u0441\u044b \u04d9\u0440\u0442\u04af\u0440\u043b\u0456 \u0430\u0433\u0433\u0440\u0435\u0433\u0430\u0442\u043e\u0440\u043b\u0430\u0440\u0434\u0430 \u0430\u0439\u0442\u0430\u0440\u043b\u044b\u049b\u0442\u0430\u0439 \u0435\u0440\u0435\u043a\u0448\u0435\u043b\u0435\u043d\u0443\u0456 \u043c\u04af\u043c\u043a\u0456\u043d, \u0441\u043e\u043d\u0434\u044b\u049b\u0442\u0430\u043d \u0431\u0440\u043e\u043d\u044c\u0434\u0430\u0443 \u0430\u043b\u0434\u044b\u043d\u0434\u0430 \u0456\u0437\u0434\u0435\u0443 \u043d\u04d9\u0442\u0438\u0436\u0435\u043b\u0435\u0440\u0456\u043d \u0442\u0435\u043a\u0441\u0435\u0440\u0443, \u0441\u043e\u043d\u0434\u0430\u0439-\u0430\u049b \u0430\u0432\u0438\u0430\u043a\u043e\u043c\u043f\u0430\u043d\u0438\u044f\u043d\u044b\u04a3 \u04e9\u0437\u0456\u043d\u0456\u04a3 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u044b\u043d\u0430 \u049b\u0430\u0440\u0430\u0443 \u0434\u04b1\u0440\u044b\u0441 \u0431\u043e\u043b\u0430\u0434\u044b.",
            "x": "\u0430\u0433\u0433\u0440\u0435\u0433\u0430\u0442\u043e\u0440\u043b\u0430\u0440\u0434\u0430",
            "y": "\u043f\u043b\u0430\u0442\u0444\u043e\u0440\u043c\u0430\u043b\u0430\u0440\u0434\u0430",
            "z": " ",
            "w": 5
        },
        "query": [
            "Replace {x} with {y} in {a} and then split the result by {z} from the right, limiting to {w} splits.",
            "In the string {a}, replace {x} with {y}, then perform a right split by {z} with a maximum of {w} splits.",
            "First, replace {x} with {y} in {a}, and then split the modified string from the right by {z}, allowing up to {w} splits."
        ],
        "language": "kaz_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x:y].replace(z, w).islower()\nprint(answer)\n```",
        "variables": {
            "a": "Se vi lo\u011das en urbo havanta ri\u0109an trinkokulturon, iru al drinkejoj a\u016d bierejoj \u0109e kvartaloj, kiujn vi ne vizitadas.",
            "x": 10,
            "y": 50,
            "z": "ri\u0109an",
            "w": "rican"
        },
        "query": [
            "Replace {z} with {w} in the substring of {a} from index {x} to {y} and check if the result is in lowercase.",
            "In the substring of {a} from index {x} to {y}, replace {z} with {w} and verify if the outcome is in lowercase.",
            "Check if the substring of {a} from index {x} to {y} with {z} replaced by {w} is in lowercase."
        ],
        "language": "epo_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].encode(encoding=z, errors='replace')\nprint(answer)\n```",
        "variables": {
            "a": "\u0d9a\u0dd9\u0dc3\u0dda \u0dc0\u0dd9\u0dad\u0dad\u0dca, \u0db8\u0dda \u0d9a\u0dcf\u0dbd\u0dba\u0dda \u0db4\u0dca\u200d\u0dbb\u0dc3\u0dd2\u0daf\u0dca\u0db0 \u0d9c\u0dca\u200d\u0dbb\u0dd0\u0dc6\u0dd2\u0da7\u0dd2 \u0d9a\u0dbd\u0dcf\u0d9a\u0dbb\u0dd4\u0dc0\u0db1\u0dca, \u0d9c\u0dca\u200d\u0dbb\u0dd0\u0dc6\u0dd2\u0da7\u0dd2 \u0d9a\u0dca\u200d\u0dbb\u0dd2\u0dba\u0dcf\u0d9a\u0dcf\u0dbb\u0d9a\u0db8\u0dca \u0dc3\u0dc4 \u0d92 \u0dc3\u0db3\u0dc4\u0dcf \u0dc0\u0db1 \"\u0db1\u0dd3\u0dad\u0dca\u200d\u0dba\u0dcf\u0db1\u0dd4\u0d9a\u0dd6\u0dbd\" \u0db6\u0dd2\u0dad\u0dca\u0dad\u0dd2 \u0d87\u0dad. \u0d9c\u0dca\u200d\u0dbb\u0dd0\u0dc6\u0dd2\u0da7\u0dd2 \u0da0\u0dd2\u0dad\u0dca\u200d\u0dbb \u0db6\u0ddc\u0dc4\u0ddd \u0dc0\u0dd2\u0da7 \u0db4\u0dca\u200d\u0dbb\u0dc3\u0dcf\u0d82\u0d9c\u0dd2\u0d9a \u0dc0\u0dc1\u0dba\u0dd9\u0db1\u0dca \u0db1\u0dd3\u0dad\u0dd2 \u0dc0\u0dd2\u0dbb\u0ddd\u0db0\u0dd3 \u0dc3\u0dbd\u0d9a\u0dd4\u0dab\u0dd4\u0dc0\u0dbd\u0da7 \u0dc0\u0da9\u0dcf \u0d9a\u0dbd\u0dcf \u0db1\u0dd2\u0db8\u0dd0\u0dc0\u0dd4\u0db8\u0dca\u0dc0\u0dbd\u0da7 \u0dc3\u0db8\u0dcf\u0db1 \u0dc0\u0dda.",
            "x": 0,
            "y": 10,
            "z": "utf-8"
        },
        "query": [
            "Encode the substring of {a} from index {x} to {y} using {z} encoding, replacing unencodable characters.",
            "Convert the substring of {a} from position {x} to {y} to {z} encoding, substituting any characters that can't be encoded.",
            "Transform the slice of {a} from {x} to {y} into {z} encoding, using 'replace' for characters that cannot be encoded."
        ],
        "language": "sin_Sinh"
    },
    {
        "solution": "```python\nanswer = a.upper().find(x)\nprint(answer)\n```",
        "variables": {
            "a": "Muzeletete wa Turquia Sezen Aksu wadi wadilondekesa ni tenolu ya Italia Alessandro Safina ni ngimbidi Grego Haris Alexiou.",
            "x": "A"
        },
        "query": [
            "What is the position of {x} in {a} when {a} is converted to uppercase?",
            "Where does {x} appear in {a} after converting {a} to uppercase?",
            "After converting {a} to uppercase, what is the index of {x}?"
        ],
        "language": "kmb_Latn"
    },
    {
        "solution": "```python\nanswer = a[:y:z].isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u0915\u0949\u092b\u0940 \u0926\u0941\u0928\u093f\u092f\u093e \u0915\u0947 \u0938\u092c\u0938\u0947 \u0905\u0927\u093f\u0915 \u0935\u094d\u092f\u093e\u092a\u093e\u0930\u093f\u0915 \u0935\u0938\u094d\u0924\u0941 \u092e\u0947\u0902 \u0938\u0947 \u090f\u0917\u094b \u0939\u092f, \u0905\u0909 \u0924\u094b \u0936\u093e\u092f\u0926 \u0905\u092a\u0928 \u0917\u0943\u0939 \u0915\u094d\u0937\u0947\u0924\u094d\u0930 \u092e\u0947\u0902 \u0915\u0908 \u092a\u094d\u0930\u0915\u093e\u0930 \u0915\u0947 \u092a\u093e \u0938\u0915\u094b \u0939\u094b\u0964",
            "y": 20,
            "z": 3
        },
        "query": [
            "Check if every {z}-th character from the start of {a} up to the {y}-th character is a digit.",
            "Verify if each {z}-th character from the beginning of {a} until the {y}-th character is a digit.",
            "Determine if every {z}-th character from the start of {a} to the {y}-th character is a digit."
        ],
        "language": "mag_Deva"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).startswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u042f\u0440\u043c\u0430\u0440\u043a\u0430\u0438 \u04b6\u0430\u04b3\u043e\u043d\u04e3 (\u043a\u0438 \u043e\u0434\u0430\u0442\u0430\u043d World Exposition, \u0451 \u0431\u0430 \u0442\u0430\u0432\u0440\u0438 \u0441\u043e\u0434\u0430 Expo \u043d\u043e\u043c\u0438\u0434\u0430 \u043c\u0435\u0448\u0430\u0432\u0430\u0434), \u0444\u0435\u0441\u0442\u0438\u0432\u0430\u043b\u0438 \u0431\u0443\u0437\u0443\u0440\u0433\u0438 \u04b7\u0430\u04b3\u043e\u043d\u0438\u0438 \u0431\u0430\u0439\u043d\u0430\u043b\u043c\u0438\u043b\u0430\u043b\u0438\u0438 \u0441\u0430\u043d\u044a\u0430\u0442 \u0432\u0430 \u0438\u043b\u043c \u043c\u0435\u0431\u043e\u0448\u0430\u0434.",
            "x": "\u043c\u0435\u0431\u043e\u0448\u0430\u0434.",
            "y": "\u042f\u0440\u043c\u0430\u0440\u043a\u0430\u0438"
        },
        "query": [
            "Check if {a} starts with {y} after removing trailing characters in {x}.",
            "Determine if {a} begins with {y} once trailing {x} characters are removed.",
            "Verify if {a} starts with {y} after trimming trailing {x} characters."
        ],
        "language": "tgk_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x:y].startswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0aa8\u0acd\u0aaf\u0ac1\u0a95\u0acd\u0ab2\u0abf\u0aaf\u0ab8\u0aae\u0abe\u0a82 2 \u0a95\u0aa3\u0acb \u0ab9\u0acb\u0aaf \u0a9b\u0ac7 - \u0aa8\u0acd\u0aaf\u0ac1\u0a9f\u0acd\u0ab0\u0acb\u0aa8 \u0a85\u0aa8\u0ac7 \u0aaa\u0acd\u0ab0\u0acb\u0a9f\u0acb\u0aa8.",
            "x": 0,
            "y": 10,
            "z": "\u0aa8\u0acd\u0aaf\u0ac1\u0a95\u0acd\u0ab2"
        },
        "query": [
            "Check if the substring of {a} from index {x} to {y} starts with {z}.",
            "Determine if the portion of {a} between indices {x} and {y} begins with {z}.",
            "Verify whether the segment of {a} from {x} to {y} commences with {z}."
        ],
        "language": "guj_Gujr"
    },
    {
        "solution": "```python\nanswer = a[x:y].title().center(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "Lake Onega pawh hian Volga a va zawm a, chuvangin Caspian tuipui atanga Russia ram kal hi a la theih tho a ni.",
            "x": 11,
            "y": 25,
            "z": 40,
            "w": "*"
        },
        "query": [
            "Take the substring of {a} from {x} to {y}, convert it to title case, and center it within {z} characters using {w} as the fill character.",
            "Extract the substring from {a} starting at index {x} and ending at index {y}, change it to title case, and center it in a field of {z} characters with {w} as the padding character.",
            "Get the substring of {a} from index {x} to {y}, transform it to title case, and pad it to {z} characters wide with {w} as the fill character."
        ],
        "language": "lus_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].swapcase().ljust(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "\u0110\u1ec3 k\u1ebft th\u00fac, nh\u00f3m v\u0169 c\u00f4ng Th\u1ed5 Nh\u0129 K\u1ef3 Fire of Anatolia \u0111\u00e3 tr\u00ecnh di\u1ec5n v\u1edf \"Troy\".",
            "x": 10,
            "y": 20,
            "z": 30,
            "w": "-"
        },
        "query": [
            "Take the substring of {a} from {x} to {y}, swap its case, and left-align it within {z} characters using {w} as the fill character.",
            "Extract the substring from {a} starting at index {x} and ending at index {y}, change its case, and pad it to the left to make it {z} characters long using {w}.",
            "Get the substring of {a} from index {x} to {y}, invert its case, and left-justify it to a total length of {z} characters with {w} as the padding character."
        ],
        "language": "vie_Latn"
    },
    {
        "solution": "```python\nanswer = a.title().count(x)\nprint(answer)\n```",
        "variables": {
            "a": "Modern Education manuduah inyo mancetak iklan-iklan gadang di oto-oto bus tanpa izin dan baduto dek mangecekan bahaso inyo guru kapalo Bahaso Inggirih.",
            "x": "Inyo"
        },
        "query": [
            "Count the occurrences of {x} in the title-cased version of {a}.",
            "How many times does {x} appear in the title-cased string {a}?",
            "Find the number of times {x} occurs in the title-cased form of {a}."
        ],
        "language": "min_Latn"
    },
    {
        "solution": "```python\nanswer = a.casefold().rsplit(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Al Gore ak Seneraal Tommy Franks da\u00f1uy leeral ci anam bu naqari seen turu-bopp yu\u00f1u taamu (Bosu Gore mu ngi amoon bi The Onion nettalee ni moom ak Tipper da\u00f1oo amoon awra bi g\u00ebn ci seen dundu bu mu \u00f1akkee ci Jo\u014bnate kolees bi).",
            "x": " ",
            "y": 5
        },
        "query": [
            "Convert {a} to casefold and split it at each {x}, making a maximum of {y} splits from the end.",
            "Transform {a} to lowercase and perform a reverse split at each {x}, with up to {y} splits.",
            "Lowercase {a} and split it from the end at each {x}, allowing a maximum of {y} splits."
        ],
        "language": "wol_Latn"
    },
    {
        "solution": "```python\nanswer = a.isnumeric() and a.isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Noong panahong iginawad ang parangal, nakakita ang mga paaralan sa Atlanta ng malaking pagsulong sa mga marka sa pagsusulit."
        },
        "query": [
            "Check if all characters in {a} are numeric and ASCII.",
            "Verify if {a} consists solely of numeric and ASCII characters.",
            "Determine if every character in {a} is both numeric and ASCII."
        ],
        "language": "fil_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u0918\u094b\u0921\u0926\u0933 \u0939\u0947 \u0918\u094b\u0921\u094d\u092f\u093e\u0902\u091a\u094d\u092f\u093e \u092a\u093e\u0920\u0940\u0935\u0930\u0942\u0928 \u0932\u0922\u0923\u093e\u0930\u0947 \u0938\u0948\u0928\u094d\u092f \u0906\u0939\u0947. \u0924\u0947\u0935\u094d\u0939\u093e \u0916\u094b\u0917\u0940\u0930\u093e\u0902\u091a\u093e \u0936\u094b\u0927 \u0932\u093e\u0917\u0932\u0947\u0932\u093e \u0928\u0938\u0932\u094d\u092f\u093e\u0928\u0947 \u0905\u0938\u093f\u0930\u093f\u092f\u0928 \u0918\u094b\u0921\u0926\u0933 \u0924\u094d\u092f\u093e\u0902\u091a\u094d\u092f\u093e \u0916\u094b\u0917\u0940\u0930 \u0928\u0938\u0932\u0947\u0932\u094d\u092f\u093e \u0918\u094b\u0921\u094d\u092f\u093e\u0902\u091a\u094d\u092f\u093e \u092a\u093e\u0920\u0940\u0935\u0930\u0942\u0928 \u0932\u0922\u0932\u0947.",
            "x": "\u0918"
        },
        "query": [
            "Determine if {a} without any {x} characters is numeric.",
            "Check if the string {a} is numeric after removing all {x} characters.",
            "Is the string {a} numeric after stripping out all {x} characters?"
        ],
        "language": "mar_Deva"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].istitle()\nprint(answer)\n```",
        "variables": {
            "a": "B ra boond b meng ti Morior ramba wakat sen looge la baasgo, Moriora ramb maana kaal-m",
            "x": " ",
            "y": 5
        },
        "query": [
            "See if the {y}-th element after splitting {a} by {x} is in title case.",
            "Check if the {y}-th part obtained by splitting {a} using {x} is in title case.",
            "Determine if the {y}-th segment after dividing {a} with {x} is in title case."
        ],
        "language": "mos_Latn"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).capitalize().endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "Ko te korowha t\u0113tahi k\u0113mu ka whakamahia e ng\u0101 kait\u0101karo ng\u0101 haup\u014dro hei patu p\u014dro ki ng\u0101 rua.",
            "x": "Ko",
            "y": "rua."
        },
        "query": [
            "Determine if {a} without leading {x} characters, capitalized, ends with {y}.",
            "Check if the string {a} without the leading {x} characters, when capitalized, ends with {y}.",
            "Is it true that {a} without the leading {x} characters, capitalized, ends with {y}?"
        ],
        "language": "mri_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8', errors='ignore').decode('utf-8').find(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0f56\u0f59\u0f7c\u0f53\u0f0b\u0f41\u0f44\u0f0b\u0f60\u0f51\u0f72\u0f0b \u0f61\u0f74\u0f0b\u0f68\u0f7a\u0f66\u0f0b\u0f42\u0f72\u0f0b\u0f51\u0f58\u0f42\u0f0b\u0f66\u0fa1\u0f7a\u0f0b\u0f42\u0f72\u0f66\u0f0b \u0f62\u0fa9\u0f72\u0f66\u0f0b\u0f63\u0f7a\u0f53\u0f0b\u0f54\u0f60\u0f72\u0f0b\u0f64\u0f74\u0f63\u0f0b\u0f63\u0f74\u0f0b \u0f56\u0f59\u0f7c\u0f53\u0f0b\u0f54\u0f0b\u0f5a\u0f74\u0f0b\u0f56\u0f44\u0f0b\u0f56\u0f59\u0f7c\u0f44\u0f0b\u0f61\u0f7c\u0f51\u0f54\u0f0b\u0f66\u0fa6\u0f7a\u0f0b\u0f50\u0f7c\u0f53\u0f0b\u0f54\u0f60\u0f72\u0f0b\u0f58\u0f50\u0f60\u0f0b\u0f58\u0f62\u0f0b \u0f44\u0f53\u0f0b\u0f54\u0f60\u0f72\u0f0b\u0f58\u0f72\u0f44\u0f0b\u0f42\u0f4f\u0f58\u0f0b\u0f50\u0f7c\u0f53\u0f0b\u0f53\u0f74\u0f42",
            "x": "\u0f61\u0f74"
        },
        "query": [
            "Find the position of {x} in {a} after encoding it to 'utf-8' and ignoring errors, then decoding it back.",
            "Determine the index of {x} in {a} after converting it to 'utf-8' and ignoring errors, then converting it back.",
            "Locate the position of {x} in {a} after encoding to 'utf-8' with error ignoring and then decoding it."
        ],
        "language": "dzo_Tibt"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).title().count(y)\nprint(answer)\n```",
        "variables": {
            "a": "Ka 1994, sebaka sa morabe sa Armenia sa Nagorno-Karabakh se Azerbaijan se ile sa lwana le Maazeri.",
            "x": "Ka",
            "y": "Sa"
        },
        "query": [
            "Remove leading {x} characters from {a}, convert it to title case, and count occurrences of {y}.",
            "Strip leading {x} from {a}, change it to title case, and find the number of times {y} appears.",
            "Eliminate leading {x} from {a}, transform it to title case, and tally the instances of {y}."
        ],
        "language": "sot_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).split(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "\u0643\u064a \u064a\u0643\u0648\u0646 \u0627\u0644\u0646\u0627\u0633 \u0627\u0644\u0643\u0644 \u0641\u064a \u0641\u0626\u0629 \u0633\u0643\u0627\u0646\u064a\u0629 \u064a\u0634\u0628\u0647\u0648\u0627 \u0644\u0628\u0639\u0636\u0647\u0645 \u0641\u064a \u062d\u0627\u062c\u0629 \u0645\u0639\u064a\u0646\u0629 \u0648\u062a\u0628\u062f\u0649 \u0638\u0627\u0647\u0631\u0629\u060c \u0647\u0627\u0644\u0646\u0627\u0633 \u064a\u062a\u0633\u0645\u0651\u0627\u0648 \"\u0623\u062d\u0627\u062f\u064a\u0648 \u0627\u0644\u0634\u0643\u0644\".",
            "x": "\u0627\u0644\u0646\u0627\u0633",
            "y": "\u0627\u0644\u0623\u0641\u0631\u0627\u062f",
            "z": " ",
            "w": 5
        },
        "query": [
            "Replace all occurrences of {x} with {y} in {a}, then split the result by {z} with a maximum of {w} splits.",
            "Substitute every instance of {x} with {y} in {a}, and then divide the resulting string by {z} up to {w} times.",
            "Change all {x} to {y} in {a}, and then split the modified string by {z} with a limit of {w} splits."
        ],
        "language": "aeb_Arab"
    },
    {
        "solution": "```python\nanswer = a[::-1].upper()\nprint(answer)\n```",
        "variables": {
            "a": "Patbe huwobe larata defte mon toh on yotti burna pat be wala don yake fere bo kugal mai wala bote to on yotti leddi mon, patbe nonnon darugo be lara majum jigila on."
        },
        "query": [
            "Convert the reverse of {a} to uppercase.",
            "Reverse {a} and change it to uppercase.",
            "Change {a} to uppercase after reversing it."
        ],
        "language": "fuv_Latn"
    },
    {
        "solution": "```python\nanswer = a.swapcase().title()\nprint(answer)\n```",
        "variables": {
            "a": "Jauah sabalun The Daily Show dan The Colbert Report, saat masih manjadi mahasiswa di UW pado tahun 1988, Heck dan Johnson mambayangan sabuah publikasi yang akan mamparodian barita\u2014dan liputan barita."
        },
        "query": [
            "Convert {a} to title case after swapping the case of all characters.",
            "Swap the case of all characters in {a} and then convert it to title case.",
            "Change the case of each character in {a} and then format it in title case."
        ],
        "language": "min_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:].upper()\nprint(answer)\n```",
        "variables": {
            "a": "Viena no izplat\u012bt\u0101kaj\u0101m probl\u0113m\u0101m, m\u0113\u0123inot filmu p\u0101rveidot DVD form\u0101t\u0101, ir att\u0113la izv\u0113rse.",
            "x": 10
        },
        "query": [
            "Convert the substring of {a} from index {x} to the end to uppercase.",
            "Change the substring of {a} starting from index {x} to uppercase.",
            "Transform the part of {a} from index {x} onwards to uppercase."
        ],
        "language": "lvs_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].upper().center(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "Kata obedo ni Chile noyango chung' kar kendgi e higa mar 1810 (e diere lwenje mag Napoleon manoweyo Spain kaonge kod sirkal maduong' matiyo kwom higni buora), loch manong'adie paro mane giloyogo Jo-Spain ne ok onwang'ore nyaka nochopo higa mar 1818.",
            "x": 10,
            "y": 20,
            "z": 30,
            "w": "*"
        },
        "query": [
            "Convert the substring of {a} from index {x} to {y} to uppercase, then center it with {w} to make it {z} characters long.",
            "Take the substring of {a} from index {x} to {y}, change it to uppercase, and then center it with {w} to reach a total length of {z} characters.",
            "Extract the substring from {a} between indices {x} and {y}, convert it to uppercase, and center it with {w} to ensure it is {z} characters in length."
        ],
        "language": "luo_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].replace(z, w).istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Kejser Augustus begyndte at rekruttere l\u00e6ger, og lavede endda det f\u00f8rste romerske l\u00e6gekorps, der skulle bruges i k\u00f8lvandet p\u00e5 slagene.",
            "x": 7,
            "y": 15,
            "z": "Augustus",
            "w": "August"
        },
        "query": [
            "Replace {z} with {w} in the substring of {a} from index {x} to {y}, then check if the result is in title case.",
            "In the substring of {a} from index {x} to {y}, replace {z} with {w} and check if the resulting string is in title case.",
            "Check if the substring of {a} from index {x} to {y} with {z} replaced by {w} is in title case."
        ],
        "language": "dan_Latn"
    },
    {
        "solution": "```python\nanswer = a.casefold().isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "O JAS 39 Gripen se chocou com a pista por volta de 9:30 do hor\u00e1rio local (0230 UTC) e explodiu, fechando o aeroporto para voos comerciais."
        },
        "query": [
            "Convert {a} to lowercase and check if all characters are alphabetic.",
            "Transform {a} to lowercase and verify if it contains only alphabetic characters.",
            "Change {a} to lowercase and determine if all its characters are letters."
        ],
        "language": "por_Latn"
    },
    {
        "solution": "```python\nanswer = a[:y:z].isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u0b36\u0b40\u0b24\u0b26\u0b3f\u0b28\u0b47 \u0b26\u0b41\u0b30\u0b4d\u0b18\u0b1f\u0b23\u0b3e\u0b30 \u0b38\u0b2c\u0b41\u0b20\u0b3e\u0b30\u0b41 \u0b38\u0b3e\u0b27\u0b3e\u0b30\u0b23 \u0b15\u0b3e\u0b30\u0b23 \u0b39\u0b47\u0b09\u0b1b\u0b3f \u0b16\u0b38\u0b21\u0b3e \u0b30\u0b3e\u0b38\u0b4d\u0b24\u0b3e, \u0b2a\u0b3e\u0b26 \u0b1a\u0b32\u0b3e\u0b30\u0b3e\u0b38\u0b4d\u0b24\u0b3e (\u0b2b\u0b41\u0b1f\u0b4d\u200c\u0b2a\u0b3e\u0b25\u0b4d) \u0b0f\u0b2c\u0b02 \u0b2c\u0b3f\u0b36\u0b47\u0b37\u0b24\u0b03 \u0b2a\u0b3e\u0b39\u0b3e\u0b1a|",
            "y": 10,
            "z": 2
        },
        "query": [
            "Verify if the first {y} characters of {a}, stepping by {z}, are alphanumeric.",
            "Check if the first {y} characters of {a}, with a step of {z}, are alphanumeric.",
            "Determine if the first {y} characters of {a}, taken every {z} steps, are alphanumeric."
        ],
        "language": "ory_Orya"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).strip()\nprint(answer)\n```",
        "variables": {
            "a": "\u06a9\u0633\u06cc \u0627\u06cc\u0631 \u067e\u0648\u0631\u0679 \u06cc\u0627 \u06c1\u062c\u0648\u0645 \u06a9\u06d2 \u0627\u0648\u067e\u0631 \u0688\u0631\u0648\u0646 \u0686\u0644\u0627\u0646\u0627 \u0627\u06cc\u06a9 \u062e\u06cc\u0627\u0644\u0650 \u0628\u062f \u06c1\u06d2\u060c \u06af\u0648 \u062a\u0645\u06c1\u0627\u0631\u06d2 \u0639\u0644\u0627\u0642\u06c1 \u0645\u06cc\u06ba \u06cc\u06c1 \u0642\u0627\u0646\u0648\u0646\u0627\u064b \u0645\u0645\u0646\u0648\u0639 \u0646\u06c1\u06cc\u06ba \u06c1\u06d2\u06d4",
            "x": 100,
            "y": " "
        },
        "query": [
            "Center {a} with a total width of {x} using {y} as the fill character, then strip any leading and trailing whitespaces.",
            "Align {a} in the center with a width of {x} using {y} as the padding character, and remove any surrounding spaces.",
            "Place {a} in the middle with a width of {x} using {y} as the fill character, then trim any extra spaces around it."
        ],
        "language": "urd_Arab"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u121b\u1233 \u12a5\u1295\u1270\u12c8\u1213\u12f0 \u12a3\u1265 \u12dd\u1270\u1228\u1348 \u12bd\u134b\u120d \u12c8\u1255\u1272 2009 \u12ad\u1275\u12c8\u133d\u12a5 \u12a5\u12eb \u1362",
            "x": 50,
            "y": "\u1362"
        },
        "query": [
            "Left-align {a} in a string of length {x} with {y} and check if it is printable.",
            "Align {a} to the left in a string of length {x} using {y} and verify if it is printable.",
            "Pad {a} to the left in a string of length {x} with {y} and determine if it is printable."
        ],
        "language": "tir_Ethi"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Iesp\u0113jams, vispopul\u0101r\u0101kais t\u016brisma veids ir tas, ar ko cilv\u0113ki visbie\u017e\u0101k saista ce\u013co\u0161anu,\u00a0\u2014 izklaides t\u016brisms.",
            "x": 4
        },
        "query": [
            "Expand tabs in {a} to {x} spaces and check if the result is in title case.",
            "Convert tabs in {a} to {x} spaces and determine if the resulting string is in title case.",
            "Replace tabs in {a} with {x} spaces and verify if the outcome is in title case."
        ],
        "language": "lvs_Latn"
    },
    {
        "solution": "```python\nanswer = a.lower().startswith(x.lower())\nprint(answer)\n```",
        "variables": {
            "a": "Generalmente questi eventi durano tra i tre e i sei mesi e si svolgono in aree non inferiori ai 50 ettari.",
            "x": "Generalmente"
        },
        "query": [
            "Does {a} start with {x}, ignoring case?",
            "Is {a} starting with {x} when case is ignored?",
            "Ignoring case, does {a} begin with {x}?"
        ],
        "language": "ita_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].capitalize().endswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "Ang Hangeul ang natatanging sadyang inimbentong alpabeto na popular na ginagamit sa araw-araw. Ang alpabeto ay inimbento noong 1444 sa panahon ng pamumuno ni Haring Sejong (1418 \u00e2\u20ac\u201c 1450).",
            "x": 4,
            "y": 11,
            "z": "eul"
        },
        "query": [
            "Does the capitalized substring of {a} from {x} to {y} end with {z}?",
            "Is the capitalized substring of {a} from index {x} to {y} ending with {z}?",
            "Will the capitalized substring of {a} from {x} to {y} have {z} at the end?"
        ],
        "language": "fil_Latn"
    },
    {
        "solution": "```python\nanswer = a.isalpha() and a.islower()\nprint(answer)\n```",
        "variables": {
            "a": "Talo ya bana-mboka oyo balobaki yango ekeseni na kotalela soki eza to te na boyokani na minoko ebele ya mboka."
        },
        "query": [
            "Check if all characters in {a} are alphabetic and in lowercase.",
            "Verify that every character in {a} is a lowercase letter.",
            "Determine if {a} consists entirely of lowercase alphabetic characters."
        ],
        "language": "lin_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x)[-1].isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u062a\u0642\u0631\u06cc\u0628\u0627 \u062f\u0633 \u0644\u0627\u06a9\u06be \u062f\u0633\u062a\u0627\u0648\u06cc\u0632\u0627\u062a \u067e\u0631 \u0645\u0634\u062a\u0645\u0644 \u067e\u0627\u0646\u0627\u0645\u0627\u0646\u06cc \u06a9\u06cc \u0627\u06cc\u06a9 \u0642\u0627\u0646\u0648\u0646\u06cc \u0641\u0631\u0645 \u0645\u0648\u0633\u06cc\u06a9 \u0641\u0648\u0646\u0633\u06cc\u06a9\u0627 \u06a9\u06cc \u0637\u0631\u0641 \u0633\u06d2 \u0627\u0633\u062a\u0639\u0645\u0627\u0644 \u06a9\u0631\u062f\u06c1 \u067e\u0627\u0646\u0627\u0645\u0627 \u067e\u06cc\u067e\u0631\u0632 \u0627\u06cc\u06a9 \u0627\u0635\u0637\u0644\u0627\u062d \u06c1\u06d2\u060c \u062c\u0646\u06c1\u06cc\u06ba 2016 \u06a9\u06d2 \u0645\u0648\u0633\u0645 \u0628\u06c1\u0627\u0631 \u0645\u06cc\u06ba \u067e\u0631\u06cc\u0633 \u0645\u06cc\u06ba \u0644\u06cc\u06a9 \u06a9\u06cc\u0627 \u06af\u06cc\u0627 \u062a\u06be\u0627\u06d4",
            "x": " "
        },
        "query": [
            "Check if the last segment of {a} split by {x} is composed of digits.",
            "Determine if the final part of {a} after splitting by {x} consists only of digits.",
            "Is the last portion of {a} after being split by {x} made up entirely of digits?"
        ],
        "language": "urd_Arab"
    },
    {
        "solution": "```python\nanswer = a.split(x).join(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0423\u0441\u043d\u044b \u043c\u043e\u043b\u0435\u043a\u0443\u043b\u0443\u0443\u0434 \u043d\u044c \u0443\u0441\u043d\u044b \u0433\u0430\u0434\u0430\u0440\u0433\u0443\u0443 \u0434\u044d\u044d\u0440 \u04af\u043b \u04af\u0437\u044d\u0433\u0434\u044d\u0445 \u0431\u04af\u0440\u0445\u04af\u04af\u043b\u0438\u0439\u0433 \u04af\u04af\u0441\u0433\u044d\u0441\u043d\u044d\u044d\u0440 \u0437\u04af\u04af \u0437\u044d\u0440\u044d\u0433 \u0437\u04af\u0439\u043b\u0438\u0439\u0433 \u0443\u0441\u043d\u044b \u0434\u044d\u044d\u0440 \u0445\u04e9\u0432\u04e9\u0445 \u0431\u043e\u043b\u043e\u043c\u0436\u0442\u043e\u0439 \u0431\u043e\u043b\u0433\u043e\u0434\u043e\u0433.",
            "x": " ",
            "y": "-"
        },
        "query": [
            "Split {a} by {x} and then join the resulting list with {y}.",
            "Divide {a} using {x} and concatenate the parts with {y}.",
            "Break {a} at each {x} and merge the segments with {y}."
        ],
        "language": "khk_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.swapcase().rfind(x)\nprint(answer)\n```",
        "variables": {
            "a": "A les 11:20, la policia va sol\u00b7licitar als manifestants que tornessin a la vorera argumentant que havien de trobar l'equilibri entre el dret de protesta i l'augment del tr\u00e0nsit.",
            "x": "a"
        },
        "query": [
            "Swap the case of {a} and find the last occurrence of {x}.",
            "Change the case of {a} and locate the last position of {x}.",
            "Convert the case of {a} and determine the last index of {x}."
        ],
        "language": "cat_Latn"
    },
    {
        "solution": "```python\nanswer = a.zfill(x).isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u0644\u0625\u0628\u0631\u0629",
            "x": 10
        },
        "query": [
            "Pad {a} with leading zeros to make it {x} characters long, then check if the result is alphanumeric.",
            "Add leading zeros to {a} until its length is {x} characters, then verify if the resulting string is alphanumeric.",
            "Fill {a} with zeros at the beginning to reach a length of {x} characters, and then determine if the final string is alphanumeric."
        ],
        "language": "aeb_Arab"
    },
    {
        "solution": "```python\nanswer = a.capitalize().encode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "Wote \u01ddlzam har ajudi IOC as\u0103dutti net da\u0263 t\u0103muqqest net tan ayor wan Uktubar da\u0263 Copenhague."
        },
        "query": [
            "Capitalize {a} and encode it in UTF-8.",
            "Convert {a} to capitalized form and encode it using UTF-8.",
            "Transform {a} to have its first letter in uppercase and encode it in UTF-8 format."
        ],
        "language": "taq_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].upper().isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "Amaanyi agekizikiza ddala maanyi agatalabika ngagano lubeerera gabeerako kyegakola mu nsi.",
            "x": 8,
            "y": 18
        },
        "query": [
            "Take the substring of {a} from {x} to {y}, convert it to uppercase, and check if it is a valid identifier.",
            "Extract the substring from {a} between indices {x} and {y}, change it to uppercase, and verify if it is a valid identifier.",
            "Get the substring of {a} from index {x} to {y}, transform it to uppercase, and determine if it is a valid identifier."
        ],
        "language": "lug_Latn"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).join(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0632\u064f\u0639\u0645 \u0623\u0646 \u0627\u0644\u0631\u062c\u0644 \u0633\u0627\u0642 \u0633\u064a\u0627\u0631\u0629 \u0645\u0639\u0627\u0647\u0627 \u062b\u0644\u0627\u062b \u0639\u062c\u0644\u0627\u062a \u0645\u0641\u062e\u062e\u0629 \u0628\u0627\u0644\u0645\u062a\u0641\u062c\u0631\u0627\u062a \u0648\u0633\u0637 \u062d\u0634\u062f \u0645\u0646 \u0627\u0644\u0646\u0627\u0633.",
            "x": "\u0627\u062a",
            "y": [
                "\u0632\u064f\u0639\u0645",
                "\u0623\u0646",
                "\u0627\u0644\u0631\u062c\u0644",
                "\u0633\u0627\u0642",
                "\u0633\u064a\u0627\u0631\u0629",
                "\u0645\u0639\u0627\u0647\u0627",
                "\u062b\u0644\u0627\u062b",
                "\u0639\u062c\u0644\u0627\u062a",
                "\u0645\u0641\u062e\u062e\u0629",
                "\u0628\u0627\u0644\u0645\u062a\u0641\u062c\u0631\u0627\u062a",
                "\u0648\u0633\u0637",
                "\u062d\u0634\u062f",
                "\u0645\u0646",
                "\u0627\u0644\u0646\u0627\u0633"
            ]
        },
        "query": [
            "Join the elements of {y} into a single string using {a} without trailing {x} as the separator.",
            "Combine the elements of {y} into one string using {a} without the trailing {x} as the delimiter.",
            "Merge the elements of {y} into a single string with {a} as the separator, but without the trailing {x}."
        ],
        "language": "acq_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:y].encode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "\u0641\u064a \u0628\u062f\u0627\u064a\u0629 \u0627\u0633\u062a\u0642\u0644\u0627\u0644 \u0627\u0644\u0628\u0644\u0627\u062f\u060c \u0633\u0627\u0639\u062f\u062a \u062e\u0628\u0631\u0629 \u062d\u062f\u0627\u0626\u0642 \u0633\u0646\u063a\u0627\u0641\u0648\u0631\u0629 \u0627\u0644\u0646\u0628\u0627\u062a\u064a\u0629 \u0641\u064a \u062a\u062d\u0648\u064a\u0644 \u0627\u0644\u062c\u0632\u064a\u0631\u0629 \u0625\u0644\u0649 \u0645\u062f\u064a\u0646\u0629 \u0645\u0646 \u0627\u0644\u062d\u062f\u0627\u0626\u0642 \u0627\u0644\u0627\u0633\u062a\u0648\u0627\u0626\u064a\u0629.",
            "x": 10,
            "y": 20
        },
        "query": [
            "Encode the substring of {a} from {x} to {y} using UTF-8 encoding.",
            "Convert the substring of {a} ranging from {x} to {y} to UTF-8 encoding.",
            "Get the UTF-8 encoded version of the substring of {a} from index {x} to {y}."
        ],
        "language": "ary_Arab"
    },
    {
        "solution": "```python\nanswer = a[:y].upper()\nprint(answer)\n```",
        "variables": {
            "a": "Kom\u00eeser kefalet\u00ea destn\u00ee\u015fan dike, eger hebe, \u00fb wan tawanbariy\u00ean ku fermanber\u00ea bin\u00e7avker p\u00ea\u015fk\u00ea\u015f kiriye ferm\u00ee dike. Ew tawanbar\u00ee pa\u015f\u00ea li pergala komp\u00fbtera dewlet\u00ea t\u00eane tomar kirin, ku doz li w\u00ea der\u00ea t\u00ea \u015fopandin.",
            "y": 10
        },
        "query": [
            "Convert the first part of {a} up to but not including {y} to uppercase.",
            "Transform the substring of {a} from the start to {y} (exclusive) into uppercase.",
            "Change the initial segment of {a} up to {y} (not inclusive) to uppercase."
        ],
        "language": "kmr_Latn"
    },
    {
        "solution": "```python\nanswer = a[::-1].title()\nprint(answer)\n```",
        "variables": {
            "a": "Ada banyak hal yang harus Anda pertimbangkan sebelum dan ketika Anda melancong ke suatu tempat."
        },
        "query": [
            "Reverse {a} and then convert the first character of every word to uppercase.",
            "Flip {a} backwards and capitalize the first letter of each word.",
            "Invert {a} and make the first letter of each word uppercase."
        ],
        "language": "ind_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::z].isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u0546\u0578\u0580 \u0536\u0565\u056c\u0561\u0576\u0564\u056b\u0561\u0575\u056b \u0578\u057d\u057f\u056b\u056f\u0561\u0576\u0578\u0582\u0569\u0575\u0578\u0582\u0576\u0568 \u056d\u0576\u0564\u056b\u0580\u0576\u0565\u0580 \u0578\u0582\u0576\u0565\u0581\u0561\u057e \u0561\u0580\u0561\u0563\u0578\u0582\u0569\u0575\u0561\u0576 \u057c\u0561\u0564\u0561\u0580\u0561\u0575\u056b\u0576 \u0579\u0561\u0583\u056b\u0579\u0576\u0565\u0580\u056b \u0585\u0563\u057f\u0561\u0563\u0578\u0580\u056e\u0574\u0561\u0576 \u0570\u0561\u0580\u0581\u0578\u0582\u0574\u055d \u057f\u0565\u057d\u0576\u0565\u056c\u0578\u0582, \u0569\u0565 \u0578\u0580\u0584\u0561\u0576 \u0561\u0580\u0561\u0563 \u0567\u0580 \u0568\u0576\u0569\u0561\u0576\u0578\u0582\u0574 \u057a\u0561\u0580\u0578\u0576 \u054c\u0565\u056b\u0564\u0568, \u0584\u0561\u0576\u056b \u0578\u0580 \u0532\u056c\u0565\u0584 \u0532\u0575\u0578\u0582\u0569\u056b\u0576 \u0577\u0561\u057f \u0564\u0561\u0576\u0564\u0561\u0572 \u0567\u0580, \u0587 \u0574\u056b\u0561\u056f \u0564\u0565\u057a\u0584\u0568, \u0578\u0580 \u0578\u057d\u057f\u056b\u056f\u0561\u0576\u0578\u0582\u0569\u0575\u0578\u0582\u0576\u0568 \u056f\u0561\u0580\u0578\u0572\u0561\u0581\u0561\u057e \u057a\u0561\u0580\u0578\u0576 \u054c\u0565\u056b\u0564\u056b \u0561\u0580\u0561\u0563\u0578\u0582\u0569\u0575\u0578\u0582\u0576\u0568 \u0578\u0580\u0578\u0577\u0565\u056c, \u0561\u0575\u0576 \u0567\u0580, \u0565\u0580\u0562 \u0576\u0561 \u0568\u0576\u0569\u0561\u0581\u0584\u0568 \u0564\u0561\u0576\u0564\u0561\u0572\u0565\u0581\u0580\u0565\u0581 160 \u056f\u0574/\u056a:",
            "x": 0,
            "z": 5
        },
        "query": [
            "Check if every {z}-th character in {a} starting from index {x} is a digit.",
            "Verify if each {z}-th character in {a} beginning at index {x} is a numeric digit.",
            "Determine if all {z}-th characters in {a} from index {x} onwards are digits."
        ],
        "language": "hye_Armn"
    },
    {
        "solution": "```python\nanswer = a[::-1].replace(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0643\u0627\u0646 \u0647\u0627\u062f \u0627\u0644\u0634\u064a \u0628\u0645\u062b\u0627\u0628\u0629 \u062a\u063a\u064a\u064a\u0631 \u0645\u0647\u0645 \u060c \u0644\u0623\u0646\u0647 \u0645\u0627 \u0628\u0642\u0627\u0634 \u0639\u0646\u062f \u0627\u0644\u0642\u0648\u0649 \u0627\u0644\u0623\u0648\u0631\u0648\u0628\u064a\u0629 \u0623\u064a \u0633\u0628\u0651\u064e\u0629 \u0639\u0644\u0649 \u0623\u0646\u0647\u0627 \u062d\u0631\u0648\u0628\u064b\u0627 \u062f\u064a\u0646\u064a\u0629. \u0648\u0647\u0643\u0630\u0627 \u060c \u063a\u0627\u062a\u0648\u0644\u064a \u062d\u0631\u0628 \u062a\u0644\u0627\u062a\u064a\u0646 \u0639\u0627\u0645 \u0622\u062e\u0631 \u062d\u0631\u0628 \u0643\u062a\u0651\u064f\u0648\u0635\u0641 \u0639\u0644\u0649 \u0623\u0646\u0647\u0627 \u062d\u0631\u0628 \u062f\u064a\u0646\u064a\u0629.",
            "x": "\u062d\u0631\u0628",
            "y": "\u0633\u0644\u0627\u0645"
        },
        "query": [
            "Reverse {a} and then replace {x} with {y}.",
            "Flip {a} backwards and substitute {x} with {y}.",
            "Invert {a} and change {x} to {y}."
        ],
        "language": "ary_Arab"
    },
    {
        "solution": "```python\nanswer = a.casefold().zfill(x)\nprint(answer)\n```",
        "variables": {
            "a": "Pungkasane, Tropical Cyclone Gonu, dijenengi kanggo tas godhong sawit ing basa Maladewa, nggayuh angin terus-terusan udakara 240 kilometer saben jam (149 mil saben jam).",
            "x": 150
        },
        "query": [
            "Convert {a} to casefold and then pad it with zeros to make its length {x}.",
            "Transform {a} to lowercase and pad it with zeros until its length is {x}.",
            "Change {a} to case-insensitive and add leading zeros to make its length {x}."
        ],
        "language": "jav_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().upper()\nprint(answer)\n```",
        "variables": {
            "a": "K\u025bn tha\u0331a\u0331\u014b gua\u0331th \u025bn ri\u00e4\u00e4y nhial \u025b k\u025bl \u0254 der\u025b tek\u025b yio\u0331w g\u00f6\u00f6li ti \u014buan k\u00e4 go\u0331o\u0331r\u025b \u0263\u00f6\u00f6 dee raan k\u0254\u014b thiec k\u00e4 der\u025b w\u00e4 r\u025by w\u025bpthaiy\u00e4di\u025bn r\u025by j\u0254am min la du\u014b ria\u0331a\u0331y \u025b \u014bot /ke\u0331n raan yio\u0331w k\u00f6t ni yu\u0254r piny."
        },
        "query": [
            "Remove leading and trailing spaces from {a} and convert it to upper case.",
            "Trim the spaces around {a} and change it to uppercase.",
            "Strip spaces from the beginning and end of {a} and make it uppercase."
        ],
        "language": "nus_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].lower()\nprint(answer)\n```",
        "variables": {
            "a": "Ingorane y'imbone igagamishwa y'icuma gifotora ni uko kugira ushobore gukwega neza ishusho ku ngero zitandukanye, bisaba ubuhinga burebure bw'imbone n'igitigiri kanaka cazo. Ku mbone zitagagamishwa biroroshe gusumba.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Split {a} by {x} and convert the {y}th element to lower case.",
            "Divide {a} using {x} and change the {y}th part to lowercase.",
            "Break {a} at {x} and make the {y}th segment lowercase."
        ],
        "language": "run_Latn"
    },
    {
        "solution": "```python\nanswer = a.lower().replace(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Ang nayon ay katabing-katabi ng talon, at ang mga ito ang pinakaatraksyon, subalit ang sikat na destinasyong ito ng turista ay naghahandog kapwa sa abenturero at mga namamasyal ng maraming oportunidad para sa isang mas mahabang pananatili.",
            "x": "ang",
            "y": "ANG"
        },
        "query": [
            "Replace {x} with {y} in {a} after converting all characters to lowercase.",
            "Convert all characters in {a} to lowercase and then replace {x} with {y}.",
            "After converting {a} to lowercase, replace {x} with {y}."
        ],
        "language": "fil_Latn"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "Ten otu k\u00f3pia na bu bagajen y online (manda email pa bu kabesa ku aneksu, \u00f4 ten el guardadu na \u201ccloud\u201d).",
            "x": 100,
            "y": "*"
        },
        "query": [
            "Center {a} in a string of length {x} with {y} as padding and swap the case of the result.",
            "Pad {a} to a total length of {x} using {y} and then invert the case of the string.",
            "Make {a} centered in a string of length {x} with {y} as the fill character and change the case of the characters."
        ],
        "language": "kea_Latn"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0e23\u0e49\u0e32\u0e19\u0e02\u0e32\u0e22\u0e02\u0e2d\u0e07\u0e0a\u0e33\u0e17\u0e38\u0e01\u0e23\u0e49\u0e32\u0e19\u0e40\u0e15\u0e47\u0e21\u0e44\u0e1b\u0e14\u0e49\u0e27\u0e22\u0e1a\u0e31\u0e15\u0e23\u0e42\u0e17\u0e23\u0e28\u0e31\u0e1e\u0e17\u0e4c\u0e41\u0e1a\u0e1a\u0e40\u0e15\u0e34\u0e21\u0e40\u0e07\u0e34\u0e19\u0e17\u0e35\u0e48\u0e0a\u0e27\u0e19\u0e2a\u0e31\u0e1a\u0e2a\u0e19\u0e0b\u0e36\u0e48\u0e07\u0e2a\u0e32\u0e21\u0e32\u0e23\u0e16\u0e43\u0e0a\u0e49\u0e44\u0e14\u0e49\u0e01\u0e31\u0e1a\u0e15\u0e39\u0e49\u0e42\u0e17\u0e23\u0e28\u0e31\u0e1e\u0e17\u0e4c\u0e2a\u0e32\u0e18\u0e32\u0e23\u0e13\u0e30\u0e41\u0e25\u0e30\u0e42\u0e17\u0e23\u0e28\u0e31\u0e1e\u0e17\u0e4c\u0e18\u0e23\u0e23\u0e21\u0e14\u0e32",
            "x": 100,
            "y": " "
        },
        "query": [
            "Check if the centered version of {a} with width {x} and padding {y} is a valid identifier.",
            "Determine if the string {a} centered to width {x} with padding {y} is a valid identifier.",
            "Verify if the centered string of {a} with a total width of {x} and padding character {y} is a valid identifier."
        ],
        "language": "tha_Thai"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u0641\u064a \u0662\u0668 \u062c\u0645\u0627\u062f\u064a \u0627\u0644\u062b\u0627\u0646\u064a\u060c \u0642\u064f\u062a\u0644 \u0627\u0644\u0645\u0627\u0631\u0634\u0627\u0644 \u0625\u064a\u062a\u0627\u0644\u0648 \u0628\u0627\u0644\u0628\u0648\u060c \u0627\u0644\u062d\u0627\u0643\u0645 \u0627\u0644\u0639\u0627\u0645 \u0644\u0644\u064a\u0628\u064a\u0627 \u0648\u0627\u0644\u0648\u0631\u064a\u062b \u0627\u0644\u0645\u062d\u062a\u0645\u0644 \u0644\u0645\u0648\u0633\u0648\u0644\u064a\u0646\u064a\u060c \u0628\u0646\u064a\u0631\u0627\u0646 \u0635\u062f\u064a\u0642\u0629 \u0623\u062b\u0646\u0627\u0621 \u0647\u0628\u0648\u0637\u0647 \u0641\u064a \u0637\u0628\u0631\u0642.",
            "x": 100,
            "y": " "
        },
        "query": [
            "Left-justify {a} with width {x} and padding {y}, then check if it is alphanumeric.",
            "Align {a} to the left with a total width of {x} using {y} as padding, and verify if the result is alphanumeric.",
            "Pad {a} to the left to make its width {x} with {y}, then determine if the resulting string is alphanumeric."
        ],
        "language": "ars_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:y].swapcase().isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "Koska saksalaiset k\u00e4yttiv\u00e4t sukellusveneit\u00e4 sodassa niin menestyksekk\u00e4\u00e4sti, heid\u00e4n k\u00e4ytt\u00f6\u00f6ns\u00e4 ei sen j\u00e4lkeen luoteta en\u00e4\u00e4 montaa sukellusvenett\u00e4.",
            "x": 10,
            "y": 20
        },
        "query": [
            "Check if the substring of {a} from {x} to {y} with swapped case is a valid identifier.",
            "Determine if the substring of {a} from index {x} to {y} with swapped case is a valid identifier.",
            "Verify if the substring of {a} between {x} and {y} with swapped case qualifies as a valid identifier."
        ],
        "language": "fin_Latn"
    },
    {
        "solution": "```python\nanswer = a.upper().count(x)\nprint(answer)\n```",
        "variables": {
            "a": "Aun cuando Jerusal\u00e9n es la ciudad capital y de mayor tama\u00f1o de Israel, la mayor\u00eda de los otros estados y las Naciones Unidas no la reconocen como tal.",
            "x": "A"
        },
        "query": [
            "Count the occurrences of {x} in the uppercase version of {a}.",
            "How many times does {x} appear in the uppercase form of {a}?",
            "Find the number of times {x} occurs in the uppercase string of {a}."
        ],
        "language": "spa_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].upper().isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Fransegbe vovovo si wodona le Belgium kple Switzerland to vovo vie na esi wodona le France togb\u0254 be wo\u0256ia gbe \u0256eka kloe.",
            "x": 0,
            "y": 9
        },
        "query": [
            "Extract the substring of {a} from index {x} to {y}, convert it to uppercase, and check if it contains only alphabetic characters.",
            "Get the substring from {a} starting at index {x} and ending at index {y}, change it to uppercase, and verify if it consists solely of letters.",
            "Take the substring of {a} from position {x} to {y}, transform it to uppercase, and determine if it has only alphabetic characters."
        ],
        "language": "ewe_Latn"
    },
    {
        "solution": "```python\nanswer = a.casefold().replace(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Se te vo\u0142 vo\u0142ar intorno al mondo completamente ne l\u2019Emisfero Austral, \u0142a scelta de vo\u0142i e destinasi\u00f3n \u0142a xe limitada a causa de\u0142a mancansa de itinerari transoceanici.",
            "x": "vo\u0142",
            "y": "vol"
        },
        "query": [
            "Convert {a} to lowercase and then replace {x} with {y}.",
            "Transform {a} to lowercase and substitute {x} with {y}.",
            "Change {a} to lowercase and switch {x} with {y}."
        ],
        "language": "vec_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).zfill(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0413-\u043d \u041a\u043e\u0441\u0442\u0435\u043b\u043b\u043e \u043a\u0430\u043b\u0430\u0441\u0435\u043d: \u044f\u0434\u0435\u0440\u043d\u044b\u0439 \u044d\u043d\u0435\u0440\u0433\u0435\u0442\u0438\u043a\u0435 \u044d\u043a\u043e\u043d\u043e\u043c\u0438\u043a\u0435 \u043c\u043e\u0433\u044b\u0440\u044b\u043c \u0438\u043b\u0435\u043d \u043a\u0435\u0440\u0442\u0448\u0435 \u043b\u0438\u0439\u043c\u0435\u043a\u0435, \u0410\u0432\u0441\u0442\u0440\u0430\u043b\u0438\u0439 \u043e\u043d\u0447\u044b\u043a\u044b\u0436\u044b\u043c \u0442\u0443\u0434\u044b\u043c \u043a\u0443\u0447\u044b\u043b\u0442\u0430\u0448 \u0442\u044b\u0440\u0448\u044b\u0448\u0430\u0448.",
            "x": "\u0413-\u043d ",
            "y": 100
        },
        "query": [
            "Remove any characters in {x} from both ends of {a} and then pad the result with zeros to make its length {y}.",
            "Trim characters in {x} from the start and end of {a}, then pad the result with zeros to ensure its length is {y}.",
            "Strip characters in {x} from both sides of {a} and pad the result with zeros to achieve a length of {y}."
        ],
        "language": "mhr_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.strip().startswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "Nadia \u1075\u1031\u1083\u1089\u1022\u107c\u103a\u101c\u1086\u1088\u1011\u102f\u1075\u103a\u1087\u107d\u1083\u1087\u1075\u102d\u1030\u1010\u103a\u1087\u1022\u103d\u1075\u103a\u1087\u1019\u1083\u1038\u1019\u102d\u1030\u101d\u103a\u1088 September 17, 2007 \u1010\u102e\u1088\u1081\u1030\u1004\u103a\u1038\u101a\u1083\u1075\u102d\u1030\u1010\u103a\u1087\u101c\u102f\u1075\u103a\u1088 \u107c\u1082\u103a\u1038\u101d\u1035\u1004\u103a\u1038 Aleisk \u1019\u102d\u1030\u1004\u103a\u1038\u101b\u1010\u103a\u108a\u101e\u103b\u1083\u108a (Russia) \u107c\u107c\u103a\u1089 \u1019\u102e\u1038\u107c\u1019\u103a\u1089\u107c\u1075\u103a\u1038\u107c\u1019\u103a\u1081\u1085\u1004\u103a\u1038\u101c\u1030\u1004\u103a\u101c\u1062\u1004\u103a \u1019\u103d\u1075\u103a\u1088 7.73 \u1075\u102e\u108a\u101c\u1030\u101d\u103a\u108a\u1075\u101b\u1085\u1019\u103a\u108a (17 \u1015\u103d\u1004\u103a\u10871 \u1022\u103d\u1004\u103a\u1089\u101e\u103a)\u104b",
            "x": "Nadia"
        },
        "query": [
            "Check if {a} starts with {x} after removing leading and trailing whitespaces.",
            "Determine if {a} begins with {x} once leading and trailing spaces are removed.",
            "Verify if {a} starts with {x} after trimming the whitespace from both ends."
        ],
        "language": "shn_Mymr"
    },
    {
        "solution": "```python\nanswer = a.strip(x).lower()\nprint(answer)\n```",
        "variables": {
            "a": "Peter Lenz, umulumendo wa myaka 13 uwensha ifitukutuku, nafwa panuma ya kusangwa mu busanso pa Indianapolis Motor Speedway.",
            "x": "P."
        },
        "query": [
            "Remove any leading and trailing characters in {x} from {a}, then convert the result to lowercase.",
            "Trim the characters in {x} from both ends of {a} and change the result to lowercase.",
            "Strip {x} from the start and end of {a}, then make the resulting string lowercase."
        ],
        "language": "bem_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:].rjust(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0f62\u0f92\u0fb1\u0f63\u0f0b\u0f66\u0fa4\u0fb1\u0f72\u0f60\u0f72\u0f0b\u0f42\u0f53\u0f66\u0f0b\u0f66\u0f9f\u0f44\u0f66\u0f0b\u0f53\u0f44\u0f0b \u0f51\u0f0b\u0f63\u0f9f\u0f7c\u0f0b\u0f5e\u0f56\u0f66\u0f0b\u0f4f\u0f7c\u0f42\u0f0b\u0f56\u0fb1\u0f72\u0f53\u0f0b\u0f58\u0f72\u0f0b \u0f63\u0f9f\u0f0b\u0f66\u0f90\u0f7c\u0f62\u0f0b\u0f63\u0f66\u0f0b\u0f5a\u0f7c\u0f42\u0f66\u0f0b \u0f22\u0f20\u0f20 \u0f51\u0f7a\u0f58\u0f0b\u0f45\u0f72\u0f42\u0f0b\u0f61\u0f7c\u0f51\u0f0b\u0f58\u0f72\u0f0b\u0f53\u0f44\u0f0b\u0f63\u0f66\u0f0b \u0f58\u0f44\u0f0b\u0f64\u0f7c\u0f66\u0f0b\u0f45\u0f72\u0f42\u0f0b\u0f62\u0f44\u0f0b \u0f62\u0f44\u0f0b\u0f51\u0f56\u0f44\u0f0b\u0f50\u0f7c\u0f42\u0f0b\u0f63\u0f66\u0f0b\u0f63\u0f71\u0f0b\u0f60\u0f56\u0f51\u0f5d\u0f0b\u0f68\u0f72\u0f53\u0f0d",
            "x": 10,
            "y": 50,
            "z": "\u0f0b"
        },
        "query": [
            "Take the substring of {a} starting from position {x}, then right justify it in a string of length {y} using {z} as padding.",
            "Extract the substring from {a} starting at index {x}, and right-align it in a string of length {y} with {z} as the padding character.",
            "Get the substring of {a} beginning at position {x}, then right-justify it in a string of length {y} padded with {z}."
        ],
        "language": "dzo_Tibt"
    },
    {
        "solution": "```python\nanswer = a.strip().replace(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0417\u0433\u043e\u0434\u043d\u0430 \u0437 \u044f\u0448\u0447\u044d \u0430\u0434\u043d\u044b\u043c \u0437\u0430\u043a\u043b\u0456\u043a\u0430\u043c \u0422\u0430\u0432\u0430\u0440\u044b\u0441\u0442\u0432\u0430 \u0432\u044b\u0437\u0432\u0430\u043b\u0435\u043d\u043d\u044f \u0436\u044b\u0432\u0451\u043b \u0456 \u041a\u0430\u0440\u0430\u043b\u0435\u045e\u0441\u043a\u0430\u0433\u0430 \u0442\u0430\u0432\u0430\u0440\u044b\u0441\u0442\u0432\u0430 \u043f\u0430 \u043f\u0440\u0430\u0434\u0443\u0445\u0456\u043b\u0435\u043d\u043d\u0456 \u0436\u043e\u0440\u0441\u0442\u043a\u0430\u0433\u0430 \u0430\u0431\u044b\u0445\u043e\u0434\u0436\u0430\u043d\u043d\u044f \u0437 \u0436\u044b\u0432\u0451\u043b\u0430\u043c\u0456 \u043d\u0430 \u045e\u0441\u0456\u0445 \u0431\u043e\u0439\u043d\u044f\u0445 \u0410\u045e\u0441\u0442\u0440\u0430\u043b\u0456\u0456 \u043c\u0443\u0441\u044f\u0446\u044c \u0431\u044b\u0446\u044c \u0443 \u0430\u0431\u0430\u0432\u044f\u0437\u043a\u043e\u0432\u044b\u043c \u043f\u0430\u0440\u0430\u0434\u043a\u0443 \u045e\u0441\u0442\u0430\u043d\u043e\u045e\u043b\u0435\u043d\u044b \u0432\u0456\u0434\u044d\u0430\u043a\u0430\u043c\u0435\u0440\u044b.",
            "x": "\u0436\u044b\u0432\u0451\u043b\u0430\u043c\u0456",
            "y": "\u0436\u044b\u0432\u0451\u043b\u0430\u043c\u0456 \u0456 \u043f\u0442\u0443\u0448\u043a\u0430\u043c\u0456"
        },
        "query": [
            "Trim whitespace from both ends of {a} and replace {x} with {y}.",
            "Remove leading and trailing spaces from {a} and substitute {x} with {y}.",
            "Strip spaces from the start and end of {a} and change {x} to {y}."
        ],
        "language": "bel_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.title().startswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "Podp\u00e4tky by mali by\u0165 n\u00edzke a \u0161irok\u00e9. Piesok, \u0161trk alebo so\u013e (chlorid v\u00e1penat\u00fd) sa \u010dasto syp\u00fa po cest\u00e1ch alebo chodn\u00edkoch, aby sa zlep\u0161ila trakcia.",
            "x": "Podp\u00e4tky"
        },
        "query": [
            "Check if the title-cased version of {a} starts with {x}.",
            "Determine if the title-cased form of {a} begins with {x}.",
            "Verify whether the title-cased version of {a} starts with {x}."
        ],
        "language": "slk_Latn"
    },
    {
        "solution": "```python\nanswer = a.capitalize().islower()\nprint(answer)\n```",
        "variables": {
            "a": "Olemba awo ambiri adapitiliza kupereka mangolomera kwa Jon Stewart ndi pulogalamu ya zazifanifani zankhani yomwe amapanga a Stephen Colbert."
        },
        "query": [
            "Check if the capitalized version of {a} is in lowercase.",
            "Verify if {a} remains in lowercase after capitalization.",
            "Determine if capitalizing {a} results in a lowercase string."
        ],
        "language": "nya_Latn"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).count(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u1798\u17b6\u1793\u1785\u17c6\u178e\u17bb\u1785\u1787\u17b6\u1785\u17d2\u179a\u17be\u1793 \u178a\u17c2\u179b\u17a2\u17d2\u1793\u1780\u178f\u17d2\u179a\u17bc\u179c\u1796\u17b7\u1785\u17b6\u179a\u178e\u17b6 \u1798\u17bb\u1793\u1796\u17c1\u179b \u1793\u17b7\u1784\u1793\u17c5\u200b\u1796\u17c1\u179b\u200b\u1792\u17d2\u179c\u17be\u178a\u17c6\u178e\u17be\u179a\u200b\u1791\u17c5\u1780\u1793\u17d2\u179b\u17c2\u1784\u178e\u17b6\u1798\u17bd\u1799\u17d4",
            "x": 100,
            "y": " ",
            "z": "\u17d4"
        },
        "query": [
            "Center {a} to a width of {x} using {y} as the fill character, then count the occurrences of {z} in the result.",
            "Pad {a} to a total width of {x} with {y} and count how many times {z} appears in the padded string.",
            "Make {a} centered to a width of {x} with {y} as the padding character, then find the number of times {z} occurs in the centered string."
        ],
        "language": "khm_Khmr"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).islower()\nprint(answer)\n```",
        "variables": {
            "a": "Li\tte\trejwenn\tyo\tan\t1945\tepi\tli\tte\trete\tjous\tan\t1958.",
            "x": 4
        },
        "query": [
            "Expand tabs in {a} to {x} spaces and check if the result is entirely lowercase.",
            "Replace tabs in {a} with {x} spaces and verify if the entire string is in lowercase.",
            "Convert tabs in {a} to {x} spaces and determine if the resulting string is all lowercase."
        ],
        "language": "hat_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u12a0\u1295\u12f3\u1295\u12f6\u127d \u120b\u12ed\u1235\u121b\u1219 \u12ed\u127d\u120b\u1209 \u130d\u1295 \u12a5\u1294 \u12a0\u12ed\u1218\u1208\u12a8\u1270\u129d\u121d\u1362",
            "x": "\u1362"
        },
        "query": [
            "After removing {x} from both ends of {a}, check if the result is alphanumeric.",
            "Check if the string {a} is alphanumeric after stripping {x} from its ends.",
            "Determine if the result is alphanumeric after trimming {x} from the start and end of {a}."
        ],
        "language": "amh_Ethi"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Nigba naa, bii awon olugbe 100 ni won le kuro ni agbegbe.",
            "x": "Nigba naa, "
        },
        "query": [
            "After removing leading {x} from {a}, check if the result follows title case rules.",
            "Check if the string {a} becomes title case after stripping leading {x}.",
            "Determine if the result is in title case after removing leading {x} from {a}."
        ],
        "language": "yor_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y:z].isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Eta prezidan an estab, men li pral izole lakay li pandan plizy\u00e8 jou.",
            "x": 4,
            "y": 20,
            "z": 2
        },
        "query": [
            "Check if the substring of {a} from {x} to {y} with step {z} is alphabetic.",
            "Determine if the sliced string of {a} from index {x} to {y} with step {z} contains only alphabetic characters.",
            "Verify if the segment of {a} starting at index {x}, ending at index {y}, and stepping by {z} is composed solely of letters."
        ],
        "language": "hat_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().split(x)[y].isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Nj\u00f3t n\u00f8kur av bestu sk\u00ed\u00f0lendunum \u00ed Nor\u00f0uramerika um veturin og royn veruliga fjallas\u00fakkling um summari\u00f0.",
            "x": " ",
            "y": 3
        },
        "query": [
            "Remove leading and trailing whitespace from {a}, split by {x}, and check if the {y}-th element is alphabetic.",
            "Trim whitespace from {a}, split using {x}, and verify if the {y}-th part contains only letters.",
            "Strip spaces from {a}, divide by {x}, and determine if the {y}-th segment is alphabetic."
        ],
        "language": "fao_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].swapcase().startswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "J\u00e0pp na\u00f1u ni typhon baa ngi j\u00ebm Chine ci gaawaayu 11km/h.",
            "x": 10,
            "y": 20,
            "z": "NI TYPHON"
        },
        "query": [
            "Take the substring of {a} from {x} to {y}, swap its case, and check if it starts with {z}.",
            "Extract the substring from {a} between indices {x} and {y}, change its case, and verify if it begins with {z}.",
            "Get the substring of {a} from position {x} to {y}, invert its case, and determine if it starts with {z}."
        ],
        "language": "wol_Latn"
    },
    {
        "solution": "```python\nanswer = a.islower() and a.isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Heutzutage gibt es allerdings etablierte Graffiti-K\u00fcnstler, Graffiti-Veranstaltungen und \u201elegale\" W\u00e4nde. In diesem Kontext gleichen Graffiti-Gem\u00e4lde h\u00e4ufiger Kunstwerken als unlesbaren Kritzeleien."
        },
        "query": [
            "Verify if {a} is in lowercase and contains only ASCII characters.",
            "Check if {a} is all lowercase and consists solely of ASCII characters.",
            "Determine if {a} is entirely in lowercase and only has ASCII characters."
        ],
        "language": "deu_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).islower()\nprint(answer)\n```",
        "variables": {
            "a": "Kalolobaan acara kuil dirayakeun salaku bag\u00e9an tina tepang taun kuil atanapi milangkala d\u00e9wa atanapi acara-acara ged\u00e9 anu s\u00e9j\u00e9n anu aya hubunganana sareng kuil.",
            "x": "K"
        },
        "query": [
            "Remove characters in {x} from both ends of {a} and check if the result is in lowercase.",
            "Trim characters in {x} from the start and end of {a} and verify if the resulting string is all lowercase.",
            "Strip characters in {x} from both sides of {a} and determine if the final string is in lowercase."
        ],
        "language": "sun_Latn"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).split(y)[z]\nprint(answer)\n```",
        "variables": {
            "a": "\u0625\u0630\u0627 \u0643\u0646\u062a\t\u0628\u062a\u0639\u064a\u0634\t\u0628\u0645\u062f\u064a\u0646\u0629\t\u062b\u0642\u0627\u0641\u0629\t\u0627\u0644\u0634\u0631\u0628\t\u0641\u064a\u0647\u0627\t\u0645\u062a\u0646\u0648\u0639\u0629 \u060c\t\u0641\u0627\u0646\u062a\u0642\u0644\t\u0644\u0644\u0628\u0627\u0631\u0627\u062a\t\u0623\u0648\t\u0627\u0644\u062d\u0627\u0646\u0627\u062a\t\u0628\u0627\u0644\u0623\u062d\u064a\u0627\u0621\t\u0627\u0644\u0644\u064a\t\u0645\u0627\t\u0628\u062a\u0631\u0648\u062d\u0644\u0647\u0627\t\u0643\u062a\u064a\u0631.",
            "x": 4,
            "y": " ",
            "z": 5
        },
        "query": [
            "After converting tabs in {a} to {x} spaces, split it by {y} and get the {z}-th segment.",
            "Convert tabs in {a} to {x} spaces, then split by {y} and retrieve the {z}-th part.",
            "Replace tabs in {a} with {x} spaces, split using {y}, and extract the {z}-th element."
        ],
        "language": "apc_Arab_sout3123"
    },
    {
        "solution": "```python\nanswer = a.partition(x)[y].capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "Idapatsidwa kugulu la Seventh Fleet limene ndila U.S. Navy komanso imene ili ku Sasebo, Nagasaki ku Japan.",
            "x": "Seventh Fleet",
            "y": 2
        },
        "query": [
            "Partition {a} at the first occurrence of {x}, take the {y}th part, and capitalize it.",
            "Split {a} at the first occurrence of {x}, select the {y}th segment, and capitalize it.",
            "Divide {a} at the first instance of {x}, choose the {y}th section, and capitalize it."
        ],
        "language": "nya_Latn"
    },
    {
        "solution": "```python\nanswer = a[::-1].endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0927\u0947\u0930\u0948 \u092a\u093f\u092f\u094b\u092c\u0932\u094d\u0938\u0939\u0930\u0942 \u091c\u0924\u093f \u0928\u0948 \u091f\u093e\u0922\u093e \u092d\u090f \u0924\u093e\u092a\u0928\u093f, \u0924\u092a\u093e\u0908\u0902 \u0905\u0932\u094d\u092c\u0941\u0915\u0930\u094d\u0915 \u0935\u093e \u0938\u093e\u0928\u094d\u0924\u093e \u092b\u0947 \u092f\u093e\u0924\u094d\u0930\u093e \u0928\u0917\u0930\u0940 \u092a\u0930\u094d\u092f\u093e\u092a\u094d\u0924 \u0930\u093e\u0924\u094d\u0930\u0940 \u091c\u0940\u0935\u0928 \u092a\u093e\u0909\u0928 \u0938\u0915\u094d\u0928\u0941\u0939\u0941\u0928\u094d\u0928\u0964",
            "x": "\u0938\u093e\u0928\u094d\u0924\u093e \u092b\u0947"
        },
        "query": [
            "Determine if the reverse of {a} ends with {x}.",
            "Check if {x} is the suffix of the reversed string {a}.",
            "Is {x} the ending substring of the reversed version of {a}?"
        ],
        "language": "npi_Deva"
    },
    {
        "solution": "```python\nanswer = a[x:y].upper().swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "Si presum che l\u2019om al vedi vuid\u00e2t un veicul a tr\u00ea ruedis plen di esplos\u00eefs cuintri la int.",
            "x": 10,
            "y": 20
        },
        "query": [
            "Take the substring of {a} from index {x} to {y}, convert it to uppercase, and then swap its case.",
            "Extract the substring from {a} starting at index {x} and ending at index {y}, change it to uppercase, and then invert its case.",
            "Get the substring of {a} between indices {x} and {y}, transform it to uppercase, and then toggle its case."
        ],
        "language": "fur_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8', errors='replace').decode('utf-8').isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u067e\u0627\u0631\u067d\u0645\u064a\u0646\u067d \u062c\u064a \u0627\u0646\u062f\u0631 \u06aa\u064a\u0631 \u0628\u06c1 \u0646\u06c1 \u0647\u0648."
        },
        "query": [
            "Encode {a} in 'utf-8' replacing unencodable characters, decode it back, and check if all characters are printable.",
            "Convert {a} to 'utf-8' with replacement for errors, decode it, and verify if all characters are printable.",
            "Transform {a} to 'utf-8' encoding with error replacement, decode it, and determine if every character is printable."
        ],
        "language": "snd_Arab"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).count(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u09b8\u09ae\u09af\u09bc \u09b9\u09be\u099c\u09be\u09b0 \u09b9\u09be\u099c\u09be\u09b0 \u09ac\u099b\u09b0 \u09a7\u09b0\u09c7 \u09a7\u09b0\u09cd\u09ae\u09c0\u09af\u09bc, \u09a6\u09be\u09b0\u09cd\u09b6\u09a8\u09bf\u0995 \u098f\u09ac\u0982 \u09ac\u09c8\u099c\u09cd\u099e\u09be\u09a8\u09bf\u0995 \u09aa\u09a3\u09cd\u09a1\u09bf\u09a4\u09a6\u09c7\u09b0 \u09a6\u09cd\u09ac\u09be\u09b0\u09be \u0985\u09a7\u09cd\u09af\u09af\u09bc\u09a8 \u0995\u09b0\u09be \u09b9\u09af\u09bc\u09c7\u099b\u09c7\u0964",
            "x": "\u09b8\u09ae\u09af\u09bc",
            "y": "\u09b9\u09be\u099c\u09be\u09b0"
        },
        "query": [
            "Remove any {x} characters from the beginning of {a} and count the occurrences of {y}.",
            "Strip {x} from the start of {a} and find how many times {y} appears.",
            "Eliminate leading {x} from {a} and tally the number of {y}."
        ],
        "language": "ben_Beng"
    },
    {
        "solution": "```python\nanswer = a.isalpha() and x in a\nprint(answer)\n```",
        "variables": {
            "a": "Locurile\u0219ifaunas\u0103lbatic\u0103dinGalapagospotfiv\u0103zute",
            "x": "fauna"
        },
        "query": [
            "Check if {a} is purely alphabetic and contains the substring {x}.",
            "Verify if {a} consists only of letters and includes the substring {x}.",
            "Determine if {a} is entirely alphabetic and has the substring {x}."
        ],
        "language": "ron_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].ljust(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "\u062a\u064f\u0637\u0628\u0642 \u0628\u0639\u0636 \u0627\u0644\u0628\u0644\u062f\u0627\u0646 \u0639\u0642\u0648\u0628\u0627\u062a \u0634\u062f\u064a\u062f\u0629 \u0627\u0644\u0642\u0633\u0648\u0629 \u062d\u062a\u0649 \u0641\u064a\u0645\u0627 \u064a\u062a\u0639\u0644\u0642 \u0628\u0627\u0644\u062c\u0631\u0627\u0626\u0645 \u0627\u0644\u0645\u0631\u062a\u0643\u0628\u0629 \u0644\u0623\u0648\u0644 \u0645\u0631\u0629\u061b \u062d\u064a\u062b \u0642\u062f \u062a\u0634\u0645\u0644 \u0647\u0630\u064a \u0627\u0644\u0639\u0642\u0648\u0628\u0627\u062a \u0623\u062d\u0643\u0627\u0645 \u0628\u0627\u0644\u0633\u062c\u0646 \u0644\u0623\u0643\u062b\u0631 \u0645\u0646 10 \u0633\u0646\u0648\u0627\u062a \u0623\u0648 \u0627\u0644\u0625\u0639\u062f\u0627\u0645.",
            "x": 10,
            "y": 20,
            "z": 30,
            "w": " "
        },
        "query": [
            "Left-justify the substring of {a} from index {x} to {y} in a string of length {z}, using {w} as the fill character.",
            "Align the substring of {a} from index {x} to {y} to the left in a string of length {z}, filling with {w}.",
            "Make the substring of {a} from index {x} to {y} left-aligned in a string of length {z}, using {w} as the padding character."
        ],
        "language": "acq_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:y].split(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "\u0422\u044b\u043b\u0437\u044b\u043d \u0442\u04f1\u0440\u043b\u04e7 \u0432\u0435\u0440\u043b\u0430\u0448\u0442\u044b\u0436\u0435 \u0443\u0447\u0451\u043d\u044b\u0439-\u0432\u043b\u0430\u043a \u0448\u0443\u043b\u0434\u044b\u0440\u043b\u0430 \u043b\u0435\u043a\u0442\u044b\u043d \u0448\u043e\u0433\u044b\u0448\u043e \u043c\u0430\u043d\u043c\u0435 \u0440\u0435\u043b\u044c\u0435\u0444 \u0444\u043e\u0440\u043c\u044b\u043c \u043c\u0443\u044b\u043d \u043b\u0443\u043a\u0442\u044b\u043d\u044b\u0442, \u043d\u0443\u043d\u043e, \u0432\u0435\u043a\u0430\u0442, \u0422\u044b\u043b\u0437\u044b\u043d \u043f\u0435\u0448 \u044d\u0440\u043a\u044b\u043d \u0438\u0437\u0435\u043c\u043c\u044b\u0436 \u0434\u0435\u043d\u0435 \u0448\u043e\u0447\u044b\u043d\u044b\u0442.",
            "x": 0,
            "y": 50,
            "z": " ",
            "w": 3
        },
        "query": [
            "Split the substring of {a} from index {x} to {y} at each {z}, limiting to {w} splits.",
            "Divide the substring of {a} ranging from index {x} to {y} by {z}, with a maximum of {w} splits.",
            "Partition the substring of {a} between indices {x} and {y} using {z} as the delimiter, up to {w} times."
        ],
        "language": "mhr_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x:y].rsplit(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "\u0e42\u0e23\u0e07\u0e41\u0e23\u0e21\u0e2b\u0e23\u0e37\u0e2d\u0e40\u0e08\u0e49\u0e32\u0e1a\u0e49\u0e32\u0e19\u0e02\u0e2d\u0e07\u0e04\u0e38\u0e13 (\u0e01\u0e23\u0e13\u0e35\u0e17\u0e35\u0e48\u0e04\u0e38\u0e13\u0e1e\u0e31\u0e01\u0e43\u0e19\u0e40\u0e01\u0e2a\u0e15\u0e4c\u0e40\u0e2e\u0e32\u0e2a\u0e4c\u0e2b\u0e23\u0e37\u0e2d\u0e1a\u0e49\u0e32\u0e19\u0e2a\u0e48\u0e27\u0e19\u0e15\u0e31\u0e27) \u0e21\u0e31\u0e01\u0e08\u0e30\u0e21\u0e35 wifi \u0e2b\u0e23\u0e37\u0e2d\u0e04\u0e2d\u0e21\u0e1e\u0e34\u0e27\u0e40\u0e15\u0e2d\u0e23\u0e4c\u0e17\u0e35\u0e48\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a\u0e2d\u0e34\u0e19\u0e40\u0e17\u0e2d\u0e23\u0e4c\u0e40\u0e19\u0e47\u0e15 \u0e41\u0e25\u0e30\u0e17\u0e38\u0e01\u0e0a\u0e38\u0e21\u0e0a\u0e19\u0e08\u0e30\u0e21\u0e35\u0e23\u0e49\u0e32\u0e19\u0e2d\u0e34\u0e19\u0e40\u0e17\u0e2d\u0e23\u0e4c\u0e40\u0e19\u0e47\u0e15\u0e2b\u0e23\u0e37\u0e2d\u0e1a\u0e32\u0e07\u0e17\u0e35\u0e48\u0e01\u0e47\u0e21\u0e35 wifi \u0e2a\u0e32\u0e18\u0e32\u0e23\u0e13\u0e30",
            "x": 0,
            "y": 100,
            "z": "\u0e2b\u0e23\u0e37\u0e2d",
            "w": 2
        },
        "query": [
            "Split the substring of {a} from index {x} to {y} at {z} into segments, performing up to {w} splits starting from the end.",
            "Divide the substring of {a} ranging from index {x} to {y} at {z} into parts, making up to {w} splits from the right.",
            "Break the substring of {a} between indices {x} and {y} at {z} into sections, allowing up to {w} splits starting from the rightmost end."
        ],
        "language": "tha_Thai"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).rjust(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0ca8\u0cc0\u0cb5\u0cc1 \u0ca6\u0c95\u0ccd\u0cb7\u0cbf\u0ca3 \u0caa\u0cc6\u0cb8\u0cbf\u0cab\u0cbf\u0c95\u0ccd \u0cae\u0ca4\u0ccd\u0ca4\u0cc1 \u0ca6\u0c95\u0ccd\u0cb7\u0cbf\u0ca3 \u0c85\u0cae\u0cc6\u0cb0\u0cbf\u0c95\u0cbe\u0ca6 \u0caa\u0cb6\u0ccd\u0c9a\u0cbf\u0cae \u0c95\u0cb0\u0cbe\u0cb5\u0cb3\u0cbf\u0caf\u0ca8\u0ccd\u0ca8\u0cc1 \u0ca4\u0caa\u0ccd\u0caa\u0cbf\u0cb8\u0cbf\u0c95\u0cca\u0cb3\u0ccd\u0cb3 \u0cac\u0caf\u0cb8\u0cbf\u0ca6\u0cb0\u0cc6 \u0c88 \u0cb5\u0cbf\u0cae\u0cbe\u0ca8\u0cb5\u0cca\u0c82\u0ca6\u0cc7 \u0c8f\u0c95\u0cc8\u0c95 \u0c86\u0caf\u0ccd\u0c95\u0cc6\u0caf\u0cb2\u0ccd\u0cb2. (\u0c95\u0cc6\u0cb3\u0c97\u0cc6 \u0ca8\u0cc6\u0cc2\u0cd5\u0ca1\u0cbf)",
            "x": 4,
            "y": 100,
            "z": " "
        },
        "query": [
            "Expand tabs in {a} to {x} spaces and right-justify the result to length {y} using {z} as padding.",
            "Convert tabs in {a} to {x} spaces, then right-align the text to a width of {y} with {z} as the fill character.",
            "Replace tabs in {a} with {x} spaces and align the text to the right with a total length of {y}, using {z} for padding."
        ],
        "language": "kan_Knda"
    },
    {
        "solution": "```python\nanswer = a[:x].zfill(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0ec3\u0e99\u0e8a\u0ec8\u0ea7\u0e87\u0eab\u0ea5\u0eb2\u0e8d\u0eaa\u0eb0\u0e95\u0eb0\u0ea7\u0eb1\u0e94\u0e97\u0eb5\u0ec8\u0e9c\u0ec8\u0eb2\u0e99\u0ea1\u0eb2, \u0ead\u0eb2\u0e99\u0eb2\u0e88\u0eb1\u0e81\u0ec2\u0ea3\u0ea1\u0eb1\u0e99\u0ec4\u0e94\u0eae\u0eb1\u0e9a\u0e9b\u0eb0\u0ec2\u0eab\u0e8d\u0e94\u0ea2\u0ec8\u0eb2\u0e87\u0eab\u0ebc\u0eb2\u0e8d\u0e97\u0eb2\u0e87\u0e94\u0ec9\u0eb2\u0e99\u0e81\u0eb2\u0e99\u0ec1\u0e9e\u0e94 \u0ec1\u0ea5\u0eb0 \u0e81\u0ecd\u0ec3\u0eab\u0ec9\u0ec0\u0e81\u0eb5\u0e94\u0e84\u0ea7\u0eb2\u0ea1\u0eae\u0eb9\u0ec9\u0eab\u0ebc\u0eb2\u0e8d\u0ea2\u0ec8\u0eb2\u0e87\u0e97\u0eb5\u0ec8\u0e9e\u0ea7\u0e81\u0ec0\u0eae\u0ebb\u0eb2\u0eae\u0eb9\u0ec9\u0ec3\u0e99\u0e9b\u0eb0\u0e88\u0eb8\u0e9a\u0eb1\u0e99.",
            "x": 10,
            "y": 15
        },
        "query": [
            "Take the first {x} characters of {a} and pad it with zeros to make it {y} characters long.",
            "Extract the first {x} characters from {a} and zero-fill it to reach a length of {y} characters.",
            "Get the initial {x} characters of {a} and add leading zeros until the total length is {y} characters."
        ],
        "language": "lao_Laoo"
    },
    {
        "solution": "```python\nanswer = a.isdigit() and a.isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Iwube \u1ee5l\u1ecdikwuu n\u2019ala mmad\u1ee5 ma \u1ecd b\u1ee5 n\u2019ime otu obodo nwere nha \u1ecd b\u1ee5la nwere ike \u1ecbd\u1ecdta na mfe anya a na-ach\u1ecdgh\u1ecb."
        },
        "query": [
            "Check if all characters in {a} are digits and ASCII.",
            "Verify if {a} consists solely of ASCII digits.",
            "Determine if {a} contains only ASCII digit characters."
        ],
        "language": "ibo_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].title().encode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "Polat i\u0148\u0148e \u00fcstd\u00e4ki dartylma seb\u00e4pli suwu\u0148 \u00fd\u00fcz\u00fcnde \u00fd\u00fcz\u00fd\u00e4r.",
            "x": 6,
            "y": 20
        },
        "query": [
            "Take the substring of {a} from {x} to {y}, convert it to title case, and encode it in UTF-8.",
            "Extract the substring from {a} starting at index {x} and ending at index {y}, change it to title case, and encode it using UTF-8.",
            "Get the substring of {a} between {x} and {y}, transform it to title case, and encode it in UTF-8 format."
        ],
        "language": "tuk_Latn"
    },
    {
        "solution": "```python\nanswer = a.rsplit(x, y)[z].isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0414\u043e\u0437\u0432\u043e\u043b\u0438 \u043f\u043e\u0432\u0438\u043d\u043d\u0456 \u0431\u0443\u0442\u0438 \u0437\u0430\u0440\u0435\u0437\u0435\u0440\u0432\u043e\u0432\u0430\u043d\u0456 \u0437\u0430\u0437\u0434\u0430\u043b\u0435\u0433\u0456\u0434\u044c. \u0412\u0438 \u043f\u043e\u0432\u0438\u043d\u043d\u0456 \u043c\u0430\u0442\u0438 \u0434\u043e\u0437\u0432\u0456\u043b \u043d\u0430 \u043d\u0456\u0447\u043b\u0456\u0433 \u0432 \u0421\u0456\u0440\u0435\u043d\u0456.",
            "x": " ",
            "y": 3,
            "z": 1
        },
        "query": [
            "Split {a} from the right at {x} up to {y} times and check if the {z}-th segment is a valid identifier.",
            "From the right, split {a} at {x} up to {y} times and determine if the {z}-th part is a valid identifier.",
            "Check if the {z}-th segment is a valid identifier after splitting {a} from the right at {x} up to {y} times."
        ],
        "language": "ukr_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x:].rstrip(y).isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u0917\u0948\u0932\u093e\u092a\u093e\u0917\u094b\u0938\u0915 \u0938\u094d\u0925\u0932 \u0938\u092d \u0906 \u0935\u0928\u094d\u092f \u091c\u0940\u0935\u0928 \u0915\u0947\u0902 \u0928\u093e\u0935 \u0926\u094d\u0935\u093e\u0930\u093e \u0938\u092c \u0938\u0901 \u0928\u0940\u0915 \u091c\u0947\u0915\u093e \u0926\u0947\u0916\u0932 \u091c\u0948\u0924 \u0905\u091b\u093f, \u091c\u0947\u0928\u093e \u0915\u093f \u091a\u093e\u0930\u094d\u0932\u094d\u0938 \u0921\u093e\u0930\u094d\u0935\u093f\u0928 1835 \u092e\u0947\u0902 \u0915\u090f\u0932\u0925\u093f\u0964",
            "x": 10,
            "y": "\u0964"
        },
        "query": [
            "Take the substring of {a} starting from position {x}, strip trailing characters in {y}, and check if the result is printable.",
            "Extract the substring from {a} starting at index {x}, remove trailing characters found in {y}, and determine if the final string is printable.",
            "Get the substring of {a} beginning at {x}, remove any trailing characters specified in {y}, and verify if the resulting string is printable."
        ],
        "language": "mai_Deva"
    },
    {
        "solution": "```python\nanswer = a[:x].zfill(y).isdecimal()\nprint(answer)\n```",
        "variables": {
            "a": "\u0907\u0938 PBS \u0936\u094b \u0915\u094b \u0926\u094b \u0926\u0930\u094d\u091c\u0928 \u0938\u0947 \u095b\u094d\u092f\u093e\u0926\u093e \u090f\u092e\u0940 \u092a\u0941\u0930\u0938\u094d\u0915\u093e\u0930 \u092e\u093f\u0932 \u091a\u0941\u0915\u0947 \u0939\u0948\u0902. \u0928\u093f\u092f\u092e\u093f\u0924 \u092a\u094d\u0930\u0938\u093e\u0930\u0923 \u0915\u0947 \u092e\u093e\u092e\u0932\u0947 \u092e\u0947\u0902 \u092f\u0939 \u0938\u093f\u0930\u094d\u095e \u0938\u0940\u0938\u0947\u092e \u0938\u094d\u091f\u094d\u0930\u0940\u091f \u0914\u0930 \u092e\u093f\u0938\u094d\u091f\u0930 \u0930\u0949\u091c\u0930 \u0928\u0947\u092c\u0930\u0939\u0941\u0921 \u0938\u0947 \u092a\u0940\u091b\u0947 \u0939\u0948.",
            "x": 10,
            "y": 15
        },
        "query": [
            "Take the first {x} characters of {a}, pad it with zeros to length {y}, and check if the result is decimal.",
            "Extract the initial {x} characters from {a}, zero-fill it to a length of {y}, and verify if it is a decimal number.",
            "Get the first {x} characters of {a}, pad them with zeros to make the length {y}, and determine if the outcome is a decimal."
        ],
        "language": "hin_Deva"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).encode('ascii', errors='replace')\nprint(answer)\n```",
        "variables": {
            "a": "\u091f\u0947\u092e\u093e\u0928 \u091c\u092f\u0928 \u092e \u0906\u0938\u0947\u0935 \u092a\u093e\u0925\u0947\u0930 \u091c\u092e\u0940\u0928\u094d\u0938 \u092a\u093e\u0920 \u0936\u0949\u0928\u0917\u0928 \u092f\u093e\u0924\u0947 \u0924\u0941\u0939\u0940 \u092a\u0925\u0947 \u0928\u0947 \u0906\u0938\u0947\u0935 \u092b\u0949\u0928 \u0915\u0947\u0936 \u091a\u0947\u092f.",
            "x": 100,
            "y": " "
        },
        "query": [
            "Center {a} in a string of {x} characters using {y} for padding, then encode it in ASCII, replacing unencodable characters with a question mark.",
            "Pad {a} to a total width of {x} using {y} as the fill character, then encode it to ASCII, substituting unencodable characters with a question mark.",
            "Align {a} centrally in a string of length {x} with {y} as padding, and encode it in ASCII, replacing any characters that can't be encoded with a question mark."
        ],
        "language": "kas_Deva"
    },
    {
        "solution": "```python\nanswer = a.title().rfind(x)\nprint(answer)\n```",
        "variables": {
            "a": "Sz\u00e1mos nemzet teljes lakoss\u00e1ga foly\u00e9konyan besz\u00e9li az angolt, \u00e9s m\u00e9g enn\u00e9l is t\u00f6bb orsz\u00e1gban r\u00e9szlegesen besz\u00e9lik, f\u0151leg a fiatalok.",
            "x": "besz\u00e9lik"
        },
        "query": [
            "Convert the first character of each word in {a} to uppercase and then find the last occurrence of {x}.",
            "Capitalize the first letter of each word in {a} and locate the last position of {x}.",
            "Make the first letter of each word in {a} uppercase and determine the last index of {x}."
        ],
        "language": "hun_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y:z].isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u067e\u0647 \u062f\u064a \u062a\u0648\u06ab\u0647 \u062f \u0634\u0627\u062a\u0647 \u067e\u0627\u062a\u06cc \u0681\u0627\u06cc \u0627\u062c\u0627\u0632\u062a \u0646\u0627\u0645\u0647 \u062f \u0645\u06cd \u062f \u0645\u06cc\u0627\u0634\u062a\u06cc \u062f \u0647\u0631 \u06cc\u0648\u06d0 \u062f \u067e\u06cc\u0644 \u0646\u06cc\u067c\u06cc \u0644\u067e\u0627\u0631\u0647 \u062f \u062c\u0646\u0648\u0631\u06cc \u062f \u0627\u0648\u0644\u06cc \u0646\u06cc\u067c\u06cc \u0685\u062e\u0647 \u0634\u062a\u0648\u0646 \u0644\u0631\u064a",
            "x": 5,
            "y": 20,
            "z": 2
        },
        "query": [
            "Extract the segment from {x} to {y} in {a}, stepping by {z}, and check if it is a valid identifier.",
            "Get the substring from index {x} to {y} in {a} with a step of {z}, and determine if it is a valid identifier.",
            "Slice the string {a} from position {x} to {y} with a step size of {z}, and verify if it forms a valid identifier."
        ],
        "language": "pbt_Arab"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).isspace()\nprint(answer)\n```",
        "variables": {
            "a": "\u0628\u06d5\u0632\u0649\u062f\u06d5 \u064a\u0627\u0645\u063a\u06c7\u0631\u063a\u0627 \u06af\u06c8\u0644\u062f\u06c8\u0631\u0645\u0627\u0645\u0627 \u06cb\u06d5 \u062f\u0627\u0626\u0649\u0645\u0644\u0649\u0642 \u0686\u0627\u0642\u0645\u0627\u0642 \u0626\u0627\u0631\u0649\u0644\u0627\u0634\u062a\u0649.",
            "x": 50,
            "y": " "
        },
        "query": [
            "Check if the centered version of {a} with width {x} and padding {y} consists only of whitespace characters.",
            "Determine if the centered string of {a} with a total width of {x} and padded with {y} is entirely whitespace.",
            "Verify if the string {a}, when centered to a width of {x} using {y} as padding, contains only whitespace characters."
        ],
        "language": "uig_Arab"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode(x).startswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u55ba\u71b1\u8eab\u5708\u55f0\u9663\uff0c\u502b\u8328\u55ba\u96fb\u55ae\u8eca\u8dcc\u5497\u843d\u569f\uff0c\u8ddf\u4f4f\u4ffe\u53e6\u4e00\u540d\u8eca\u624b\u6c99\u7dad\u723e\u00b7\u624e\u4e9e\u7279\u649e\u4f4e\u3002",
            "x": "utf-8",
            "y": "\u55ba"
        },
        "query": [
            "Determine if {a} encoded and then decoded with {x} starts with {y}.",
            "Check if {a} starts with {y} after being encoded and decoded using {x}.",
            "Verify if the string {a} begins with {y} when encoded and decoded with {x}."
        ],
        "language": "yue_Hant"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "L'impiraturi Augustu accuminci\u00f2 a ddari posti ri travagghiu a li dutturi, chi furmarunu puru u primu Corpu m\u00e8dicu rumanu ca fu usatu s\u00f9bbitu doppu l battagghi.",
            "x": "."
        },
        "query": [
            "Remove trailing characters in {x} from {a} and capitalize the first letter.",
            "Trim trailing characters specified by {x} from {a} and make the first letter uppercase.",
            "Strip trailing {x} from {a} and convert the first character to uppercase."
        ],
        "language": "scn_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('ascii', errors='replace').decode('ascii').endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u04e8\u0440\u043d\u04e9\u043a \u0431\u043e\u043b\u0443\u0448\u0443\u043d\u0447\u0430 \u0442\u0435\u0440\u0435\u04a3, 5 \u043c\u043c (1/5 \u0434\u044e\u0439\u043c) \u0436\u0435 \u0430\u043d\u0434\u0430\u043d \u0434\u0430 \u043a\u04e9\u0431\u04af\u0440\u04e9\u04e9\u043a \u0431\u043e\u043b\u0443\u043f, \u0430\u043d\u044b\u043d \u043c\u0430\u0442\u0435\u0440\u0438\u0430\u043b\u044b \u043c\u0443\u0437\u0434\u0430\u043a \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u0430\u0434\u0430 \u0436\u0443\u043c\u0448\u0430\u043a \u0431\u043e\u043b\u0443\u043f \u0442\u0443\u0440\u0443\u0448\u0443 \u043a\u0435\u0440\u0435\u043a.",
            "x": "\u043a\u0435\u0440\u0435\u043a."
        },
        "query": [
            "Does {a}, after encoding to ASCII and replacing unencodable characters, end with {x}?",
            "After converting {a} to ASCII and replacing characters that can't be encoded, does it end with {x}?",
            "If {a} is encoded to ASCII with unencodable characters replaced, does it end with {x}?"
        ],
        "language": "kir_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[:x].swapcase().isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Ring genah nomer tiga, Hamlin wantah maselisih duang dasa poin, nanging menang limang poin saking Bowyer. Kahne lan Truex, Jr. wantah ring genah kalima lan kanem antuk 2.220 lan 2.207 poin.",
            "x": 10
        },
        "query": [
            "Are all characters in the first {x} characters of {a}, after swapping case, alphabetic?",
            "Do the first {x} characters of {a}, after changing their case, consist only of alphabetic characters?",
            "After swapping the case of the first {x} characters in {a}, are all of them alphabetic?"
        ],
        "language": "ban_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y:z].isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u0644\u0645\u062a\u0638\u0627\u0647\u0631\u064a\u0646 \u0628\u0627\u063a\u064a\u064a\u0646 \u064a\u062c\u0645\u0639\u0648 \u0639\u0627\u0631\u0636\u0629 \u0641\u064a\u0647\u0627 1.2 \u0645\u0644\u064a\u0648\u0646 \u062a\u0648\u0642\u064a\u0639 \u0628\u0627\u0634 \u064a\u0642\u062f\u0645\u0648\u0647\u0627 \u0644\u0644\u0645\u062c\u0644\u0633 \u0627\u0644\u0648\u0643\u0646\u064a \u0641\u0646\u0648\u0641\u0645\u0628\u0631.",
            "x": 0,
            "y": 20,
            "z": 2
        },
        "query": [
            "Are all characters in the slice of {a} from {x} to {y}, taking every {z}-th character, printable?",
            "Is the slice of {a} from index {x} to {y} with a step of {z} entirely composed of printable characters?",
            "Does the substring of {a} starting at index {x} and ending at index {y} with a step of {z} contain only printable characters?"
        ],
        "language": "ary_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:y].casefold().isascii()\nprint(answer)\n```",
        "variables": {
            "a": "\u00ccl\u00fa Beijing n\u00ed or\u00edl\u1eb9\u0300\u00e8d\u00e8 China ni y\u00edo gba \u00e0lej\u00f2 \u00ecd\u00edje Olympic n\u00edgb\u00e0 \u00f2t\u00fat\u00f9 l\u1ecd\u0301d\u00fan 2022, \u00e8y\u00ed t\u00ed y\u00ed\u00f2 j\u1eb9\u0301 \u00ecl\u00fa \u00e0k\u1ecd\u0301k\u1ecd\u0301 t\u00ed y\u00ed\u00f2 gb\u00e0lej\u00f2 olympic ti \u00e0k\u00f3k\u00f2 ooru \u00e0ti \u00f2t\u00fat\u00f9.",
            "x": 4,
            "y": 11
        },
        "query": [
            "Are all characters in the slice of {a} from {x} to {y}, after converting to lowercase, ASCII?",
            "Is the substring of {a} from index {x} to {y}, when converted to lowercase, composed entirely of ASCII characters?",
            "Does the segment of {a} between {x} and {y}, once converted to lowercase, contain only ASCII characters?"
        ],
        "language": "yor_Latn"
    },
    {
        "solution": "```python\nanswer = a.capitalize().zfill(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0175a Costello \u0175akati \"Para vyamba kuguliskika, tikwenera ku\u0175a navyo. Kung'anamura kuti palije dango lakukanizga kupanga vinthu na nkhongono yikuru ya nyukiliya.\"",
            "x": 150
        },
        "query": [
            "Capitalize {a} and pad it with leading zeros to make it {x} characters long.",
            "Make the first letter of {a} uppercase and add leading zeros until it is {x} characters in length.",
            "Convert {a} to start with an uppercase letter and prepend zeros to reach a total length of {x} characters."
        ],
        "language": "tum_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).upper().endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "Ez egy olyan szigetcsoport, mely 15 szigetet foglal mag\u00e1ba, \u00e9s az \u00f3ce\u00e1n fel\u00fclet\u00e9n 2,2 milli\u00f3 km2-re terjed ki.",
            "x": "E",
            "y": "KI."
        },
        "query": [
            "Trim {x} from both ends of {a}, convert to uppercase, and check if it ends with {y}.",
            "Remove {x} from the start and end of {a}, change to uppercase, and verify if it concludes with {y}.",
            "Strip {x} from the edges of {a}, turn to uppercase, and determine if it finishes with {y}."
        ],
        "language": "hun_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).title().startswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "Yon p\u00f2s kontw\u00f2l imigrasyon se abity\u00e8lman premye kote tout l\u00e8 yon avyon, bato, oubyen yon veyikil ap debake.",
            "x": "avyon",
            "y": "helicopt\u00e8re",
            "z": "Yon P\u00f2s"
        },
        "query": [
            "Replace {x} with {y} in {a}, convert the result to title case, and check if it starts with {z}.",
            "Substitute {x} with {y} in {a}, change the result to title case, and verify if it begins with {z}.",
            "Swap {x} with {y} in {a}, transform the result to title case, and determine if it starts with {z}."
        ],
        "language": "hat_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).encode('utf-8').decode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "\u0648\u0627\u0626\u06a9\u0646\u06af\u0632\u0646 \u06a9\u0648\u0631 \u0628\u062d\u06cc\u0631\u06c1 \u0627\u0633\u0648\u062f \u062a\u06c1\u0655 \u06a9\u06cc\u0633\u067e\u06cc\u0646 \u0633\u0645\u0646\u062f\u0631\u0633 \u062a\u0627\u0645 \u06af\u0698\u06be\u0646\u06c1\u0655 \u062e\u0672\u0637\u0631\u0655 \u0631\u0648\u0633\u06cc \u0622\u0628\u06cc \u06af\u0632\u0631\u06af\u0627\u06c1\u0646 \u06c1\u06cc\u0646\u062f \u0627\u0633\u062a\u0639\u0645\u0627\u0644\u06d4\u06cc\u0645\u0646 \u0648\u062a\u0646 \u06c1\u06cc\u0646\u0632 \u06a9\u06cc\u06c1\u06c1 \u062d\u0635\u06c1\u0655 \u0686\u06be \u0648\u0646\u06c1\u0655 \u062a\u06c1\u0655 \u06cc\u0648\u0627\u0646 \u0627\u0633\u062a\u0639\u0645\u0627\u0644 \u06a9\u0631\u0646\u06c1\u0655\u06d4 \u062e\u0635\u0648\u0635\u06cc \u0627\u062c\u0627\u0632\u062a \u0646\u0627\u0645\u0646 \u06c1\u06cc\u0646\u0632 \u0645\u0645\u06a9\u0646\u06c1\u0655 \u0636\u0631\u0648\u0631\u062a \u06a9\u0631\u0648 \u0686\u06cc\u06a9\u060c \u06c1\u0633 \u0632\u0655 \u062d\u0672\u0635\u0644 \u06a9\u0631\u0646 \u0645\u0634\u06a9\u0644 \u06c1\u06a9\u06c1\u0655 \u0672\u0633\u062a\u06cc\u06d4",
            "x": "\u0648"
        },
        "query": [
            "Strip characters in {x} from both ends of {a}, encode it in UTF-8, and then decode it back to a string.",
            "Remove characters specified in {x} from the start and end of {a}, convert it to UTF-8 bytes, and then back to a string.",
            "Trim characters listed in {x} from both sides of {a}, encode to UTF-8, and decode it to a string."
        ],
        "language": "kas_Arab"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).splitlines()[y]\nprint(answer)\n```",
        "variables": {
            "a": "\u0ab9\u0abe!\t\u0ab0\u0abe\u0a9c\u0abe\t\u0aa4\u0ac1\u0aa4\u0aa8\u0a96\u0abe\u0aae\u0ac1\u0aa8,\t\u0a95\u0ac7\t\u0a9c\u0ac7\u0aa8\u0acb\t\u0a95\u0acb\u0a88\u0a95\u0ab5\u0abe\u0ab0\t\"\u0ab0\u0abe\u0a9c\u0abe\t\u0aa4\u0ac1\u0aa4\"\t\u0a85\u0aa5\u0ab5\u0abe\t\"\u0aac\u0acb\u0aaf\t\u0a95\u0abf\u0a82\u0a97\"\t\u0aa4\u0ab0\u0ac0\u0a95\u0ac7\t\u0a89\u0ab2\u0acd\u0ab2\u0ac7\u0a96\t\u0a95\u0ab0\u0ab5\u0abe\u0aae\u0abe\u0a82\t\u0a86\u0ab5\u0aa4\u0acb\t\u0ab9\u0aa4\u0acb\t\u0aa4\u0ac7,\t\u0a86\u0aa7\u0ac1\u0aa8\u0abf\u0a95\t\u0ab8\u0aae\u0aaf\u0aae\u0abe\u0a82\t\u0ab8\u0acc\u0aa5\u0ac0\t\u0ab5\u0aa7\u0ac1\t\u0a9c\u0abe\u0aa3\u0ac0\u0aa4\u0abe\t\u0aaa\u0acd\u0ab0\u0abe\u0a9a\u0ac0\u0aa8\t\u0a88\u0a9c\u0ac0\u0aaa\u0acd\u0aa4\u0aa8\u0abe\t\u0ab0\u0abe\u0a9c\u0abe\u0a93\t\u0aaa\u0ac8\u0a95\u0ac0\u0aa8\u0acb\t\u0a8f\u0a95\t\u0ab0\u0abe\u0a9c\u0abe\t\u0a9b\u0ac7.",
            "x": 4,
            "y": 0
        },
        "query": [
            "Expand tabs in {a} to {x} spaces, split the result into lines, and take the {y+1}-th line.",
            "Convert tabs in {a} to {x} spaces, break the result into lines, and select the {y+1}-th line.",
            "Replace tabs in {a} with {x} spaces, divide the result into lines, and retrieve the {y+1}-th line."
        ],
        "language": "guj_Gujr"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).rjust(z, w).islower()\nprint(answer)\n```",
        "variables": {
            "a": "The water molecules make an invisible skin on the water\u2019s surface that allows things like the needle to float on top of the water.",
            "x": "water",
            "y": "liquid",
            "z": 150,
            "w": "-"
        },
        "query": [
            "Replace {x} with {y} in {a}, right-align the result in a string of length {z} padded with {w}, and check if the final string is in lowercase.",
            "Substitute {x} with {y} in {a}, pad the result to the right to make it {z} characters long using {w}, and verify if the resulting string is all lowercase.",
            "Change {x} to {y} in {a}, right-justify the string to a length of {z} with padding character {w}, and determine if the final string is in lowercase."
        ],
        "language": "eng_Latn"
    },
    {
        "solution": "```python\nanswer = a[y:z].isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "\u00d1ugui nirok ay neg. Momoy ku njeuk di xool butitu niou d\u00e9",
            "y": 0,
            "z": 5
        },
        "query": [
            "Check if the substring of {a} from index {y} to {z} contains only alphabetic characters.",
            "Verify if the segment of {a} from position {y} to {z} consists solely of letters.",
            "Determine if the portion of {a} between indices {y} and {z} is made up entirely of alphabetic characters."
        ],
        "language": "wol_Latn"
    },
    {
        "solution": "```python\nanswer = a[y:x:-1].isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u0421\u0442\u0443\u0434\u0435\u043d\u0442\u0441\u043a\u0438\u0442\u0435 \u0432\u0438\u0437\u0438 \u043e\u0431\u0438\u0447\u043d\u043e \u0438\u043c\u0430\u0430\u0442 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u0438 \u0443\u0441\u043b\u043e\u0432\u0438 \u0438 \u043f\u0440\u043e\u0446\u0435\u0434\u0443\u0440\u0438 \u0437\u0430 \u0430\u043f\u043b\u0438\u043a\u0430\u0446\u0438\u0458\u0430 \u043e\u0434 \u043e\u0431\u0438\u0447\u043d\u0438\u0442\u0435 \u0442\u0443\u0440\u0438\u0441\u0442\u0438\u0447\u043a\u0438 \u0438\u043b\u0438 \u0431\u0438\u0437\u043d\u0438\u0441 \u0432\u0438\u0437\u0438.",
            "x": 20,
            "y": 30
        },
        "query": [
            "Check if the substring of {a} from {y} to {x} in reverse order is numeric.",
            "Determine if the reversed substring of {a} from index {y} to {x} consists only of numeric characters.",
            "Verify if the portion of {a} between {y} and {x} in reverse is a numeric string."
        ],
        "language": "mkd_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[y:].upper().startswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "Silih tunggil jadman\u00e9 minab n\u00e9nten cumpu sak\u00e9wanten titiang n\u00e9nten nguratiang.",
            "x": "MINAB",
            "y": 20
        },
        "query": [
            "Does the substring of {a} from {y} onwards, converted to uppercase, start with {x}?",
            "Is the substring of {a} starting from index {y} and converted to uppercase beginning with {x}?",
            "Starting from index {y} in {a}, does the uppercase version of the substring begin with {x}?"
        ],
        "language": "ban_Latn"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).replace(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u05d0 \u05e7\u05d0\u05d5\u05d5\u05d0\u05dc\u05e2\u05e8\u05d9\u05e2 \u05d0\u05d9\u05d6 \u05d0\u05df \u05d0\u05e8\u05de\u05d9\u05d9 \u05d5\u05d5\u05d0\u05e1 \u05e7\u05e8\u05d9\u05d2\u05d8 \u05d6\u05d9\u05da \u05e8\u05d9\u05d9\u05d8\u05e0\u05d3\u05d9\u05d2 \u05d0\u05d5\u05d9\u05e3 \u05e4\u05e2\u05e8\u05d3. \u05d3\u05e2\u05e8 \u05d6\u05d0\u05d8\u05dc \u05d0\u05d9\u05d6 \u05e0\u05d0\u05db\u05e0\u05d9\u05e9\u05d8 \u05d2\u05e2\u05d5\u05d5\u05e2\u05df \u05d0\u05d5\u05d9\u05e1\u05d2\u05e2\u05d8\u05e8\u05d0\u05db\u05d8, \u05d4\u05d0\u05d8 \u05d6\u05d9\u05da \u05d3\u05d9 \u05d0\u05e1\u05d9\u05e8\u05d9\u05d0\u05e0\u05e2\u05e8 \u05e7\u05d0\u05d5\u05d5\u05d0\u05dc\u05e2\u05e8\u05d9\u05e2 \u05d2\u05e2\u05e7\u05e8\u05d9\u05d2\u05d8 \u05d0\u05d5\u05d9\u05e3 \u05d3\u05d9 \u05d4\u05d5\u05d9\u05dc\u05e2 \u05e8\u05d9\u05e7\u05e0\u05e1 \u05e4\u05d5\u05df \u05d6\u05d9\u05d9\u05e2\u05e8\u05e2 \u05e4\u05e2\u05e8\u05d3.",
            "x": 4,
            "y": "\u05e4\u05e2\u05e8\u05d3",
            "z": "\u05d4\u05d9\u05e0\u05d8"
        },
        "query": [
            "Replace tabs in {a} with {x} spaces, then replace all occurrences of {y} with {z}.",
            "Convert tabs in {a} to {x} spaces and then substitute every {y} with {z}.",
            "Change tabs in {a} to {x} spaces, followed by replacing each {y} with {z}."
        ],
        "language": "ydd_Hebr"
    },
    {
        "solution": "```python\nanswer = a[x:y].title().center(z)\nprint(answer)\n```",
        "variables": {
            "a": "L\u2019intero distreto l\u2019\u00e8 st\u00e0 nomin\u00e0 Patrimonio de l\u2019Umanit\u00e0 UNESCO pa el so va\u0142or cultural e storico unico, e el costo de\u0142e case el xe tra i p\u00ed alti del paese.",
            "x": 10,
            "y": 30,
            "z": 50
        },
        "query": [
            "Take the substring of {a} from {x} to {y}, convert it to title case, and center it within {z} characters.",
            "Extract the substring from {a} starting at index {x} and ending at index {y}, change it to title case, and center it in a field of {z} characters.",
            "Get the substring of {a} between indices {x} and {y}, transform it to title case, and align it centrally within {z} characters."
        ],
        "language": "vec_Latn"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "R\u025by litd\u00e4, gu\u00e4th muaa\u014bni\u0331,am\u00e4ni\u0331 gu\u00e4th l\u0254\u0331\u0254\u0331\u014b\u00e4 k\u025b k\u025bn gu\u00e4th tin nhoak\u025b \u025bl\u0254\u0331\u014b \u025b k\u025bn j\u00e4\u00e4l t\u0254t\u0254.",
            "x": "t\u0254t\u0254."
        },
        "query": [
            "Remove characters in {x} from the end of {a} and swap the case of all characters.",
            "Trim characters in {x} from the end of {a} and change the case of each character.",
            "Strip characters in {x} from the end of {a} and invert the case of all characters."
        ],
        "language": "nus_Latn"
    },
    {
        "solution": "```python\nanswer = a.count(x) == y\nprint(answer)\n```",
        "variables": {
            "a": "\u0c26\u0c43\u0c37\u0c4d\u0c1f\u0c3f, \u0c32\u0c47\u0c26\u0c3e \u0c26\u0c43\u0c36\u0c4d\u0c2f \u0c38\u0c3e\u0c2e\u0c30\u0c4d\u0c25\u0c4d\u0c2f\u0c02 \u0c05\u0c28\u0c47\u0c26\u0c3f \u0c26\u0c43\u0c36\u0c4d\u0c2f \u0c35\u0c4d\u0c2f\u0c35\u0c38\u0c4d\u0c25 \u0c1c\u0c4d\u0c1e\u0c3e\u0c28\u0c47\u0c02\u0c26\u0c4d\u0c30\u0c3f\u0c2f\u0c3e\u0c32\u0c41 \u0c32\u0c47\u0c26\u0c3e \u0c15\u0c33\u0c4d\u0c33\u0c2a\u0c48 \u0c06\u0c27\u0c3e\u0c30\u0c2a\u0c21\u0c3f \u0c09\u0c02\u0c1f\u0c41\u0c02\u0c26\u0c3f.",
            "x": "\u0c26\u0c43\u0c36\u0c4d\u0c2f",
            "y": 3
        },
        "query": [
            "Check if the number of times {x} appears in {a} is equal to {y}.",
            "Verify if {x} occurs {y} times in {a}.",
            "Determine if {a} contains {x} exactly {y} times."
        ],
        "language": "tel_Telu"
    },
    {
        "solution": "```python\nanswer = a[x:y].encode('utf-8').decode('ascii')\nprint(answer)\n```",
        "variables": {
            "a": "\u092d\u094b\u0930 \u092e\u0947 \u0920\u0940\u0915 8:46 \u092c\u091c\u0947 \u0936\u0939\u0930 \u092d\u0930\u093f \u092e\u0947 \u0938\u0928\u094d\u0928\u093e\u091f\u093e \u092a\u0938\u0930\u0932 \u091b\u0932, \u0920\u0940\u0915 \u0913\u0939\u093f \u0918\u0921\u093c\u0940 \u091c\u0916\u0928 \u092a\u0939\u093f\u0932 \u091c\u0947\u091f \u0905\u092a\u0928 \u0932\u0915\u094d\u0937\u094d\u092f \u092a\u0930 \u0939\u092e\u0932\u093e \u0915\u090f\u0928\u0947 \u0930\u0939\u090f\u0964",
            "x": 8,
            "y": 13
        },
        "query": [
            "Encode the substring of {a} from index {x} to {y} in UTF-8 and then decode it in ASCII.",
            "Take the substring of {a} from position {x} to {y}, encode it using UTF-8, and decode it using ASCII.",
            "From {a}, get the substring between indices {x} and {y}, encode it in UTF-8, and decode it in ASCII."
        ],
        "language": "mai_Deva"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).upper()\nprint(answer)\n```",
        "variables": {
            "a": "Kubaanse burgers wat ook VS groen kaart houers is moet die Ecuardoriaanse Konsulaat besoek om \u2018n uitsluiting vir hierdie vereiste te kry.",
            "x": "K"
        },
        "query": [
            "Remove leading {x} characters from {a} and convert the result to uppercase.",
            "Strip leading {x} from {a} and change the result to uppercase.",
            "Trim leading {x} from {a} and transform the result to uppercase."
        ],
        "language": "afr_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Di lawan n waraz, i\u0263erbazen walan asile\u0263 d-ittbanen mli\u1e25 deg igemma\u1e0d n ukay\u1e0d.",
            "x": "i\u0263",
            "y": "igh"
        },
        "query": [
            "Replace {x} with {y} in {a} and check if the result contains only ASCII characters.",
            "Substitute {x} with {y} in {a} and verify if the resulting string is composed solely of ASCII characters.",
            "Swap {x} with {y} in {a} and determine if the final string consists exclusively of ASCII characters."
        ],
        "language": "kab_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].swapcase().count(z)\nprint(answer)\n```",
        "variables": {
            "a": "Pr\u00e1ktikanan di solamente nutrishon adeku\u00e1 no ta gener\u00e1 prestashonnan m\u00e1ksimo, pero nan por afekt\u00e1 e bienestar general di atleta h\u00f3ben di un manera signifikativo.",
            "x": 10,
            "y": 50,
            "z": "A"
        },
        "query": [
            "Swap the case of the substring of {a} from {x} to {y} and count the occurrences of {z} in it.",
            "Change the case of the substring of {a} from index {x} to {y} and find how many times {z} appears in it.",
            "Convert the case of the substring of {a} between {x} and {y} and count the number of times {z} is present."
        ],
        "language": "pap_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('ascii', errors='ignore').islower()\nprint(answer)\n```",
        "variables": {
            "a": "Maabane, ba poso ba ntshitse lekwalo la go kopa maitshwarelo mo baageding le mo mmedieng morago ga go re ba lemoge go re mosimane mongwe o ne a fitlhile ditokumente di ka nna 600 tsa poso, go akaretsa diposekarata di le 429 tsa Ngwaga o Mosha, tse di neng tsa seke tsa romelwa ko go beng ba tsone."
        },
        "query": [
            "Is the ASCII-encoded version of {a} (ignoring errors) in lowercase?",
            "Does the ASCII-encoded string of {a} (with errors ignored) consist entirely of lowercase letters?",
            "When {a} is encoded in ASCII (ignoring errors), is the resulting string in lowercase?"
        ],
        "language": "tsn_Latn"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).rstrip(y).isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Qhaxu wawanakanx m\u00e4 jan walt'awiw yatiq\u00e4\u00f1 irnaqa\u00f1atak utji, jupanakar amuy churapxaspaw kuntix lura\u00f1 munapki ukaru, kunjam anata\u00f1as ukjamarak k'achachatanak u\u00f1ch'uki\u00f1as jan ukax amuyunak qillqa\u00f1sa ukanaks lurapxarakisp\u00e4wa.",
            "x": "Q",
            "y": "."
        },
        "query": [
            "Are all characters in {a} ASCII after stripping {x} from the start and {y} from the end?",
            "Is the string {a} composed entirely of ASCII characters after removing {x} from the beginning and {y} from the end?",
            "Does the string {a} contain only ASCII characters once {x} is stripped from the start and {y} is stripped from the end?"
        ],
        "language": "ayr_Latn"
    },
    {
        "solution": "```python\nanswer = a.title().find(x)\nprint(answer)\n```",
        "variables": {
            "a": "Nkhulande izi zikwamba ulendo wawo wakwenda pala cakurya cacepa.Muciga\u0175a ici, nkhulande zikupanga tuvivwimbo twanyengo yicoko waka uto tukusinthika zu\u0175a na zu\u0175a.",
            "x": "Zikwamba"
        },
        "query": [
            "Find the position of {x} in {a} after converting it to title case.",
            "Determine the index of {x} in the title-cased version of {a}.",
            "Locate the position of {x} in {a} once it has been converted to title case."
        ],
        "language": "tum_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u0420\u043e\u0432\u043d\u043e \u0432 08:46 \u0432\u0435\u0441\u044c \u0433\u043e\u0440\u043e\u0434 \u0437\u0430\u043c\u0435\u0440, \u043e\u0431\u043e\u0437\u043d\u0430\u0447\u0438\u0432 \u0442\u043e\u0442 \u0441\u0430\u043c\u044b\u0439 \u043c\u043e\u043c\u0435\u043d\u0442, \u043a\u043e\u0433\u0434\u0430 \u043f\u0435\u0440\u0432\u044b\u0439 \u0441\u0430\u043c\u043e\u043b\u0451\u0442 \u0443\u0434\u0430\u0440\u0438\u043b \u043f\u043e \u0446\u0435\u043b\u0438.",
            "x": 10,
            "y": 20
        },
        "query": [
            "Determine if the substring from {x} to {y} in {a} is printable.",
            "Check if the substring of {a} from index {x} to {y} is printable.",
            "Is the substring from {x} to {y} in the string {a} printable?"
        ],
        "language": "rus_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x:y].capitalize().zfill(z)\nprint(answer)\n```",
        "variables": {
            "a": "Janar John Cadwalder zai kaddamar da harin wuce gona da iri kan rundunar sojojin Burtaniya a Bordentown, don toshe duk wani karfafawa.",
            "x": 6,
            "y": 10,
            "z": 15
        },
        "query": [
            "Capitalize the substring of {a} from {x} to {y} and pad it with zeros to make it {z} characters long.",
            "Take the substring of {a} from index {x} to {y}, capitalize it, and pad it with zeros to ensure it is {z} characters in length.",
            "Extract the substring from {a} starting at index {x} and ending at index {y}, capitalize it, and add leading zeros to make its length {z} characters."
        ],
        "language": "hau_Latn"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u041a\u0430\u043d \u04d9\u0439\u043b\u04d9\u043d\u0435\u0448\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u0430\u0441\u044b\u043d\u044b\u04a3 \u0442\u04e9\u043f \u043e\u0440\u0433\u0430\u043d\u044b - \u043a\u0430\u043d\u043d\u044b \u043a\u0443\u0430 \u0442\u043e\u0440\u0433\u0430\u043d \u0439\u04e9\u0440\u04d9\u043a.",
            "x": " \u0439\u04e9\u0440\u04d9\u043a.",
            "y": "\u0439\u04e9\u0440\u04d9\u043a."
        },
        "query": [
            "Determine if {a} ends with {y} after removing trailing characters in {x}.",
            "Check if {a} ends with {y} after trimming trailing characters specified in {x}.",
            "Verify if {a} ends with {y} once trailing characters in {x} are removed."
        ],
        "language": "tat_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).isupper()\nprint(answer)\n```",
        "variables": {
            "a": "Ring sisi lianan, wantah duaning volume toyane tegeh sakadi punika ngranayang pemandangan ida dane antuk yeh terjune pacang kasaruang - olih makasami toya!",
            "x": 150,
            "y": "*"
        },
        "query": [
            "Check if {a} is in uppercase after centering it to length {x} with {y} as the fill character.",
            "Determine if {a} is in uppercase after being centered to a length of {x} using {y} as the padding character.",
            "Verify if {a} remains in uppercase after it is centered to a length of {x} with {y} as the fill character."
        ],
        "language": "ban_Latn"
    },
    {
        "solution": "```python\nanswer = a.join(x).istitle()\nprint(answer)\n```",
        "variables": {
            "a": " ",
            "x": [
                "Gerusa\u0142eme",
                "ga",
                "tanti",
                "siti",
                "storici,",
                "archeo\u0142ogici",
                "e",
                "cultura\u0142i,",
                "asieme",
                "a",
                "centri",
                "comericia\u0142i",
                "vivaci",
                "e",
                "afo\u0142ati,",
                "bar",
                "e",
                "ristoranti."
            ]
        },
        "query": [
            "Check if the string formed by joining elements of {x} with {a} is in title case.",
            "Determine if the string created by joining elements of {x} with {a} is in title case.",
            "Verify if the string produced by joining elements of {x} with {a} is in title case."
        ],
        "language": "vec_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::z].swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "Parti d\u00fb so f\u00e0scinu \u00e8 la mancanza di sbiluppu cummirciali vis\u00ecbbili. Strati nichi, treni e varchi cull\u00ecganu li pajisi e li m\u00e0chini nun cci ponnu arrivari di fora.",
            "x": 5,
            "z": 3
        },
        "query": [
            "Swap the case of characters in {a} starting from position {x} and taking every {z}-th character.",
            "Change the case of each character in {a} starting at index {x} and selecting every {z}-th character.",
            "Convert the case of characters in {a} beginning at {x} and picking every {z}-th character."
        ],
        "language": "scn_Latn"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).center(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0d05\u0d24\u0d4d\u0d24\u0d30\u0d02 \u0d35\u0d3f\u0d1c\u0d2f\u0d17\u0d3e\u0d25\u0d15\u0d7e \u0d2e\u0d3e\u0d31\u0d4d\u0d31\u0d24\u0d4d\u0d24\u0d3f\u0d28\u0d41\u0d33\u0d4d\u0d33 \u0d2d\u0d2f\u0d02 \u0d15\u0d41\u0d31\u0d2f\u0d4d\u0d15\u0d4d\u0d15\u0d41\u0d15\u0d2f\u0d41\u0d02 \u0d2d\u0d3e\u0d35\u0d3f\u0d2f\u0d3f\u0d7d \u0d2e\u0d3e\u0d31\u0d4d\u0d31\u0d24\u0d4d\u0d24\u0d3f\u0d28\u0d4d \u0d05\u0d28\u0d41\u0d15\u0d42\u0d32\u0d2e\u0d3e\u0d2f \u0d2a\u0d4d\u0d30\u0d35\u0d23\u0d24 \u0d09\u0d23\u0d4d\u0d1f\u0d3e\u0d15\u0d4d\u0d15\u0d41\u0d15\u0d2f\u0d41\u0d02 \u0d1a\u0d46\u0d2f\u0d4d\u0d24\u0d41.",
            "x": "\u0d05",
            "y": 100,
            "z": "\u0d2e"
        },
        "query": [
            "Strip characters in {x} from the start of {a} and then center it within a string of length {y}, padded with {z}.",
            "Remove characters in {x} from the beginning of {a} and then center the result in a string of length {y}, using {z} as padding.",
            "Trim characters in {x} from the start of {a} and then center it in a string of length {y}, filled with {z}."
        ],
        "language": "mal_Mlym"
    },
    {
        "solution": "```python\nanswer = a.rjust(x, y).islower()\nprint(answer)\n```",
        "variables": {
            "a": "Heng thiamna zingah hian, midangte thiltum kan hriatthiam hi a pawimawh. Hei hian mihring chetziaa hriatthiam har lai te min hriatthiamtir thin.",
            "x": 150,
            "y": " "
        },
        "query": [
            "Right justify {a} within {x} characters, padding with {y}, and check if the result is in lowercase.",
            "Pad {a} to the right with {y} until it is {x} characters long, then verify if it is all lowercase.",
            "Ensure {a} is right-justified to {x} characters using {y} as padding, and determine if the final string is in lowercase."
        ],
        "language": "lus_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].join(z)\nprint(answer)\n```",
        "variables": {
            "a": "NBA\ub294 \uc720\ud0c0 \uc7ac\uc988 \uc120\uc218\uac00 COVID-19 \ubc14\uc774\ub7ec\uc2a4 \uc591\uc131 \ubc18\uc751\uc744 \ubcf4\uc778 \ud6c4 \uc774\ub7f0 \uacb0\uc815\uc744 \ub0b4\ub838\uc2b5\ub2c8\ub2e4.",
            "x": 5,
            "y": 10,
            "z": [
                "\uccab \ubc88\uc9f8",
                "\ub450 \ubc88\uc9f8",
                "\uc138 \ubc88\uc9f8"
            ]
        },
        "query": [
            "Insert the substring from {x} to {y} in {a} between each element of the iterable {z} and concatenate the results into a single string.",
            "Take the substring of {a} from index {x} to {y} and use it to join the elements of {z}, then concatenate them into one string.",
            "Extract the substring from {a} starting at index {x} and ending at index {y}, and place it between each item in the iterable {z}, then combine everything into a single string."
        ],
        "language": "kor_Hang"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Sayohat haqida yozish bilan shug'ullanishni boshlashning eng oson usuli \u2014 biror mashhur sayohat blogi veb-saytida o'z ko'nikmalaringizni charxlashdir.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Split {a} by {x} and check if the {y}-th segment contains only ASCII characters.",
            "Divide {a} using {x} and verify if the {y}-th part consists solely of ASCII characters.",
            "Separate {a} with {x} and determine if the {y}-th section has only ASCII characters."
        ],
        "language": "uzn_Latn"
    },
    {
        "solution": "```python\nanswer = a[:x].upper().endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "But the Royal Navy was still much stronger than the German Navy (\u201cKriegsmarine\u201d) and could have destroyed any invasion fleet sent across the English Channel.",
            "x": 10,
            "y": "ROYAL"
        },
        "query": [
            "Convert the first {x} characters of {a} to uppercase and check if it ends with {y}.",
            "Transform the initial {x} characters of {a} to uppercase and verify if it concludes with {y}.",
            "Change the first {x} characters of {a} to uppercase and determine if it finishes with {y}."
        ],
        "language": "eng_Latn"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).replace(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "\u1014\u101a\u103a\u1005\u1015\u103a\u1016\u103c\u1010\u103a\u1000\u103b\u1031\u102c\u103a\u1002\u102d\u1010\u103a\u1021\u1001\u103b\u102d\u102f\u1037\u1010\u103d\u1004\u103a \u101b\u1011\u102c\u1038 \u1005\u1005\u103a\u1006\u1031\u1038\u1019\u103e\u102f\u1019\u103b\u102c\u1038\u1000\u102d\u102f \u1019\u1031\u102c\u1004\u103a\u1038\u1014\u103e\u1004\u103a\u1014\u1031\u101b\u1004\u103a\u1038\u1015\u1004\u103a \u1005\u1005\u103a\u1006\u1031\u1038\u101e\u1031\u102c\u1000\u103c\u1031\u102c\u1004\u103a\u1038 \u101a\u1004\u103a\u1038\u101b\u1011\u102c\u1038\u1019\u103b\u102c\u1038 \u1005\u102e\u1038\u1014\u1004\u103a\u1038\u1014\u1031\u1001\u103b\u102d\u1014\u103a\u1010\u103d\u1004\u103a \u1005\u102e\u1038\u1014\u1004\u103a\u1038\u1001\u103d\u1004\u1037\u103a\u1000\u1010\u103a\u1000\u102d\u102f \u101e\u1004\u1037\u103a ID \u1014\u103e\u1004\u1037\u103a\u1021\u1010\u1030 \u1000\u102d\u102f\u1004\u103a\u1011\u102c\u1038\u101b\u1019\u100a\u103a\u104b",
            "x": 100,
            "y": " ",
            "z": "\u1005\u1005\u103a\u1006\u1031\u1038",
            "w": "\u1005\u1019\u103a\u1038\u101e\u1015\u103a"
        },
        "query": [
            "Left-align {a} in a string of {x} characters padded with {y}, then replace {z} with {w}.",
            "Align {a} to the left in a string of length {x} using {y} as padding, and then substitute {z} with {w}.",
            "Pad {a} to the left in a string of {x} characters with {y}, and then change {z} to {w}."
        ],
        "language": "mya_Mymr"
    },
    {
        "solution": "```python\nanswer = a.join(x).upper().split(y)\nprint(answer)\n```",
        "variables": {
            "a": "-",
            "x": [
                "Pureland",
                "origami",
                "tek",
                "seferde",
                "yaln\u0131zca",
                "bir",
                "katlaman\u0131n",
                "yap\u0131labilece\u011fi",
                "ters",
                "katlamalar",
                "gibi",
                "daha",
                "karma\u015f\u0131k",
                "katlamalara",
                "izin",
                "verilmeyen",
                "ve",
                "t\u00fcm",
                "katlamalar\u0131n",
                "d\u00fcz",
                "y\u00f6nlere",
                "sahip",
                "olmas\u0131",
                "gibi",
                "k\u0131s\u0131tlamalar\u0131",
                "olan",
                "bir",
                "origami",
                "t\u00fcr\u00fcd\u00fcr"
            ],
            "y": " "
        },
        "query": [
            "Join the items in {x} with {a}, convert the result to uppercase, and then split by {y}.",
            "Combine the elements in {x} using {a}, change the combined string to uppercase, and then divide it by {y}.",
            "Merge the elements in {x} with {a}, transform the merged string to uppercase, and then separate it by {y}."
        ],
        "language": "tur_Latn"
    },
    {
        "solution": "```python\nanswer = a.rsplit(x, y)[z].islower()\nprint(answer)\n```",
        "variables": {
            "a": "Wok konstraken i wok long kamap long faivpela nupela 'skyscraper' long dispela hap, wantaim 'transportation center' na 'memorial park' long namel.",
            "x": " ",
            "y": 5,
            "z": 2
        },
        "query": [
            "Check if the {z+1}-th segment of {a} split by {x} from the right, with at most {y} splits, is in lowercase.",
            "Determine if the {z+1}-th part of {a}, obtained by splitting from the right using {x} up to {y} times, is in lowercase.",
            "Verify if the {z+1}-th section of {a}, when split from the right by {x} with a maximum of {y} splits, is in lowercase."
        ],
        "language": "tpi_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::z].upper()\nprint(answer)\n```",
        "variables": {
            "a": "Christopher Garcia, ein talsmann for politidepartementet i Los Angeles, sa den mistenkte mannlege forbrytaren vert etterforska for \u00e5 ferdas p\u00e5 ulovleg eigedom, heller enn vandalisme.",
            "x": 10,
            "z": 3
        },
        "query": [
            "Convert to uppercase the substring of {a} starting from position {x} with step {z}.",
            "Transform to uppercase the slice of {a} beginning at {x} with interval {z}.",
            "Change to uppercase the segment of {a} starting at index {x} with a step of {z}."
        ],
        "language": "nno_Latn"
    },
    {
        "solution": "```python\nanswer = a.find(x) != -1 and a.isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u041b\u0435\u0442\u0430\u043c \u043d\u0430 \u0447\u0430\u0442\u044b\u0440\u043e\u0445 \u0434\u0437\u0435\u0441\u044f\u0442\u043a\u0430\u0445 \u0431\u0430\u0437, \u0433\u0430\u043b\u043e\u045e\u043d\u044b\u043c \u0447\u044b\u043d\u0430\u043c \u0443 \u0432\u044b\u0437\u043d\u0430\u0447\u0430\u043d\u044b\u0445 \u0440\u0430\u0451\u043d\u0430\u0445, \u0442\u0443\u0442 \u043f\u0440\u0430\u0436\u044b\u0432\u0430\u044e\u0446\u044c \u043d\u0435\u043a\u0430\u043b\u044c\u043a\u0456 \u0442\u044b\u0441\u044f\u0447 \u0441\u0443\u043f\u0440\u0430\u0446\u043e\u045e\u043d\u0456\u043a\u0430\u045e; \u0443 \u0437\u0456\u043c\u043e\u0432\u044b \u0441\u0435\u0437\u043e\u043d \u0437\u0430\u0441\u0442\u0430\u0435\u0446\u0446\u0430 \u0442\u043e\u043b\u044c\u043a\u0456 \u043d\u0435\u0432\u044f\u043b\u0456\u043a\u0430\u044f \u0456\u0445 \u043a\u043e\u043b\u044c\u043a\u0430\u0441\u0446\u044c.",
            "x": "\u0447\u0430\u0442\u044b\u0440\u043e\u0445"
        },
        "query": [
            "Check if {x} is found in {a} and if {a} is a valid identifier.",
            "Determine if {x} exists within {a} and if {a} is a valid Python identifier.",
            "Verify whether {x} is present in {a} and if {a} qualifies as a valid identifier."
        ],
        "language": "bel_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.split(x, y)[0].islower()\nprint(answer)\n```",
        "variables": {
            "a": "Ka dib intuu u guuray caasimadda Catalan, Vidal ayaa kooxda u ciyaaray 49 ciyaar.",
            "x": " ",
            "y": 2
        },
        "query": [
            "Check if the first segment of {a} split by {x} up to {y} times is entirely lowercase.",
            "Determine if the initial part of {a} after splitting by {x} up to {y} times is in lowercase.",
            "Verify if the first portion of {a} obtained by splitting with {x} up to {y} times is all in lowercase."
        ],
        "language": "som_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::z].isupper()\nprint(answer)\n```",
        "variables": {
            "a": "Stardust stellt en neie Weltrekord fir d\u00e9i s\u00e9ierst Raumsond, d\u00e9i op d'\u00c4erd zer\u00e9ckk\u00e9iert op, andeem se de viregte Rekord vum Mee 1969 w\u00e4rend dem Retour vum Apollo-X-Kommandomodul br\u00e9cht.",
            "x": 10,
            "z": 5
        },
        "query": [
            "Are all characters from the {x+1}-th character to the end of {a}, taking every {z}-th character, in uppercase?",
            "Is every {z}-th character from the {x+1}-th position to the end of {a} in uppercase?",
            "From the {x+1}-th character to the end of {a}, taking every {z}-th character, are all characters uppercase?"
        ],
        "language": "ltz_Latn"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Ovo pismo mora legalizovati ekvadorsko Ministarstvo vanjskih poslova i uskladiti s odre\u0111enim zahtjevima.",
            "x": 100,
            "y": "-"
        },
        "query": [
            "Is the string {a}, left-aligned in a field of {x} characters with {y} as the fill character, in title case?",
            "Does the string {a}, when left-aligned in a field of {x} characters using {y} as the fill character, appear in title case?",
            "When the string {a} is left-aligned in a field of {x} characters with {y} as the fill character, is it in title case?"
        ],
        "language": "bos_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode(x).isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "11:29 \u0b85\u0bb3\u0bb5\u0bbf\u0bb2\u0bcd \u0b85\u0ba8\u0bcd\u0ba4 \u0baa\u0bcb\u0bb0\u0bbe\u0b9f\u0bcd\u0b9f\u0bae\u0bcd, \u0b92\u0baf\u0bbf\u0b9f\u0bcd\u0bb9\u0bbe\u0bb2\u0bbf\u0bb2\u0bbf\u0bb0\u0bc1\u0ba8\u0bcd\u0ba4\u0bc1 \u0b9f\u0bcd\u0bb0\u0b83\u0baa\u0bbe\u0bb2\u0bcd\u0b95\u0bb0\u0bcd \u0b9a\u0ba4\u0bc1\u0b95\u0bcd\u0b95\u0ba4\u0bcd\u0ba4\u0bc8\u0ba4\u0bcd \u0ba4\u0bbe\u0ba3\u0bcd\u0b9f\u0bbf, \u0bb8\u0bcd\u0b9f\u0bcd\u0bb0\u0bbe\u0ba9\u0bcd\u0b9f\u0bcd, \u0b86\u0bb2\u0bcd\u0b9f\u0bcd\u0bb5\u0bbf\u0b9a\u0bcd, \u0b95\u0bbf\u0b99\u0bcd\u0bb8\u0bcd \u0bb5\u0bc7 \u0bb5\u0bb4\u0bbf\u0baf\u0bbe\u0b95 \u0bb9\u0bbe\u0bb2\u0bcd\u0baa\u0bbe\u0bb0\u0bcd\u0ba9\u0bcd \u0ba8\u0bcb\u0b95\u0bcd\u0b95\u0bbf\u0b9a\u0bcd \u0b9a\u0bc6\u0ba9\u0bcd\u0bb1\u0ba4\u0bc1. \u0b85\u0b99\u0bcd\u0b95\u0bc7 \u0b95\u0bbf\u0bb0\u0bbe\u0ba3\u0bcd\u0b9f\u0bcd \u0b95\u0ba9\u0bcd\u0ba9\u0bbe\u0b9f\u0bcd \u0bb0\u0bc2\u0bae\u0bcd\u0bb8\u0bcd \u0b93\u0b9f\u0bcd\u0b9f\u0bb2\u0bbf\u0bb2\u0bcd \u0b95\u0ba9\u0bcd\u0b9a\u0bb0\u0bcd\u0bb5\u0bc7\u0b9f\u0bcd\u0b9f\u0bbf\u0bb5\u0bcd \u0b95\u0b9f\u0bcd\u0b9a\u0bbf\u0baf\u0bbf\u0ba9\u0bb0\u0bcd \u0b85\u0bb5\u0bb0\u0bcd\u0b95\u0bb3\u0ba4\u0bc1 \u0bb5\u0b9a\u0ba8\u0bcd\u0ba4 \u0b95\u0bbe\u0bb2 \u0bae\u0bbe\u0ba8\u0bbe\u0b9f\u0bcd\u0b9f\u0bc8 \u0ba8\u0b9f\u0ba4\u0bcd\u0ba4\u0bbf\u0b95\u0bcd \u0b95\u0bca\u0ba3\u0bcd\u0b9f\u0bbf\u0bb0\u0bc1\u0ba8\u0bcd\u0ba4\u0ba9\u0bb0\u0bcd.",
            "x": "utf-8"
        },
        "query": [
            "Is the string {a}, encoded and then decoded with {x} encoding, fully printable?",
            "Can the string {a} be encoded and decoded with {x} encoding and remain fully printable?",
            "Will the string {a} still be fully printable after being encoded and decoded using {x} encoding?"
        ],
        "language": "tam_Taml"
    },
    {
        "solution": "```python\nanswer = a[x:y].replace(z, w).isdecimal()\nprint(answer)\n```",
        "variables": {
            "a": "\u041a\u043e\u0433\u0434\u0430 \u0433\u0435\u043d\u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440 \u043a\u043e\u043c\u043f\u0430\u043d\u0438\u0438 Apple \u0421\u0442\u0438\u0432 \u0414\u0436\u043e\u0431\u0441 \u043f\u0440\u0435\u0437\u0435\u043d\u0442\u043e\u0432\u0430\u043b iPhone, \u043e\u043d \u0432\u044b\u0448\u0435\u043b \u043d\u0430 \u0441\u0446\u0435\u043d\u0443 \u0438 \u0432\u044b\u043d\u0443\u043b \u0435\u0433\u043e \u0438\u0437 \u043a\u0430\u0440\u043c\u0430\u043d\u0430 \u0434\u0436\u0438\u043d\u0441\u043e\u0432.",
            "x": 0,
            "y": 10,
            "z": "\u0433",
            "w": "5"
        },
        "query": [
            "Is the substring from {x} to {y} in {a}, with {z} replaced by {w}, composed entirely of decimal digits?",
            "After replacing {z} with {w} in the substring from {x} to {y} in {a}, is the result composed only of decimal digits?",
            "Does the substring from {x} to {y} in {a}, after replacing {z} with {w}, consist solely of decimal digits?"
        ],
        "language": "rus_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x:y].upper().isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "Jard\u00edn de la Uni\u00f3n. Este lugar se construy\u00f3 como atrio para un convento del siglo XVII, del cual solo se conserva el edificio del Templo de San Diego.",
            "x": 10,
            "y": 20
        },
        "query": [
            "Are all characters in the uppercase version of the substring of {a} from {x} to {y} numeric?",
            "Is the uppercase substring of {a} from index {x} to {y} entirely numeric?",
            "Does the substring of {a} from {x} to {y}, when converted to uppercase, consist solely of numeric characters?"
        ],
        "language": "spa_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).rfind(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u092b\u0947\u0917\u094d\u0930\u093e \u092e\u0941\u0935\u093e\u0916\u094c \u0917\u093e\u0935\u0928\u093f \u0938\u093f\u092e\u093e\u0928\u093f \u0938\u093e\u092f\u093e\u0935 \u0932\u094b\u0902\u0928\u093e\u0902\u0917\u094c\u0964 \u091c\u094c\u0935\u093e \u092c\u092f\u0916\u094c\u092c\u094b \u0917\u0941\u092c\u0941\u0928 \u0917\u0941\u092c\u0941\u0928 \u0930\u094b\u0916\u094b\u092e\u0948 \u0917\u094b\u0939\u094b\u092e \u0916\u094b\u0916\u094d\u0932\u0948\u092f\u094b \u0906\u0930\u094b \u0917\u093e\u0935\u0928\u093f \u0938\u093f\u092e\u093e\u0916\u094c \u092e\u094b\u0928\u094d\u0925\u093f\u0928\u093e\u092f\u093e \u0917\u094b\u0928\u093e\u0902\u0925\u093e\u0930\u0964",
            "x": "\u092b\u0947\u0917\u094d\u0930\u093e",
            "y": "\u0917\u093e\u0935\u0928\u093f"
        },
        "query": [
            "After stripping {x} from both ends of {a}, what is the index of the last occurrence of {y}?",
            "What is the index of the last occurrence of {y} after removing {x} from both ends of {a}?",
            "Find the index of the last occurrence of {y} in {a} after stripping {x} from both ends."
        ],
        "language": "brx_Deva"
    },
    {
        "solution": "```python\nanswer = a[x:y:z].isascii()\nprint(answer)\n```",
        "variables": {
            "a": "katuangeun Hangi dipasak dinu liang anu panas dinu taneuh",
            "x": 0,
            "y": 10,
            "z": 1
        },
        "query": [
            "Check if the substring of {a} from {x} to {y} with a step of {z} contains only ASCII characters.",
            "Verify if the slice of {a} starting at index {x}, ending at index {y}, and stepping by {z} is composed solely of ASCII characters.",
            "Determine if the portion of {a} from index {x} to {y} with a step size of {z} consists exclusively of ASCII characters."
        ],
        "language": "sun_Latn"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).rfind(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u041c\u0438\u0441\u0442\u0438\u0446\u0438\u0437\u043c\u043e\u0442\t\u0441\u0435\t\u0440\u0430\u0437\u043b\u0438\u043a\u0443\u0432\u0430\t\u043e\u0434\t\u0434\u0440\u0443\u0433\u0438\u0442\u0435\t\u0444\u043e\u0440\u043c\u0438\t\u043d\u0430\t\u0440\u0435\u043b\u0438\u0433\u0438\u043e\u0437\u043d\u043e\t\u0432\u0435\u0440\u0443\u0432\u0430\u045a\u0435\t\u0438\t\u043d\u0430\u043a\u043b\u043e\u043d\u0435\u0442\u043e\u0441\u0442\t\u043f\u043e\t\u043d\u0435\u0433\u043e\u0432\u043e\u0442\u043e\t\u0438\u0441\u0442\u0430\u043a\u043d\u0443\u0432\u0430\u045a\u0435\t\u043d\u0430\t\u0434\u0438\u0440\u0435\u043a\u0442\u043d\u043e\u0442\u043e\t\u043b\u0438\u0447\u043d\u043e\t\u0438\u0441\u043a\u0443\u0441\u0442\u0432\u043e\t\u043d\u0430\t\u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u0430\u0442\u0430\t\u0441\u043e\u0441\u0442\u043e\u0458\u0431\u0430\t\u043d\u0430\t\u0441\u0432\u0435\u0441\u0442,\t\u043e\u0441\u043e\u0431\u0435\u043d\u043e\t\u043e\u043d\u0430\u0430\t\u043d\u0430\t\u0441\u043c\u0438\u0440\u0435\u043d,\t\u043f\u0440\u043e\u043d\u0438\u043a\u043b\u0438\u0432,\t\u043d\u0435\u0438\u0437\u043c\u0435\u0440\u043d\u043e\t\u0441\u0440\u0435\u045c\u0435\u043d,\t\u043f\u0430\t\u0434\u0443\u0440\u0438\t\u0438\t\u0437\u0430\u043d\u0435\u0441\u0435\u043d\t\u043a\u0430\u0440\u0430\u043a\u0442\u0435\u0440.",
            "x": 4,
            "y": "\u043d\u0430"
        },
        "query": [
            "Expand tabs in {a} to {x} spaces and find the last occurrence of {y}.",
            "Convert tabs in {a} to {x} spaces and locate the final instance of {y}.",
            "Replace tabs in {a} with {x} spaces and identify the last position of {y}."
        ],
        "language": "mkd_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.split(x, y)[::-1]\nprint(answer)\n```",
        "variables": {
            "a": "\u0d07\u0d28\u0d4d\u0d28\u0d4d \u0d2b\u0d4b\u0d23\u0d3f\u0d28\u0d46 \u0d06\u0d2a\u0d4d\u0d2a\u0d3f\u0d7e \u0d05\u0d1f\u0d3f\u0d2e\u0d41\u0d1f\u0d3f \u0d2e\u0d3e\u0d31\u0d4d\u0d31\u0d41\u0d15\u0d2f\u0d3e\u0d23\u0d4d, \u0d07\u0d28\u0d4d\u0d28\u0d4d \u0d1e\u0d19\u0d4d\u0d19\u0d7e \u0d1a\u0d30\u0d3f\u0d24\u0d4d\u0d30\u0d02 \u0d38\u0d43\u0d37\u0d4d\u0d1f\u0d3f\u0d15\u0d4d\u0d15\u0d3e\u0d7b \u0d2a\u0d4b\u0d15\u0d41\u0d28\u0d4d\u0d28\u0d41",
            "x": " ",
            "y": 2
        },
        "query": [
            "Split {a} at {x} into a list of substrings with at most {y} splits, then reverse the list.",
            "Divide {a} by {x} into a maximum of {y} parts, then reverse the resulting list.",
            "Break {a} at {x} up to {y} times, then reverse the order of the substrings."
        ],
        "language": "mal_Mlym"
    },
    {
        "solution": "```python\nanswer = a[:y].isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u0915\u0949\u092e\u0947\u0902 \u0939\u0940\u091a \u092a\u093e\u0932\u0938\u0940 \u091b\u0941 \u092e\u0902\u0938\u0942\u092c\u093e \u092c\u0902\u0926 \u0935\u0932\u0926\u093f\u0928\u0940\u092f\u0924 \u0928 \u0905\u0939\u0932 \u0915\u0930\u093e\u0930 \u0926\u0940\u0935\u093e\u0928 \u0915\u0940\u092f\u095b\u0915\u0940 \u092e\u0902\u0938\u0942\u092c\u0939 \u092c\u0902\u0926\u0940 \u0935\u091c\u0940\u0928 \u0935\u0932\u0926\u093f\u0928\u0940\u092f\u0924 \u091b\u0941 \u092a\u093e\u0928\u0942\u0928 \u092a\u0941\u0928\u0938\u0940 \u0916\u0930\u091a \u0915\u0930\u093e\u0928 \u0924\u093f \u091b\u0941 \u0930\u093f\u092a\u094b\u0930\u094d\u091f \u0915\u093e\u0930\u093e\u0902 \u092f\u0942\u0938 \u095b\u0928 \u0928\u0941\u092e\u0947\u0928\u0926\u093e\u0939 \u0915\u094d\u0932\u0940\u095e \u0938\u094d\u091f\u0947\u0930\u0928\u095b (Cliff Stearns) \u0915\u093e\u0930\u093e\u0902 \u091b\u0941\u0964",
            "y": 10
        },
        "query": [
            "Check if the first {y} characters of {a} are alphanumeric.",
            "Verify if the initial {y} characters of {a} consist of alphanumeric characters.",
            "Determine if the first {y} characters in {a} are alphanumeric."
        ],
        "language": "kas_Deva"
    },
    {
        "solution": "```python\nanswer = a[x:y].isdecimal()\nprint(answer)\n```",
        "variables": {
            "a": "\u17a2\u17d2\u1793\u1780\u1794\u17d2\u179a\u17a0\u17c2\u179b\u1787\u17b6\u1793\u17b9\u1784\u17a2\u17b6\u1785\u179a\u1780\u1783\u17be\u1789\u200b\u1797\u17c1\u179f\u1787\u17d2\u1787\u17c8\u200b\u178a\u17cf\u200b\u179f\u17b6\u1798\u1789\u17d2\u1789\u200b\u178e\u17b6\u1798\u17bd\u1799\u1799\u1780\u1798\u1780\u1792\u17d2\u179c\u17be\u1787\u17b6\u17a2\u17b6\u17a0\u17b6\u179a\u1796\u17c1\u179b\u1796\u17d2\u179a\u17b9\u1780\u1794\u17b6\u1793 \u1793\u17c5\u1796\u17c1\u179b\u178a\u17c2\u179b\u17a2\u17d2\u1793\u1780\u1794\u17d2\u178f\u17bc\u179a\u1798\u1780\u1791\u1798\u17d2\u179b\u17b6\u1794\u17cb\u1785\u17b6\u179f\u17cb\u1794\u17d2\u179a\u1785\u17b6\u17c6\u1790\u17d2\u1784\u17c3\u179a\u1794\u179f\u17cb\u17a2\u17d2\u1793\u1780\u179c\u17b7\u1789\u17d4",
            "x": 10,
            "y": 20
        },
        "query": [
            "Check if the substring from {x} to {y} in {a} consists only of decimal digits.",
            "Determine if the substring from index {x} to {y} in {a} contains only decimal numbers.",
            "Verify if the portion of {a} from {x} to {y} is made up entirely of decimal digits."
        ],
        "language": "khm_Khmr"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode(x).istitle()\nprint(answer)\n```",
        "variables": {
            "a": "I det minste trenger du fott\u00f8y med passende s\u00e5ler. Sommersko er vanligvis veldig glatte p\u00e5 is og sn\u00f8, selv noen vinterst\u00f8vler er mangelfulle.",
            "x": "utf-8"
        },
        "query": [
            "After encoding {a} with {x} and decoding it back, is it in title case?",
            "Is the string {a} in title case after being encoded and decoded with {x}?",
            "When {a} is encoded using {x} and then decoded, does it remain in title case?"
        ],
        "language": "nob_Latn"
    },
    {
        "solution": "```python\nanswer = a[:y].lower()\nprint(answer)\n```",
        "variables": {
            "a": "Galai yu gawn ai zinghkri ngu ai gaw buga na bu hkawm ni shanhte sa chyai ai shara ni hpe lapran na matut mahkai ya ai uhpung uhpawng langai re.",
            "y": 20
        },
        "query": [
            "Change the segment of {a} from the start to just before {y} to lowercase.",
            "Convert the substring of {a} from the beginning up to {y} to lowercase.",
            "Make the part of {a} from the start until {y} lowercase."
        ],
        "language": "kac_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x, y)[z].capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "Whistler (komwe ndikoyenda maola 1.5 kuchokera ku Vancouver), ndikodula zinthu koma ndi kodziwika chifukwa chamasewelo a 2010 Winter Olympic.",
            "x": " ",
            "y": 5,
            "z": 3
        },
        "query": [
            "Split {a} at {x} up to {y} times, then capitalize the {z}-th segment.",
            "Divide {a} by {x} up to {y} occurrences, then capitalize the {z}-th part.",
            "Break {a} at {x} up to {y} times, then capitalize the {z}-th section."
        ],
        "language": "nya_Latn"
    },
    {
        "solution": "```python\nanswer = a.title().replace(x, y).isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "O timmini jangirde mako ha makaranta College Of Arts &amp; Sciences je University Virginia ha dubi 1950 bo o latti mardo vallinde ha madarasa mai.",
            "x": "&amp;",
            "y": "and"
        },
        "query": [
            "After converting {a} to title case and replacing {x} with {y}, does it consist solely of letters?",
            "Does {a} contain only letters after being converted to title case and having {x} replaced with {y}?",
            "If {a} is converted to title case and {x} is replaced with {y}, will it be composed entirely of alphabetic characters?"
        ],
        "language": "fuv_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].upper().startswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "Mafi yawan abubuwan da aka binne Tutankhamun da su basu rube ko lalace ba, ciki har da dubban kayan kawa wadanda aka samar daga duwatsu masu daraja da wadansu duwatsu da babu irinsu.",
            "x": " ",
            "y": 5,
            "z": "TUTANKHAMUN"
        },
        "query": [
            "Split {a} by {x}, take the {y}-th element, convert it to uppercase, and check if it starts with {z}.",
            "Divide {a} using {x} as the delimiter, select the {y}-th part, change it to uppercase, and verify if it begins with {z}.",
            "Break {a} at each {x}, pick the {y}-th segment, turn it to uppercase, and see if it starts with {z}."
        ],
        "language": "hau_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::y].isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "2004\ub144 \uc62c\ub9bc\ud53d \uc740\uba54\ub2ec\ub9ac\uc2a4\ud2b8\uc778 \uc544\ubbf8\ub974 \uce78\uc740 \uc774\ub807\uac8c \ub9d0\ud588\ub2e4, \"\uc2ec\uc0ac\uc219\uace0\ud574\uc11c \uc5ec\uc131\ub4e4\uc740 \uc2f8\uc6cc\uc11c\ub294 \uc548\ub41c\ub2e4\uace0 \uc0dd\uac01\ud569\ub2c8\ub2e4. \uadf8\ub0e5 \uc81c \uc758\uacac\uc785\ub2c8\ub2e4.\"",
            "x": 0,
            "y": 3
        },
        "query": [
            "Check if every {y}-th character in {a} starting from position {x} is alphanumeric.",
            "Verify if each {y}-th character in {a} beginning from {x} is alphanumeric.",
            "Determine if every {y}-th character in {a} from position {x} is alphanumeric."
        ],
        "language": "kor_Hang"
    },
    {
        "solution": "```python\nanswer = a[x:y].upper().isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "Tha l\u00e0n-mara ruadh air adhbharachadh le dl\u00f9thachd nas \u00e0irde na tha \u00e0bhaisteach de Karenia brevis, f\u00e0s-bheairt aon-cheallach na mara a tha a\u2019 tachairt gu n\u00e0darra.",
            "x": 10,
            "y": 20
        },
        "query": [
            "Extract the substring of {a} from {x} to {y}, convert it to uppercase, and check if it is printable.",
            "Get the substring from {a} between indices {x} and {y}, change it to uppercase, and verify if it is printable.",
            "Take the substring of {a} from index {x} to {y}, transform it to uppercase, and determine if it is printable."
        ],
        "language": "gla_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).capitalize().isascii()\nprint(answer)\n```",
        "variables": {
            "a": "A i passejer a g\u2019\u00e9 staita daita dol aiva intant qe i speciaven ind un cold de 90 gradi(F).",
            "x": "A"
        },
        "query": [
            "Strip characters in {x} from both ends of {a}, capitalize it, and check if it contains only ASCII characters.",
            "Remove characters in {x} from the start and end of {a}, capitalize the result, and verify if it is ASCII only.",
            "Trim characters in {x} from both sides of {a}, convert to capitalized form, and determine if it is purely ASCII."
        ],
        "language": "lmo_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "\u0648\u0645\u0639\u0631\u0641\u0627\u062a\u0634 \u0627\u0644\u0633\u0644\u0637\u0627\u062a \u0633\u0645\u064a\u062a\u0648 \u062d\u062a\u0649 \u062f\u0627\u0628\u0627\u060c \u0628\u0627\u0644\u0631\u063a\u0645 \u0645\u0646 \u0623\u0646\u0647\u0645 \u0643\u064a\u0639\u0631\u0641\u0648 \u0623\u0646\u0647 \u0645\u0646 \u0645\u062c\u0645\u0648\u0639\u0629 \u0627\u0644\u0625\u064a\u063a\u0648\u0631 \u0627\u0644\u0639\u0631\u0642\u064a\u0629."
        },
        "query": [
            "Encode {a} to UTF-8 and then decode it back to a string.",
            "Convert {a} to UTF-8 bytes and then back to a string.",
            "Transform {a} to UTF-8 encoding and then revert it to a string."
        ],
        "language": "ary_Arab"
    },
    {
        "solution": "```python\nanswer = a.split(x)[0].isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u4e2d\u570b\u7684\u5317\u4eac\u5e02\u5c07\u4e3b\u8fa6 2022 \u5e74\u7684\u51ac\u5b63\u5967\u6797\u5339\u514b\u904b\u52d5\u6703\uff0c\u9019\u5c07\u4f7f\u5317\u4eac\u6210\u70ba\u7b2c\u4e00\u5ea7\u4e3b\u8fa6\u904e\u590f\u5b63\u8207\u51ac\u5b63\u5967\u904b\u7684\u57ce\u5e02\u3002",
            "x": " "
        },
        "query": [
            "Split {a} by {x} and check if the first segment is a valid identifier.",
            "Divide {a} using {x} and verify if the initial part is a valid identifier.",
            "Separate {a} at {x} and determine if the first portion is a valid identifier."
        ],
        "language": "cmn_Hant"
    },
    {
        "solution": "```python\nanswer = a.rsplit(x, y)[-1].isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u041d\u0430 \u0446\u044c\u043e\u043c\u0443 \u043c\u0456\u0441\u0446\u0456 \u0431\u0443\u0434\u0443\u044e\u0442\u044c \u043f\u2019\u044f\u0442\u044c \u043d\u043e\u0432\u0438\u0445 \u0445\u043c\u0430\u0440\u043e\u0447\u043e\u0441\u0456\u0432 \u0456\u0437 \u0442\u0440\u0430\u043d\u0441\u043f\u043e\u0440\u0442\u043d\u0438\u043c \u0446\u0435\u043d\u0442\u0440\u043e\u043c \u0456 \u043c\u0435\u043c\u043e\u0440\u0456\u0430\u043b\u044c\u043d\u0438\u043c \u043f\u0430\u0440\u043a\u043e\u043c \u043f\u043e\u0441\u0435\u0440\u0435\u0434\u0438\u043d\u0456.",
            "x": " ",
            "y": 3
        },
        "query": [
            "Check if the last segment after splitting {a} by {x} at most {y} times is numeric.",
            "Determine if the final part after splitting {a} by {x} up to {y} times is a number.",
            "Verify if the last portion after splitting {a} by {x} no more than {y} times is numeric."
        ],
        "language": "ukr_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).splitlines()\nprint(answer)\n```",
        "variables": {
            "a": "\u041a\u043b\u0430\u043f\u0430\u043d\u0441\u0435\u043c \u0443\u04ab\u0103\u043b\u043d\u0438\u043f\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u04d1\u0440\u0438 \u043f\u0443\u0441\u04d1\u043c \u0447\u0430\u043a\u043d\u04d1\u0440\u0430\u043d \u043d\u0435\u0444\u0442\u044c \u043f\u043b\u043e\u0449\u0430\u0434\u043a\u0103\u0440\u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0443\u0430\u0440\u0430 \u044e\u0445\u0441\u0430 \u0442\u0443\u0445\u043d\u04d1, \u0432\u0103\u043b \u0432\u0430\u0440\u0430 55 000 \u0431\u0430\u0440\u0440\u0435\u043b\u044c (2,3 \u043c\u0438\u043b\u043b\u0438\u043e\u043d \u0433\u0430\u043b\u043b\u043e\u043d) \u0448\u0103\u043d\u0103\u00e7\u0442\u0430\u0440\u043c\u0430 \u043f\u0443\u043b\u0442\u0430\u0440\u0430\u0442\u044c.",
            "x": 4
        },
        "query": [
            "Replace tabs in {a} with {x} spaces and then split the string into lines.",
            "Convert tabs in {a} to {x} spaces and break the string into lines.",
            "Substitute tabs in {a} with {x} spaces and divide the string into lines."
        ],
        "language": "chv_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x:y].title().istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Roofmieren bewegen zich in de nomadische fase 's nachts voort en ze stoppen overdag om te rusten.",
            "x": 0,
            "y": 10
        },
        "query": [
            "Does the substring of {a} from {x} to {y} follow title case rules after converting to title case?",
            "Is the substring of {a} from index {x} to {y} in title case after applying the title() method?",
            "After converting the substring of {a} from {x} to {y} to title case, does it adhere to title case rules?"
        ],
        "language": "nld_Latn"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).startswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0938\u093f\u0902\u0926\u094d\u0927\u093e\u0902\u0924\u093e \u092a\u094d\u0930\u092e\u093e\u0923 \u0924\u093e\u0902\u091a\u0947 \u0906\u092f\u093e\u091c\u0928 \u0935\u0930\u094d\u0938\u0941\u0915\u0940 \u0915\u0930\u0942\u0902 \u092f\u0947\u0924\u093e (\u091c\u094b \u092e\u0947\u0930\u0947\u0928 \u0924\u0947\u0902 \u0935\u0947\u0917\u0935\u0947\u0917\u0933\u094d\u092f\u093e \u0926\u0947\u0936\u093e\u0902\u0928\u0940 \u0906\u0938\u0924\u093e) \u0924\u0930\u0940 \u0932\u0947\u0917\u0940\u0924 \u0924\u0936\u0947\u0902 \u0935\u0947\u0935\u094d\u0939\u093e\u0930\u093e\u0902\u0924 \u0918\u0921\u0928\u093e.",
            "x": 100,
            "y": " ",
            "z": "\u0938\u093f\u0902\u0926\u094d\u0927\u093e\u0902\u0924\u093e"
        },
        "query": [
            "Center {a} with width {x} using {y} and check if it starts with {z}.",
            "Align {a} to the center with a total width of {x} using {y} and verify if it begins with {z}.",
            "Pad {a} to a width of {x} with {y} and determine if it starts with {z}."
        ],
        "language": "gom_Deva"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='ignore').decode(x).endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0625\u0630\u0627 \u0623\u0631\u062f\u062a \u0627\u0644\u0645\u0632\u064a\u062f \u0645\u0646 \u0627\u0644\u0645\u063a\u0627\u0645\u0631\u0629\u060c \u0641\u0627\u063a\u062a\u0646\u0645 \u0627\u0644\u0641\u0631\u0635\u0629 \u0644\u062a\u062d\u0636\u064a\u0631 \u0623\u0648 \u0645\u0632\u062c \u0628\u0639\u0636 \u0627\u0644\u0633\u0645\u0648\u0630\u064a:",
            "x": "utf-8",
            "y": "\u0627\u0644\u0633\u0645\u0648\u0630\u064a:"
        },
        "query": [
            "Encode {a} with {x}, ignore errors, decode it back, and check if it ends with {y}.",
            "Convert {a} to bytes using {x} encoding, ignore any errors, convert it back to string, and verify if it ends with {y}.",
            "Using {x} encoding, encode {a} while ignoring errors, decode it back, and determine if it ends with {y}."
        ],
        "language": "arb_Arab"
    },
    {
        "solution": "```python\nanswer = a[:x].islower() and a[x:].isupper()\nprint(answer)\n```",
        "variables": {
            "a": "Ny toerana fanamarinana mpifindramonina no matetika ijanonana voalohany rehefa hiala fiaramanidina, sambo, na fitaterana hafa.",
            "x": 10
        },
        "query": [
            "Check if the first {x} characters of {a} are lowercase and the rest are uppercase.",
            "Verify if the initial {x} characters of {a} are in lowercase and the remaining characters are in uppercase.",
            "Determine if the first {x} characters of {a} are lowercase while the rest are uppercase."
        ],
        "language": "plt_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode(x).swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "Sos Sikh li narant a sa religione issoro gurmat, chi in punjabi est \u201csa bia de su guru\u201d. Su guru est un\u2019aspetu fundamentale de totu cantas sas religiones indianas ma in su Sikhismu at logradu un\u2019importu chi est su coro de sas cred\u00e8ntzias de sos Sikh.",
            "x": "srd_Latn"
        },
        "query": [
            "Swap the case of {a} after encoding and decoding it with {x}.",
            "Encode and decode {a} using {x}, then swap its case.",
            "Using {x} encoding, encode and decode {a}, and then change its case."
        ],
        "language": "srd_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::y].isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Glasovanje mora ratificirati \u0161e celotni Mednarodni olimpijski komite na svojem oktobrskem sre\u010danju v Kopenhagnu.",
            "x": 10,
            "y": 3
        },
        "query": [
            "Verify if the substring of {a} from {x} to the end, every {y} characters, contains only ASCII characters.",
            "Check if the substring of {a} starting at index {x} and taking every {y}th character is composed solely of ASCII characters.",
            "Determine if the substring of {a} from index {x} to the end, taking every {y} characters, consists only of ASCII characters."
        ],
        "language": "slv_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='ignore').decode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "\u06a9\u0647 \u0628\u0647 \u062f\u0646\u0628\u0627\u0644 \u0622\u0646 \u0627\u0631\u06a9\u0633\u062a\u0631 \u0633\u06cc\u0645\u0641\u0648\u0646\u06cc \u0627\u06cc\u0627\u0644\u062a \u0627\u0633\u062a\u0627\u0646\u0628\u0648\u0644\u060c \u06cc\u06a9 \u06af\u0631\u0648\u0647 \u0645\u0648\u0633\u06cc\u0642\u06cc \u062c\u0627\u0646\u06cc\u0633\u0627\u0631\u06cc\u060c \u0648 \u062e\u0648\u0627\u0646\u0646\u062f\u06af\u0627\u0646 \u0641\u062a\u06cc\u062d \u0627\u06cc\u0631\u06a9\u0648\u0686 \u0648 \u0645\u0648\u0633\u0644\u0648\u0645 \u06af\u0648\u0631\u0633\u06cc\u0633 \u0627\u062c\u0631\u0627\u0621 \u0646\u0645\u0648\u062f\u0646\u062f.",
            "x": "prs_Arab"
        },
        "query": [
            "Encode the string {a} using {x} encoding, ignoring unencodable characters, and then decode it back to UTF-8.",
            "Convert the string {a} to {x} encoding, skip characters that can't be encoded, and then convert it back to UTF-8.",
            "Transform the string {a} with {x} encoding, omit any characters that can't be encoded, and decode it back to UTF-8."
        ],
        "language": "prs_Arab"
    },
    {
        "solution": "```python\nanswer = a.join(x).upper()\nprint(answer)\n```",
        "variables": {
            "a": " ",
            "x": [
                "Na",
                "egyina",
                "German",
                "akyer\u025bwde",
                "no",
                "so",
                "na",
                "w\u0254de",
                "akyer\u025bwde",
                "biako",
                "\"\u00d5/\u00f5\"",
                "kaa",
                "ho."
            ]
        },
        "query": [
            "Join the elements of {x} with {a} and convert the result to uppercase.",
            "Combine the items in {x} using {a} and change the result to uppercase.",
            "Merge the elements in {x} with {a} and transform the output to uppercase."
        ],
        "language": "twi_Latn_akua1239"
    },
    {
        "solution": "```python\nanswer = x in a.strip(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u09a4\u09be\u09a6\u09c7\u09b0 \u09ae\u09be\u09b0\u09be\u09a4\u09cd\u09ae\u0995 \u09a7\u09a8\u09c1\u0995\u0997\u09c1\u09b2\u09bf \u09a5\u09c7\u0995\u09c7 \u09a4\u09c0\u09b0\u0997\u09c1\u09b2\u09cb \u09aa\u09cd\u09b0\u09a4\u09bf\u09a6\u09cd\u09ac\u09a8\u09cd\u09a6\u09cd\u09ac\u09c0 \u09b8\u09c8\u09a8\u09cd\u09af\u09a6\u09c7\u09b0 \u09ac\u09b0\u09cd\u09ae \u09ad\u09c7\u09a6 \u0995\u09b0\u09c7 \u09aa\u09cd\u09b0\u09ac\u09c7\u09b6 \u0995\u09b0\u09a4\u09c7 \u09aa\u09be\u09b0\u09a4\u09cb\u0964 \u09aa\u09cd\u09b0\u09be\u09af\u09bc \u09e7\u09e6\u09e6\u09e6 \u0996\u09cd\u09b0\u09bf\u09b8\u09cd\u099f\u09aa\u09c2\u09b0\u09cd\u09ac\u09c7, \u0986\u09b6\u09c7\u09b0\u09bf\u09af\u09bc\u09be\u09a8\u09b0\u09be \u09aa\u09cd\u09b0\u09a5\u09ae \u0985\u09b6\u09cd\u09ac\u09be\u09b0\u09cb\u09b9\u09c0 \u09ac\u09be\u09b9\u09bf\u09a8\u09c0 \u099a\u09be\u09b2\u09c1 \u0995\u09b0\u09c7\u099b\u09bf\u09b2\u0964",
            "x": "\u09aa\u09cd\u09b0\u09a5\u09ae",
            "y": "\u0964"
        },
        "query": [
            "Check if {x} is in {a} after stripping characters {y} from both ends.",
            "Determine if {x} exists in {a} once characters {y} are stripped from both sides.",
            "Verify if {x} is present in {a} after removing characters {y} from the start and end."
        ],
        "language": "ben_Beng"
    },
    {
        "solution": "```python\nanswer = a[x::y].capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "1957 blev Luxemburg en grundande medlem av den organisation som idag \u00e4r k\u00e4nd som Europeiska Unionen.",
            "x": 5,
            "y": 3
        },
        "query": [
            "Extract every {y}-th character from {a} starting at index {x}, then capitalize the result.",
            "From {a}, take every {y}-th character beginning at index {x} and capitalize the extracted string.",
            "Starting at position {x} in {a}, select every {y}-th character and capitalize the resulting string."
        ],
        "language": "swe_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].lower().endswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "Muuhasa kukasumuka hanakutenga chimbula cha kututa kaponda \u201cmakanya asasu\u201d, chako muchihasanhikukukokela milonga inji.",
            "x": 10,
            "y": 30,
            "z": "sumuka"
        },
        "query": [
            "Determine if the substring of {a} from {x} to {y}, converted to lowercase, ends with {z}.",
            "Check if the lowercase version of the substring of {a} from index {x} to {y} ends with {z}.",
            "Is the substring of {a} from {x} to {y} in lowercase ending with {z}?"
        ],
        "language": "cjk_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::].title().count(y)\nprint(answer)\n```",
        "variables": {
            "a": "Ar wah\u00e2n i draethau tywod gwyn a thirweddau mynyddig, mae'r wlad yn gartref i ddinas hynaf Ewrop yng ngwledydd America, sydd bellach yn rhan o Santo Domingo.",
            "x": 10,
            "y": "Yn"
        },
        "query": [
            "Count how many times {y} appears in the title-cased substring of {a} starting from position {x}.",
            "Determine the number of occurrences of {y} in the title-cased substring of {a} beginning at index {x}.",
            "Find the frequency of {y} in the title-cased portion of {a} starting from position {x}."
        ],
        "language": "cym_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y:z].upper().isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "Toe die huurders begin deel het wat met hulle gebeur het, het meeste van die betrokke families skielik besef dat Carolyn Wilson van die OHA hul sekuriteitsdeposito\u2019s gesteel het, en toe op vlug geslaan het.",
            "x": 10,
            "y": 50,
            "z": 2
        },
        "query": [
            "Verify if the uppercased substring of {a} from {x} to {y} with a step of {z} contains only printable characters.",
            "Check if the substring of {a} sliced from {x} to {y} with a step of {z}, when converted to uppercase, consists solely of printable characters.",
            "Determine if the uppercase version of the substring of {a} from index {x} to {y} with a step of {z} is entirely made up of printable characters."
        ],
        "language": "afr_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].expandtabs(z).isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Ci\tyakk\u0259n\tindi\tam\tVenezuelabedo\tcidaramsod\u0259n\tcidazayinma\tsod\u0259,\tsaan\tfal\tkuru\tcida\tk\u0259nuwumid\u0259\taarigaljalan.",
            "x": 3,
            "y": 50,
            "z": 4
        },
        "query": [
            "Ensure that the substring of {a} from {x} to {y} with tabs expanded to {z} spaces consists solely of ASCII characters.",
            "Verify that the portion of {a} between {x} and {y} with tabs replaced by {z} spaces contains only ASCII characters.",
            "Check if the segment of {a} from index {x} to {y} with tabs expanded to {z} spaces is made up entirely of ASCII characters."
        ],
        "language": "knc_Latn"
    },
    {
        "solution": "```python\nanswer = a.join(x).encode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "\u060c ",
            "x": [
                "\u0644\u0627",
                "\u062a\u0624\u062f\u064a",
                "\u0627\u0644\u0645\u0645\u0627\u0631\u0633\u0627\u062a",
                "\u0627\u0644\u063a\u0630\u0627\u0626\u064a\u0629",
                "\u0627\u0644\u0633\u0644\u064a\u0645\u0629",
                "\u0648\u062d\u062f\u0647\u0627",
                "\u0625\u0644\u0649",
                "\u0623\u062f\u0627\u0621",
                "\u0645\u0645\u062a\u0627\u0632",
                "\u0648\u0644\u0643\u0646\u0647\u0627",
                "\u0642\u062f",
                "\u062a\u0624\u062b\u0631",
                "\u0628\u0634\u0643\u0644",
                "\u0643\u0628\u064a\u0631",
                "\u0639\u0644\u0649",
                "\u0635\u062d\u0629",
                "\u0627\u0644\u0631\u064a\u0627\u0636\u064a\u064a\u0646",
                "\u0627\u0644\u0634\u0628\u0627\u0628",
                "\u0628\u0648\u062c\u0647",
                "\u0639\u0627\u0645"
            ]
        },
        "query": [
            "Join the elements of {x} with {a} as the separator and encode the result in UTF-8.",
            "Combine the items in {x} using {a} as the delimiter and convert the output to UTF-8 encoding.",
            "Merge the elements in {x} with {a} as the joining string and encode the final string in UTF-8."
        ],
        "language": "arb_Arab"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].upper().count(z)\nprint(answer)\n```",
        "variables": {
            "a": "Adda atiddog apakasaritaan ti Luxembourg ngem ti independensiana ket idi pay 1839.",
            "x": " ",
            "y": 3,
            "z": "A"
        },
        "query": [
            "Split {a} by {x}, take the {y}-th element, convert it to uppercase, and count the occurrences of {z}.",
            "Divide {a} using {x} as the delimiter, select the {y}-th part, change it to uppercase, and find how many times {z} appears.",
            "Break {a} at each {x}, pick the {y}-th segment, turn it into uppercase, and tally the number of {z}."
        ],
        "language": "ilo_Latn"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).encode('ascii')\nprint(answer)\n```",
        "variables": {
            "a": "\u041d\u0430\u0439\u0431\u043e\u043b\u044c\u0448 \u0432\u0430\u0436\u043d\u044b\u043c \u0437 \u0433\u044d\u0442\u044b\u0445 \u0437\u0434\u043e\u043b\u044c\u043d\u0430\u0441\u0446\u0435\u0439 \u0437'\u044f\u045e\u043b\u044f\u0435\u0446\u0446\u0430 \u0440\u0430\u0437\u0443\u043c\u0435\u043d\u043d\u0435 \u043d\u0430\u043c\u0435\u0440\u0430\u045e \u0456\u043d\u0448\u044b\u0445, \u0431\u043e \u044f\u043d\u043e \u0434\u0430\u0437\u0432\u0430\u043b\u044f\u0435 \u043d\u0430\u043c \u0432\u044b\u043a\u043b\u044e\u0447\u0430\u0446\u044c \u043b\u044e\u0431\u044b\u044f \u043f\u0430\u0442\u044d\u043d\u0446\u044b\u044f\u043b\u044c\u043d\u044b\u044f \u043d\u044f\u044f\u0441\u043d\u0430\u0441\u0446\u0456 \u045e \u0432\u044b\u043f\u0430\u0434\u043a\u0443 \u0444\u0456\u0437\u0456\u0447\u043d\u044b\u0445 \u0434\u0437\u0435\u044f\u043d\u043d\u044f\u045e.",
            "x": 100,
            "y": "*"
        },
        "query": [
            "Center {a} in a field of {x} characters using {y} as the fill character and encode the result in ASCII.",
            "Align {a} in the middle of a {x}-character wide field with {y} as the padding character and convert it to ASCII.",
            "Place {a} in the center of a {x}-character wide space filled with {y} and encode it in ASCII."
        ],
        "language": "bel_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode(x).endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "Robert Hooke \u0e99\u0eb1\u0e81\u0e8a\u0eb5\u0ea7\u0eb0\u0ea7\u0eb4\u0e97\u0eb0\u0e8d\u0eb2\u0e88\u0eb2\u0e81\u0e9b\u0eb0\u0ec0\u0e97\u0e94\u0ead\u0eb1\u0e87\u0e81\u0eb4\u0e94 \u0ec4\u0e94\u0ec9\u0ec0\u0eab\u0eb1\u0e99\u0eaa\u0eb4\u0ec8\u0e87\u0e97\u0eb5\u0ec8\u0ec0\u0e9b\u0eb1\u0e99\u0eaa\u0eb5\u0ec8\u0eab\u0ea5\u0ec8\u0ebd\u0ea1\u0e99\u0ec9\u0ead\u0e8d\u0ec6\u0ea2\u0eb9\u0ec8\u0ec3\u0e99\u0e81\u0eb0\u0e94\u0ead\u0e99\u0e94\u0ec9\u0ea7\u0e8d\u0e81\u0ec9\u0ead\u0e87\u0e88\u0eb8\u0ea5\u0eb0\u0e97\u0eb1\u0e94.",
            "x": "lao_Laoo",
            "y": "\u0e81\u0ec9\u0ead\u0e87\u0e88\u0eb8\u0ea5\u0eb0\u0e97\u0eb1\u0e94."
        },
        "query": [
            "Check if {a} encoded in 'utf-8' and then decoded using {x} ends with {y}.",
            "Verify if the string {a} when encoded in 'utf-8' and decoded with {x} has a suffix {y}.",
            "Determine if {a} after being encoded in 'utf-8' and decoded using {x} ends with the substring {y}."
        ],
        "language": "lao_Laoo"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding='utf-8', errors='replace').decode('utf-8').isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u10e1\u10d0\u10db\u10d8 \u10e3\u10db\u10dc\u10d8\u10e8\u10d5\u10dc\u10d4\u10da\u10dd\u10d5\u10d0\u10dc\u10d4\u10e1\u10d8 \u10e1\u10d0\u10db\u10d4\u10ea\u10dc\u10d8\u10d4\u10e0\u10dd \u10d0\u10de\u10d0\u10e0\u10d0\u10e2\u10d8\u10e1 \u10d2\u10d0\u10e0\u10d3\u10d0, \u10db\u10d7\u10d5\u10d0\u10e0\u10d8\u10e1 \u10d6\u10dd\u10dc\u10d3\u10d8 \u10d0\u10e1\u10d4\u10d5\u10d4 \u10dd\u10e0\u10d8\u10d5\u10d4 \u10db\u10ee\u10e0\u10d8\u10d3\u10d0\u10dc \u10d8\u10e7\u10dd \u10db\u10dd\u10ee\u10d0\u10e2\u10e3\u10da\u10d8 \u10d3\u10d0 \u10d8\u10dc\u10d3\u10dd\u10d4\u10d7\u10d8\u10e1 \u10d4\u10e0\u10dd\u10d5\u10dc\u10e3\u10da\u10d8 \u10d3\u10e0\u10dd\u10e8\u10d8\u10e1 \u10d2\u10d0\u10db\u10dd\u10e1\u10d0\u10ee\u10e3\u10da\u10d4\u10d1\u10d0\u10e1 \u10d0\u10e2\u10d0\u10e0\u10d4\u10d1\u10d3\u10d0."
        },
        "query": [
            "Encode {a} using UTF-8, decode it back, and check if all characters are printable.",
            "Convert {a} to UTF-8, revert it, and verify if every character is printable.",
            "Transform {a} to UTF-8 encoding, decode it, and determine if all characters are printable."
        ],
        "language": "kat_Geor"
    },
    {
        "solution": "```python\nanswer = a[::-1].rfind(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0f60\u0f51\u0f72\u0f66\u0f0b\u0f60\u0f42\u0fb1\u0f74\u0f62\u0f0b\u0f56\u0f0b\u0f42\u0f63\u0f0b\u0f46\u0f7a\u0f53\u0f0b\u0f5e\u0f72\u0f42\u0f0b\u0f42\u0f72\u0f0b\u0f58\u0f44\u0f7c\u0f53\u0f0b\u0f62\u0f9f\u0f42\u0f66\u0f0b\u0f56\u0fb1\u0f66\u0f0b\u0f4f\u0f7a\u0f0b\u0f61\u0f74\u0f0b\u0f62\u0f7c\u0f56\u0f0b\u0f40\u0fb1\u0f72\u0f0b\u0f66\u0f9f\u0f7c\u0f56\u0f66\u0f0b\u0f64\u0f74\u0f42\u0f66\u0f0b\u0f51\u0f42\u0f0b\u0f63\u0f0b\u0f46\u0f7c\u0f66\u0f0b\u0f63\u0f74\u0f42\u0f66\u0f0b\u0f51\u0f58\u0f42\u0f0b\u0f60\u0f41\u0fb2\u0f74\u0f42\u0f0b\u0f42\u0f72\u0f0b\u0f41\u0f42\u0f0b\u0f51\u0f7c\u0f42\u0f66\u0f0b\u0f63\u0f0b\u0f58\u0f7a\u0f51\u0f0b\u0f54\u0f62\u0f0b\u0f46\u0f42\u0f66\u0f0b\u0f54\u0f0b\u0f62\u0f7a\u0f51\u0f0d \u0f51\u0f7a\u0f60\u0f72\u0f0b\u0f55\u0fb1\u0f72\u0f62\u0f0b\u0f63\u0f7c\u0f0b\u0f44\u0f7c\u0f0b\u0f66\u0f74\u0f58\u0f0b\u0f45\u0f74\u0f60\u0f72\u0f0b\u0f62\u0f72\u0f44\u0f0b\u0f42\u0f72\u0f0b\u0f51\u0f58\u0f42\u0f0b\u0f60\u0f41\u0fb2\u0f74\u0f42\u0f0b\u0f51\u0f7a\u0f0b\u0f46\u0f7c\u0f66\u0f0b\u0f63\u0f74\u0f42\u0f66\u0f0b\u0f41\u0f0b\u0f60\u0f41\u0fb1\u0f7a\u0f62\u0f0b\u0f42\u0fb1\u0f72\u0f0b\u0f51\u0f58\u0f42\u0f0b\u0f60\u0f41\u0f74\u0f42\u0f0b\u0f58\u0f50\u0f60\u0f0b\u0f58\u0f0b\u0f51\u0f7a\u0f0b\u0f46\u0f42\u0f66\u0f0b\u0f61\u0f7c\u0f51\u0f0d",
            "x": "\u0f46\u0f7c\u0f66"
        },
        "query": [
            "Find the position of the last occurrence of {x} in the reverse of {a}.",
            "Determine the index of the last occurrence of {x} in the reversed string {a}.",
            "Locate the last position of {x} in the reversed version of {a}."
        ],
        "language": "bod_Tibt"
    },
    {
        "solution": "```python\nanswer = a.encode('ascii', errors='ignore').decode('ascii').islower()\nprint(answer)\n```",
        "variables": {
            "a": "Zayat o be a sa gobala ka gare ga kotsi."
        },
        "query": [
            "Encode {a} to ASCII ignoring errors, decode it back, and check if the result is in lowercase.",
            "Convert {a} to ASCII while ignoring errors, then decode it and verify if it is in lowercase.",
            "Transform {a} to ASCII ignoring any errors, decode it, and determine if the resulting string is in lowercase."
        ],
        "language": "nso_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].upper().rfind(z)\nprint(answer)\n```",
        "variables": {
            "a": "Simi tikrachiqkunam sumaq sumaqta allinyarunku, chaymi ancha allin kaqman tikrachichkanku (kantaqmi tumpa sasa riqsina qillqaykuna), ichaqa suma-sumaqtam qawana, yaqapas pantarunanmanta.",
            "x": 5,
            "y": 50,
            "z": "SUMAQ"
        },
        "query": [
            "Find the last occurrence of {z} in the uppercase version of the substring of {a} from {x} to {y}.",
            "Locate the final position of {z} in the uppercase substring of {a} ranging from {x} to {y}.",
            "Determine the last index of {z} in the uppercase slice of {a} between {x} and {y}."
        ],
        "language": "quy_Latn"
    },
    {
        "solution": "```python\nanswer = a.isidentifier() and x.isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0411\u044b\u043b",
            "x": "\u0438\u043c\u04d9\u043d\u0435\u0441"
        },
        "query": [
            "Check if both {a} and {x} are valid identifiers.",
            "Verify whether both {a} and {x} are valid Python identifiers.",
            "Determine if both {a} and {x} qualify as valid identifiers."
        ],
        "language": "bak_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.join(x).isprintable()\nprint(answer)\n```",
        "variables": {
            "a": " ",
            "x": [
                "\u0913\u0939\u094d\u200c\u200c\u200c\u0926\u0947",
                "\u092a\u0930\u0948\u0902\u0924\u094d\u0924",
                "\u0926\u0947",
                "\u0938\u092c\u0942\u0924",
                "\u0907\u0938",
                "\u092c\u0915\u094d\u0916\u0940",
                "\u0936\u093e\u0930\u093e",
                "\u0915\u0930\u0926\u0947",
                "\u0928",
                "\u091c\u0947",
                "\u0939\u0949\u0932",
                "\u0928\u0947",
                "\u092e\u0924\u0947\u0939\u093e\u0928",
                "\u0926\u0947",
                "\u092a\u094d\u0930\u0936\u094d\u0928\u092a\u0924\u094d\u0930\u0947\u0902",
                "\u0915\u0928\u094d\u0928\u0948",
                "\u091b\u0947\u095c\u091b\u093e\u095c",
                "\u0915\u0940\u0924\u0940",
                "\u0939\u0940",
                "\u0924\u0947",
                "2013",
                "\u091a",
                "\u0913\u0939\u094d\u200c\u0926\u0947",
                "\u0915\u0928\u094d\u0928\u0948",
                "\u0917\u0948",
                "34",
                "\u0939\u094b\u0930\u0928\u0947\u0902",
                "\u0936\u093f\u0915\u094d\u0937\u093e",
                "\u0905\u0927\u093f\u0915\u093e\u0930\u093f\u092f\u0947\u0902",
                "\u092a\u0930",
                "\u090f\u0939\u094d\u200c\u200c\u200c\u0926\u093e",
                "\u0907\u0932\u091c\u093e\u092e",
                "\u0932\u093e\u092f\u093e",
                "\u0917\u0947\u0906",
                "\u0939\u093e\u0964"
            ]
        },
        "query": [
            "Check if the string formed by joining elements of {x} with {a} is printable.",
            "Determine if the string created by joining {x} with {a} is printable.",
            "Verify if the string resulting from joining {x} with {a} is printable."
        ],
        "language": "dgo_Deva"
    },
    {
        "solution": "```python\nanswer = a[x:y].casefold().isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Lativia ku j\u0254lya Slovakia aci l\u0254 lek kek akut ACTA g\u0254\u0254u.",
            "x": 8,
            "y": 13
        },
        "query": [
            "Are all characters in the casefolded substring of {a} from {x} to {y} alphabetic?",
            "Is the casefolded substring of {a} from {x} to {y} entirely alphabetic?",
            "Do all characters in the casefolded substring of {a} from {x} to {y} consist of only alphabetic characters?"
        ],
        "language": "dik_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:].capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "F\u00fcr die, die sich mit dem medizinischen Fachjargon wenig auskennen: Die Begriffe infekti\u00f6s und ansteckend haben unterschiedliche Bedeutungen.",
            "x": 10
        },
        "query": [
            "Get the substring of {a} from index {x} to the end and capitalize it.",
            "Extract the substring from {a} starting at index {x} and convert it to capitalized form.",
            "Take the part of {a} from index {x} onwards and capitalize the first letter."
        ],
        "language": "deu_Latn"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Kugwilitsa ntchito intaneti ndi matsamba a intaneti zimathandiza awo akupanga sukulu kuti azikhala ndimwayi wodziwa zambiri nthawi iliyonse.",
            "x": "."
        },
        "query": [
            "Are all characters in {a} alphabetic after removing trailing {x}?",
            "Is the string {a} composed only of alphabetic characters once the trailing {x} is removed?",
            "After trimming the trailing {x} from {a}, are all the remaining characters alphabetic?"
        ],
        "language": "nya_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:].isupper()\nprint(answer)\n```",
        "variables": {
            "a": "Walay nakitang mga linog sa internasyonal nga mapa sa United States Geological Survey sa Iceland sa miaging semana.",
            "x": 50
        },
        "query": [
            "Are all characters uppercase in the substring of {a} starting from index {x}?",
            "Is the substring of {a} starting at index {x} entirely in uppercase?",
            "From index {x} onwards in {a}, are all the characters uppercase?"
        ],
        "language": "ceb_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u0422\u0438\u0434\u0435 \u0440\u0435\u0437\u043e\u043d\u0430\u043d\u0441\u044b\u0448\u0442\u0435 \u043c\u0430\u0433\u043d\u0438\u0442 \u043f\u0430\u0441\u0443 \u0434\u0435\u043d \u0440\u0430\u0434\u0438\u043e\u0442\u043e\u043b\u043a\u044b\u043d-\u0432\u043b\u0430\u043a \u0430\u0442\u043e\u043c\u044b\u043c \u044d\u043d \u0442\u044b\u0433\u044b\u0434\u0435 \u0440\u0430\u0434\u0438\u043e\u0441\u0438\u0433\u043d\u0430\u043b\u044b\u043c \u043b\u0443\u043a\u0442\u0430\u0448 \u0442\u0430\u0440\u0430\u0442\u0430\u0442."
        },
        "query": [
            "Is {a} composed solely of digits after removing leading and trailing whitespaces?",
            "Does {a} contain only digits once the leading and trailing spaces are removed?",
            "After trimming the spaces from {a}, is it made up entirely of digits?"
        ],
        "language": "mhr_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "O fitafita na fa\u2019amalosia tulaga aga\u2019i i luma e aofia ai le 1 ma le 3 o fitafita tumau e 200 ali\u2019i a New Hampshire, i lalo o le ta\u2019ita\u2019iga a Colonel John Stark ma James Reed (mulimuli ane na avea i la\u2019ua uma ma pule aoao).",
            "x": " ",
            "y": 5
        },
        "query": [
            "Split {a} by {x} and swap the case of the {y+1}-th segment.",
            "Divide {a} using {x} as the delimiter and change the case of the {y+1}-th part.",
            "Break {a} at each {x} and invert the case of the {y+1}-th section."
        ],
        "language": "smo_Latn"
    },
    {
        "solution": "```python\nanswer = a[y:x:-1]\nprint(answer)\n```",
        "variables": {
            "a": "\u0aa4\u0aae\u0ac7 \u0a9c\u0ac7 \u0ab8\u0aae\u0ac1\u0aa6\u0abe\u0aaf\u0aae\u0abe\u0a82 \u0ab0\u0ab9\u0acb \u0a9b\u0acb \u0aa4\u0acd\u0aaf\u0abe\u0a82\u0aa5\u0ac0 \u0ab8\u0acd\u0aa5\u0abe\u0aa8\u0abf\u0a95 \u0aa8\u0a82\u0aac\u0ab0 \u0aae\u0ac7\u0ab3\u0ab5\u0ab5\u0abe\u0aa8\u0ac0 \u0a9c\u0ab0\u0ac2\u0ab0 \u0aa8\u0aa5\u0ac0;  \u0aa4\u0aae\u0ac7 \u0a9a\u0abf\u0a95\u0aa8 \u0aa8\u0abe \u0a9c\u0a82\u0a97\u0ab2\u0acb, \u0a85\u0ab2\u0abe\u0ab8\u0acd\u0a95\u0abe\u0aae\u0abe\u0a82 \u0ab8\u0ac7\u0a9f\u0ac7\u0ab2\u0abe\u0a87\u0a9f \u0a87\u0aa8\u0acd\u0a9f\u0ab0\u0aa8\u0ac7\u0a9f \u0a95\u0aa8\u0ac7\u0a95\u0acd\u0ab6\u0aa8 \u0aae\u0ac7\u0ab3\u0ab5\u0ac0 \u0ab6\u0a95\u0acb \u0a9b\u0acb \u0a85\u0aa8\u0ac7 \u0a8f\u0a95 \u0aa8\u0a82\u0aac\u0ab0 \u0aaa\u0ab8\u0a82\u0aa6 \u0a95\u0ab0\u0ac0 \u0ab6\u0a95\u0acb \u0a9b\u0acb \u0a9c\u0ac7\u0aa8\u0acb \u0aae\u0aa4\u0ab2\u0aac \u0a8f \u0a9b\u0ac7 \u0a95\u0ac7 \u0aa4\u0aae\u0ac7 \u0ab8\u0aa8\u0ac0 \u0a8f\u0ab0\u0abf\u0a9d\u0acb\u0aa8\u0abe\u0aae\u0abe\u0a82 \u0a9b\u0acb.",
            "x": 10,
            "y": 20
        },
        "query": [
            "Extract a substring from {a} starting at index {y} and ending at index {x}, in reverse order.",
            "Get a reversed substring from {a} that starts at index {y} and ends at index {x}.",
            "Retrieve a substring from {a} in reverse, beginning at {y} and stopping at {x}."
        ],
        "language": "guj_Gujr"
    },
    {
        "solution": "```python\nanswer = a.rsplit(x, y)[z]\nprint(answer)\n```",
        "variables": {
            "a": "\u04e8\u043d\u04e9\u04e9\u0434\u0440\u0438\u0439\u043d \u04e8\u0434\u0440\u0438\u0439\u043d \u0442\u043e\u0433\u043b\u043e\u0433\u0447 \u0431\u043e\u043b \u0412\u0430\u0448\u0438\u043d\u0433\u0442\u043e\u043d \u041a\u0430\u043f\u0438\u0442\u0430\u043b\u0441\u044b\u043d \u0410\u043b\u0435\u043a\u0441 \u041e\u0432\u0435\u0447\u043a\u0438\u043d \u044e\u043c.",
            "x": " ",
            "y": 3,
            "z": 1
        },
        "query": [
            "Split {a} by {x} into a list, making up to {y} splits from the right, and retrieve the {z+1}-th segment.",
            "Divide {a} using {x} as the delimiter, performing up to {y} splits from the end, and get the {z+1}-th part.",
            "Separate {a} by {x} up to {y} times from the right side, and access the {z+1}-th element."
        ],
        "language": "khk_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[:y].isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u0644\u0633\u0644\u0637\u0627\u062a \u062d\u0643\u062a \u0634\u0648\u064a \u0631\u0633\u0645\u064a\u0627\u064b \u0623\u0643\u062b\u0631 \u0639\u0646 \u062a\u0623\u0643\u064a\u062f \u0627\u0639\u062a\u0642\u0627\u0644 \u0627\u0644\u064a\u0648\u0645.",
            "y": 5
        },
        "query": [
            "Check if the first {y} characters of {a} are all digits.",
            "Verify if the initial {y} characters of {a} consist solely of digits.",
            "Determine if the first {y} characters in {a} are numeric."
        ],
        "language": "apc_Arab_sout3123"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode(x).isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u104e\u1004\u103a\u1038\u101e\u100a\u103a \u1001\u103b\u1019\u103a\u1038\u101e\u102c\u101e\u1031\u102c \u1014\u102d\u102f\u1004\u103a\u1004\u1036\u1019\u103b\u102c\u1038\u1010\u103d\u1004\u103a \u101b\u1004\u103a\u101e\u102c\u1038\u1000\u1004\u103a\u1006\u102c \u1000\u1032\u1037\u101e\u102d\u102f\u1037 \u101b\u1031\u102c\u1002\u102b\u1016\u103c\u1005\u103a\u104d \u101b\u103e\u1004\u103a\u101e\u1014\u103a\u1014\u103e\u102f\u1014\u103a\u1038\u1021\u1031\u102c\u1000\u103a \u1010\u1005\u103a\u101d\u1000\u103a\u101e\u102c\u101b\u103e\u102d\u101e\u100a\u1037\u103a \u101d\u1004\u103a\u1004\u103d\u1031\u1014\u100a\u103a\u1038\u101e\u1031\u102c \u1014\u102d\u102f\u1004\u103a\u1004\u1036\u1019\u103b\u102c\u1038\u101b\u103e\u102d \u101c\u1030\u1014\u102c\u1019\u103b\u102c\u1038\u1010\u103d\u1004\u103a \u1000\u1004\u103a\u1006\u102c\u104a \u1021\u1006\u102f\u1010\u103a\u101b\u1031\u102c\u1002\u102b\u104a \u1021\u102d\u1010\u103a\u1021\u102d\u102f\u1004\u103a\u1017\u103d\u102e\u1014\u103e\u1004\u1037\u103a \u1004\u103e\u1000\u103a\u1016\u103b\u102c\u1038\u101b\u1031\u102c\u1002\u102b\u1010\u102d\u102f\u1037\u1000\u102d\u102f \u1006\u1031\u102c\u101c\u103b\u1004\u103a\u1005\u103d\u102c \u101e\u102d\u101b\u103e\u102d\u1014\u102d\u102f\u1004\u103a\u1005\u1031\u1019\u100a\u103a\u101f\u102f \u1011\u102d\u1015\u103a\u1010\u1014\u103a\u1038\u101e\u102f\u1010\u1031\u101e\u102e\u1019\u103b\u102c\u1038\u1000 \u1006\u102d\u102f\u1015\u102b\u101e\u100a\u103a\u104b",
            "x": "mya_Mymr"
        },
        "query": [
            "Encode {a} to {x} encoding, decode it back, and check if the result is alphanumeric.",
            "Convert {a} to {x} encoding, revert it, and verify if it is alphanumeric.",
            "Transform {a} using {x} encoding, decode it, and determine if it is alphanumeric."
        ],
        "language": "mya_Mymr"
    },
    {
        "solution": "```python\nanswer = a.swapcase()[x:y:z]\nprint(answer)\n```",
        "variables": {
            "a": "Ga gona lekgotla la difofane leo le akaret\u0161ago ditshelaganyo t\u0161e tharo t\u0161a lewatle ka gare ga seripa sa lefelo la Borwa (gomme SkyTeam ga se akaret\u0161a le ye tee ya ditshelaganyo t\u0161e).",
            "x": 10,
            "y": 50,
            "z": 2
        },
        "query": [
            "What is the section of the swapcased version of {a} from {x} to {y}, taking every {z} characters?",
            "What substring do you get from the swapcased {a} starting at index {x} and ending at index {y}, with a step of {z}?",
            "Extract the portion of the swapcased string {a} from index {x} to {y}, selecting every {z}th character."
        ],
        "language": "nso_Latn"
    },
    {
        "solution": "```python\nanswer = a.lower().split(x)[y].isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "Mae hon, fodd bynnag, yn broblem anodd iawn i'w datrys a bydd yn cymryd llawer o flynyddoedd cyn i ni weld adweithyddion ymasiad defnyddiol yn cael eu codi.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Check if the {y}-th segment of {a} split by {x} and converted to lowercase is a valid identifier.",
            "Determine if the {y}-th part of {a} after splitting by {x} and converting to lowercase is a valid identifier.",
            "Verify if the {y}-th section of {a} split by {x} and turned to lowercase is a valid identifier."
        ],
        "language": "cym_Latn"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).swapcase().find(y)\nprint(answer)\n```",
        "variables": {
            "a": "Planti\ttaim\tol\ti\tsave\tyusim\t'hangi'\tlong\tkukim\twanpela\tkaikai\tbilong\tavinun\tlong\tpaia.",
            "x": 4,
            "y": "SAVE"
        },
        "query": [
            "Locate the position of {y} in {a} after expanding tabs to {x} spaces and swapping case.",
            "Find the index of {y} in {a} after converting tabs to {x} spaces and changing case.",
            "Determine the position of {y} in {a} after replacing tabs with {x} spaces and toggling case."
        ],
        "language": "tpi_Latn"
    },
    {
        "solution": "```python\nanswer = a.center(len(a) + x, y)\nprint(answer)\n```",
        "variables": {
            "a": "\u09a8\u09bf\u09df\u09ae\u09bf\u09a4 \u0995\u09be\u09f0\u09cd\u09af\u09cd\u09af\u0995\u09b2\u09be\u09aa\u09a4 \u0985\u0982\u09b6\u0997\u09cd\u09f0\u09b9\u09a3 \u0995\u09f0\u09be \u09b8\u0995\u09b2\u0995 \u09ac\u09bf\u09b7\u09be\u09a6\u09f0 \u098b\u09a3\u09be\u09a4\u09cd\u09ae\u0995 \u09a7\u09be\u09f0\u09a3\u09be\u09f0 \u09b8\u09a8\u09cd\u09a6\u09f0\u09cd\u09ad\u09a4 \u0985\u09a7\u09bf\u0995 \u09b8\u09ae\u09f0\u09cd\u09a5\u09a8\u09f0 \u09aa\u09cd\u09f0\u09df\u09cb\u099c\u09a8 \u09b9\u09df \u09af\u09bf \u09aa\u09c1\u09f0\u09a3\u09be \u09ac\u09bf\u09b7\u09be\u09a6 \u0986\u09f0\u09c1 \u0985\u09b8\u09cd\u09ac\u09b8\u09cd\u09a4\u09bf\u09f0 \u09aa\u09be\u09f0\u09cd\u09a5\u0995\u09cd\u09af\u09b8\u09ae\u09c2\u09b9\u0995 \u09b8\u09be\u09ae\u09be\u09a8\u09cd\u09af \u09b6\u09be\u09f0\u09c0\u09f0\u09bf\u0995 \u0997\u09a4\u09bf\u09ac\u09bf\u09a7\u09bf\u09f0 \u09aa\u09f0\u09be \u0985\u09a8\u09c1\u09ad\u09f1 \u0995\u09f0\u09c7\u09f7",
            "x": 10,
            "y": " "
        },
        "query": [
            "Center {a} within a new string of length equal to the length of {a} plus {x}, padded with {y}.",
            "Pad {a} with {y} to center it in a string of length {len(a) + x}.",
            "Create a new string of length {len(a) + x} with {a} centered and padded with {y}."
        ],
        "language": "asm_Beng"
    },
    {
        "solution": "```python\nanswer = a.ljust(len(a) + x, y).endswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u91ce\u751f\u52d5\u7269\u651d\u5f71\u901a\u5e38\u7747\u843d\u7c21\u55ae\uff0c\u4f46\u5c31\u597d\u4f3c\u4e00\u822c\u5605\u651d\u5f71\u4e00\u6a23\uff0c\u4e00\u5f35\u76f8\u52dd\u904e\u5343\u8a00\u842c\u8a9e\u3002",
            "x": 5,
            "y": "\u3002",
            "z": "\u842c\u8a9e\u3002"
        },
        "query": [
            "Left-justify {a} within a new string of length equal to the length of {a} plus {x}, padded with {y}, and check if it ends with {z}.",
            "Pad {a} on the right with {y} to make its length {x} characters longer, then verify if the resulting string ends with {z}.",
            "Extend {a} to a length of its current length plus {x} using {y} as padding, and determine if the new string ends with {z}."
        ],
        "language": "yue_Hant"
    },
    {
        "solution": "```python\nanswer = a.split(x, y)[-1].isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u0646\u0686\u0647 \u0645\u062d\u062f\u0648\u062f \u0645\u062c\u0648\u0632 \u067e\u06cc\u0627\u062f\u0647 \u0631\u0648\u06cc \u062f\u0631\u062e\u0648\u0627\u0633\u062a \u0644\u0627\u0631\u0646\u0627 \u0648\u0627\u0631\u062f\u06cc \u06a9\u06cc \u0647\u0631 \u06a9\u06cc\u0645 \u0627\u0648\u0644 \u0644\u0648\u0644\u0627\u0631\u06cc \u0627\u06cc\u0633\u062f\u0633\u0647 \u0627\u0644\u0647 \u06af\u062a\u0631\u0631.",
            "x": " ",
            "y": 3
        },
        "query": [
            "Split {a} by {x} up to {y} times and check if the last segment is alphanumeric.",
            "Divide {a} using {x} as the delimiter up to {y} times and verify if the final part is alphanumeric.",
            "Break {a} by {x} up to {y} times and determine if the last section is alphanumeric."
        ],
        "language": "azb_Arab"
    },
    {
        "solution": "```python\nanswer = a.strip(x).split(y)[z]\nprint(answer)\n```",
        "variables": {
            "a": "\u0b38\u0b3f\u0b28\u0b4d\u0b27\u0b41 \u0b38\u0b2d\u0b4d\u0b5f\u0b24\u0b3e \u0b09\u0b24\u0b4d\u0b24\u0b30\u0b2a\u0b36\u0b4d\u0b1a\u0b3f\u0b2e \u0b2d\u0b3e\u0b30\u0b24\u0b40\u0b5f \u0b09\u0b2a\u0b2e\u0b39\u0b3e\u0b26\u0b47\u0b36\u0b30\u0b47 \u0b06\u0b27\u0b41\u0b28\u0b3f\u0b15 \u0b2a\u0b3e\u0b15\u0b3f\u0b38\u0b4d\u0b25\u0b3e\u0b28\u0b30 \u0b05\u0b27\u0b3f\u0b15\u0b3e\u0b02\u0b36 \u0b05\u0b1e\u0b4d\u0b1a\u0b33 \u0b0f\u0b2c\u0b02 \u0b09\u0b24\u0b4d\u0b24\u0b30\u0b2a\u0b42\u0b30\u0b4d\u0b2c \u0b06\u0b2b\u0b17\u0b3e\u0b28\u0b3f\u0b38\u0b4d\u0b25\u0b3e\u0b28 \u0b13 \u0b09\u0b24\u0b4d\u0b24\u0b30\u0b2a\u0b36\u0b4d\u0b1a\u0b3f\u0b2e \u0b2d\u0b3e\u0b30\u0b24\u0b30 \u0b15\u0b47\u0b24\u0b47\u0b15 \u0b05\u0b1e\u0b4d\u0b1a\u0b33\u0b30\u0b47 \u0b2c\u0b3f\u0b38\u0b4d\u0b24\u0b43\u0b24 \u0b25\u0b3f\u0b2c\u0b3e \u0b2c\u0b4d\u0b30\u0b4b\u0b1e\u0b4d\u0b1c\u0b4d \u0b2f\u0b41\u0b17\u0b30 \u0b0f\u0b15 \u0b38\u0b2d\u0b4d\u0b5f\u0b24\u0b3e \u0b25\u0b3f\u0b32\u0b3e\u0964",
            "x": "\u0b38\u0b3f\u0b28\u0b4d\u0b27\u0b41",
            "y": " ",
            "z": 3
        },
        "query": [
            "Strip characters in {x} from {a}, split by {y}, and return the {z}-th element.",
            "Remove characters in {x} from {a}, split the result by {y}, and get the {z}-th part.",
            "Trim characters in {x} from {a}, divide by {y}, and fetch the {z}-th segment."
        ],
        "language": "ory_Orya"
    },
    {
        "solution": "```python\nanswer = a[x:y].casefold().isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "Ushbu bolalar odatda ko'p muammolarga duch keladi, chunki ular o'zlarining ongini odatiy usullar bilan rag'batlantira olmaganliklari uchun rag'batlantirish maqsadida \"qaltis xatti-harakatlarda ishtirok etishadi, janjallarga kirishishadi va hokimiyatga qarshi chiqishadi\".",
            "x": 10,
            "y": 20
        },
        "query": [
            "Check if the casefolded substring of {a} from {x} to {y} consists only of numeric characters.",
            "Determine if the substring of {a} from {x} to {y}, after applying casefold, contains only numeric characters.",
            "Verify if the casefolded substring from {x} to {y} in {a} is composed solely of numeric characters."
        ],
        "language": "uzn_Latn"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Sos f\u00e8stival de su t\u00e8mpiu de Kerala sunt interessantes meda de b\u00ecdere, cun sa protzessione s\u00f2lita de elefantes decorados, s\u2019orchestra de su t\u00e8mpiu e \u00e0teras festividades.",
            "x": 100,
            "y": "*"
        },
        "query": [
            "Center {a} with a total width of {x} using {y} as the fill character, then check if it is in title case.",
            "Align {a} to the center with a width of {x} using {y} as the padding character, and verify if it is in title case.",
            "Pad {a} to the center with a width of {x} using {y} as the fill character, then determine if it is in title case."
        ],
        "language": "srd_Latn"
    },
    {
        "solution": "```python\nanswer = a.zfill(x).isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u062a\u0648\u06c1\u06c1 \u067e\u0632\u0650 \u0645\u062a\u0672\u062b\u0631 \u0634\u062e\u0635\u0655 \u0633\u0646\u0632 \u067e\u0648\u0632\u06cc\u0634\u0646 \u0648\u0686\u06be\u0646\u06cd \u06cc\u06cc\u0644\u06c1\u0655 \u062a\u0648\u06c1\u06cd \u062a\u06cc\u0645\u0650\u0633 \u0646\u0650\u0634 \u06af\u0698\u06be\u06cc\u0648 \u062a\u06c1\u0655 \u0628\u06cc\u06cc\u06c1\u0655 \u0644\u0672\u06af\u06cc\u0648 \u0627\u0679\u0648\u0645\u06cc\u0679\u0650\u06a9 \u0648\u0632\u0655\u0644 \u062c\u0646\u0688\u0655\u06d4",
            "x": 100
        },
        "query": [
            "Pad {a} with leading zeros to make its length {x} and check if the result is printable.",
            "Add leading zeros to {a} to reach a length of {x} and verify if the outcome is printable.",
            "Ensure {a} has a length of {x} by padding with zeros and determine if it is printable."
        ],
        "language": "kas_Arab"
    },
    {
        "solution": "```python\nanswer = a.swapcase().isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "I whakapono ng\u0101 kainoho ki Lockwood Gardens, e 40 atu an\u014d pea ng\u0101 wh\u0101nau, neke atu r\u0101nei ka panaia pea, mai i t\u0101 r\u0101tou whai m\u014dhio kei te m\u0101tai ng\u0101 pirihimana OHA i \u0113tahi atu whare t\u016bmatanui ki Oakland, \u0101, kua p\u0101ngia hoki pea r\u0101tou ki te tinihanga whare."
        },
        "query": [
            "Check if {a} is a valid identifier after swapping the case of all characters.",
            "Determine if {a} becomes a valid identifier when the case of each character is swapped.",
            "Is {a} a valid identifier after changing the case of all its characters?"
        ],
        "language": "mri_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].swapcase().endswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "Khaya 1960 maranakanx jupax machaq Algeria mark apnaqatayna, ukat pilikulanak apnaqa\u00f1 yatichatayna.",
            "x": 6,
            "y": 20,
            "z": "NAX"
        },
        "query": [
            "Check if the swapped case of the substring of {a} from {x} to {y} ends with {z}.",
            "Determine if the substring of {a} from {x} to {y} with swapped case ends with {z}.",
            "Verify if the substring from {x} to {y} of {a} with swapped case ends with {z}."
        ],
        "language": "ayr_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:].upper().find(y)\nprint(answer)\n```",
        "variables": {
            "a": "Sas rechestas e sos costos de vistu c\u00e0mbiant dae natzione a natzione e dipendent dae su paisu dae ue benis.",
            "x": 10,
            "y": "COSTOS"
        },
        "query": [
            "Find the position of {y} in the uppercase version of the substring of {a} starting from position {x}.",
            "Locate the index of {y} in the uppercase transformation of the substring of {a} beginning at {x}.",
            "Determine the position of {y} within the uppercase version of the substring of {a} that starts from position {x}."
        ],
        "language": "srd_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "2009. godine okrunjena je titulom National Superintendent of the Year."
        },
        "query": [
            "Is {a} composed only of alphabetic characters after stripping whitespace?",
            "Does {a} contain only letters after removing any leading or trailing spaces?",
            "After trimming whitespace, is {a} made up solely of alphabetic characters?"
        ],
        "language": "hrv_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('utf-8').rjust(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "\u092a\u094d\u0930\u0925\u092e \u0935\u093f\u0936\u094d\u0935 \u092f\u0941\u0926\u094d\u0927 \u0905\u0909 \u0926\u094d\u0935\u093f\u0924\u0940\u092f \u0935\u093f\u0936\u094d\u0935 \u092f\u0941\u0926\u094d\u0927 \u092e\u0947\u0902 \u092a\u0928\u0921\u0941\u092c\u094d\u092c\u093f\u092e\u0928 \u0915\u0947 \u0909\u092a\u092f\u094b\u0917 \u0915\u0930\u0947 \u0917\u093f\u0928 \u0930\u0939\u093f\u0938\u0964\u092a\u0940\u091b\u0942 \u092b\u0947\u0930 \u0935\u0947 \u092c\u0939\u0941\u0924 \u0927\u0940\u092e\u0947 \u0930\u0939\u093f\u0928 \u0905\u0909 \u092c\u0939\u0941\u0924 \u0938\u0940\u092e\u093f\u0924 \u0936\u0942\u091f\u093f\u0902\u0917 \u0930\u0947\u0902\u091c \u0930\u0939\u093f\u0938\u0964",
            "x": 100,
            "y": " "
        },
        "query": [
            "Right-align {a} in a field of {x} characters, filled with {y}, after encoding and decoding it in 'utf-8'.",
            "After encoding and decoding {a} in 'utf-8', right-align it in a field of {x} characters, padded with {y}.",
            "Encode and decode {a} in 'utf-8', then right-align it in a field of {x} characters, using {y} as the fill character."
        ],
        "language": "hne_Deva"
    },
    {
        "solution": "```python\nanswer = a[:x].islower()\nprint(answer)\n```",
        "variables": {
            "a": "Fa batlhankedi ba goroga ke fa ntlo e thunya.",
            "x": 2
        },
        "query": [
            "Check if the first {x} characters of {a} are all lowercase.",
            "Verify if the initial {x} characters of {a} are in lowercase.",
            "Determine if the first {x} characters in {a} are all in lowercase."
        ],
        "language": "tsn_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:].startswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "\uabd1\uabdc\uabd0\uabe5 \uabc7\uabe4. \uabda\uabe4.\uabd7 \uabc2\uabe5\uabdb\uabc4 \uabc4\uabe5\uabce\uabc3\uabe4 \uabc3\uabe5\uabc0\uabe4\uabc1 \uabc7\uabed\uabd4\uabe4\uabcc\uabe5\uabdf\uabc7\uabe5\uabd0\uabe5\uabcf\uabc2\uabe3\uabc4\uabe7\uabc2\uabe3\uabc1\uabc0\uabe4 \uabc3\uabc3\uabe4\uabe1 \uabc2\uabe9\uabd4\uabd5 \uabc7\uabe6\uabc2\uabe6\uabda\uabe4\uabd6\uabdf \uabca\uabe7\uabd4\uabdd \"\uabd6\uabe7\uabe1\uabc2\uabe5\"\uabd7 \uabc6\uabcc\uabe3\uabdc \uabc8\uabd4\uabd2\uabe4 \uabc3\uabc3\uabe5\uabe1\uabd7 \uabd0\uabe3\uabe1\uabc8\uabe4\uabd5 \uabcf-\uabc4\uabe5\uabce\uabd2\uabe4 \uabc3\uabc7\uabe8\uabe1\uabd7, \uabc4\uabd4\uabc2\uabe4\uabcc\uabe5\uabc3\uabe6\uabdf\uabe0\uabc0\uabe4 \uabc3\uabe4\uabcd\uabe8\uabe0 \uabd1\uabc3\uabc1\uabe8\uabe1 \uabce\uabc0\uabe4\uabdc, \uabc4\uabe6\uabc7\uabed\uabd4\uabe3\uabc1 \uabc3\uabe5\uabdf\uabc7\uabe7\uabda\uabe5\uabc2\uabe3\uabc1\uabc4\uabe8 \uabd1\uabe5\uabcf\uabdf\uabc5 \uabcc\uabe5\uabd7\uabd5 \uabca\uabd5\uabdb \uabd1\uabc3\uabc1\uabe8\uabe1 \uabc1\uabe6\uabdf\uabd6\uabe5-\uabca\uabe8\uabdd\uabd6\uabe5\uabd7 \uabc3\uabcd\uabe5\uabdb\uabc0\uabe4 \uabd1\uabe3\uabd0\uabe4\uabc1\uabc0\uabe4 \uabc3\uabe4\uabcd\uabe8\uabe0\uabc1\uabe4\uabe1 \uabc6\uabe6\uabdf\uabc5\uabd5\uabd2\uabe4\uabd7\uabdd\uabdb\uabc7 \uabca\uabd5\uabdb\uabc7\uabd2\uabe4 \uabc7\uabe3\uabdb\uabc8\uabe4\uabeb",
            "x": 10,
            "y": "\uabc2\uabe5\uabdb\uabc4"
        },
        "query": [
            "Check if the substring of {a} starting from index {x} begins with {y}.",
            "Determine if the portion of {a} from index {x} starts with {y}.",
            "Verify if the segment of {a} beginning at index {x} starts with {y}."
        ],
        "language": "mni_Mtei"
    },
    {
        "solution": "```python\nanswer = a[x:y].title().replace(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "Beidzinge vyks atidarymo bei u\u017edarymo ceremonijos ir renginiai u\u017edarose ledo arenose.",
            "x": 10,
            "y": 30,
            "z": "Atidarymo",
            "w": "Prad\u017eios"
        },
        "query": [
            "Convert the substring of {a} from index {x} to {y} to title case and replace {z} with {w}.",
            "Change the substring of {a} from position {x} to {y} to title case and substitute {z} with {w}.",
            "Transform the substring of {a} between indices {x} and {y} to title case and switch {z} with {w}."
        ],
        "language": "lit_Latn"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).rstrip()\nprint(answer)\n```",
        "variables": {
            "a": "\u0633\u0627\u0646\u0633\u06a9\u0631\u06cc\u062a \u06cc\u0648\u0647 \u0689\u06cc\u0631\u0647 \u0633\u062e\u062a\u0647 \u0627\u0648 \u063a\u0646\u06cc \u0698\u0628\u0647 \u062f\u0647 \u060c \u06a9\u0648\u0645\u064a \u0698\u0628\u06cc \u0686\u06d0 \u062f \u0685\u0648 \u0639\u0635\u0631\u06cc \u0647\u0646\u062f\u064a \u0698\u0628\u0648 \u062f \u0645\u0646\u0628\u0639 \u067e\u0647 \u062a\u0648\u06ab\u0647 \u062e\u062f\u0645\u062a \u06a9\u0693\u064a \u062f\u064a \u0644\u06a9\u0647 \u0685\u0631\u0646\u06ab\u0647 \u0686\u06d0 \u0644\u0627\u062a\u06cc\u0646\u06cc \u0698\u0628\u0647 \u062f \u0627\u0631\u0648\u067e\u0627\u06cc\u06d0 \u0698\u0628\u0648 \u0645\u0646\u0628\u0639 \u062f\u0647 \u060c \u0644\u06a9\u0647 \u0647\u0633\u067e\u0627\u0646\u0648\u064a \u0627\u0648 \u0641\u0631\u0627\u0646\u0633\u0648\u064a",
            "x": 200,
            "y": " "
        },
        "query": [
            "Left-justify {a} in a string of {x} characters using {y} as padding, then remove trailing whitespace.",
            "Align {a} to the left in a string of length {x} with {y} as the padding character, and then strip trailing spaces.",
            "Pad {a} to the left in a string of {x} characters with {y}, and then trim any trailing spaces."
        ],
        "language": "pbt_Arab"
    },
    {
        "solution": "```python\nanswer = a.strip(x).upper().find(y)\nprint(answer)\n```",
        "variables": {
            "a": "Urcalim tes\u025ba a\u1e6das n imukan imazrayen, isenziken akked idelsanen, akked igensawen isenzanen itta\u010da\u1e5ben, leqhawi, akked imukan n wu\u010d\u010di.",
            "x": "Urcalim",
            "y": "IMUKAN"
        },
        "query": [
            "Strip characters in {x} from {a}, convert the result to uppercase, and find the position of {y}.",
            "Remove characters in {x} from {a}, change the result to uppercase, and locate the index of {y}.",
            "Trim characters in {x} from {a}, transform the result to uppercase, and determine the position of {y}."
        ],
        "language": "kab_Latn"
    },
    {
        "solution": "```python\nanswer = a[y:].count(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u092a\u0930\u094d\u0935\u0924 \u0915\u0947 \u0927\u0930\u093e\u0924\u0932 \u0938\u0947 \u0915\u094c\u0928\u094b \u092d\u0940 \u091c\u094d\u0935\u093e\u0932\u093e\u092e\u0941\u0916\u0940 \u0917\u0924\u093f\u0935\u093f\u0927\u093f\u092f\u093e \u0938\u0947 \u0905\u0938\u092e\u094d\u092c\u0902\u0927\u093f\u0924 \u0915\u093e\u0932\u0947 \u092c\u093e\u0926\u0932\u0928 \u0938\u0947 \u0938\u0942\u091a\u0928\u093e \u092e\u093f\u0932\u0940 \u0930\u0939\u0940\u0964",
            "x": "\u0938\u0947",
            "y": 10
        },
        "query": [
            "Count the occurrences of {x} in the substring of {a} starting from index {y}.",
            "Find how many times {x} appears in the substring of {a} beginning at index {y}.",
            "Determine the number of times {x} occurs in the part of {a} starting from index {y}."
        ],
        "language": "awa_Deva"
    },
    {
        "solution": "```python\nanswer = a.rjust(x, y).istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Il-76 eza eteni moko ya ntina mingi ya mampinga ya Russie pe ya Union Sovietique banda na mibu 1970, pe esi esala aksida ya maksi na Russie na sanza eleki.",
            "x": 150,
            "y": " "
        },
        "query": [
            "Right-justify {a} to length {x} with {y} as padding, then check if it is in title case.",
            "Pad {a} on the left with {y} until it reaches length {x}, then determine if it is in title case.",
            "Check if {a} is in title case after right-justifying it to length {x} with {y} as the padding character."
        ],
        "language": "lin_Latn"
    },
    {
        "solution": "```python\nanswer = a.islower() and a.endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "at\u00e2a chili adiko yamba ti lo na ngu 1810 (na popo ti atiringo bira ti napol\u00e9o so a sara si kodoro ti espagne angba na govoroma ti b\u00ea pepe na yati kete angu), benda na ndo ti azo ti espagne a ga gi na ngu 1818.",
            "x": "1818."
        },
        "query": [
            "Check if {a} is all lowercase and ends with {x}.",
            "Verify if {a} is entirely in lowercase and concludes with {x}.",
            "Determine if {a} consists of only lowercase letters and terminates with {x}."
        ],
        "language": "sag_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().split(x)[y]\nprint(answer)\n```",
        "variables": {
            "a": "\u0623\u0639\u0644\u0646 \u0639\u0644\u0645\u0627 \u0645\u0646 \u0643\u0644\u064a\u0629 \u0627\u0644\u0637\u0628 \u0628\u062c\u0627\u0645\u0639\u0629 \u0633\u062a\u0627\u0646\u0641\u0648\u0631\u062f \u064a\u0648\u0645 \u0627\u0644\u062a\u0646\u064a\u0646 \u0639\u0646 \u0627\u062e\u062a\u0631\u0627\u0639 \u0623\u062f\u0627\u0629 \u062a\u0634\u062e\u064a\u0635\u064a\u0629 \u062c\u062f\u064a\u062f\u0629 \u0641\u064a\u0647\u0627 \u062a\u0641\u0631\u0632 \u0627\u0644\u062e\u0644\u0627\u064a\u0627 \u062d\u0633\u0628 \u0627\u0644\u0646\u0648\u0639: \u0634\u0631\u064a\u062d\u0629 \u0632\u063a\u064a\u0631\u0629 \u0642\u0627\u0628\u0644\u0629 \u0644\u0644\u0637\u0628\u0627\u0639\u0629 \u0645\u0645\u0643\u0646 \u062a\u0635\u0646\u064a\u0639\u0647\u0627 \u0628\u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0637\u0627\u0628\u0639\u0627\u062a \u0646\u0645\u0648\u0630\u062c\u064a\u0629 \u0646\u0627\u0641\u062b\u0629 \u0644\u0644\u062d\u0628\u0631 \u0645\u0642\u0627\u0628\u0644 \u0633\u0646\u062a \u0623\u0645\u0631\u064a\u0643\u064a \u0648\u0627\u062d\u062f \u062a\u0642\u0631\u064a\u0628\u0627\u064b \u0644\u0643\u0644 \u0645\u0646\u0647\u0627.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Split {a} by {x} after stripping whitespace and get the {y}-th segment.",
            "Remove whitespace from {a}, split it by {x}, and retrieve the {y}-th part.",
            "Trim spaces from {a}, divide it by {x}, and obtain the {y}-th section."
        ],
        "language": "apc_Arab_nort3139"
    },
    {
        "solution": "```python\nanswer = a[x::y].swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "Marea k\u00f2r\u00e1 ta kous\u00e1 pa un konsentrashon mas haltu ku normal di Karenia brevis, un organismo marino natural di un solo s\u00e9lula.",
            "x": 10,
            "y": 3
        },
        "query": [
            "Get every {y}-th character from {x} to the end of {a} and swap their case.",
            "Extract every {y}-th character starting from index {x} in {a} and change their case.",
            "Select every {y}-th character from position {x} onwards in {a} and invert their case."
        ],
        "language": "pap_Latn"
    },
    {
        "solution": "```python\nanswer = a.title().replace(x, y).find(z)\nprint(answer)\n```",
        "variables": {
            "a": "Saiki kanggo Jepang. Jepang iku negara kapuloan, padha kaya Inggris.",
            "x": "Jepang",
            "y": "Jepun",
            "z": "Negara"
        },
        "query": [
            "Convert {a} to title case, replace {x} with {y}, and find the index of {z}.",
            "Change {a} to title case, substitute {x} with {y}, and locate the position of {z}.",
            "Transform {a} to title case, switch {x} with {y}, and determine the index of {z}."
        ],
        "language": "jav_Latn"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u0f41\u0f7c\u0f0b\u0f5a\u0f7c\u0f0b\u0f46\u0f74\u0f62\u0f0b\u0f60\u0f5b\u0f74\u0f63\u0f0b\u0f51\u0f58\u0f42\u0f0b\u0f42\u0fb2\u0f74\u0f0b\u0f51\u0f44\u0f0b\u0f58\u0f49\u0f58\u0f0b\u0f51\u0f74\u0f0b\u0f63\u0f7a\u0f42\u0f66\u0f0b\u0f60\u0f42\u0fb2\u0f74\u0f56\u0f0b\u0f56\u0fb1\u0f74\u0f44\u0f0b\u0f56\u0f60\u0f72\u0f0b\u0f62\u0f90\u0fb1\u0f7a\u0f53\u0f0b\u0f42\u0fb1\u0f72\u0f66\u0f0b\u0f51\u0f58\u0f42\u0f0b\u0f60\u0f41\u0fb2\u0f74\u0f42\u0f0b\u0f58\u0f47\u0f74\u0f42\u0f0b\u0f60\u0f42\u0fb2\u0f72\u0f63\u0f0b\u0f62\u0f97\u0f7a\u0f66\u0f0b\u0f60\u0f47\u0f62\u0f0b\u0f58\u0f53\u0f0b\u0f42\u0fb1\u0f72\u0f0b\u0f58\u0f72\u0f0b\u0f58\u0f44\u0f0b\u0f54\u0f7c\u0f0b\u0f5e\u0f72\u0f42\u0f0b\u0f63\u0f0b\u0f61\u0f72\u0f51\u0f0b\u0f46\u0f7a\u0f66\u0f0b\u0f58\u0f72\u0f0b\u0f56\u0fb1\u0f7a\u0f51\u0f0d",
            "x": 50,
            "y": " "
        },
        "query": [
            "Is the centered version of {a} within {x} characters using {y} as padding composed entirely of digits?",
            "Does centering {a} to a width of {x} characters with {y} as the padding result in a string of only digits?",
            "When {a} is centered to {x} characters with {y} as padding, is the resulting string made up solely of digits?"
        ],
        "language": "bod_Tibt"
    },
    {
        "solution": "```python\nanswer = a.strip().zfill(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0c88 \u0cb8\u0cbe\u0cae\u0cb0\u0ccd\u0ca5\u0ccd\u0caf\u0c97\u0cb3\u0cb2\u0ccd\u0cb2\u0cbf, \u0c87\u0ca4\u0cb0\u0cb0 \u0c89\u0ca6\u0ccd\u0ca6\u0cc7\u0cb6\u0cb5\u0ca8\u0ccd\u0ca8\u0cc1 \u0c85\u0cb0\u0ccd\u0ca5\u0cae\u0cbe\u0ca1\u0cbf\u0c95\u0cca\u0cb3\u0ccd\u0cb3\u0cc1\u0cb5\u0cc1\u0ca6\u0cc1 \u0cac\u0cb9\u0cb3 \u0cae\u0cc1\u0c96\u0ccd\u0caf. \u0ca6\u0cc8\u0cb9\u0cbf\u0c95 \u0c95\u0ccd\u0cb0\u0cbf\u0caf\u0cc6\u0c97\u0cb3 \u0cb8\u0c82\u0cad\u0cb5\u0ca8\u0cc0\u0caf \u0c85\u0cb8\u0ccd\u0caa\u0cb7\u0ccd\u0c9f\u0ca4\u0cc6\u0c97\u0cb3\u0ca8\u0ccd\u0ca8\u0cc1 \u0cac\u0c97\u0cc6\u0cb9\u0cb0\u0cbf\u0cb8\u0cb2\u0cc1 \u0c87\u0ca6\u0cc1 \u0ca8\u0cae\u0c97\u0cc6 \u0c85\u0cb5\u0c95\u0cbe\u0cb6 \u0cae\u0cbe\u0ca1\u0cbf\u0c95\u0cca\u0ca1\u0cc1\u0ca4\u0ccd\u0ca4\u0ca6\u0cc6.",
            "x": 100
        },
        "query": [
            "Add leading zeros to the stripped version of {a} until it is {x} characters long.",
            "Strip {a} and pad it with leading zeros to make its length {x} characters.",
            "Ensure the stripped version of {a} has a total length of {x} by adding leading zeros."
        ],
        "language": "kan_Knda"
    },
    {
        "solution": "```python\nanswer = a.rsplit(x, y)[z].upper()\nprint(answer)\n```",
        "variables": {
            "a": "Piquet Jr. ya fadi a gasar Grand Prix ta 2008 jim kadan bayan dakatawar wucin-gadi ta wuri da aka yi wa Fernando Alonso, inda ake fito da motar agaji.",
            "x": " ",
            "y": 5,
            "z": 2
        },
        "query": [
            "Split {a} at each {x} with at most {y} splits from the end, then convert the {z}-th segment to uppercase.",
            "Divide {a} by {x} up to {y} times from the right, then change the {z}-th part to uppercase.",
            "Perform a right split on {a} using {x} with a maximum of {y} splits, then make the {z}-th segment uppercase."
        ],
        "language": "hau_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].center(z, y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0b87\u0ba4\u0bc1 \u0b85\u0bae\u0bc6\u0bb0\u0bbf\u0b95\u0bcd\u0b95 \u0b95\u0b9f\u0bb1\u0bcd\u0baa\u0b9f\u0bc8\u0baf\u0bbf\u0ba9\u0bcd \u0b8f\u0bb4\u0bbe\u0bb5\u0ba4\u0bc1 \u0b95\u0b9f\u0bb1\u0bcd\u0baa\u0b9f\u0bc8\u0b95\u0bcd\u0b95\u0bc1 \u0b92\u0ba4\u0bc1\u0b95\u0bcd\u0b95\u0baa\u0bcd\u0baa\u0b9f\u0bcd\u0b9f\u0bc1\u0bb3\u0bcd\u0bb3\u0ba4\u0bc1 \u0bae\u0bb1\u0bcd\u0bb1\u0bc1\u0bae\u0bcd \u0b9c\u0baa\u0bcd\u0baa\u0bbe\u0ba9\u0bbf\u0bb2\u0bcd \u0ba8\u0bbe\u0b95\u0b9a\u0bbe\u0b95\u0bbf\u0baf\u0bbf\u0ba9\u0bcd \u0b9a\u0b9a\u0bc6\u0baa\u0bcb\u0bb5\u0bbf\u0bb2\u0bcd \u0b85\u0bae\u0bc8\u0ba8\u0bcd\u0ba4\u0bc1\u0bb3\u0bcd\u0bb3\u0ba4\u0bc1.",
            "x": 5,
            "y": 15,
            "z": 20
        },
        "query": [
            "Center the substring of {a} from {x} to {y} within a string of length {z}, padded with {y}.",
            "Pad the substring of {a} from index {x} to {y} to center it in a string of length {z} using {y}.",
            "Create a centered string of length {z} from the substring of {a} between {x} and {y}, padded with {y}."
        ],
        "language": "tam_Taml"
    },
    {
        "solution": "```python\nanswer = a.strip().split(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0905\u0916 \u0938\u0947\u0932 \u091b\u0941 \u0905\u0915\u0940\u0938 \u091c\u093e\u0928\u0926\u093e\u0930 (\u091a\u0940\u095b ) \u0915\u093f \u0939\u093e\u092f\u093e\u0924\u0940\u092f\u0924 \u0915\u093f \u0938\u093e\u0930\u0935\u0940 \u0916\u094b\u0924 \u0932\u0915\u091a\u0940 \u0938\u0916\u094d\u0924 \u0924\u093f \u095e\u0905\u0932 \u0905\u0915\u093e\u0908\u0964",
            "x": " ",
            "y": 5
        },
        "query": [
            "Remove leading and trailing spaces from {a} and split it by {x} up to {y} times.",
            "Trim spaces from both ends of {a} and then split it by {x} at most {y} times.",
            "Strip spaces from the start and end of {a} and split it by {x} no more than {y} times."
        ],
        "language": "kas_Deva"
    },
    {
        "solution": "```python\nanswer = a.title().encode('ascii', errors='ignore')\nprint(answer)\n```",
        "variables": {
            "a": "Sofokls un Aristofans joproj\u0101m ir popul\u0101ri dramaturgi, un vi\u0146u lugas tiek uzskat\u012btas par da\u013cu no iev\u0113rojam\u0101kajiem pasaules literat\u016bras darbiem."
        },
        "query": [
            "Convert {a} to title case and encode it in ASCII, ignoring non-encodable characters.",
            "Transform {a} to title case and encode it using ASCII, skipping characters that can't be encoded.",
            "Change {a} to title case and encode it in ASCII format, omitting any characters that are not encodable."
        ],
        "language": "lvs_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('utf-8').isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u0422\u0435\u0440\u0438\u0442\u043e\u0440\u0438\u0458\u0430 \u0422\u0443\u0440\u0441\u043a\u0435 \u0458\u0435 \u0434\u0443\u0436\u0430 \u043e\u0434 1600 \u043a\u0438\u043b\u043e\u043c\u0435\u0442\u0430\u0440\u0430 (1000 \u043c\u0438\u0459\u0430) \u0438 \u0448\u0438\u0440\u0430 \u043e\u0434 800 km (500 mi), \u0438 \u043e\u0442\u043f\u0440\u0438\u043b\u0438\u043a\u0435 \u0458\u0435 \u043f\u0440\u0430\u0432\u043e\u0443\u0433\u0430\u043e\u043d\u043e\u0433 \u043e\u0431\u043b\u0438\u043a\u0430."
        },
        "query": [
            "Encode {a} to UTF-8 and decode it back, then check if the result is numeric.",
            "Convert {a} to UTF-8 and back, then determine if it is numeric.",
            "Check if {a} is numeric after encoding to UTF-8 and decoding."
        ],
        "language": "srp_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.capitalize().rjust(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Visbie\u017e\u0101kais nelaimes gad\u012bjumu c\u0113lonis ziem\u0101 ir slideni ce\u013ci, trotu\u0101ri (ietves) un it \u012bpa\u0161i pak\u0101pieni.",
            "x": 100,
            "y": "-"
        },
        "query": [
            "Capitalize {a} and then right-justify it in a field of {x} characters, using {y} to fill the space.",
            "Make the first letter of {a} uppercase and right-align it in a field of {x} characters, padding with {y}.",
            "Convert the first character of {a} to uppercase and right-justify it in a field of {x} characters, filling the space with {y}."
        ],
        "language": "lvs_Latn"
    },
    {
        "solution": "```python\nanswer = a.capitalize().index(x)\nprint(answer)\n```",
        "variables": {
            "a": "Os principais pesquisadores dizem que isso pode levar ao diagn\u00f3stico precoce de c\u00e2ncer, tuberculose, HIV e mal\u00e1ria em pacientes em pa\u00edses de baixa renda, onde expectativas de sobreviv\u00eancia para doen\u00e7as como o c\u00e2ncer de mama podem chegar \u00e0 metade em compara\u00e7\u00e3o \u00e0s expectativas de sobreviv\u00eancia de pa\u00edses mais ricos.",
            "x": "diagn\u00f3stico"
        },
        "query": [
            "What is the index of {x} in the capitalized version of {a}?",
            "In the capitalized form of {a}, at what position does {x} appear?",
            "Find the index of {x} in the string {a} after capitalizing it."
        ],
        "language": "por_Latn"
    },
    {
        "solution": "```python\nanswer = a[:x].replace(y, z).isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u0938\u0930\u094d\u0926\u093f\u092f\u094b\u0902 \u0915\u0947 \u0926\u094c\u0930\u093e\u0928 \u091a\u0932\u0947 \u0935\u093e\u0932\u093e \u0915\u0941\u091b \u0915\u094d\u0930\u0949\u0938 \u0915\u0902\u091f\u094d\u0930\u0940, \u0936\u0930\u0940\u0930 \u0915\u0947 \u090a\u092a\u0930\u0940 \u0939\u093f\u0938\u094d\u0938\u0947 \u0932\u0917\u0940 \u0935\u094d\u092f\u093e\u092f\u093e\u092e\u0936\u093e\u0932\u093e \u0915\u0947 \u0915\u093e\u092e \u0915\u0947 \u0938\u093e\u0925, \u0926\u094c\u0921\u093c \u0915\u0947 \u092e\u094c\u0938\u092e \u0932\u0917\u0940 \u0938\u092c\u0938\u0947 \u0905\u091a\u094d\u091b\u093e \u0924\u0948\u092f\u093e\u0930\u0940 \u0939\u092f\u0964",
            "x": 20,
            "y": " ",
            "z": ""
        },
        "query": [
            "Take the first {x} characters of {a}, replace {y} with {z}, and check if the result is alphanumeric.",
            "Extract the first {x} characters from {a}, substitute {y} with {z}, and verify if the outcome is alphanumeric.",
            "Get the initial {x} characters of {a}, change {y} to {z}, and determine if the final string is alphanumeric."
        ],
        "language": "mag_Deva"
    },
    {
        "solution": "```python\nanswer = a[x::y].istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Gufotora inyamaswa z\u2019agasozi bikunze guteshwa agaciro, ariko nk\u2019umwuga wo gufotora muri rusange, ifoto ingana n\u2019amagambo igihumbi.",
            "x": 0,
            "y": 5
        },
        "query": [
            "From {x}, take every {y}-th character in {a} and check if the result is in title case.",
            "Starting from index {x}, select every {y}-th character in {a} and determine if the resulting string is in title case.",
            "Check if the string formed by taking every {y}-th character from {x} in {a} is in title case."
        ],
        "language": "kin_Latn"
    },
    {
        "solution": "```python\nanswer = a.rsplit(x, y)[z].isupper()\nprint(answer)\n```",
        "variables": {
            "a": "V tem primeru je treba \u017earnico zamenjati. Pri zamenjavi \u017earnice je potrebna previdnost.",
            "x": " ",
            "y": 3,
            "z": 1
        },
        "query": [
            "Split {a} from the right by {x} up to {y} times and check if the {z}-th segment is uppercase.",
            "From the right, split {a} by {x} up to {y} times and verify if the {z}-th part is in uppercase.",
            "Check if the {z}-th segment is uppercase after splitting {a} from the right by {x} up to {y} times."
        ],
        "language": "slv_Latn"
    },
    {
        "solution": "```python\nanswer = a.join(x).encode('ascii')\nprint(answer)\n```",
        "variables": {
            "a": " ",
            "x": [
                "\u0418\u0435\u0440\u0443\u0441\u0430\u043b\u0438\u043c",
                "\u0445\u043e\u0442",
                "\u0442\u04af\u04af\u0445\u044d\u043d,",
                "\u0430\u0440\u0445\u0435\u043e\u043b\u043e\u0433\u0438\u0439\u043d",
                "\u0431\u043e\u043b\u043e\u043d",
                "\u0441\u043e\u0451\u043b\u044b\u043d",
                "\u043e\u043b\u043e\u043d",
                "\u0433\u0430\u0437\u0430\u0440\u0442\u0430\u0439,",
                "\u043c\u04e9\u043d",
                "\u0434\u0443\u0443",
                "\u0447\u0438\u043c\u044d\u044d,",
                "\u0445\u04af\u043d",
                "\u0438\u0445\u0442\u044d\u0439",
                "\u0434\u044d\u043b\u0433\u04af\u04af\u0440",
                "\u0445\u0443\u0434\u0430\u043b\u0434\u0430\u0430\u043d\u044b",
                "\u0442\u04e9\u0432,",
                "\u043a\u0430\u0444\u0435",
                "\u0431\u043e\u043b\u043e\u043d",
                "\u0440\u0435\u0441\u0442\u043e\u0440\u0430\u043d\u0443\u0443\u0434\u0442\u0430\u0439."
            ]
        },
        "query": [
            "Join the elements of {x} with {a} and encode the result in ASCII.",
            "Concatenate the elements of {x} using {a} as a separator and convert the result to ASCII encoding.",
            "Combine the items in {x} with {a} as the delimiter and encode the combined string in ASCII."
        ],
        "language": "khk_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.title().encode(encoding=x, errors='replace')\nprint(answer)\n```",
        "variables": {
            "a": "Nakagbutang an pag-atake hin daku nga lamat ha mga relasyon ha butnga han India ngan Pakistan.",
            "x": "war_Latn"
        },
        "query": [
            "Capitalize the first letter of each word in {a} and encode it using {x}, replacing unencodable characters with a question mark.",
            "Transform {a} to have each word start with a capital letter, then encode it with {x}, substituting unencodable characters with a question mark.",
            "Make the first letter of each word in {a} uppercase and encode it using {x}, replacing any characters that can't be encoded with a question mark."
        ],
        "language": "war_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "Nodak e magawa gi tim kapok odiochieng' tugo nochopo, manotimre jumapili ekindgi kod Bolonia.",
            "x": "Nodak e magawa gi tim kapok odiochieng' tugo nochopo, manotimre jumapili ekindgi kod Bolonia."
        },
        "query": [
            "What is {a} with {x} stripped from both ends and case swapped?",
            "How does {a} look after removing {x} from both ends and swapping the case?",
            "Show the result of {a} after stripping {x} from both ends and changing the case."
        ],
        "language": "luo_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).upper().startswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "Talu mai lona amataga, ua avea le Onion ma se mal\u014d moni o talafou fa\u2019ata\u2019ita\u2019i, faatasi ai ma se lomiga lolomi, o se \u2018upega tafa\u2019ilagi na aumaia le 5,000,000 o tagata asiasi tulaga \u2018ese i le masina o Oketopa, fa\u2019asalalauga patino, se sootaga o talafou e 24 itula, fa\u2019asalalauga podcast, ma se fa\u2019alauiloaina lata mai o fa\u2019afanua o le lalolagi ua fa\u2019aigoaina Our Dumb World",
            "x": "Talu",
            "y": "MAI"
        },
        "query": [
            "Strip characters in {x} from both ends of {a}, convert to uppercase, and check if it starts with {y}.",
            "Remove characters in {x} from the start and end of {a}, change to uppercase, and verify if it begins with {y}.",
            "Trim characters in {x} from both sides of {a}, transform to uppercase, and determine if it starts with {y}."
        ],
        "language": "smo_Latn"
    },
    {
        "solution": "```python\nanswer = a.find(x) != -1 and a.endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "\"\u041a\u043b\u0435\u0442\u043a\u0430\" \u0441\u04d1\u043c\u0430\u0445 \u043b\u0430\u0442\u0438\u043d \u0441\u0435lla \u0441\u04d1\u043c\u0430\u0445\u04d7\u043d\u0447\u0435\u043d \u043f\u0443\u043b\u043d\u0103, \u043a\u0443 \"\u043f\u04d7\u0447\u04d7\u043a \u043f\u04f3\u043b\u04d7\u043c\" \u0442\u0435\u043d\u0438\u043d\u0435 \u043f\u04d7\u043b\u0442\u0435\u0440\u0435\u0442.",
            "x": "\u0441\u0435lla",
            "y": "\u043f\u04d7\u043b\u0442\u0435\u0440\u0435\u0442."
        },
        "query": [
            "Check if {a} contains {x} and ends with {y}.",
            "Determine if {a} includes {x} and concludes with {y}.",
            "Verify whether {a} has {x} and terminates with {y}."
        ],
        "language": "chv_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.startswith(x) and a.islower()\nprint(answer)\n```",
        "variables": {
            "a": "ti lalaki ket maipagarup a nangiturong ti maysa a tallo ligayna a lugan a naglaon dagiti pagpabettak iti adu a tattao.",
            "x": "ti"
        },
        "query": [
            "Check if {a} starts with {x} and is in lowercase.",
            "Verify if {a} begins with {x} and is all in lowercase.",
            "Determine if {a} starts with {x} and is entirely in lowercase."
        ],
        "language": "ilo_Latn"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).rstrip(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u090f\u0915 \u091c\u0917\u0939 \u0938\u0947 \u0926\u0941\u0938\u0930\u0940 \u091c\u0917\u0939 \u091c\u093e\u092f\u0947 \u0915\u093e \u091a\u0930\u0923 \u092e\u093e, \u0906\u0930\u094d\u092e\u0940 \u091a\u0940\u0902\u091f\u0940 \u0930\u093e\u0924 \u092e\u093e \u091a\u0932\u0924 \u0939\u0948\u0902 \u0905\u090a\u0930 \u0926\u093f\u0928 \u092e\u093e \u0936\u093f\u0935\u093f\u0930 \u0915\u093e \u0932\u093f\u090f \u0930\u0941\u0915 \u091c\u093e\u0924 \u0939\u0948\u0902\u0964",
            "x": 100,
            "y": " "
        },
        "query": [
            "Left justify {a} within {x} characters using {y} as padding, then strip the padding from the right.",
            "Align {a} to the left within a width of {x} characters using {y} as the fill character, and then remove the fill characters from the end.",
            "Pad {a} to the left with {y} up to {x} characters, then remove the padding from the right side."
        ],
        "language": "awa_Deva"
    },
    {
        "solution": "```python\nanswer = a[x:y].replace(z, '').isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0626\u0649\u062c\u0627\u0631\u0649\u06af\u06d5 \u0626\u0627\u0644\u063a\u06c7\u0686\u0649\u0644\u0627\u0631 \u0626\u06c7\u0686\u0631\u0649\u063a\u0627\u0646 \u0643\u06d5\u0686\u0645\u0649\u0634\u0644\u0649\u0631\u0649\u0646\u0649 \u0626\u06c6\u0632\u0626\u0627\u0631\u0627 \u0626\u0648\u0631\u062a\u0627\u0642\u0644\u0627\u0634\u0642\u0627\u0646\u062f\u0627\u060c \u0626\u0627\u0644\u0627\u0642\u0649\u062f\u0627\u0631 \u0626\u0627\u0626\u0649\u0644\u0649\u0644\u06d5\u0631\u0646\u0649\u06ad \u0643\u06c6\u067e\u0649\u0646\u0686\u0649\u0633\u0649 \u062a\u06c7\u064a\u06c7\u0642\u0633\u0649\u0632 OHA \u062f\u0649\u0643\u0649 \u0643\u0627\u0631\u0648\u0644\u0649\u0646 \u06cb\u0649\u0644\u0633\u0648\u0646\u0646\u0649\u06ad \u0632\u0627\u0643\u0627\u0644\u06d5\u062a \u067e\u06c7\u0644\u0646\u0649 \u0626\u0648\u063a\u0631\u0649\u0644\u0627\u067e\u060c \u0634\u06d5\u06be\u06d5\u0631\u062f\u0649\u0646 \u0686\u0649\u0642\u0649\u067e \u0643\u06d5\u062a\u0643\u06d5\u0646\u0644\u0649\u0643\u0649\u0646\u0649 \u0628\u0649\u0644\u062f\u0649.",
            "x": 10,
            "y": 30,
            "z": " "
        },
        "query": [
            "Check if the substring of {a} from {x} to {y} with {z} removed is a valid identifier.",
            "Determine if the substring of {a} from index {x} to {y} with {z} removed forms a valid identifier.",
            "Is the substring of {a} from {x} to {y} with {z} removed a valid Python identifier?"
        ],
        "language": "uig_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:y].count(z) == 1\nprint(answer)\n```",
        "variables": {
            "a": "\u041a\u0430\u043a \u0448\u0442\u0430\u0442, \u0433\u0434\u0435 \"\u043f\u043e\u0431\u0435\u0434\u0438\u0442\u0435\u043b\u044c \u0437\u0430\u0431\u0438\u0440\u0430\u0435\u0442 \u0432\u0441\u0451\", \u0424\u043b\u043e\u0440\u0438\u0434\u0430 \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u043b\u0430 \u0432\u0441\u0435\u0445 \u0441\u0432\u043e\u0438\u0445 \u0434\u0435\u043b\u0435\u0433\u0430\u0442\u043e\u0432 \u0432 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0435 50 \u0447\u0435\u043b\u043e\u0432\u0435\u043a \u0420\u043e\u043c\u043d\u0438, \u0432\u044b\u0434\u0432\u0438\u043d\u0443\u0432 \u0435\u0433\u043e \u0432\u043f\u0435\u0440\u0451\u0434 \u0432 \u043a\u0430\u0447\u0435\u0441\u0442\u0432\u0435 \u043b\u0438\u0434\u0435\u0440\u0430 \u0432 \u0433\u043e\u043d\u043a\u0435 \u0437\u0430 \u043c\u0435\u0441\u0442\u043e \u043a\u0430\u043d\u0434\u0438\u0434\u0430\u0442\u0430 \u043e\u0442 \u0440\u0435\u0441\u043f\u0443\u0431\u043b\u0438\u043a\u0430\u043d\u0441\u043a\u043e\u0439 \u043f\u0430\u0440\u0442\u0438\u0438.",
            "x": 10,
            "y": 50,
            "z": "\u0424\u043b\u043e\u0440\u0438\u0434\u0430"
        },
        "query": [
            "Check if the substring of {a} from {x} to {y} contains exactly one occurrence of {z}.",
            "Verify if there is exactly one {z} in the substring of {a} from index {x} to {y}.",
            "Determine if the substring of {a} between {x} and {y} has exactly one {z}."
        ],
        "language": "rus_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x:y].swapcase().isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "\"Om det blir kommersiellt borde vi ha det. Det finns allts\u00e5 ingen principm\u00e4ssig inv\u00e4ndning mot k\u00e4rnkraft,\" sa Costello.",
            "x": 10,
            "y": 20
        },
        "query": [
            "Verify if the substring of {a} from {x} to {y} with swapped case contains only alphabetic characters.",
            "Check if the substring of {a} between indices {x} and {y} with swapped case consists solely of alphabetic characters.",
            "Determine if the substring of {a} from index {x} to {y} with swapped case is made up entirely of alphabetic characters."
        ],
        "language": "swe_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode(x).replace(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0633\u0637\u062d \u06a9\u0634\u06cc\u062f\u06c1 \u06c1\u0648\u0646\u06d2 \u06a9\u06cc \u0648\u062c\u06c1 \u0633\u06d2 \u0627\u0633\u0679\u06cc\u0644 \u06a9\u06cc \u0633\u0648\u0626\u064a \u067e\u0627\u0646\u06cc \u06a9\u06d2 \u0627\u0648\u067e\u0631 \u062a\u06cc\u0631\u062a\u06cc \u06c1\u06d2\u06d4",
            "x": "utf-8",
            "y": "\u0633\u0648\u0626\u064a",
            "z": "\u0633\u0648\u0626\u06cc"
        },
        "query": [
            "Encode {a} with {x}, replace non-encodable characters with a question mark, decode it back, and replace {y} with {z}.",
            "Convert {a} to {x} encoding, substitute unencodable characters with a question mark, decode it back, and change {y} to {z}.",
            "Transform {a} using {x} encoding, replace characters that can't be encoded with a question mark, decode it back, and swap {y} with {z}."
        ],
        "language": "urd_Arab"
    },
    {
        "solution": "```python\nanswer = a[:y:z].count(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0427\u0435\u0440\u0435\u0437 \u0447\u0435\u0442\u044b\u0440\u0435 \u0433\u043e\u0434\u0430 \u0431\u044b\u043b \u0432\u044b\u0434\u0430\u043d \u043f\u0430\u0442\u0435\u043d\u0442, \u0441\u0442\u0430\u0432\u0448\u0438\u0439 \u043f\u0435\u0440\u0432\u044b\u043c \u0432 \u043c\u0438\u0440\u0435 \u043f\u0430\u0442\u0435\u043d\u0442\u043e\u043c \u0432 \u043e\u0431\u043b\u0430\u0441\u0442\u0438 \u041c\u0420\u0422.",
            "x": "\u0435",
            "y": 20,
            "z": 2
        },
        "query": [
            "Count the occurrences of {x} in the first {y} characters of {a} with a step of {z}.",
            "Find how many times {x} appears in the first {y} characters of {a}, considering every {z}th character.",
            "Determine the number of times {x} is present in the first {y} characters of {a} when taking every {z}th character."
        ],
        "language": "rus_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.split(x, y)[z].istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Mabalin met a mangted dagiti estudiante kadagiti salsaludsod para kadagiti mangisursuro iti uray ania nga oras iti aldaw ket namnamaenda ti napartak a pannakasungbat, imbes nga agurayda agingga iti sumaruno a panagsasango.",
            "x": " ",
            "y": 5,
            "z": 3
        },
        "query": [
            "Split {a} by {x} at most {y} times and check if the {z}th element of the resulting list is in title case.",
            "Divide {a} using {x} up to {y} times and verify if the {z}th segment of the resulting array is in title case.",
            "Break {a} by {x} no more than {y} times and determine if the {z}th part of the resulting list is in title case."
        ],
        "language": "ilo_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].rjust(z, '0')\nprint(answer)\n```",
        "variables": {
            "a": "\u0421\u0428\u0410 \u0434\u0435\u043d \u041a\u0430\u043d\u0430\u0434\u0435 \u0433\u0430\u0439 \u044e\u0436\u043e \u0444\u0435\u0434\u0435\u0440\u0430\u0442\u0438\u0432\u043d\u044b\u0439 \u043a\u0443\u0433\u044b\u0436\u0430\u043d\u044b\u0448\u043b\u0430\u0448\u0442\u0435 \u043f\u043e\u0434\u043e\u0445\u043e\u0434\u043d\u044b\u0439 \u043d\u0430\u043b\u043e\u0433 \u0444\u0435\u0434\u0435\u0440\u0430\u043b \u043a\u04f1\u043a\u0448\u044b\u0442\u044b\u0448\u0442\u0430\u0442, \u0432\u0435\u0440\u044b\u0441\u0435 \u043a\u04f1\u043a\u0448\u044b\u0442\u044b\u0448\u0442\u0430\u0442 \u043d\u0430\u043b\u0430\u043b\u0442\u0435\u0448, \u0441\u0430\u0434\u043b\u0430\u043d \u0441\u0442\u0430\u0432\u043a\u0435 \u0434\u0435\u043d \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d-\u0432\u043b\u0430\u043a \u0442\u04f1\u0440\u043b\u04e7 \u0440\u0435\u0433\u0438\u043e\u043d\u043b\u0430\u0448\u0442\u0435 \u043e\u0439\u044b\u0440\u0442\u0435\u043c\u0430\u043b\u0442 \u043a\u0435\u0440\u0442\u044b\u0442.",
            "x": 10,
            "y": 20,
            "z": 15
        },
        "query": [
            "Extract the substring of {a} from index {x} to {y} and right-justify it with zeros to length {z}.",
            "Get the substring of {a} from position {x} to {y} and pad it with zeros on the left to make its length {z}.",
            "Take the part of {a} from index {x} to {y} and add leading zeros to make its total length {z}."
        ],
        "language": "mhr_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).rstrip(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0633\u0680\t\u06a9\u0627\u0646\t\u0645\u067f\u064a\u060c\tB&Bs\t\u0638\u0627\u0647\u0631\u064a\t\u0637\u0648\u0631\t\u062a\u064a\t\u067b\u0646\t\u0627\u0647\u0645\t\u0634\u064a\u0646\t\u062a\u064a\t\u0645\u0642\u0627\u0628\u0644\u0648\t\u067f\u0626\u064a\t\u067f\u064a:\t\u0628\u0633\u062a\u0631\t\u06fd\t\u0646\u0627\u0634\u062a\u0648.",
            "x": 4,
            "y": "."
        },
        "query": [
            "Replace tabs in {a} with {x} spaces and remove trailing characters in {y}.",
            "Convert tabs in {a} to {x} spaces and strip trailing {y}.",
            "Substitute tabs in {a} with {x} spaces and trim trailing {y}."
        ],
        "language": "snd_Arab"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0423 \u041b\u044e\u043a\u0441\u0435\u043c\u0431\u0443\u0440\u0433\u0430 \u0431\u043e\u0433\u0430\u0442\u0430\u044f \u0438\u0441\u0442\u043e\u0440\u0438\u044f, \u043d\u043e \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u0438\u043c\u044b\u043c \u043e\u043d \u0441\u0442\u0430\u043b \u0432 1839 \u0433\u043e\u0434\u0443.",
            "x": 50,
            "y": "_"
        },
        "query": [
            "Is the left-aligned version of {a} in a field of {x} characters, filled with {y}, a valid Python identifier?",
            "Does the left-justified version of {a} in a field of {x} characters, padded with {y}, form a valid Python identifier?",
            "Check if the left-aligned string of {a} with a total length of {x} characters, padded with {y}, is a valid Python identifier."
        ],
        "language": "rus_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.capitalize().startswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "Ima munay kasqan aswan allin llamkana wasin tikariymi. \u00d1ankuna, trenkuna wanpukuna llaqtakunata tinkuchin, carrokunataq mana chayanchu hawamanta.",
            "x": "I"
        },
        "query": [
            "Does the capitalized version of {a} start with {x}?",
            "Is {x} the starting character of the capitalized form of {a}?",
            "When {a} is capitalized, does it begin with {x}?"
        ],
        "language": "quy_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:].swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "Penerbit permeu\u2018enan Konami kheun ur\u00f6e ny\u00f4e i sab\u00f6h surat haba Jeupang bahwa awak nyan han geupeuteubiet meuneu\u2018en Days in Fallujah.",
            "x": 10
        },
        "query": [
            "Invert the case of all letters in the section of {a} starting at index {x} and continuing to the end.",
            "Change the case of each character in the substring of {a} from index {x} to the end.",
            "Toggle the case of all characters in the part of {a} beginning at {x} and going to the end."
        ],
        "language": "ace_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).casefold()\nprint(answer)\n```",
        "variables": {
            "a": "La templo de Artemiso en Efezo estis ruinigita la 21an de julio 356 a.K.E. pro ago de bruligo plenumita de Herostrato.",
            "x": "Artemiso",
            "y": "Diana"
        },
        "query": [
            "Replace {x} with {y} in {a} and convert all characters to lowercase.",
            "Substitute {x} with {y} in {a} and change all letters to lowercase.",
            "Change {x} to {y} in {a} and make all characters lowercase."
        ],
        "language": "epo_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].title()\nprint(answer)\n```",
        "variables": {
            "a": "Ha a ntse a le lekgeng la boikwetliso ba hae, Lenz a wa sethuthuthung sa hae, mme yaba o thulwa ke mopalami e mong wa mohlodisani Xavier Zayat.",
            "x": ",",
            "y": 1
        },
        "query": [
            "Split {a} at {x} and capitalize the first letter of each word in the {y}-th substring.",
            "Divide {a} by {x} and capitalize the first letter of each word in the {y}-th segment.",
            "Break {a} using {x} and capitalize the first letter of each word in the {y}-th part."
        ],
        "language": "sot_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].swapcase().islower()\nprint(answer)\n```",
        "variables": {
            "a": "L'esp\u00f2rt es principalament jogat en format de dual, un escrimaire contra un autre.",
            "x": 10,
            "y": 20
        },
        "query": [
            "Check if the swapped case substring of {a} from index {x} to {y} is all lowercase.",
            "Determine if the substring of {a} from {x} to {y} with swapped case is entirely lowercase.",
            "Is the substring of {a} from index {x} to {y} all lowercase after swapping the case?"
        ],
        "language": "oci_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].swapcase().isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "Milaza mialoha ny siantifika ao amin\u2019ny National Hurricane Center fa hihamafy ho tafio-drivotra i Danielle hatramin\u2019ny Alarobia.",
            "x": 10,
            "y": 20
        },
        "query": [
            "Extract a substring from {x} to {y} in {a}, swap its case, and check if the result is printable.",
            "Get the substring from index {x} to {y} in {a}, change its case, and determine if it is printable.",
            "Take the substring from {x} to {y} in {a}, invert its case, and verify if it is printable."
        ],
        "language": "plt_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].replace(z, '').strip()\nprint(answer)\n```",
        "variables": {
            "a": "\u0623\u0648\u0646\u0633\u0648\u0631 \u0646\u06a0 \u06a4\u0627\u0644\u064a\u06a0 \u06a4\u0627\u0646\u062a\u064a\u06a0 \u062f\u0627\u0631\u064a \u06a4\u0648\u0644\u0627 \u06a4\u064a\u0643\u064a\u0631 \u06a0\u064a\u0646\u064a \u0627\u062f\u0627\u0644\u0647 : \u0627\u062f\u0627 \u0633\u0627\u0628\u0648\u062a\u064a\u062d \u0627\u062c\u0627 \u062c\u0627\u0648\u0627\u0628\u0627\u0646 \u0646\u06a0 \u0628\u0648\u062c\u0648\u0631. \u06a4\u064a\u064a\u0627\u0646 \u0645\u0627\u0645\u064a\u0643\u064a\u0631\u0627\u0643\u0627\u0646 \u062f\u0648\u0627 \u062c\u0627\u0648\u0627\u0628\u0627\u0646 \u0627\u062c\u0627, \u064a\u0627\u064a\u062a\u0648 \u0628\u0648\u062c\u0648\u0631 \u0627\u062a\u0627\u0648\u0627 \u0633\u0627\u0644\u0627\u0647.",
            "x": 0,
            "y": 50,
            "z": "\u06a0"
        },
        "query": [
            "Extract the substring from {x} to {y} in {a}, remove all {z}, and strip whitespace.",
            "Get the substring from index {x} to {y} in {a}, eliminate all {z}, and trim spaces.",
            "From {a}, take the part between {x} and {y}, delete every {z}, and remove leading and trailing spaces."
        ],
        "language": "bjn_Arab"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).upper().count(z)\nprint(answer)\n```",
        "variables": {
            "a": "D'fh\u00e9adfadh uisce a th\u00e1inig isteach san aer \u00f3n ngaoth agus \u00f3 thonnta tionchar a bheith aige ar dhuine tr\u00edd \u00e9 an\u00e1l\u00fa.",
            "x": 120,
            "y": " ",
            "z": "A"
        },
        "query": [
            "Left-justify {a} in a string of length {x} with {y} padding, convert it to uppercase, and count occurrences of {z}.",
            "Pad {a} to the left with {y} to make its length {x}, change it to uppercase, and find the number of times {z} appears.",
            "Make {a} left-justified in a string of length {x} using {y} as padding, turn it to uppercase, and count how many times {z} occurs."
        ],
        "language": "gle_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].rfind(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0628\u0628\u0639\u0636 \u0627\u0644\u0628\u0644\u0627\u062f \u0627\u0644\u0641\u064a\u062f\u0631\u0627\u0644\u064a\u0629 \u060c \u0645\u062a\u0644 \u0627\u0644\u0648\u0644\u0627\u064a\u0627\u062a \u0627\u0644\u0645\u062a\u062d\u062f\u0629 \u0648\u0643\u0646\u062f\u0627 \u060c \u0628\u0641\u0631\u0636\u0648 \u0636\u0631\u064a\u0628\u0629 \u0627\u0644\u062f\u062e\u0644 \u0639\u0644\u0649 \u0627\u0644\u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u0641\u064a\u062f\u0631\u0627\u0644\u064a \u0648\u0639\u0644\u0649 \u0627\u0644\u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u0645\u062d\u0644\u064a \u060c \u0644\u0647\u064a\u0643 \u0645\u0645\u0643\u0646 \u0627\u0646\u0648 \u062a\u062e\u062a\u0644\u0641 \u0627\u0644\u0645\u0639\u062f\u0644\u0627\u062a \u0648\u0627\u0644\u0623\u0642\u0648\u0627\u0633 \u0645\u0646 \u0645\u0646\u0637\u0642\u0629 \u0644\u0645\u0646\u0637\u0642\u0629.",
            "x": 0,
            "y": 100,
            "z": "\u0627\u0644\u0645\u0633\u062a\u0648\u0649"
        },
        "query": [
            "Find the last occurrence of {z} in the substring of {a} from {x} to {y}.",
            "Locate the final instance of {z} within the substring of {a} ranging from {x} to {y}.",
            "Determine the last position of {z} in the segment of {a} between {x} and {y}."
        ],
        "language": "apc_Arab_sout3123"
    },
    {
        "solution": "```python\nanswer = a[:y].zfill(x)\nprint(answer)\n```",
        "variables": {
            "a": "\uabc5\uabed\uabcc\uabe8\uabc0\uabed\uabc2\uabe4\uabcc\uabc1 \uabd1\uabc1\uabe4\uabd7 \uabc4\uabe5\uabd4\uabc7\uabe4\uabc0\uabdc \uabd1\uabc5\uabe4 \uabcc\uabe5\uabce\uabcf - \uabc5\uabed\uabcc\uabe8\uabc7\uabed\uabd4\uabe3\uabdf\uabc1\uabe4\uabe1 \uabd1\uabc3\uabc1\uabe8\uabe1 \uabc4\uabed\uabd4\uabe3\uabc7\uabe3\uabdf\uabc1\uabe4\uabe1\uabeb",
            "x": 50,
            "y": 10
        },
        "query": [
            "Take the first {y} characters of {a} and pad it with zeros to make it {x} characters long.",
            "Extract the first {y} characters from {a} and add leading zeros to make the total length {x}.",
            "Get the initial {y} characters of {a} and prepend zeros until the length is {x}."
        ],
        "language": "mni_Mtei"
    },
    {
        "solution": "```python\nanswer = a.upper().rsplit(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Izvi zvirimwa zvinoita kunge muchindwe mudiki unekorona inemashizha anocheka, anobaya.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Convert {a} to uppercase and split it into a list of substrings at each occurrence of {x}, with a maximum of {y} splits, starting from the right.",
            "Transform {a} to uppercase and divide it into substrings at each {x} occurrence, with up to {y} splits, starting from the end.",
            "Change {a} to uppercase and split it into parts at each {x}, with a limit of {y} splits, beginning from the right."
        ],
        "language": "sna_Latn"
    },
    {
        "solution": "```python\nanswer = a.rsplit(x, y)[-1].isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u1c5c\u1c68\u1c64\u1c71\u1c5e\u1c5f\u1c78\u1c70 \u1c68\u1c64\u1c71 \u1c62\u1c69\u1c6c \u1c75\u1c5f\u1c79\u1c65\u1c64\u1c71\u1c6b\u1c5f\u1c60\u1c5a \u1c6b\u1c5a \u1c71\u1c64\u1c61\u1c6e\u1c5b\u1c6e \u1c5f\u1c60\u1c5a \u1c60\u1c5f\u1c71\u1c5f\u1c70\u1c5f \u1c68\u1c6e \u1c64\u1c71\u1c69\u1c6d\u1c64\u1c74 \u1c60\u1c5a \u1c66\u1c5a\u1c66\u1c5a\u1c5c-\u1c5f \u1c5f\u1c68 \u1c60\u1c5f\u1c5e\u1c5f\u1c5e\u1c64\u1c60 (\u1c65\u1c5f\u1c78\u1c5c\u1c6e \u1c5c\u1c5a\u1c74\u1c5f\u1c5d \u1c60\u1c5f\u1c5e\u1c5f\u1c5e\u1c64\u1c5b), \u1c62\u1c64\u1c6b \u1c66\u1c5a\u1c72 \u1c5c\u1c68\u1c64\u1c71\u1c5e\u1c5f\u1c71\u1c70\u1c5a\u1c68, \u1c5c\u1c68\u1c64\u1c71\u1c5e\u1c5f\u1c78\u1c70 \u1c68\u1c6eI",
            "x": " ",
            "y": 3
        },
        "query": [
            "Split {a} by {x} up to {y} times from the right and check if the last segment is a valid identifier.",
            "Divide {a} using {x} from the right side up to {y} times and determine if the final part is a valid identifier.",
            "Using {x}, split {a} from the right up to {y} times and verify if the last portion is a valid identifier."
        ],
        "language": "sat_Olck"
    },
    {
        "solution": "```python\nanswer = a.upper().rjust(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Ingendo z\u2019abakerarugendo zirahenda, zisaba imyitozo ngororamubiri, zishobora kuba gusa mu mpeshyi hagati y\u2019Ugushyingo na Gashyantare, ndetse akenshi zigarukira ku Mupaka, Ibirwa n\u2019Inyanja ya Ross.",
            "x": 150,
            "y": "*"
        },
        "query": [
            "Create a right-aligned version of {a} in uppercase within {x} characters, filled with {y}.",
            "Convert {a} to uppercase, right-align it within {x} characters, and fill with {y}.",
            "Transform {a} to uppercase, right-align it in a field of {x} characters, using {y} as the fill character."
        ],
        "language": "kin_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).title().endswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "Sukuvi a\u0256e si de sukua kp\u0254 gbl\u0254 be 'egbl\u0254a nya gbegbl\u1ebd le sukux\u0254me, efia nu xoxowo eye w\u00f2w\u0254 abe sukuviwo x\u0254l\u0254'",
            "x": "sukua",
            "y": "school",
            "z": "X\u0254l\u0254'"
        },
        "query": [
            "Verify if the string {a} with {x} replaced by {y} and converted to title case ends with {z}.",
            "Check if the string {a} after replacing {x} with {y} and converting to title case ends with {z}.",
            "Determine if the string {a} ends with {z} after replacing {x} with {y} and converting it to title case."
        ],
        "language": "ewe_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).title().endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "Graif\u00edt\u00ed a thugtar ar mh\u00farmhaisi\u00fa n\u00f3 ar scr\u00e1badh neamhiarrtha.",
            "x": "G",
            "y": "Neamhiarrtha."
        },
        "query": [
            "Remove any {x} characters from both ends of {a}, convert it to title case, and check if it ends with {y}.",
            "Trim {x} from the start and end of {a}, change it to title case, and verify if it ends with {y}.",
            "Strip {x} from both sides of {a}, convert it to title case, and determine if it ends with {y}."
        ],
        "language": "gle_Latn"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "Lukanu ya Tata Rudd ya kutula maboko na mukanda ya kuwakana ya Kyoto na mambu ya ke tala kutulaka Etats-Unis bo mosi, yai kele insi mosi ya kutoma ya kukonda kutula maboko na mukanda yango.",
            "x": "Lukanu"
        },
        "query": [
            "Remove characters in {x} from the start of {a} and then swap the case of each character in the result.",
            "Strip characters in {x} from the beginning of {a} and then invert the case of each character in the outcome.",
            "Delete characters in {x} from the start of {a} and then change the case of each character in the resulting string."
        ],
        "language": "ktu_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].replace(z, '')\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u0644\u0623\u062e\u0628\u0627\u0631 \u0627\u0646\u062a\u0634\u0631\u062a \u0641\u064a \u0645\u062c\u062a\u0645\u0639 \u0631\u064a\u062f \u0644\u064a\u0643 \u0627\u0644\u064a\u0648\u0645 \u0644\u0645\u0627 \u0627\u0646\u0639\u0645\u0644\u062a \u062c\u0646\u0627\u0632\u0627\u062a \u0644\u062c\u064a\u0641 \u0648\u0627\u064a\u0633 \u0648\u062b\u0644\u0627\u062b\u0629 \u0645\u0646 \u0627\u0644\u0636\u062d\u0627\u064a\u0627 \u0627\u0644\u062a\u0633\u0639\u0629 \u0627\u0646\u0647 \u0637\u0627\u0644\u0628 \u062b\u0627\u0646\u064a \u0627\u0639\u062a\u0642\u0644\u0648\u0647 \u0644\u0639\u0644\u0627\u0642\u062a\u0647 \u0641\u064a \u0627\u0644\u0637\u062e \u0628\u0627\u0644\u0645\u062f\u0631\u0633\u0629 \u0641\u064a 21 \u0622\u0630\u0627\u0631.",
            "x": 10,
            "y": 50,
            "z": "\u0627"
        },
        "query": [
            "Remove all occurrences of {z} from the substring of {a} starting at index {x} and ending at index {y}.",
            "Eliminate every instance of {z} from the section of {a} that begins at index {x} and concludes at index {y}.",
            "Delete all {z} characters from the part of {a} ranging from index {x} to index {y}."
        ],
        "language": "apc_Arab_sout3123"
    },
    {
        "solution": "```python\nanswer = a.rsplit(x, y)[z].isascii()\nprint(answer)\n```",
        "variables": {
            "a": "La tempesta tropicale Danielle \u00e8 stata la quarta della stagione degli uragani atlantici del 2010 a cui \u00e8 stato assegnato un nome e ha preso forma nell'Oceano Atlantico orientale.",
            "x": " ",
            "y": 5,
            "z": 2
        },
        "query": [
            "Split {a} from the end by {x} at most {y} times, take the {z+1}-th segment, and check if it contains only ASCII characters.",
            "From the end, split {a} by {x} up to {y} times, select the {z+1}-th part, and verify if it consists solely of ASCII characters.",
            "Divide {a} from the end using {x} no more than {y} times, pick the {z+1}-th section, and determine if it has only ASCII characters."
        ],
        "language": "ita_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].isupper()\nprint(answer)\n```",
        "variables": {
            "a": "Global moliyaviy holat haqida Zapatero shunday deya davom etdi: \"moliyaviy tizim iqtisodning bir qismi, juda muhim qismidir.\"",
            "x": " ",
            "y": 5
        },
        "query": [
            "Split {a} by {x} and check if the {y}-th segment is in uppercase.",
            "Divide {a} using {x} as the delimiter and verify if the {y}-th part is in uppercase.",
            "Separate {a} by {x} and determine if the {y}-th section is in uppercase."
        ],
        "language": "uzn_Latn"
    },
    {
        "solution": "```python\nanswer = a.isidentifier() and a.isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Il-log\u0127ba hija bba\u017cata fuq it-Tieni Battalja ta\u2019 Fallujah, battalja vjolenti bejn il-forzi Amerikani u Iraqqini."
        },
        "query": [
            "Check if {a} is a valid identifier and contains only ASCII characters.",
            "Determine if {a} is a valid identifier and consists solely of ASCII characters.",
            "Verify whether {a} is a valid identifier and includes only ASCII characters."
        ],
        "language": "mlt_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:].isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u0b38\u0b3e\u0b28\u0b4d \u0b2b\u0b4d\u0b30\u0b3e\u0b28\u0b4d\u0b38\u0b3f\u0b38\u0b4d\u0b15\u0b4b\u0b30 \u0b05\u0b30\u0b4d\u0b25\u0b2c\u0b4d\u0b5f\u0b2c\u0b38\u0b4d\u0b25\u0b3e \u0b0f\u0b39\u0b3e\u0b15\u0b41 \u0b0f\u0b15 \u0b2c\u0b3f\u0b36\u0b4d\u0b35 \u0b38\u0b4d\u0b24\u0b30\u0b40\u0b5f \u0b2a\u0b30\u0b4d\u0b2f\u0b4d\u0b5f\u0b1f\u0b28 \u0b38\u0b4d\u0b25\u0b33\u0b30 \u0b06\u0b15\u0b30\u0b4d\u0b37\u0b23 \u0b38\u0b39\u0b3f\u0b24 \u0b1c\u0b21\u0b3f\u0b24 \u0b25\u0b3f\u0b2c\u0b3e\u0b2c\u0b47\u0b33\u0b47 \u0b0f\u0b39\u0b3e\u0b30 \u0b05\u0b30\u0b4d\u0b25\u0b2c\u0b4d\u0b5f\u0b2c\u0b38\u0b4d\u0b25\u0b3e \u0b2d\u0b3f\u0b28\u0b4d\u0b28 \u0b2d\u0b3f\u0b28\u0b4d\u0b28 \u0b39\u0b4b\u0b07\u0b1b\u0b3f\u0964",
            "x": 10
        },
        "query": [
            "Check if the substring of {a} starting from the {x+1}-th character consists only of digits.",
            "Verify if the substring of {a} beginning at the {x+1}-th character is composed solely of digits.",
            "Determine if the substring of {a} from the {x+1}-th character onwards contains only digits."
        ],
        "language": "ory_Orya"
    },
    {
        "solution": "```python\nanswer = a[:x].isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u0a86\u0ab5\u0abe \u0aa8\u0ac7\u0a9f\u0ab5\u0ab0\u0acd\u0a95\u0aae\u0abe\u0a82 \u0a9c\u0acb\u0aa1\u0abe\u0ab5\u0abe \u0aae\u0abe\u0a9f\u0ac7 \u0ab8\u0abe\u0aae\u0abe\u0aa8\u0acd\u0aaf \u0ab0\u0ac0\u0aa4\u0ac7 \u0aab\u0a95\u0acd\u0aa4 \u0a93\u0aa8\u0ab2\u0abe\u0a87\u0aa8 \u0aab\u0acb\u0ab0\u0acd\u0aae \u0aad\u0ab0\u0ab5\u0ac1\u0a82 \u0a9c\u0ab0\u0ac2\u0ab0\u0ac0 \u0a9b\u0ac7; \u0a9c\u0acb\u0a95\u0ac7 \u0a95\u0ac7\u0a9f\u0ab2\u0abe\u0a95 \u0aa8\u0ac7\u0a9f\u0ab5\u0ab0\u0acd\u0a95\u0acd\u0ab8 \u0a85\u0aa4\u0abf\u0ab0\u0abf\u0a95\u0acd\u0aa4 \u0a9a\u0a95\u0abe\u0ab8\u0aa3\u0ac0 \u0aaa\u0acd\u0ab0\u0aa6\u0abe\u0aa8 \u0a95\u0ab0\u0ac7 \u0a9b\u0ac7 \u0a85\u0aa5\u0ab5\u0abe \u0aa4\u0ac7\u0aa8\u0ac0 \u0aae\u0abe\u0a97\u0aa3\u0ac0 \u0a95\u0ab0\u0ac7 \u0a9b\u0ac7.",
            "x": 5
        },
        "query": [
            "Check if the first {x} characters of {a} are numeric.",
            "Determine if the initial {x} characters of {a} are numbers.",
            "Verify if the first {x} characters in {a} consist of numeric digits."
        ],
        "language": "guj_Gujr"
    },
    {
        "solution": "```python\nanswer = a[x:].replace(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0644\u0627 \u062a\u0624\u062f\u064a \u0627\u0644\u0645\u0645\u0627\u0631\u0633\u0627\u062a \u0627\u0644\u063a\u0630\u0627\u0626\u064a\u0629 \u0627\u0644\u0633\u0644\u064a\u0645\u0629 \u0648\u062d\u062f\u0647\u0627 \u0625\u0644\u0649 \u0623\u062f\u0627\u0621 \u0645\u0645\u062a\u0627\u0632\u060c \u0648\u0644\u0643\u0646\u0647\u0627 \u0642\u062f \u062a\u0624\u062b\u0631 \u0628\u0634\u0643\u0644 \u0643\u0628\u064a\u0631 \u0639\u0644\u0649 \u0635\u062d\u0629 \u0627\u0644\u0631\u064a\u0627\u0636\u064a\u064a\u0646 \u0627\u0644\u0634\u0628\u0627\u0628 \u0628\u0648\u062c\u0647 \u0639\u0627\u0645.",
            "x": 10,
            "y": "\u0627\u0644\u063a\u0630\u0627\u0626\u064a\u0629",
            "z": "\u0627\u0644\u0635\u062d\u064a\u0629"
        },
        "query": [
            "Replace {y} with {z} in the substring of {a} starting from index {x}.",
            "In the substring of {a} starting at index {x}, replace {y} with {z}.",
            "Starting from index {x} in {a}, replace {y} with {z} in the substring."
        ],
        "language": "ars_Arab"
    },
    {
        "solution": "```python\nanswer = a[:x].lower().count(y)\nprint(answer)\n```",
        "variables": {
            "a": "Proksimume dek minutojn anta\u016d kiam \u011di devis alteri\u011di la\u016d la dua provo, \u011di malaperis.",
            "x": 50,
            "y": "a"
        },
        "query": [
            "Count the occurrences of {y} in the lowercase version of the first {x} characters of {a}.",
            "How many times does {y} appear in the lowercase version of the first {x} characters of {a}?",
            "Find the number of times {y} occurs in the lowercase version of the first {x} characters of {a}."
        ],
        "language": "epo_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].lstrip(z)\nprint(answer)\n```",
        "variables": {
            "a": "ADD \u0dc3\u0dc4\u0dd2\u0dad \u0daf\u0dbb\u0dd4\u0dc0\u0db1\u0dca \u0dc4\u0dd0\u0dc3\u0dd2\u0dbb\u0dd9\u0db1 \u0d86\u0d9a\u0dcf\u0dbb\u0dba,  \u0d94\u0dc0\u0dd4\u0db1\u0dca \u0dc0\u0da0\u0db1 \u0db4\u0dc0\u0dc3\u0db1 \u0d86\u0d9a\u0dcf\u0dbb\u0dba \u0dc4\u0ddd \u0d94\u0dc0\u0dd4\u0db1\u0dca\u0d9c\u0dda \u0db4\u0dbb\u0dd2\u0dab\u0dad \u0db8\u0da7\u0dca\u0da7\u0db8 \u0dc0\u0dd9\u0db1\u0dc3\u0dca \u0dc0\u0dd3\u0db8 \u0dc0\u0dd0\u0db1\u0dd2 \u0daf\u0dda \u0d85\u0db1\u0dd9\u0d9a\u0dca \u0daf\u0dbb\u0dd4\u0dc0\u0db1\u0dca\u0da7 \u0dad\u0dda\u0dbb\u0dd4\u0db8\u0dca \u0d9c\u0dad\u0dca \u0db1\u0ddc\u0dc4\u0dd0\u0d9a\u0dd2 \u0db1\u0dd2\u0dc3\u0dcf, \u0d85\u0db1\u0dd9\u0d9a\u0dca \u0dc3\u0db8 \u0dc0\u0dba\u0dc3\u0dca \u0daf\u0dbb\u0dd4\u0dc0\u0db1\u0dca \u0dc3\u0db8\u0d9f \u0dc3\u0db8\u0dca\u0db6\u0db1\u0dca\u0db0\u0dad\u0dcf \u0db4\u0dc0\u0dad\u0dca\u0dc0\u0dcf\u0d9c\u0dd0\u0db1\u0dd3\u0db8\u0da7 \u0d91\u0dba \u0d94\u0dc0\u0dd4\u0db1\u0dca\u0da7 \u0db6\u0dcf\u0db0\u0dcf\u0dc0\u0d9a\u0dca \u0d87\u0dad\u0dd2\u0dc0\u0dda.",
            "x": 4,
            "y": 20,
            "z": "\u0dc3\u0dc4"
        },
        "query": [
            "Strip characters in {z} from the beginning of the substring of {a} from index {x} to {y}.",
            "Remove leading characters in {z} from the substring of {a} starting at index {x} and ending at index {y}.",
            "Trim characters in {z} from the start of the substring of {a} ranging from index {x} to {y}."
        ],
        "language": "sin_Sinh"
    },
    {
        "solution": "```python\nanswer = a[x:].upper().replace(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "Yel-soalem t\u00f5e welga ne t\u0169udm\u00e3 la baleng r\u00e3mba t\u00e3aba ne a s\u1ebdn n tike ninsaalba s\u0269dem s\u0269dem b\u00e3ngr baooba, n s\u1ebdn n y\u0269\u0269da yel-manesem s\u00e3n yaa laaf\u0269, w\u028bm v\u00f5ore, s\u0169-noog, b\u0269 noog w\u028bsgo menga.",
            "x": 10,
            "y": "T\u00d5E",
            "z": "REPLACED"
        },
        "query": [
            "Convert the substring of {a} starting from index {x} to uppercase and replace {y} with {z}.",
            "Transform the substring of {a} from index {x} to uppercase and substitute {y} with {z}.",
            "Change the substring of {a} beginning at index {x} to uppercase and swap {y} with {z}."
        ],
        "language": "mos_Latn"
    },
    {
        "solution": "```python\nanswer = a[:x].title().find(y)\nprint(answer)\n```",
        "variables": {
            "a": "Bujtinat ofrojn\u00eb sh\u00ebrbim kryesisht p\u00ebr t\u00eb rinjt\u00eb (klienti tipik i tyre \u00ebsht\u00eb n\u00eb mosh\u00ebn nj\u00ebzetvje\u00e7are), por aty mund t\u00eb gjesh shpesh edhe udh\u00ebtar\u00eb t\u00eb moshave m\u00eb t\u00eb m\u00ebdha.",
            "x": 50,
            "y": "Sh\u00ebrbim"
        },
        "query": [
            "Find the index of {y} in the title-cased version of the first {x} characters of {a}.",
            "Determine the position of {y} within the title-cased first {x} characters of {a}.",
            "Locate the index of {y} in the title-cased substring of the first {x} characters of {a}."
        ],
        "language": "als_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:].upper().startswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "Xas akken amur ameqqran n tkebbaniyin n u\u1e25ewwes ttaqbalent amur ameqqran n uheggi n imukan, a\u1e6das d tima\u1e93layin deg yiwen n \u1e63enf n yinig, n tedrimt ne\u0263 imukan.",
            "x": 10,
            "y": "AMUR"
        },
        "query": [
            "Does the uppercase version of the substring of {a} starting at index {x} start with {y}?",
            "Is the uppercase substring of {a} from index {x} starting with {y}?",
            "Does the substring of {a} from {x} in uppercase begin with {y}?"
        ],
        "language": "kab_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:].rsplit(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0628\u0648\u0646\u0627 \u06af\u0648\u0631\u0647\u060c \u0647\u0627\u0645\u06cc \u0641\u0631\u0627\u0646\u0633\u0647 \u062f\u0627\u0646\u06cc\u0634\u0627\u0646 \u0628\u0644\u062c\u06cc\u06a9\u06cc \u0644\u0631 \u0648 \u0633\u0648\u06cc\u06cc\u0633\u06cc \u0644\u0631\u060c \u0645\u062f\u0631\u0633\u0647 \u062f\u0647 \u0627\u0633\u062a\u0627\u0646\u062f\u0627\u0631\u062f \u0641\u0631\u0627\u0646\u0633\u0648\u06cc \u0627\u0631\u06af\u0634\u06cc\u0628\u0644\u0631 \u0648 \u0627\u06af\u0631 \u0633\u06cc\u0632 \u0627\u0633\u062a\u0627\u0646\u062f\u0627\u0631\u062f \u0633\u06cc\u0633\u062a\u0645 \u0634\u0645\u0627\u0631\u0647 \u06af\u0630\u0627\u0631\u06cc \u062f\u0627\u0646 \u0627\u0633\u062a\u0641\u0627\u062f\u0647 \u0627\u0626\u0644\u0633\u06cc\u0632\u060c \u0627\u0648\u0646\u0644\u0627\u0631 \u062f\u0648\u0634\u0648\u0646\u062c\u0627\u062e\u0644\u0627\u0631.",
            "x": 10,
            "y": "\u060c",
            "z": 3
        },
        "query": [
            "Segment the substring of {a} starting at index {x} by {y} with a maximum of {z} splits, beginning from the right.",
            "Split the substring of {a} starting at index {x} by {y} up to {z} times from the right.",
            "Divide the substring of {a} starting at index {x} using {y} with at most {z} splits from the right."
        ],
        "language": "azb_Arab"
    },
    {
        "solution": "```python\nanswer = a.strip(y).replace(x, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0428\u0430\u0440\u043b\u043e\u0442\u0442\u043e\u0433\u0443 \u04af\u0439-\u0431\u04af\u043b\u04e9\u043b\u04e9\u0440 \u0430\u0434\u0430\u0442\u0442\u0430 \u0442\u0430\u043a\u0441\u0438\u0433\u0435 \u0442\u04af\u0448\u04af\u0448\u043f\u04e9\u0439\u0442, \u0431\u0438\u0440\u043e\u043a \u0430\u0439\u0440\u044b\u043c \u0448\u0430\u0440\u0442\u0442\u0430\u0440\u0434\u0430 \u0442\u04af\u0448\u04af\u0448\u04af \u0434\u0430 \u043c\u04af\u043c\u043a\u04af\u043d.",
            "x": "\u0442\u04af\u0448\u04af\u0448\u043f\u04e9\u0439\u0442",
            "y": "\u0428\u0430\u0440\u043b\u043e\u0442\u0442\u043e\u0433\u0443",
            "z": "\u043c\u04af\u043c\u043a\u04af\u043d"
        },
        "query": [
            "Remove all leading and trailing characters found in {y} from {a}, then replace {x} with {z}.",
            "Trim characters in {y} from both ends of {a} and then substitute {x} with {z}.",
            "Strip {y} from the start and end of {a}, followed by replacing {x} with {z}."
        ],
        "language": "kir_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).upper().endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "Dibe h\u00fbn bifikirin ku tevl\u00eeb\u00fbna li r\u00eaya as\u00eeman\u00ee ya h\u00fbn p\u00ea her car difirin awaya her\u00ee maq\u00fbl e, l\u00ea div\u00ea h\u00fbn bizanin cudakar\u00eey\u00ean p\u00ea\u015fk\u00ea\u015fkir\u00ee bi pirran\u00ee biferq in \u00fb p\u00fban\u00ean r\u00eaw\u00eey\u00ean pirr difirin li cem r\u00eayeke as\u00eeman\u00ee ya din a endam\u00ea heman yek\u00eet\u00eey\u00ea dikarin h\u00een comerdtir bin.",
            "x": "Dibe",
            "y": "BIN."
        },
        "query": [
            "Check if {a} without leading {x} in uppercase ends with {y}.",
            "Determine if the uppercase version of {a} without leading {x} ends with {y}.",
            "Verify if {a} stripped of leading {x} and converted to uppercase ends with {y}."
        ],
        "language": "kmr_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('utf-8').isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u0e84\u0ebb\u0e99\u0eaa\u0ec8\u0ea7\u0e99\u0ec3\u0eab\u0e8d\u0ec8\u0ea1\u0eb5\u0eaa\u0ec8\u0ea7\u0e99\u0e81\u0ec8\u0ebd\u0ea7\u0e82\u0ec9\u0ead\u0e87\u0e81\u0eb1\u0e9a\u0e84\u0ebb\u0e99\u0e97\u0eb5\u0ec8\u0ec0\u0eae\u0eb1\u0e94\u0ea7\u0ebd\u0e81\u0e81\u0eb1\u0e9a\u0eaa\u0eb1\u0e94\u0e9b\u0eb5\u0e81\u0ec1\u0e95\u0ec8\u0e81\u0ecd\u0ea1\u0eb5\u0e84\u0ea7\u0eb2\u0ea1\u0eaa\u0ec8\u0ebd\u0e87\u0e95\u0ecd\u0ec8\u0e99\u0eb1\u0e81\u0ec0\u0e9a\u0eb4\u0ec8\u0e87\u0e99\u0ebb\u0e81\u0ec0\u0e8a\u0eb1\u0ec8\u0e99\u0e81\u0eb1\u0e99."
        },
        "query": [
            "Is the string {a} alphanumeric after encoding and decoding it in UTF-8?",
            "Does the string {a} remain alphanumeric after being encoded and decoded in UTF-8?",
            "After encoding and decoding the string {a} in UTF-8, is it still alphanumeric?"
        ],
        "language": "lao_Laoo"
    },
    {
        "solution": "```python\nanswer = a.casefold().rjust(x, y).endswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "Tornadoes zisigula miti, zijja embaawo okuva ku bizimbe, n\u2019okusitula emmotoka mu bbanga. Tornadoes ebitundu bibiri ku buli kikumi ezisinga okubeera ebyatabbu bimala ebbanga lya ssaawa ssatu n\u2019omusobyo.",
            "x": 200,
            "y": " ",
            "z": "omusobyo."
        },
        "query": [
            "Does the casefolded version of {a}, right-aligned with {x} characters and filled with {y}, end with {z}?",
            "Will the casefolded string of {a}, padded to {x} characters with {y}, have {z} as its suffix?",
            "Is the casefolded form of {a}, right-justified to {x} characters using {y}, ending with {z}?"
        ],
        "language": "lug_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y:z].swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "Ich lach gi wuoro pile biro bedo kodwa, kendo en kit winjruok ma ka ji mathoth oyudo ber to e kinde duto gik mathoth biro bedo minyalo yudi bang' kinde machuok kuom bedo jo ichlach.",
            "x": 10,
            "y": 50,
            "z": 2
        },
        "query": [
            "What is the case-inverted substring of {a} from index {x} to {y} with a step of {z}?",
            "How does the substring of {a} from index {x} to {y} with a step of {z} look after inverting the case?",
            "Can you show the case-swapped substring of {a} from index {x} to {y} with a step of {z}?"
        ],
        "language": "luo_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8', errors='replace').decode('utf-8').istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Wiwit saka Barcelona's Running Tours ing Barcelona lan Copenhagen's Running ing Copenhagen, kegiyatan kuwi enggal ditututi karo Running Tours Prague sing pusate ing Praha lan kegiyatan liyane."
        },
        "query": [
            "Encode {a} in UTF-8 replacing unencodable characters, decode it back, and check if it is title-cased.",
            "Convert {a} to UTF-8 with replacement for unencodable characters, decode it, and verify if it is in title case.",
            "Transform {a} to UTF-8 encoding with substitution for invalid characters, decode it, and determine if it is title-cased."
        ],
        "language": "jav_Latn"
    },
    {
        "solution": "```python\nanswer = a.rsplit(x, y)[-1].isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Zvisinei, materesikopu chaiwo akagadzirwa muEurope mumakore ekuma1500 ava kunopera.",
            "x": " ",
            "y": 3
        },
        "query": [
            "Split {a} from the right using {x} as a separator up to {y} times and check if the last segment consists only of alphabetic characters.",
            "Using {x} as a delimiter, split {a} from the right up to {y} times and determine if the final part is purely alphabetic.",
            "Check if the last part of {a} is alphabetic after splitting it from the right with {x} as the separator up to {y} times."
        ],
        "language": "sna_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).title().center(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "Moko ya ba application ya ntina mingi ya ndenge wana eza Google Translate, oyo esalisaka na kobongola makambo ata oza te na internet nsima ya kozwa basango nyonso ya lokota olingi.",
            "x": "Moko",
            "y": 150,
            "z": "*"
        },
        "query": [
            "Trim characters in {x} from both ends of {a}, capitalize each word, and center it in a string of length {y} with {z} padding.",
            "Remove characters in {x} from the start and end of {a}, convert to title case, and center it in a string of length {y} using {z} as padding.",
            "Strip characters in {x} from both sides of {a}, capitalize each word, and center it in a string of length {y} with {z} as the padding character."
        ],
        "language": "lin_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:].rjust(y, z).encode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "\u097f\u0941\u0927\u0930 \u097e\u0940\u0902\u0939\u0941\u0902 \u092e\u0902\u091d\u0902\u0926\u093f \u0924\u093e\u0908\u0902 \u091f\u0948\u0902\u0915 \u091c\u0947 \u0905\u0902\u0926\u0930\u093f \u0925\u0930\u094d\u092e\u0932 \u090f\u0915\u094d\u0938\u092a\u0947\u0902\u0936\u0928 \u0938\u093e\u0902 \u0936\u093e\u092f\u0926\u093f \u0905\u091e\u093e \u092c\u093f \u091f\u0948\u0902\u0915 \u0935\u0947\u0902\u091f \u0935\u0939\u0923\u0941 \u0932\u097b\u094b \u0939\u094b\u0964",
            "x": 10,
            "y": 50,
            "z": "\u0905"
        },
        "query": [
            "Take the substring of {a} from {x} onwards, right-justify it to length {y} with {z}, and encode it in UTF-8.",
            "Extract the substring from {a} starting at index {x}, pad it on the left to make its length {y} using {z}, and convert it to UTF-8 encoding.",
            "Get the substring of {a} beginning at position {x}, pad it on the left to reach a length of {y} with {z}, and encode it in UTF-8 format."
        ],
        "language": "snd_Deva"
    },
    {
        "solution": "```python\nanswer = a.encode('ascii', errors='ignore').isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u12e8\u1260\u1208\u1320 \u1300\u1265\u12f1 \u12e8\u121a\u1230\u121b\u12ce\u1275 \u12a8\u1206\u1290 \u1260\u12a0\u130b\u1323\u121a\u12cd \u132d\u121b\u1242 \u1208\u1218\u1320\u1323\u1275 \u12c8\u12ed\u121d \u1325\u1242\u1275 \u121b\u1240\u12dd\u1240\u12e3 \u12e8\u134d\u122b\u134d\u122c \u132d\u121b\u1242\u12ce\u127d\u1295 \u1208\u1218\u132d\u1218\u1245 \u12ed\u121e\u12ad\u1229-"
        },
        "query": [
            "Is the ASCII-encoded version of {a} (ignoring errors) printable?",
            "Can the ASCII-encoded version of {a} (with errors ignored) be printed?",
            "Will the ASCII-encoded version of {a} (ignoring errors) result in a printable string?"
        ],
        "language": "amh_Ethi"
    },
    {
        "solution": "```python\nanswer = a[x:y].replace(z, w).isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Bu-kaora toen tik kame, a soba saan da melsa mobil la koulmbiise, ti mobil la ya yen so ta ra daten nkaw mobil la nkien.",
            "x": 10,
            "y": 50,
            "z": "mobil",
            "w": "car"
        },
        "query": [
            "After replacing {z} with {w} in the substring of {a} from {x} to {y}, does it contain only ASCII characters?",
            "Does the substring of {a} from {x} to {y}, after replacing {z} with {w}, consist solely of ASCII characters?",
            "Is the substring of {a} from {x} to {y} composed only of ASCII characters after replacing {z} with {w}?"
        ],
        "language": "mos_Latn"
    },
    {
        "solution": "```python\nanswer = a.capitalize().swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "Thur l\u00e4i \u0263\u0254\u0308\u014b aw\u00efc telephoto lens bar, kua ka c\u00eft akut di\u025bt ku a ka thii k\u0254k c\u00ef cak aw\u00efc k\u00e4k dai k\u0254\u0308k."
        },
        "query": [
            "Capitalize {a} and then swap the case of all characters.",
            "Make the first letter of {a} uppercase and then invert the case of each character.",
            "Change the first character of {a} to uppercase and then toggle the case of all characters."
        ],
        "language": "dik_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding='utf-8', errors='ignore').decode('utf-8').find(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u04ba\u0435\u0499\u0499\u0435\u04a3 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u044b\u0493\u044b\u0499 \u0441\u04d9\u0444\u04d9\u0440 \u043a\u04e9\u043d\u04e9\u043d\u04d9\u043d \u04bb\u0443\u04a3 \u043a\u04d9\u043c \u0442\u0438\u0433\u04d9\u043d\u0434\u04d9 6 \u0430\u0439 \u0431\u0443\u0439\u044b \u0493\u04d9\u043c\u04d9\u043b\u0434\u04d9 \u0431\u0443\u043b\u044b\u0440\u0493\u0430 \u0442\u0435\u0439\u0435\u0448. \u04ba\u0435\u0499\u0499\u0435\u04a3 \u0441\u04d9\u0444\u04d9\u0440\u0435\u0433\u0435\u0499\u0499\u0435\u04a3 \u043c\u04e9\u0499\u0499\u04d9\u0442\u0435\u043d \u0440\u0430\u04ab\u043b\u0430\u0443 \u04e9\u0441\u04e9\u043d \u0431\u0430\u0440\u044b\u0443 \u04bb\u04d9\u043c \u04a1\u0430\u0439\u0442\u044b\u0443 \u0431\u0438\u043b\u0435\u0442\u044b \u043c\u043e\u0442\u043b\u0430\u04a1.",
            "x": "\u0441\u04d9\u0444\u04d9\u0440"
        },
        "query": [
            "Find the position of {x} in {a} after encoding to UTF-8 and ignoring errors.",
            "Determine the index of {x} in {a} after converting to UTF-8 and skipping errors.",
            "Locate the position of {x} within {a} after UTF-8 encoding and error omission."
        ],
        "language": "bak_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Su fine reale est de dare a custas cumpangias prus controllu de sos mercados issoro; est totu chistione de f\u00e0ghere zirare dinare.",
            "x": 150,
            "y": " "
        },
        "query": [
            "Left-justify {a} in a field of {x} characters using {y} as padding, and verify if it contains only letters.",
            "Align {a} to the left in a field of {x} characters with {y} as the padding character, and check if it consists solely of alphabetic characters.",
            "Pad {a} to the left with {y} until it reaches {x} characters in length, then determine if it is purely alphabetic."
        ],
        "language": "srd_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::y].isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0428\u0430\u0440\u0430 \u0442\u0440\u0435\u0431\u0430 \u0434\u0430 \u0431\u0443\u0434\u0435 \u0434\u043e\u0432\u043e\u0459\u043d\u043e \u0434\u0443\u0431\u043e\u043a\u0430, 5 mm (1/5 \u0438\u043d\u0447\u0430) \u0438\u043b\u0438 \u0432\u0438\u0448\u0435, \u0430 \u043c\u0430\u0442\u0435\u0440\u0438\u0458\u0430\u043b \u0434\u043e\u0432\u043e\u0459\u043d\u043e \u043c\u0435\u043a\u0430\u043d \u043d\u0430 \u0445\u043b\u0430\u0434\u043d\u0438\u043c \u0442\u0435\u043c\u043f\u0435\u0440\u0430\u0442\u0443\u0440\u0430\u043c\u0430.",
            "x": 10,
            "y": 3
        },
        "query": [
            "Determine if the substring of {a} starting from position {x} with step {y} is a valid identifier.",
            "Check if the substring of {a} starting at index {x} and taking every {y}th character is a valid identifier.",
            "Is the substring of {a} starting from position {x} and stepping by {y} a valid identifier?"
        ],
        "language": "srp_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].strip().isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0421\u04af\u04af\u043b\u0438\u0439\u043d \u0433\u0443\u0447\u0438\u043d \u0436\u0438\u043b\u0438\u0439\u043d \u0442\u0443\u0440\u0448 \u0430\u043b\u0431\u0430\u043d \u0451\u0441\u043e\u043e\u0440 \u043a\u043e\u043c\u043c\u0443\u043d\u0438\u0441\u0442 \u0443\u043b\u0441 \u0445\u044d\u0432\u044d\u044d\u0440 \u0431\u0430\u0439\u0433\u0430\u0430 \u0431\u043e\u043b\u043e\u0432\u0447 \u0425\u044f\u0442\u0430\u0434 \u0443\u043b\u0441 \u0437\u0430\u0445 \u0437\u044d\u044d\u043b\u0438\u0439\u043d \u044d\u0434\u0438\u0439\u043d \u0437\u0430\u0441\u0433\u0438\u0439\u0433 \u0445\u04e9\u0433\u0436\u04af\u04af\u043b\u0436\u044d\u044d.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Split {a} by {x}, trim the {y}-th segment, and check if it is a valid identifier.",
            "Divide {a} using {x} as the delimiter, remove whitespace from the {y}-th part, and verify if it is a valid identifier.",
            "Break {a} at each occurrence of {x}, clean up the {y}-th piece, and determine if it is a valid identifier."
        ],
        "language": "khk_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x:y].swapcase().title()\nprint(answer)\n```",
        "variables": {
            "a": "2010 yic, w\u00ebn ci yen lui kene baai, kene gekic c\u0254l ten\u025b kur al\u0254\u014b  cu\u00eb\u00ebc aci jal tek yic bi la\u014b \"\u0263on e w\u00ebu rac\" kur al\u0254\u014b cu\u00eb\u00ebc (ka ye jal mac) (Asset Management).",
            "x": 5,
            "y": 20
        },
        "query": [
            "Take the substring of {a} from index {x} to {y}, swap its case, and then title-case it.",
            "Extract the substring from {a} starting at index {x} and ending at index {y}, change its case, and convert it to title case.",
            "Get the substring of {a} between indices {x} and {y}, invert its case, and apply title casing."
        ],
        "language": "dik_Latn"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).replace(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u0633\u067e\u06cc\u0646\u06cc \u062c\u0627 \u0646\u0634\u06cc\u0646\u06cc \u06a9\u06cc \u062c\u0646\u06af \u067e\u06c1\u0644\u06cc \u062c\u0646\u06af \u062a\u06be\u06cc \u062c\u0633 \u06a9\u0627 \u0645\u0631\u06a9\u0632\u06cc \u0645\u0633\u0626\u0644\u06c1 \u0637\u0627\u0642\u062a \u06a9\u0627 \u062a\u0648\u0627\u0632\u0646 (\u0628\u06cc\u0644\u0646\u0633 \u0622\u0641 \u067e\u0627\u0648\u0631) \u062a\u06be\u0627\u06d4",
            "x": "\u0627",
            "y": "\u062c\u0646\u06af",
            "z": "\u0644\u0691\u0627\u0626\u06cc"
        },
        "query": [
            "Remove any {x} characters from the beginning of {a} and replace {y} with {z} in the result.",
            "Strip all leading {x} characters from {a} and substitute {y} with {z} in the outcome.",
            "Eliminate {x} from the start of {a} and change {y} to {z} in the resulting string."
        ],
        "language": "urd_Arab"
    },
    {
        "solution": "```python\nanswer = a[x::z].capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "Gua\u0331th ti\u0331 \u014buan wi\u0331i\u0331cmu\u0254\u0331\u0254\u0331n, mi\u0331 ri\u0331t i\u0331 tetdu k\u025b\u025b maal\u025b lot \u025b ni\u0331 ta\u0331a\u0331 mal\u00e4, mi\u0331 lot ni\u0331 \"mal\u025b\u0308.\"",
            "x": 5,
            "z": 3
        },
        "query": [
            "Capitalize the first character of the substring of {a} starting from position {x} and taking every {z}-th character.",
            "Make the first letter uppercase of the substring from {a} starting at index {x} and taking every {z}-th character.",
            "From {a}, starting at index {x} and taking every {z}-th character, capitalize the first letter of the resulting substring."
        ],
        "language": "nus_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::z].isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u0417\u0438\u043c\u0438 \u0443\u0436\u0438\u0432\u0430\u0458\u0442\u0435 \u0443 \u043d\u0435\u043a\u043e\u043c \u043e\u0434 \u043d\u0430\u0458\u0431\u043e\u0459\u0438\u0445 \u0441\u043a\u0438\u0458\u0430\u045a\u0430 \u0443 \u0421\u0435\u0432\u0435\u0440\u043d\u043e\u0458 \u0410\u043c\u0435\u0440\u0438\u0446\u0438, \u0430 \u043b\u0435\u0442\u0438 \u043f\u0440\u043e\u0431\u0430\u0458\u0442\u0435 \u0430\u0443\u0442\u0435\u043d\u0442\u0438\u0447\u043d\u0438 \u0431\u0440\u0434\u0441\u043a\u0438 \u0431\u0438\u0446\u0438\u043a\u043b\u0438\u0437\u0430\u043c.",
            "x": 2,
            "z": 5
        },
        "query": [
            "Check if every {z}-th character in {a} starting from position {x} is printable.",
            "Verify if each {z}-th character in {a} beginning from index {x} is a printable character.",
            "Determine if all {z}-th characters in {a} starting at position {x} are printable."
        ],
        "language": "srp_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).center(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "2009 \u0d7d \u0d05\u0d35\u0d7e\u0d15\u0d4d\u0d15\u0d4d \u0d26\u0d47\u0d36\u0d40\u0d2f \u0d38\u0d42\u0d2a\u0d4d\u0d30\u0d23\u0d4d\u0d1f\u0d4d \u0d13\u0d2b\u0d4d \u0d26\u0d3f \u0d07\u0d2f\u0d7c \u0d2a\u0d26\u0d35\u0d3f \u0d05\u0d35\u0d3e\u0d7c\u0d21\u0d4d \u0d32\u0d2d\u0d3f\u0d1a\u0d4d\u0d1a\u0d41.",
            "x": ".",
            "y": 80,
            "z": " "
        },
        "query": [
            "Trim trailing {x} from {a} and center the result in a string of length {y} using {z} as the fill character.",
            "Remove trailing {x} from {a} and then center the result in a string of length {y} with {z} as the padding character.",
            "Strip trailing {x} from {a} and center the resulting string to a length of {y} using {z} as the fill character."
        ],
        "language": "mal_Mlym"
    },
    {
        "solution": "```python\nanswer = a.find(x) == y\nprint(answer)\n```",
        "variables": {
            "a": "\u0ab9\u0a9c\u0abe\u0ab0\u0acb \u0ab5\u0ab0\u0acd\u0ab7\u0acb\u0aa5\u0ac0 \u0aa7\u0ab0\u0acd\u0aae\u0a97\u0ac1\u0ab0\u0ac1\u0a93, \u0aa4\u0aa4\u0acd\u0ab5\u0a9c\u0acd\u0a9e\u0abe\u0aa8\u0ac0\u0a93 \u0a85\u0aa8\u0ac7 \u0ab5\u0abf\u0aa6\u0acd\u0ab5\u0abe\u0aa8 \u0ab5\u0ac8\u0a9c\u0acd\u0a9e\u0abe\u0aa8\u0abf\u0a95\u0acb \u0ab8\u0aae\u0aaf\u0aa8\u0acb \u0a85\u0aad\u0acd\u0aaf\u0abe\u0ab8 \u0a95\u0ab0\u0ab5\u0abe\u0aae\u0abe\u0a82 \u0a86\u0ab5\u0ac0 \u0a9b\u0ac7.",
            "x": "\u0aa7\u0ab0\u0acd\u0aae\u0a97\u0ac1\u0ab0\u0ac1\u0a93",
            "y": 12
        },
        "query": [
            "Check if the substring {x} starts at position {y} in {a}.",
            "Verify if {x} begins at index {y} in the string {a}.",
            "Determine if {x} is located at position {y} within {a}."
        ],
        "language": "guj_Gujr"
    },
    {
        "solution": "```python\nanswer = a.rjust(x, y).isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u0c2d\u0c42\u0c2e\u0c3f \u0c2e\u0c40\u0c26 \u0c09\u0c02\u0c21\u0c47 \u0c15\u0c4a\u0c28\u0c4d\u0c28\u0c3f \u0c05\u0c30\u0c41\u0c26\u0c48\u0c28 \u0c30\u0c3e\u0c33\u0c4d\u0c33\u0c41 \u0c12\u0c15 \u0c14\u0c28\u0c4d\u0c38\u0c4d\u200c\u0c15\u0c41 US$11,000 \u0c28\u0c41\u0c02\u0c21\u0c3f $22,500 \u0c35\u0c30\u0c15\u0c41 \u0c05\u0c2e\u0c4d\u0c2e\u0c41\u0c21\u0c35\u0c41\u0c24\u0c41\u0c28\u0c4d\u0c28\u0c3e\u0c2f\u0c3f, \u0c05\u0c02\u0c1f\u0c47 \u0c26\u0c40\u0c28\u0c3f \u0c27\u0c30 \u0c2c\u0c02\u0c17\u0c3e\u0c30\u0c02 \u0c15\u0c02\u0c1f\u0c47 10 \u0c30\u0c46\u0c1f\u0c4d\u0c32\u0c41 \u0c0e\u0c15\u0c4d\u0c15\u0c41\u0c35.",
            "x": 150,
            "y": " "
        },
        "query": [
            "Right-justify {a} within {x} characters using {y} for padding and check if the result is printable.",
            "Pad {a} to the right with {y} until it is {x} characters long and verify if the resulting string is printable.",
            "Ensure {a} is right-justified to {x} characters with {y} as padding and determine if the final string is printable."
        ],
        "language": "tel_Telu"
    },
    {
        "solution": "```python\nanswer = a.capitalize().isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Nutr\u016bkus elektros energijai po eilinio prie\u0161gaisrin\u0117s valdymo sistemos bandymo, atsidar\u0117 apsauginiai vo\u017etuvai ir \u0161alia Fort Greely 9 siurblin\u0117s i\u0161siliejo \u017ealiavin\u0117 nafta."
        },
        "query": [
            "Are all characters in the capitalized version of {a} alphabetic?",
            "Is every character in the capitalized form of {a} a letter?",
            "Does the capitalized version of {a} consist solely of alphabetic characters?"
        ],
        "language": "lit_Latn"
    },
    {
        "solution": "```python\nanswer = a.isprintable() and a.isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Ledynai n\u0117ra stabil\u016bs, bet slenka nuo kalno. Tai sukels \u012ftr\u016bkimus, ply\u0161ius, kurie gali b\u016bti u\u017ego\u017eti sniego tiltais."
        },
        "query": [
            "Are all characters in {a} printable and ASCII?",
            "Is every character in {a} both printable and an ASCII character?",
            "Does {a} contain only printable ASCII characters?"
        ],
        "language": "lit_Latn"
    },
    {
        "solution": "```python\nanswer = a[:x].join(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u2d3c\u2d4d\u2d49\u2d5c\u2d49\u2d3e \u2d4f \u2d46\u2d53\u2d4e<\u2d4f \u2d5c\u2d30\u2d3e\u2d3e\u2d30\u2d59 \u2d30-\u2d42\u2d49\u2d4f \u2d5f\u2d30\u2d4d\u2d57\u2d30 \u2d5c\u2d30\u2d4f I\u2d4e\u2d30\u2d54\u2d30\u2d53\u2d30\u2d4f \u2d3c\u2d30\u2d4d \u2d53\u2d5c\u2d49\u2d54 \u2d30\u2d36\u2d30\u2d4f \u2d3c\u2d30\u2d4d \u2d30\u2d4e\u2d4e\u2d30\u2d3e \u2d53\u2d30 \u2d59 \u2d5c\u2d30\u2d36 \u2d5f\u2d30\u2d4d\u2d57\u2d30 \u2d4f I\u2d4e\u2d30\u2d54\u2d30\u2d53\u2d30\u2d4f \u2d37 \u2d30\u2d63\u2d54\u2d53\u2d3c \u2d53\u2d30 \u2d59 <\u2d63\u2d63\u2d30\u2d54 \u2d5b\u2d4d\u2d49\u2d3c\u2d3c \u2d59\u2d5c<\u2d30\u2d54\u2d4f\u2d59 \u2d53\u2d30\u2d4f \u2d62\u2d49\u2d31\u2d49\u2d5c\u2d49.",
            "x": 5,
            "y": [
                "item1",
                "item2",
                "item3"
            ]
        },
        "query": [
            "Take the first {x} characters of {a} and use it to join the elements of {y}.",
            "Use the first {x} characters of {a} to join the items in {y}.",
            "Join the elements of {y} with the first {x} characters of {a}."
        ],
        "language": "taq_Tfng"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Sotroy am-pifehezana ny zava-pisotro misy alk\u00f4la.Samy hafa ny fiantraikan\u2019ny alk\u00f4la amin\u2019ny tsirairay, ary tena zava-dehibe ny mahafantatra ny fetranao.",
            "x": "."
        },
        "query": [
            "Remove trailing characters in {x} from {a} and check if the result is in title case.",
            "Strip trailing characters specified by {x} from {a} and verify if the resulting string is in title case.",
            "Eliminate trailing characters in {x} from {a} and determine if the final string is in title case."
        ],
        "language": "plt_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::].startswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0917\u094b\u0932\u094d\u092b \u090f\u0915 \u0910\u0908\u0938\u093e \u0916\u0947\u0932 \u0939\u0948 \u091c\u0947\u0939\u092e\u0947 \u0916\u093f\u0932\u093e\u0921\u093c\u0940 \u0917\u0947\u0902\u0926\u0928 \u0915\u093e \u091b\u0947\u0926 \u092e\u093e \u092e\u093e\u0930\u092f \u0915\u093e \u0932\u093f\u090f \u0915\u094d\u0932\u092c (\u0917\u094b\u0932\u094d\u092b \u0916\u0947\u0932\u092f \u0935\u093e\u0932\u0940 \u091b\u095c\u0940) \u0915\u093e \u092a\u094d\u0930\u092f\u094b\u0917 \u0915\u0930\u0924 \u0939\u0948\u0902\u0964",
            "x": 10,
            "y": "\u0916\u0947\u0932"
        },
        "query": [
            "Check if the substring of {a} starting from position {x} begins with {y}.",
            "Determine if the substring of {a} from index {x} starts with {y}.",
            "Verify if the portion of {a} starting at index {x} begins with {y}."
        ],
        "language": "awa_Deva"
    },
    {
        "solution": "```python\nanswer = a.encode('ascii', errors='ignore').decode('ascii').isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Lenkumbulo iphikisana nokusho ukuthi inyanga ayinawo umsebenzi wokwakhekha ngokuphelele."
        },
        "query": [
            "Determine if the ASCII-encoded version of {a} (ignoring errors) consists only of alphabetic characters.",
            "Check if the ASCII-encoded string of {a} (with errors ignored) contains only letters.",
            "Verify whether the ASCII-encoded form of {a} (ignoring errors) is made up solely of alphabetic characters."
        ],
        "language": "zul_Latn"
    },
    {
        "solution": "```python\nanswer = a.title().replace(x, y).istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Nanso y\u025bn nsusui\u025b no gyina s\u025b nea \u025bte\u025b so anaa? De\u025b edi kan koraa no, ad\u025bn nti na w\u0254sisii abank\u025bse? Kwan b\u025bn na w\u0254faa so y\u025b\u025b ho nhyehy\u025be na w\u0254siie?",
            "x": "\u025b",
            "y": "e"
        },
        "query": [
            "Convert {a} to title case, replace {x} with {y}, and check if the result is still in title case.",
            "Change {a} to title case, substitute {x} with {y}, and verify if the outcome remains in title case.",
            "Transform {a} to title case, swap {x} with {y}, and determine if the final string is still in title case."
        ],
        "language": "twi_Latn_akua1239"
    },
    {
        "solution": "```python\nanswer = a[y:].rfind(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0418\u0437\u0433\u043b\u0435\u0434\u0430 \u0434\u0430 \u0458\u0435 \u0442\u043e \u0437\u0430\u043f\u0440\u0430\u0432\u043e \u043d\u0430\u0447\u0438\u043d \u0434\u0430 \u0441\u0435 \u0459\u0443\u0434\u0438 \u043f\u0440\u0435\u0432\u0430\u0440\u0435 \u0438 \u043f\u043e\u0432\u0435\u0440\u0443\u0458\u0443 \u0434\u0430 \u043c\u043e\u0440\u0430\u0458\u0443 \u043f\u043b\u0430\u0442\u0438\u0442\u0438 \u0432\u0438\u0448\u0435.",
            "x": "\u0434\u0430",
            "y": 10
        },
        "query": [
            "Find the last occurrence of {x} in {a} starting from index {y}.",
            "Locate the final instance of {x} in {a} beginning at index {y}.",
            "Determine the last position of {x} within {a} starting from index {y}."
        ],
        "language": "srp_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[:x].isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u12a5\u12da \u1215\u130b\u12ca \u1309\u12f3\u12ed \u12a3\u1265 \u126a\u122d\u1302\u1295\u12eb \u12a5\u12e9 \u1270\u1348\u122a\u12f1\u1363 \u1235\u1208\u121d\u1295\u1273\u12ed \u1218\u1230\u1228\u1275 \u1293\u12ed'\u1272 \u12c8\u1203\u1262 \u12a3\u1308\u120d\u130d\u120e\u1273\u1275 \u12a2\u1295\u1270\u122d\u1290\u1275 \u12dd\u12be\u1290\u1363 \u12a8\u121d\u12a1'\u12cd\u1295 \u1290\u1272 \u12ad\u1232 \u12d8\u1255\u1228\u1260 \u12a9\u1263\u1295\u12eb AOL \u1235\u1208\u12dd\u12be\u1290\u1362",
            "x": 10
        },
        "query": [
            "Check if the substring of {a} from the start to {x} is a valid identifier.",
            "Determine if the portion of {a} up to {x} is a valid identifier.",
            "Verify if the segment of {a} from the beginning to {x} is a valid identifier."
        ],
        "language": "tir_Ethi"
    },
    {
        "solution": "```python\nanswer = a.rfind(x) == y\nprint(answer)\n```",
        "variables": {
            "a": "\u0538\u057d\u057f \u0561\u0575\u0564\u0574, \u0561\u0574\u0565\u0576\u0561\u056c\u0561\u057e \u0576\u0574\u0561\u0576 \u0570\u0561\u057d\u057f\u0561\u057f\u0578\u0582\u0569\u0575\u0578\u0582\u0576\u0576\u0565\u0580\u0578\u0582\u0574 \u056f\u0561\u0580\u0565\u056c\u056b \u0567 \u0563\u057f\u0576\u0565\u056c \u0561\u0574\u0565\u0576\u0561\u0577\u0584\u0565\u0572 \u0561\u0576\u056f\u0578\u0572\u0576\u0561\u0575\u056b\u0576 \u057a\u0561\u0580\u0561\u0563\u0561\u0576\u0565\u0580\u0568, \u0563\u0578\u0582\u0581\u0565 \u0571\u0565\u057c\u0561\u0563\u0578\u0580\u056e \u056e\u0561\u056e\u056f\u0578\u0581 \u056f\u0561\u0574 \u0570\u0576\u0561\u0578\u0573 \u0574\u0561\u0570\u0573\u0561\u056f\u0561\u056c:",
            "x": "\u0561\u0574\u0565\u0576\u0561\u056c\u0561\u057e",
            "y": 10
        },
        "query": [
            "Check if the last occurrence of {x} in {a} is at position {y}.",
            "Verify if {x} appears last in {a} at index {y}.",
            "Determine if the final instance of {x} in {a} is located at position {y}."
        ],
        "language": "hye_Armn"
    },
    {
        "solution": "```python\nanswer = a[x:y].islower() and a[x:y].isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Dagiti baybay, theme parks ken camp grounds ket masansan a gagangay a lugar a kanayon a bisitaen dagiti managlinglingay a turista.",
            "x": 7,
            "y": 13
        },
        "query": [
            "Check if the substring of {a} from {x} to {y} is both lowercase and alphabetic.",
            "Verify if the segment of {a} between indices {x} and {y} is in lowercase and consists only of alphabetic characters.",
            "Determine if the portion of {a} from position {x} to {y} is entirely lowercase and contains only letters."
        ],
        "language": "ilo_Latn"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).upper().find(y)\nprint(answer)\n```",
        "variables": {
            "a": "Peu nyan sel? Kata sel meuasai nibak kata Laten \"cella\", makeusudjih \"ruheung ubeut\", ng\u00f6n nyan keuph\u00f4n dipeugot le sidroe ahli mikroskop nyang geuamati struktur nibak gaboh.",
            "x": "h.",
            "y": "KATA"
        },
        "query": [
            "Strip any characters in {x} from the end of {a}, convert it to uppercase, and find the position of {y}.",
            "Remove characters in {x} from the end of {a}, change it to uppercase, and locate the index of {y}.",
            "Trim characters in {x} from the end of {a}, transform it to uppercase, and determine the position of {y}."
        ],
        "language": "ace_Latn"
    },
    {
        "solution": "```python\nanswer = a[::-1].lower()\nprint(answer)\n```",
        "variables": {
            "a": "Ahi ka ahi y\u00e8r\u00e8 togola ko Moriori, ahi ka k\u00e8l\u00e8 ko daman daman, a laban non Moriori don ka gb\u00e8 ka boy\u00e9."
        },
        "query": [
            "Reverse the string {a} and then convert all characters to lowercase.",
            "Flip the string {a} backwards and change all letters to lowercase.",
            "Take the string {a}, reverse it, and make all the characters lowercase."
        ],
        "language": "dyu_Latn"
    },
    {
        "solution": "```python\nanswer = a[:y].replace(x, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0936\u093f\u0916\u0930\u093e\u091c\u0935\u0933 \u0924\u093f\u0925\u0947 \u090f\u0915 \u091b\u094b\u091f\u0940\u0936\u0940 \u0917\u0941\u0939\u093e \u0906\u0939\u0947 \u091c\u094d\u092f\u093e\u092e\u0927\u0942\u0928 \u0906\u092a\u0932\u094d\u092f\u093e\u0932\u093e \u091c\u093e\u0935\u0947\u091a \u0932\u093e\u0917\u0924\u0947, \u0924\u0940 \u0916\u0942\u092a \u0916\u093e\u0932\u0940 \u0906\u0939\u0947 \u0916\u0930\u091a \u0916\u0942\u092a \u091a\u093f\u0902\u091a\u094b\u0933\u0940 \u0906\u0939\u0947.",
            "x": "\u0916\u0942\u092a",
            "y": 50,
            "z": "\u0905\u0924\u094d\u092f\u0902\u0924"
        },
        "query": [
            "Take the first {y} characters of {a} and replace {x} with {z}.",
            "Extract the first {y} characters from {a} and substitute {x} with {z}.",
            "Get the initial {y} characters of {a} and change {x} to {z}."
        ],
        "language": "mar_Deva"
    },
    {
        "solution": "```python\nanswer = a.islower() and a.isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "p\u00e9p\u00e0panama"
        },
        "query": [
            "Check if {a} is both in lowercase and a valid identifier.",
            "Determine if {a} is entirely in lowercase and also a valid identifier.",
            "Verify whether {a} is in lowercase and qualifies as a valid identifier."
        ],
        "language": "yor_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].lower().startswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "Per 'sta reson, in di mei\u00f9r str\u00fct\u00fcr de \u2018sto gen\u00e9r l\u2019\u00e8 fac\u00ecl truu\u00e0 la biancaria da l\u00e9cc p\u00fcss\u00e9 l\u00fcssuosa, fors\u00ec \u00fcna preponta f\u00e0da a m\u00e0n o un l\u00e9cc ant\u00ecch.",
            "x": 10,
            "y": 30,
            "z": "in di"
        },
        "query": [
            "Check if the substring of {a} from {x} to {y}, converted to lowercase, starts with {z}.",
            "Determine if the lowercase version of the substring of {a} from {x} to {y} begins with {z}.",
            "Verify if the substring of {a} from {x} to {y}, when converted to lowercase, starts with {z}."
        ],
        "language": "lmo_Latn"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).encode('utf-8').decode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "\u82f1\u570b\u5831\u7d19\u300a\u885b\u5831\u300b\u6697\u6307\uff0c\u7528\u65bc\u5be6\u73fe\u6b64\u76ee\u7684\u7684 1,200 \u9593\u7a7a\u6bbc\u516c\u53f8\u88e1\uff0c\u5fb7\u610f\u5fd7\u9280\u884c\u63a7\u5236\u4e86\u5927\u7d04\u4e09\u5206\u4e4b\u4e00\u3002",
            "x": "\u82f1\u570b\u5831\u7d19\u300a\u885b\u5831\u300b"
        },
        "query": [
            "Remove leading characters in {x} from {a}, encode it to UTF-8, and then decode it back to a string.",
            "Strip the leading characters specified in {x} from {a}, convert it to UTF-8 encoding, and decode it back to a string.",
            "Trim the leading characters found in {x} from {a}, encode it in UTF-8, and decode it back to a string."
        ],
        "language": "cmn_Hant"
    },
    {
        "solution": "```python\nanswer = a[x:].isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u0644\u0645\u0627 \u064a\u0643\u0648\u0646 \u0643\u0644 \u0627\u0644\u0623\u0641\u0631\u0627\u062f \u0645\u0646 \u0627\u0644\u0633\u0643\u0627\u0646 \u0645\u062a\u0637\u0627\u0628\u0642\u064a\u0646 \u0628\u062e\u0635\u0648\u0635 \u0635\u0641\u0629 \u0645\u0638\u0647\u0631\u064a\u0629 \u0645\u0639\u064a\u0646\u0629 \u060c \u0641\u0645\u0646\u062d\u0643\u064a \u0639\u0646\u0647\u0645 \u0623\u062d\u0627\u062f\u064a\u064a\u0646 \u0627\u0644\u0634\u0643\u0644.",
            "x": 10
        },
        "query": [
            "Check if the substring of {a} starting from index {x} is numeric.",
            "Determine if the part of {a} starting at position {x} consists only of numbers.",
            "Verify if the segment of {a} beginning from index {x} contains only numeric characters."
        ],
        "language": "apc_Arab_sout3123"
    },
    {
        "solution": "```python\nanswer = a.lower().endswith(x.lower())\nprint(answer)\n```",
        "variables": {
            "a": "S\u025b wop\u025b s\u025b woda ntamadan mu w\u2184 'Grand Canyon' hye no akyi a, \u025bbehia s\u025b wonya tumi krataa a w\u2184de k\u2184 nkurow nketewa a \u025bw\u2184 akyiri no bi.",
            "x": "akyiri no bi."
        },
        "query": [
            "Check if {a} in lowercase ends with {x} in lowercase.",
            "Verify if the lowercase version of {a} ends with the lowercase version of {x}.",
            "Determine if {a} converted to lowercase has a suffix of {x} converted to lowercase."
        ],
        "language": "twi_Latn_akua1239"
    },
    {
        "solution": "```python\nanswer = a[x:].isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Namba bilong ol 'native speaker' em i bihainim sapos ol i wankain ol i no wankain long ol 'dialect' we ol i wok long kaunim.",
            "x": 10
        },
        "query": [
            "Check if the substring of {a} from {x} to the end consists only of alphabetic characters.",
            "Verify if the substring of {a} starting at index {x} contains only letters.",
            "Determine if the portion of {a} from position {x} onwards is purely alphabetic."
        ],
        "language": "tpi_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x)[-1].isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "K\u00e1roly volt a brit kir\u00e1lyi csal\u00e1d els\u0151 olyan tagja, aki diplom\u00e1t szerzett.",
            "x": " "
        },
        "query": [
            "Split {a} by {x} and check if the last segment contains only alphabetic characters.",
            "Divide {a} using {x} and verify if the final part is composed solely of letters.",
            "Separate {a} with {x} and determine if the last section is purely alphabetic."
        ],
        "language": "hun_Latn"
    },
    {
        "solution": "```python\nanswer = a.swapcase().split(x)\nprint(answer)\n```",
        "variables": {
            "a": "Palamente ya Brazil e na le sebaka sa dingwaga tse 10 e ntse e ngangisanya ka kgang ya go letlelela manyalo a, mme go fitlha jaana manyalo a go nna jalo a letlelelwa fela kwa Rio Grande do Sul.",
            "x": " "
        },
        "query": [
            "Invert the case of all letters in {a} and then split the result by {x}.",
            "Change the case of each character in {a} and then divide the string by {x}.",
            "Toggle the case of every letter in {a} and then separate the string using {x}."
        ],
        "language": "tsn_Latn"
    },
    {
        "solution": "```python\nanswer = a.zfill(x).count(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0915\u0947\u0930\u0932",
            "x": 10,
            "y": "\u0930"
        },
        "query": [
            "Zero-fill {a} to {x} characters and count the occurrences of {y}.",
            "Pad {a} with zeros to make it {x} characters long and find how many times {y} appears.",
            "Fill {a} with leading zeros until it is {x} characters in length and count the number of {y}."
        ],
        "language": "dgo_Deva"
    },
    {
        "solution": "```python\nanswer = a[y:x:-1].islower()\nprint(answer)\n```",
        "variables": {
            "a": "Ditiriso tsa thanolo ya mafoko tse di direlang ka bonako - ditiriso tse di kgonang go ranola seele sotlhe jaaka sentse ka itiriso go tswa mo puong e nngwe go ya go e nngwe.",
            "x": 20,
            "y": 40
        },
        "query": [
            "Extract the substring from {a} starting at index {y+1}-th character to {x+1}-th character in reverse order and check if it is in lowercase.",
            "Get the substring from {a} in reverse order from the {y+1}-th character to the {x+1}-th character and verify if it is all lowercase.",
            "Retrieve the substring from {a} starting at the {y+1}-th character to the {x+1}-th character in reverse and determine if it is lowercase."
        ],
        "language": "tsn_Latn"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0c87\u0ca6\u0cb0\u0c82\u0ca4\u0cc6\u0caf\u0cc7, \u0cb8\u0ccd\u0caa\u0cc7\u0ca8\u0ccd \u0c97\u0cc6 \u0cb9\u0ccb\u0ca6 \u0cac\u0ccd\u0cb0\u0cbf\u0c9f\u0cbf\u0cb7\u0ccd \u0caa\u0ccd\u0cb0\u0cb5\u0cbe\u0cb8\u0cbf\u0c97\u0ca8\u0cca\u0cac\u0ccd\u0cac \u200b\u200b\u0c95\u0cc8\u0cac\u0cc0\u0cb8\u0cc1\u0ca4\u0ccd\u0ca4\u0cbe \u0c95\u0ccb\u0cb0\u0cc1\u0cb5 \u0cb6\u0cc1\u0cad \u0cb5\u0cbf\u0ca6\u0cbe\u0caf\u0ca6\u0cb2\u0ccd\u0cb2\u0cbf \u0c85\u0c82\u0c97\u0cc8\u0caf\u0cc1 \u0c95\u0cc8\u0cac\u0cc0\u0cb8\u0cc1\u0cb5\u0cb5\u0ca8 \u0c95\u0ca1\u0cc6\u0c97\u0cc6 \u0cae\u0cc1\u0c96 \u0cae\u0cbe\u0ca1\u0cbf\u0ca6\u0ccd\u0ca6\u0cb0\u0cc6 (\u0cb5\u0cbf\u0ca6\u0cbe\u0caf \u0cb8\u0ccd\u0cb5\u0cc0\u0c95\u0cb0\u0cbf\u0cb8\u0cc1\u0cb5\u0cb5\u0ca8\u0ca8\u0ccd\u0ca8\u0cc1 \u0cac\u0cbf\u0c9f\u0ccd\u0c9f\u0cc1) \u0c85\u0ca6\u0ca8\u0ccd\u0ca8\u0cb5\u0ca8\u0cc1 \u0cb5\u0cbe\u0caa\u0cb8\u0cc1 \u0cac\u0cb0\u0cb2\u0cbf\u0c95\u0ccd\u0c95\u0cc6 \u0c95\u0cca\u0ca1\u0cb2\u0cbe\u0c97\u0cc1\u0ca4\u0ccd\u0ca4\u0cbf\u0cb0\u0cc1\u0cb5 \u0cb8\u0cc2\u0c9a\u0ca8\u0cc6\u0caf\u0cc6\u0c82\u0ca6\u0cc1 \u0ca4\u0caa\u0ccd\u0caa\u0cc1 \u0ca4\u0cbf\u0cb3\u0cbf\u0caf\u0cac\u0cb9\u0cc1\u0ca6\u0cc1.",
            "x": "\u0cc1"
        },
        "query": [
            "Remove trailing characters in {x} from {a} and check if the result is a valid identifier.",
            "Trim trailing characters specified in {x} from {a} and verify if the outcome is a valid identifier.",
            "Check if the string obtained by removing trailing {x} characters from {a} is a valid identifier."
        ],
        "language": "kan_Knda"
    },
    {
        "solution": "```python\nanswer = a[::-1].capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "Genehmigungen m\u00fcssen im Voraus bestellt werden. Sie ben\u00f6tigen eine Genehmigung, um in La Sirena zu \u00fcbernachten."
        },
        "query": [
            "Reverse {a} and capitalize the first character of the result.",
            "Flip {a} backwards and make the first letter uppercase.",
            "Invert {a} and change the first character to uppercase."
        ],
        "language": "deu_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode(x).count(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0ec2\u0e94\u0e8d\u0e97\u0ebb\u0ec8\u0ea7\u0ec4\u0e9b\u0ec1\u0ea5\u0ec9\u0ea7 \u0e84\u0ead\u0e9a\u0e84\u0ebb\u0ea7\u0ec3\u0e99\u0ec0\u0ea1\u0eb7\u0ead\u0e87 \u0e8a\u0eb1\u0e81\u0ea5\u0eb1\u0ead\u0e94 (Charlotte) \u0e88\u0eb0\u0e9a\u0ecd\u0ec8\u0ec3\u0e8a\u0ec9\u0ea5\u0ebb\u0e94\u0ec1\u0e97\u0eca\u0e81\u0e8a\u0eb5, \u0ec0\u0e96\u0eb4\u0e87\u0ec1\u0ea1\u0ec8\u0e99\u0ea7\u0ec8\u0eb2\u0e9e\u0ea7\u0e81\u0ec0\u0e82\u0ebb\u0eb2\u0e88\u0eb0\u0eaa\u0eb2\u0ea1\u0eb2\u0e94\u0ec3\u0e8a\u0ec9\u0ea1\u0eb1\u0e99\u0ec4\u0e94\u0ec9\u0ec3\u0e99\u0e9a\u0eb2\u0e87\u0eaa\u0eb0\u0e96\u0eb2\u0e99\u0eb0\u0e81\u0eb2\u0e99.",
            "x": "lao_Laoo",
            "y": "\u0ec3\u0e8a\u0ec9"
        },
        "query": [
            "Count how many times {y} appears in {a} after encoding and decoding it with {x}.",
            "Determine the frequency of {y} in {a} after it has been encoded and decoded using {x}.",
            "Find the number of occurrences of {y} in {a} once it is encoded and decoded with {x}."
        ],
        "language": "lao_Laoo"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u062e\u0644\u0627\u0644 \u0627\u0644\u064020 \u0633\u0646\u0629 \u0627\u0644\u0645\u0627\u0636\u064a\u0629\u060c \u062a\u0632\u0627\u064a\u062f\u062a \u0627\u0644\u062e\u064a\u0627\u0631\u0627\u062a \u0627\u0644\u0645\u0644\u0627\u0626\u0645\u0629 \u0644\u0644\u0623\u0637\u0641\u0627\u0644 \u0641\u064a \u0623\u0628\u062a\u0627\u0648\u0646 \u0634\u0627\u0631\u0644\u0648\u062a \u062a\u0635\u0627\u0639\u062f\u064a\u0651\u0627\u064b.",
            "x": 4
        },
        "query": [
            "Check if {a} with tabs expanded to {x} spaces contains only alphanumeric characters.",
            "Determine if the string {a} becomes alphanumeric when tabs are replaced by {x} spaces.",
            "Verify if expanding tabs to {x} spaces in {a} results in an alphanumeric string."
        ],
        "language": "arb_Arab"
    },
    {
        "solution": "```python\nanswer = a[x::z].count(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u1270\u1218\u122b\u1218\u122d\u1272 \u12a2\u1295\u12ad\u120b\u12f0\u1235 \u1302\u12a6\u120e\u1302\u12ab \u1295\u1321\u134d\u1295 \u1295\u1293\u12ed \u1233\u1270\u122d\u1295 \u1260\u1228\u12f5 \u1240\u1208\u1260\u1275 \u12f5\u121b\u1213\u12f0 \u121d\u1295\u132a \u12a5\u12e9 \u12a2\u120e\u121d \u12ed\u12a3\u121d\u1291\u1361\u1361",
            "x": 5,
            "y": "\u1295",
            "z": 3
        },
        "query": [
            "Count occurrences of {y} in the segment of {a} starting from position {x} with a step of {z}.",
            "Find how many times {y} appears in the slice of {a} beginning at {x} and stepping by {z}.",
            "Determine the number of times {y} is present in the portion of {a} starting at index {x} and incrementing by {z}."
        ],
        "language": "tir_Ethi"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].upper().zfill(z)\nprint(answer)\n```",
        "variables": {
            "a": "mety ahita zava-pisotro tsotra be afaka amboarinao ho sakafo maraina ianao rehefa miverina amin\u2019ny rotoroto andavanandro.",
            "x": " ",
            "y": 3,
            "z": 10
        },
        "query": [
            "Split {a} by {x}, take the {y+1}-th element, convert it to uppercase, and pad it with leading zeros to reach {z} characters.",
            "Divide {a} using {x} as the delimiter, select the {y+1}-th part, change it to uppercase, and add leading zeros until it is {z} characters long.",
            "Break {a} at each {x}, pick the {y+1}-th segment, turn it into uppercase, and prepend zeros to make it {z} characters in length."
        ],
        "language": "plt_Latn"
    },
    {
        "solution": "```python\nanswer = a.join(x).islower()\nprint(answer)\n```",
        "variables": {
            "a": " ",
            "x": [
                "uma",
                "ukhululeka",
                "ngokususa",
                "nokwenezela",
                "izinto",
                "kuyiwebhu",
                "kamuva",
                "ungenza",
                "eyakho",
                "iwebhusayithi"
            ]
        },
        "query": [
            "Is the string formed by joining elements of {x} with {a} in lowercase?",
            "Does joining elements of {x} with {a} result in a lowercase string?",
            "When elements of {x} are joined with {a}, is the resulting string in lowercase?"
        ],
        "language": "zul_Latn"
    },
    {
        "solution": "```python\nanswer = a[:y].isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u0636\u0637\u0631\u0627\u0628 \u0646\u0642\u0635 \u0627\u0644\u0627\u0646\u062a\u0628\u0627\u0647 \u0645\u062a\u0644\u0627\u0632\u0645\u0629 \u0639\u0635\u0628\u064a\u0629 \u064a\u0645\u0643\u0646 \u062a\u0634\u062e\u064a\u0635\u0647\u0627 \u0639\u0646 \u0637\u0631\u064a\u0642 \u062b\u0644\u0627\u062b\u0629 \u0623\u0639\u0631\u0627\u0636 \u0645\u0639\u062a\u0627\u062f\u0629 \u0647\u064a \u0627\u0644\u0627\u0646\u062f\u0641\u0627\u0639\u060c \u0648\u0633\u0647\u0648\u0644\u0629 \u0627\u0644\u062a\u0634\u062a\u062a\u060c \u0648\u0641\u0631\u0637 \u0627\u0644\u0646\u0634\u0627\u0637 \u0623\u0648 \u0627\u0644\u0637\u0627\u0642\u0629 \u0627\u0644\u0632\u0627\u0626\u062f\u0629.",
            "y": 10
        },
        "query": [
            "Check if the first {y} characters of {a} form a valid identifier.",
            "Determine if the initial {y} characters of {a} are a valid identifier.",
            "Verify if the first {y} characters of {a} constitute a valid identifier."
        ],
        "language": "arb_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:].istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Letiningi tintfo letingcwatjwe na-Tutankhamun tigcinwe kahle, kufaka ema-artefacts latinkhulungwane lentiwe ngemathayela nangematje langakavami.",
            "x": 10
        },
        "query": [
            "Determine if the substring of {a} starting from the {x+1}-th character is in title case.",
            "Check if the substring of {a} starting from the {x+1}-th character is in title case.",
            "Is the substring of {a} starting from the {x+1}-th character in title case?"
        ],
        "language": "ssw_Latn"
    },
    {
        "solution": "```python\nanswer = a.isprintable() and a.isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "E tukuna na ovisa o Lo Piccolo e vakatagede e cake baleta ni a ligai-matau nei Provenzano ena Palermo kei na veika oqo e vakavuna na nodra rokovi koya na boso eso ena nodra sasagataka na lawatu nei Provenzano me kua ni kilai levu ka vaqaqacotaka na nodratou veisemati."
        },
        "query": [
            "Confirm if {a} is both printable and consists only of alphabetic characters.",
            "Check if {a} is printable and contains only letters.",
            "Verify that {a} is a printable string and has only alphabetic characters."
        ],
        "language": "fij_Latn"
    },
    {
        "solution": "```python\nanswer = a.capitalize().split(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Lango nga na sarango kua senge na kodoro wande ayeke nzoni lege ti baa fini teti akete mara nde, ti wara tere na fini azo, ti hinga tere, ti za na sese fini asarango ye nga na wara fini andara.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Capitalize {a} and then split it using {x} as the separator, performing up to {y} splits.",
            "Make the first letter of {a} uppercase and then divide it by {x}, with a maximum of {y} splits.",
            "Convert the first character of {a} to uppercase and split it by {x}, allowing up to {y} splits."
        ],
        "language": "sag_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().count(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0633\u0648\u0641\u0648\u0643\u0644\u064a\u0633 \u0648\u0623\u0631\u064a\u0633\u062a\u0648\u0641\u0627\u0646 \u0628\u0639\u062f\u0647\u0645 \u0645\u0646 \u0627\u0644\u0643\u062a\u0627\u0628 \u0627\u0644\u0645\u0633\u0631\u062d\u064a\u064a\u0646 \u0627\u0644\u0645\u0634\u0647\u0648\u0631\u064a\u0646 \u0648\u062a\u0639\u062a\u0628\u0631 \u0645\u0633\u0631\u062d\u064a\u0627\u062a\u0647\u0645 \u0645\u0646 \u0636\u0645\u0646 \u0623\u0639\u0638\u0645 \u0623\u0639\u0645\u0627\u0644 \u0627\u0644\u0623\u062f\u0628 \u0627\u0644\u0639\u0627\u0644\u0645\u064a.",
            "x": "\u0645"
        },
        "query": [
            "Count the occurrences of {x} in {a} after stripping leading and trailing whitespace.",
            "How many times does {x} appear in {a} after removing any leading and trailing spaces?",
            "Find the number of times {x} occurs in {a} once the leading and trailing whitespace is removed."
        ],
        "language": "apc_Arab_sout3123"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).splitlines(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u2d5c\u2d30\u2d54\u2d3e<\u2d3c\u2d5c\t\u2d5c<\u2d5c\u2d5c\u2d49\u2d63\u2d30\u2d54\t\u2d30\u2d59\u2d49\u2d3e<\u2d4d\t\u2d30\u2d59\t\u2d5c<\u2d5b\u2d61\u2d30\u2d39\t\u2d30\u2d31\u2d30-\u2d42\u2d30\u2d59\t\u2d5c\u2d49\u2d5c<\u2d5c\u2d5c\u2d49.\t\u2d37\u2d30\u2d36\t\u2d49\u2d4e\u2d49\u2d54\t\u2d61\u2d30\u2d57,\t\u2d5c\u2d30\u2d54\u2d3e<\u2d3c\u2d5c\t\u2d62\u2d30\u2d36\t\u2d30\u2d59\u2d59\u2d53\u2d3e\t\u2d3c\u2d53\u2d4d\u2d4d\t\u2d49\u2d62<\u2d4f\t\u2d4f\t\u2d4d\u2d61<\u2d48\t\u2d5c<\u2d59\u2d4e<\u2d59\u2d3e<\u2d4d\t\u2d30\u2d59\u2d59\u2d53\u2d3e\t\u2d30\u2d3e\u2d3e\t\u2d30\u2d5b<\u2d4d.",
            "x": 4,
            "y": true
        },
        "query": [
            "Convert tabs in {a} to {x} spaces and then split the string into lines, keeping line breaks if {y} is True.",
            "Replace tabs in {a} with {x} spaces and split the string into lines, preserving line breaks if {y} is True.",
            "Change tabs in {a} to {x} spaces and then divide the string into lines, maintaining line breaks if {y} is True."
        ],
        "language": "taq_Tfng"
    },
    {
        "solution": "```python\nanswer = a[x:y].title().swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "In teenstelling met aapsoorte, gebruik homeniedes nie meer hulle hande vir beweging of gewig dra of deur die bome swaai nie.",
            "x": 3,
            "y": 15
        },
        "query": [
            "Convert the substring of {a} from {x+1}-th to {y}-th character to title case and then swap its case.",
            "Change the substring of {a} from the {x+1}-th to the {y}-th character to title case and then invert its case.",
            "Transform the substring of {a} from the {x+1}-th to the {y}-th character to title case and then toggle its case."
        ],
        "language": "afr_Latn"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).encode('ascii', errors='replace')\nprint(answer)\n```",
        "variables": {
            "a": "\u0648\u0627\u062d\u062f \u0627\u0644\u0639\u0637\u0644 \u0643\u0647\u0631\u0628\u0627\u0626\u064a \u0645\u0646 \u0628\u0639\u062f \u0627\u062e\u062a\u0628\u0627\u0631 \u0631\u0648\u062a\u064a\u0646\u064a \u0644\u0646\u0638\u0627\u0645 \u0627\u0644\u062d\u0631\u0627\u0626\u0642 \u062e\u0644\u0627 \u0635\u0645\u0627\u0645\u0627\u062a \u0627\u0644\u062a\u0635\u0631\u064a\u0641 \u062a\u062a\u062d\u0644 \u0648\u062a\u062f\u0641\u0642 \u0627\u0644\u0646\u0641\u0637 \u0627\u0644\u062e\u0627\u0645 \u0628\u0627\u0644\u0642\u0631\u0628 \u0645\u0646 \u0645\u062d\u0637\u0629 \u0636\u062e \u0641\u0648\u0631\u062a \u063a\u0631\u064a\u0644\u064a \u0631\u0642\u0645 9.",
            "x": "\u0648\u0627\u062d\u062f"
        },
        "query": [
            "Remove leading {x} characters from {a} and encode it in ASCII, replacing unencodable characters with a question mark.",
            "Strip leading {x} characters from {a} and convert it to ASCII, substituting unencodable characters with a question mark.",
            "Trim leading {x} characters from {a} and encode it in ASCII format, using a question mark for characters that can't be encoded."
        ],
        "language": "ary_Arab"
    },
    {
        "solution": "```python\nanswer = a[x::z].istitle()\nprint(answer)\n```",
        "variables": {
            "a": "I bund og grund skal du s\u00e6tte opslag op hvori du tilbyder din hj\u00e6lp, g\u00e5 rundt p\u00e5 havnen, g\u00e5 op til folk der g\u00f8r rent i deres lystb\u00e5de, fors\u00f8ge at f\u00e5 kontakt med s\u00f8folk i baren osv.",
            "x": 10,
            "z": 3
        },
        "query": [
            "Is the substring of {a} starting from position {x+1}-th character to the end, stepping by {z}, in title case?",
            "Does the substring of {a} from the {x+1}-th character to the end, with a step of {z}, have each word capitalized?",
            "Is the section of {a} starting at the {x+1}-th character and taking every {z}-th character in title case?"
        ],
        "language": "dan_Latn"
    },
    {
        "solution": "```python\nanswer = a[:x].encode(encoding='utf-8', errors='replace')\nprint(answer)\n```",
        "variables": {
            "a": "\u1c62\u1c5f\u1c6f\u1c69\u1c6a\u1c6e \u1c62\u1c5f\u1c6c\u1c5f\u1c5d \u1c6f\u1c77\u1c69\u1c68\u1c5c\u1c5f\u1c79\u1c5e \u1c5f\u1c62\u1c6e\u1c68\u1c64\u1c60\u1c64 \u1c65\u1c63\u1c5f\u1c6b\u1c6e\u1c65\u1c64 \u1c5c\u1c5f\u1c6b\u1c6e\u1c5e \u1c60\u1c5a\u1c68\u1c6e \u1c60\u1c77\u1c5a\u1c71 \u1c62\u1c64\u1c6b\u1c74\u1c5f\u1c5d \u1c5b\u1c5f\u1c66\u1c6e\u1c78 \u1c60\u1c5f\u1c71\u1c5f\u1c6d, \u1c61\u1c5f\u1c66\u1c5f\u1c78 \u1c6b\u1c5a \u1c6a\u1c64\u1c60\u1c64 \u1c5f\u1c5c \u1c6f\u1c77\u1c69\u1c68\u1c5c\u1c5f\u1c79\u1c5e \u1c5b\u1c5f\u1c6d\u1c5a\u1c62 \u1c66\u1c5f\u1c79\u1c75\u1c64\u1c61 \u1c65\u1c6f\u1c6e\u1c71\u1c64\u1c65 \u1c6f\u1c5f\u1c79\u1c68\u1c65\u1c64 \u1c71\u1c64\u1c6d\u1c5a\u1c62 \u1c68\u1c6e \u1c6f\u1c69\u1c68\u1c5f\u1c79 \u1c5e\u1c6e\u1c60\u1c5f\u1c5b\u1c6e \u1c5f\u1c63\u1c65\u1c5a\u1c65\u1c64\u1c5b \u1c75\u1c5f\u1c5d \u1c66\u1c69\u1c6d \u1c5f\u1c60\u1c5f\u1c71 \u1c5b\u1c5f\u1c66\u1c6e\u1c71\u1c5f\u1c7e",
            "x": 10
        },
        "query": [
            "Encode the initial substring of {a} up to {x} characters in UTF-8, replacing unencodable characters with a question mark.",
            "Convert the first {x} characters of {a} to UTF-8, substituting any unencodable characters with a question mark.",
            "Transform the first {x} characters of {a} into UTF-8 encoding, using a question mark for characters that can't be encoded."
        ],
        "language": "sat_Olck"
    },
    {
        "solution": "```python\nanswer = a[y:z].swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "Long Jun 28, Marshal Italo Balbo, Governor-General bilong Libya i bin dai taim em i go long Tobruk. Em i inap long kisim ples bilong Mussolini, tasol ol lain bilong em yet i abrus na i kilim em.",
            "y": 10,
            "z": 30
        },
        "query": [
            "Swap the case of characters in the substring of {a} from index {y} to {z}.",
            "Change the case of each character in the substring of {a} starting at index {y} and ending at index {z}.",
            "Convert uppercase to lowercase and vice versa for the substring of {a} from index {y} to {z}."
        ],
        "language": "tpi_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().split(x)[y].islower()\nprint(answer)\n```",
        "variables": {
            "a": "Banyama ya zamba eza na kati ya biloko ya mpasi mingi ya kokanga foto mpona moto akangaka foto, mpe esengeli kozala na libaku ya malamu, motema molai, mayele mpe bisaleli ebongi.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Remove leading and trailing whitespace from {a}, split it by {x}, and check if the {y+1}-th substring is in lowercase.",
            "Trim the whitespace from both ends of {a}, divide it by {x}, and verify if the {y+1}-th segment is in lowercase.",
            "Eliminate the surrounding spaces from {a}, separate it using {x}, and determine if the {y+1}-th part is in lowercase."
        ],
        "language": "lin_Latn"
    },
    {
        "solution": "```python\nanswer = a.find(x) != -1 and a.find(y) != -1\nprint(answer)\n```",
        "variables": {
            "a": "\u0414\u0436\u0435\u0444\u0444\u0440\u0438 \u0423\u0438\u0437\u044b\u043c \u0434\u0430 \u0438\u043d\u0434\u0435\u0448 \u043a\u043e\u043b\u044b\u0448\u043e \u0433\u044b\u0447 \u043a\u0443\u043c\u044b\u0442\u044b\u043c \u0442\u043e\u0439\u044b\u043c\u043e \u0433\u043e\u0434\u044b\u043c \u0420\u0435\u0434-\u041b\u0435\u0439\u043a\u044b\u0448\u0442\u0435 \u0438\u043b\u044b\u0448\u0435-\u0432\u043b\u0430\u043a \u043a\u043e\u043a\u043b\u0430\u0448\u0442\u0435 \u0443\u0432\u0435\u0440 \u043b\u0435\u043a\u0442\u044b\u043d: 21 \u043c\u0430\u0440\u0442\u044b\u0448\u0442\u0435   \u0448\u043a\u043e\u043b\u044b\u0448\u0442\u043e \u043b\u04f1\u0439\u043a\u0430\u043b\u044b\u043c\u044b\u043b\u0430\u043d \u043a\u04e7\u0440\u0430 \u044d\u0448\u0435 \u0438\u043a \u0441\u0442\u0443\u0434\u0435\u043d\u0442 \u043a\u0443\u0447\u0430\u043b\u0442\u044b\u043d.",
            "x": "\u0414\u0436\u0435\u0444\u0444\u0440\u0438",
            "y": "\u0441\u0442\u0443\u0434\u0435\u043d\u0442"
        },
        "query": [
            "Check if both {x} and {y} are present in {a}.",
            "Verify if {a} contains both {x} and {y}.",
            "Determine if both {x} and {y} exist in {a}."
        ],
        "language": "mhr_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.strip(x).isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Couchsurfing yashinzwe muri Mutarama 2004 nyuma y\u2019aho umukozi wa mudasobwa Casey Fentom avumburiye indege ihendutse ijya muri Iceland ariko adafite ahantu ho gucumbika.",
            "x": "Couchsurfing"
        },
        "query": [
            "Trim leading and trailing characters in {x} from {a} and check if the result contains only ASCII characters.",
            "Remove characters in {x} from the start and end of {a} and verify if the resulting string is ASCII only.",
            "Check if the string obtained by stripping {x} from both ends of {a} consists solely of ASCII characters."
        ],
        "language": "kin_Latn"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u041e\u0448\u043c\u0430\u043c",
            "x": 10,
            "y": "0"
        },
        "query": [
            "Left-justify {a} to make it {x} characters long using {y} as the padding character, then check if the result consists solely of digits.",
            "Pad {a} on the right with {y} until it is {x} characters long, then verify if the resulting string is composed only of digits.",
            "Make {a} {x} characters long by padding it with {y} on the right, and then determine if the final string contains only numeric characters."
        ],
        "language": "mhr_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('utf-8').center(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0421\u044c\u043e\u0433\u043e\u0434\u043d\u0456 \u0443 \u0440\u043e\u0437\u0432\u0438\u043d\u0435\u043d\u0438\u0445 \u043a\u0440\u0430\u0457\u043d\u0430\u0445 \u043d\u0430\u0434\u0430\u043d\u043d\u044f \u0440\u043e\u0437\u043a\u0456\u0448\u043d\u0438\u0445 \u043f\u043e\u0441\u043b\u0443\u0433 \u0443 \u0440\u0430\u043c\u043a\u0430\u0445 \"\u043d\u0456\u0447\u043b\u0456\u0433 \u0442\u0430 \u0441\u043d\u0456\u0434\u0430\u043d\u043e\u043a\" \u0434\u043e\u0441\u044f\u0433\u043b\u043e \u0440\u0456\u0432\u043d\u044f \u0441\u0432\u043e\u0454\u0440\u0456\u0434\u043d\u043e\u0433\u043e \u043c\u0438\u0441\u0442\u0435\u0446\u0442\u0432\u0430.",
            "x": 150,
            "y": "*"
        },
        "query": [
            "Encode {a} to UTF-8, decode it back, and center it in a field of {x} characters with {y} as the fill character.",
            "Convert {a} to UTF-8 and back, then center it within {x} characters using {y} as the padding character.",
            "Transform {a} to UTF-8 and revert it, then align it centrally in a space of {x} characters with {y} as the filler."
        ],
        "language": "ukr_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[:x].title().rjust(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "Kwako wa mutu lili lihi kuhiana kulo, nhi phalanges joloka.",
            "x": 10,
            "y": 20,
            "z": "*"
        },
        "query": [
            "Take the first {x} characters of {a}, convert them to title case, and right-justify the result with a total width of {y} using {z} as the padding character.",
            "Extract the first {x} characters from {a}, change them to title case, and right-align the result to a width of {y} with {z} as the fill character.",
            "Get the first {x} characters from {a}, transform them to title case, and right-justify the output to a width of {y} using {z} as the padding character."
        ],
        "language": "cjk_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y:z].capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "Organiz\u00e1cia Go Running Tours, ktor\u00e1 je nasledovn\u00edkom Global Running Tours, zdru\u017euje desiatky organiz\u00e1torov be\u017eeck\u00fdch prehliadok na \u0161tyroch kontinentoch.",
            "x": 0,
            "y": 10,
            "z": 2
        },
        "query": [
            "Select the substring of {a} from {x} to {y} with a step of {z} and capitalize it.",
            "Extract the substring from {a} starting at index {x} and ending at index {y} with a step of {z}, then capitalize the result.",
            "Get the substring of {a} between indices {x} and {y} with a step of {z}, and convert it to capitalized form."
        ],
        "language": "slk_Latn"
    },
    {
        "solution": "```python\nanswer = a.isalpha() and a.istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Senki"
        },
        "query": [
            "Verify if all characters in {a} are alphabetic and if {a} is in title case.",
            "Check if {a} consists only of alphabetic characters and is in title case.",
            "Determine if all characters in {a} are letters and if {a} is capitalized correctly."
        ],
        "language": "hun_Latn"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u041c\u0430\u043f\u0443\u0447\u0435 \u0441\u0443 \u0431\u0438\u043b\u0438 \u0458\u0435\u0434\u043d\u0430 \u043e\u0434 \u043f\u043e\u0441\u043b\u0435\u0434\u045a\u0438\u0445 \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u043d\u0438\u0445 \u0430\u043c\u0435\u0440\u0438\u0447\u043a\u0438\u0445 \u0434\u043e\u043c\u043e\u0440\u043e\u0434\u0430\u0447\u043a\u0438\u0445 \u0433\u0440\u0443\u043f\u0430, \u043a\u043e\u0458\u0438 \u0441\u0435 \u043d\u0438\u0441\u0443 \u043f\u043e\u0442\u043f\u0443\u043d\u043e \u0430\u0441\u0438\u043c\u0438\u043b\u043e\u0432\u0430\u043d\u0438 \u0443 \u043f\u0440\u0430\u0432\u0438\u043b\u0430 \u0448\u043f\u0430\u043d\u0441\u043a\u043e\u0433 \u0433\u043e\u0432\u043e\u0440\u0430 \u0441\u0432\u0435 \u0434\u043e\u043a \u0427\u0438\u043b\u0435 \u043d\u0438\u0458\u0435 \u043f\u043e\u0441\u0442\u0430\u043e \u043d\u0435\u0437\u0430\u0432\u0438\u0441\u043d\u0430 \u0434\u0440\u0436\u0430\u0432\u0430.",
            "x": 4
        },
        "query": [
            "Replace tabs in {a} with {x} spaces, then check if the result is numeric.",
            "Substitute tabs in {a} with {x} spaces and verify if the outcome is numeric.",
            "Convert tabs in {a} to {x} spaces and determine if the resulting string is numeric."
        ],
        "language": "srp_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.strip(x).find(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u064a\u0648\u0641\u0631 \u0645\u0646\u0647\u062c \u0645\u0627 \u0628\u0639\u062f \u0627\u0644\u062a\u0645\u062f\u0646 \u0627\u0644\u062a\u0639\u0644\u064a\u0645\u064a \u0627\u0644\u062a\u062d\u0631\u0631 \u0645\u0646 \u0627\u0644\u0645\u0637\u0644\u0642\u0627\u062a\u060c \u0641\u0644\u064a\u0633 \u0647\u0646\u0627\u0643 \u0637\u0631\u064a\u0642\u0629 \u0648\u0627\u062d\u062f\u0629 \u062c\u064a\u062f\u0629 \u0644\u0644\u062a\u0639\u0644\u0645.",
            "x": "\u064a\u0648\u0641\u0631",
            "y": "\u0627\u0644\u062a\u0639\u0644\u0645"
        },
        "query": [
            "Find the index of {y} in {a} after stripping characters in {x} from both ends.",
            "Determine the position of {y} in {a} after removing characters in {x} from the start and end.",
            "Locate the index of {y} in {a} once characters in {x} are stripped from both sides."
        ],
        "language": "arb_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:].upper().endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "Oamenii sunt de departe specia cea mai talentat\u0103 la citirea g\u00e2ndurilor altora.",
            "x": 10,
            "y": "ALTORA."
        },
        "query": [
            "Does the substring of {a} from {x} to the end, converted to uppercase, end with {y}?",
            "Is the uppercase version of the substring of {a} from position {x} to the end ending with {y}?",
            "Check if the substring of {a} starting from index {x} to the end, when converted to uppercase, ends with {y}."
        ],
        "language": "ron_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(y).startswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0420\u043e\u0434\u0438\u0432\u0448\u0438\u0441\u044c \u0432 \u0441\u0442\u043e\u043b\u0438\u0446\u0435 \u0425\u043e\u0440\u0432\u0430\u0442\u0438\u0438 \u0417\u0430\u0433\u0440\u0435\u0431\u0435, \u0411\u043e\u0431\u0435\u043a \u043f\u043e\u043b\u0443\u0447\u0438\u043b \u0438\u0437\u0432\u0435\u0441\u0442\u043d\u043e\u0441\u0442\u044c, \u0438\u0433\u0440\u0430\u044f \u0437\u0430 \u0444\u0443\u0442\u0431\u043e\u043b\u044c\u043d\u044b\u0439 \u043a\u043b\u0443\u0431 \"\u041f\u0430\u0440\u0442\u0438\u0437\u0430\u043d\" \u0411\u0435\u043b\u0433\u0440\u0430\u0434.",
            "x": "\u0420\u043e\u0434\u0438\u0432\u0448\u0438\u0441\u044c",
            "y": " .\""
        },
        "query": [
            "Check if {a} starts with {x} after removing leading and trailing characters in {y}.",
            "Determine if {a} begins with {x} once the characters in {y} are stripped from both ends.",
            "Verify if {a} starts with {x} after trimming the characters in {y} from the start and end."
        ],
        "language": "rus_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x:].title()\nprint(answer)\n```",
        "variables": {
            "a": "Inama shilasangwa konse fye pa calo. Shilemba mu mushili, shilowa muli ba beemba, no kupupuka mu lwelele.",
            "x": 6
        },
        "query": [
            "Take the substring of {a} starting from index {x} and convert it to title case.",
            "Extract the substring from {a} starting at position {x} and change it to title case.",
            "Get the substring of {a} beginning at index {x} and transform it to title case."
        ],
        "language": "bem_Latn"
    },
    {
        "solution": "```python\nanswer = a[:y].swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "N\u025bm\u025b laa pu\u0254\u0331ny ran laa jak\u025b k\u00e4 cuuc \u025bl\u0254\u0331\u014b mi\u0331 bi\u0331 bi\u0331 raan laa ker k\u025b k\u0254r d\u00e4gi\u025b\u025bkni\u0331 ti\u0331 ji\u025bn da\u0331\u014b r\u025bw ki\u025b ji\u025bn di\u0254\u0331k k\u00e4 b\u025b t\u00e4lb\u00e4dhi\u00f6\u00f6n guic.",
            "y": 10
        },
        "query": [
            "Take the first {y} characters of {a} and swap their case.",
            "Extract the first {y} characters from {a} and change their case.",
            "Get the first {y} characters of {a} and invert their case."
        ],
        "language": "nus_Latn"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).encode(encoding='utf-8', errors='replace')\nprint(answer)\n```",
        "variables": {
            "a": "\u0535\u0580\u056f\u0578\u0582 \u057f\u0561\u057d\u0576\u0561\u0574\u0575\u0561\u056f\u056b \u0568\u0576\u0569\u0561\u0581\u0584\u0578\u0582\u0574 \u0549\u056b\u0576\u0561\u057d\u057f\u0561\u0576\u056b \u0540\u0546\u0531-\u0576 \u056f\u0561\u0580\u0578\u0572 \u0567 \u0561\u057e\u0565\u056c\u056b \u0574\u0565\u056e \u056c\u056b\u0576\u0565\u056c \u0544\u056b\u0561\u0581\u0575\u0561\u056c \u0546\u0561\u0570\u0561\u0576\u0563\u0576\u0565\u0580\u056b\u0576\u056b\u0581:",
            "x": 100,
            "y": " "
        },
        "query": [
            "Left justify {a} to length {x} with {y} and encode it in UTF-8, replacing unencodable characters.",
            "Pad {a} to a total length of {x} using {y} on the left and encode it in UTF-8, replacing any characters that can't be encoded.",
            "Make {a} left-aligned to a width of {x} with {y} and convert it to UTF-8 encoding, substituting any unencodable characters."
        ],
        "language": "hye_Armn"
    },
    {
        "solution": "```python\nanswer = a.zfill(x).upper()\nprint(answer)\n```",
        "variables": {
            "a": "Zoom lenses(enlenna) that lohna ber chu khawhmuh danah eng eng emaw buiana a awm th\u00een avang leh lens nihdan tura siamtu(element) tamtak prime lenses aia a mamawh tam zawk vang a ni.",
            "x": 150
        },
        "query": [
            "Pad {a} with zeros to make its length {x} and convert it to uppercase.",
            "Add leading zeros to {a} to reach a length of {x} and change it to uppercase.",
            "Fill {a} with zeros until its length is {x} and transform it to uppercase."
        ],
        "language": "lus_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('utf-8').isascii()\nprint(answer)\n```",
        "variables": {
            "a": "De Broadcasting Services Act z\u00f6rg veur de regulering vaan digitale content, mer um es digitale content te weure besjouwt moot \u2018t daodwerkelek op \u2018ne server stoon."
        },
        "query": [
            "Encode {a} to UTF-8 and then decode it back to a string, and check if the result contains only ASCII characters.",
            "Convert {a} to UTF-8 bytes and then back to a string, and verify if it consists solely of ASCII characters.",
            "Transform {a} to UTF-8 encoding and then decode it, ensuring the final string is purely ASCII."
        ],
        "language": "lim_Latn"
    },
    {
        "solution": "```python\nanswer = a.count(x, y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u041a\u0430\u043b\u0456 \u043c\u0430\u0448\u044b\u043d\u044b \u043f\u0435\u0440\u0430\u0434 \u0410\u043b\u043e\u043d\u0441\u0430 \u0440\u0443\u0448\u044b\u043b\u0456 \u0437\u0430 \u043c\u0430\u0448\u044b\u043d\u0430\u0439 \u0431\u044f\u0441\u043f\u0435\u043a\u0456 \u0437\u0430\u043f\u0440\u0430\u045e\u043b\u044f\u0446\u0446\u0430, \u0451\u043d \u0440\u044b\u043d\u0443\u045e\u0441\u044f \u043d\u0430\u043f\u0435\u0440\u0430\u0434 \u043f\u0430 \u043f\u0435\u0440\u0430\u043c\u043e\u0433\u0443.",
            "x": "\u0430",
            "y": 0,
            "z": 50
        },
        "query": [
            "Count occurrences of {x} in {a} from position {y} to {z}.",
            "Find the number of times {x} appears in {a} between positions {y} and {z}.",
            "Determine how many times {x} is present in {a} from index {y} to {z}."
        ],
        "language": "bel_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.find(x, y).isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u0411\u0430\u044a\u0437\u0430\u043d \u0434\u0430\u0440 \u0430\u0433\u0440\u0435\u0433\u0430\u0442\u043e\u0440\u04b3\u043e\u0438 \u0433\u0443\u043d\u043e\u0433\u0443\u043d \u04b3\u0430\u043c\u043e\u043d \u044f\u043a \u043f\u0430\u0440\u0432\u043e\u0437 \u043c\u0435\u0442\u0430\u0432\u043e\u043d\u0430\u0434 \u043d\u0430\u0440\u0445\u04b3\u043e\u0438 \u0442\u0430\u043c\u043e\u043c\u0430\u043d \u0433\u0443\u043d\u043e\u0433\u0443\u043d \u0434\u043e\u0448\u0442\u0430 \u0431\u043e\u0448\u0430\u043d\u0434 \u0432\u0430 \u043c\u0443\u049b\u043e\u0438\u0441\u0430\u0438 \u043d\u0430\u0442\u0438\u04b7\u0430\u04b3\u043e\u0438 \u04b7\u0443\u0441\u0442\u0443\u04b7\u04ef, \u0438\u043d\u0447\u0443\u043d\u0438\u043d \u043d\u0438\u0433\u043e\u04b3 \u043a\u0430\u0440\u0434\u0430\u043d \u0431\u0430 \u0441\u043e\u043c\u043e\u043d\u0430\u0438 \u0445\u0443\u0434\u0438 \u0448\u0438\u0440\u043a\u0430\u0442\u0438 \u04b3\u0430\u0432\u043e\u043f\u0430\u0439\u043c\u043e\u04e3 \u049b\u0430\u0431\u043b \u0430\u0437 \u0444\u0430\u0440\u043c\u043e\u0438\u0448 \u043c\u0443\u0444\u0438\u0434 \u0430\u0441\u0442.",
            "x": "\u043d\u0430\u0440\u0445",
            "y": 0
        },
        "query": [
            "Find the position of {x} in {a} starting from position {y} and check if the result is numeric.",
            "Locate the index of {x} in {a} beginning at {y} and determine if the outcome is numeric.",
            "Search for {x} in {a} from position {y} and verify if the found index is numeric."
        ],
        "language": "tgk_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[:x].isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u12a2\u120d-76 \u12a81970 \u12ce\u1279 \u1300\u121d\u122e \u12e8\u1229\u1232\u12eb \u12a5\u1293 \u12e8\u1236\u126a\u12ec\u1275 \u1326\u122d \u1283\u12ed\u120d \u12cb\u1293 \u12a0\u12ab\u120d \u1206\u1296 \u1263\u1208\u1348\u12cd \u12c8\u122d \u1260\u1229\u1232\u12eb \u12cd\u1235\u1325 \u1260\u12a8\u1263\u12f5 \u12a0\u12f0\u130b \u1273\u12ed\u1277\u120d\u1362",
            "x": 10
        },
        "query": [
            "Are all characters in the substring of {a} up to index {x} printable?",
            "Is the substring of {a} from the start to index {x} entirely printable?",
            "Does the substring of {a} up to the {x}th character contain only printable characters?"
        ],
        "language": "amh_Ethi"
    },
    {
        "solution": "```python\nanswer = a[x:y].swapcase().rjust(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "Mumiyan\u0131 tabuttan \u00e7\u0131qar\u0131p alma\u011fa \u0131nt\u0131l\u011fanlarnn\u0131\u00f1 o\u00f1a bergen zarar\u0131n\u0131 k\u00f6rmek istegen er bir insan, yal\u0131\u00f1\u0131z ba\u015f ve omuzlar\u0131 k\u00f6r\u00fcngeni i\u00e7\u00fcn mu\u011fayacaqt\u0131r.",
            "x": 10,
            "y": 20,
            "z": 30,
            "w": "*"
        },
        "query": [
            "Take a slice of {a} from {x} to {y}, swap the case of the characters, and right-align it in a string of length {z} with {w}.",
            "Extract a substring from {a} starting at index {x} and ending at index {y}, change the case of each character, and pad it on the left to make its total length {z} using {w}.",
            "Get the substring of {a} from position {x} to {y}, invert the case of its letters, and align it to the right in a string of length {z} filled with {w}."
        ],
        "language": "crh_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].isalnum() and a[y:z].isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "\u0190n jiath \u025bm\u0254 no\u0331o\u0331\u014b w\u00e4l lue\u014b\u00e4 mi deer\u00e4l nath ya\u0331r am\u00e4ni r\u025bc.",
            "x": 3,
            "y": 10,
            "z": 15
        },
        "query": [
            "Check if the substring from {x} to {y} in {a} is alphanumeric and the substring from {y} to {z} is alphabetic.",
            "Verify if the part of {a} from {x} to {y} contains only alphanumeric characters and the part from {y} to {z} contains only alphabetic characters.",
            "Determine if the section of {a} between {x} and {y} is alphanumeric and the section between {y} and {z} is alphabetic."
        ],
        "language": "nus_Latn"
    },
    {
        "solution": "```python\nanswer = a.upper().find(x) == a.lower().find(y)\nprint(answer)\n```",
        "variables": {
            "a": "El Congr\u00e9s Nacional del Brasil fa 10 anys que en debat la legalitzaci\u00f3, i aquests matrimonis civils actualment nom\u00e9s s\u00f3n legals a Rio Grande do Sul.",
            "x": "N",
            "y": "n"
        },
        "query": [
            "Check if the position of {x} in the uppercase version of {a} is the same as the position of {y} in the lowercase version of {a}.",
            "Verify if the index of {x} in the uppercase string {a} matches the index of {y} in the lowercase string {a}.",
            "Determine if the location of {x} in the uppercase form of {a} is identical to the location of {y} in the lowercase form of {a}."
        ],
        "language": "cat_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::z].startswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "Yahoo!-\u10e1 \u10d3\u10d0 Microsoft-\u10d8\u10e1 \u10d4\u10e0\u10d7\u10dd\u10d1\u10da\u10d8\u10d5\u10d8 \u10db\u10dd\u10db\u10e1\u10d0\u10ee\u10e3\u10e0\u10d4\u10d1\u10d4\u10d1\u10d8\u10e1 \u10db\u10dd\u10db\u10ee\u10db\u10d0\u10e0\u10d4\u10d1\u10d4\u10da\u10d7\u10d0 \u10dc\u10d0\u10ec\u10d8\u10da\u10d8 \u10d9\u10dd\u10dc\u10d9\u10e3\u10e0\u10d4\u10dc\u10ea\u10d8\u10d0\u10e1 \u10d2\u10d0\u10e3\u10ec\u10d4\u10d5\u10e1 AOL-\u10d8\u10e1 \u10db\u10dd\u10db\u10ee\u10db\u10d0\u10e0\u10d4\u10d1\u10da\u10d4\u10d1\u10e1.",
            "x": 10,
            "y": "Microsoft",
            "z": 1
        },
        "query": [
            "Determine if the substring of {a} starting at index {x} and taking every {z}-th character starts with {y}.",
            "Check if the substring of {a} beginning at index {x} and taking every {z}-th character begins with {y}.",
            "Verify if the substring of {a} from position {x} and taking every {z}-th character starts with {y}."
        ],
        "language": "kat_Geor"
    },
    {
        "solution": "```python\nanswer = a[x:y].endswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0e08\u0e32\u0e01\u0e19\u0e31\u0e49\u0e19 \u0e44\u0e21\u0e48\u0e01\u0e35\u0e48\u0e1b\u0e35\u0e15\u0e48\u0e2d\u0e21\u0e32\u0e43\u0e19\u0e1b\u0e35 1639 \u0e19\u0e31\u0e01\u0e14\u0e32\u0e23\u0e32\u0e28\u0e32\u0e2a\u0e15\u0e23\u0e4c\u0e0a\u0e32\u0e27\u0e2d\u0e31\u0e07\u0e01\u0e24\u0e29\u0e19\u0e32\u0e21\u0e27\u0e48\u0e32 \u0e40\u0e08\u0e40\u0e23\u0e44\u0e21\u0e2d\u0e32\u0e2b\u0e4c \u0e2e\u0e2d\u0e23\u0e4c\u0e23\u0e47\u0e2d\u0e01\u0e2a\u0e4c \u0e01\u0e47\u0e44\u0e14\u0e49\u0e40\u0e1d\u0e49\u0e32\u0e2a\u0e31\u0e07\u0e40\u0e01\u0e15\u0e01\u0e32\u0e23\u0e40\u0e04\u0e25\u0e37\u0e48\u0e2d\u0e19\u0e1c\u0e48\u0e32\u0e19\u0e02\u0e2d\u0e07\u0e14\u0e32\u0e27\u0e28\u0e38\u0e01\u0e23\u0e4c",
            "x": 10,
            "y": 20,
            "z": "\u0e1b\u0e35 1639"
        },
        "query": [
            "Determine if the substring from {x} to {y} in {a} ends with {z}.",
            "Check if the substring of {a} from index {x} to {y} ends with {z}.",
            "Is the substring from {x} to {y} in {a} ending with {z}?"
        ],
        "language": "tha_Thai"
    },
    {
        "solution": "```python\nanswer = a[:x:y].isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u0917\u0930\u094d\u092e\u093f\u092f\u094b\u0902 \u092e\u0947\u0902 \u092c\u0939\u0941\u0924 \u0932\u0902\u092c\u0947 \u0926\u093f\u0928 \u092a\u0930\u094d\u092f\u093e\u092a\u094d\u0924 \u0928\u0940\u0902\u0926 \u0914\u0930 \u0938\u094d\u0935\u093e\u0938\u094d\u0925\u094d\u092f \u0938\u0947 \u091c\u0941\u095c\u0940 \u0938\u092e\u0938\u094d\u092f\u093e\u0913\u0902 \u0915\u093e \u0915\u093e\u0930\u0923 \u0939\u094b \u0938\u0915\u0924\u0947 \u0939\u0948\u0902\u0964",
            "x": 20,
            "y": 2
        },
        "query": [
            "Verify if the first {x} characters of {a}, stepping by {y}, are all digits.",
            "Check if the substring of {a} from the start to {x} with a step of {y} consists only of digits.",
            "Determine if every {y}th character in the first {x} characters of {a} is a digit."
        ],
        "language": "hin_Deva"
    },
    {
        "solution": "```python\nanswer = a[x::z].isdecimal()\nprint(answer)\n```",
        "variables": {
            "a": "\u0e1b\u0e35\u0e40\u0e15\u0e2d\u0e23\u0e4c \u0e04\u0e2d\u0e2a\u0e40\u0e15\u0e25\u0e42\u0e25 \u0e40\u0e2b\u0e23\u0e31\u0e0d\u0e0d\u0e34\u0e01\u0e0a\u0e32\u0e27\u0e2d\u0e2d\u0e2a\u0e40\u0e15\u0e23\u0e40\u0e25\u0e35\u0e22\u0e41\u0e25\u0e30\u0e1c\u0e39\u0e49\u0e17\u0e35\u0e48\u0e21\u0e35\u0e41\u0e19\u0e27\u0e42\u0e19\u0e49\u0e21\u0e27\u0e48\u0e32\u0e08\u0e30\u0e44\u0e14\u0e49\u0e23\u0e31\u0e1a\u0e2a\u0e37\u0e1a\u0e17\u0e2d\u0e14\u0e15\u0e33\u0e41\u0e2b\u0e19\u0e48\u0e07\u0e15\u0e48\u0e2d\u0e08\u0e32\u0e01\u0e19\u0e32\u0e22\u0e01\u0e23\u0e31\u0e10\u0e21\u0e19\u0e15\u0e23\u0e35\u0e08\u0e2d\u0e2b\u0e4c\u0e19 \u0e42\u0e2e\u0e40\u0e27\u0e34\u0e23\u0e4c\u0e14 \u0e43\u0e19\u0e10\u0e32\u0e19\u0e30\u0e2b\u0e31\u0e27\u0e2b\u0e19\u0e49\u0e32\u0e1e\u0e23\u0e23\u0e04\u0e40\u0e2a\u0e23\u0e35\u0e19\u0e34\u0e22\u0e21 \u0e44\u0e14\u0e49\u0e43\u0e2b\u0e49\u0e01\u0e32\u0e23\u0e2a\u0e19\u0e31\u0e1a\u0e2a\u0e19\u0e38\u0e19\u0e2d\u0e38\u0e15\u0e2a\u0e32\u0e2b\u0e01\u0e23\u0e23\u0e21\u0e1e\u0e25\u0e31\u0e07\u0e07\u0e32\u0e19\u0e19\u0e34\u0e27\u0e40\u0e04\u0e25\u0e35\u0e22\u0e23\u0e4c\u0e43\u0e19\u0e2d\u0e2d\u0e2a\u0e40\u0e15\u0e23\u0e40\u0e25\u0e35\u0e22",
            "x": 10,
            "z": 3
        },
        "query": [
            "Is the substring starting from the 11-th character to the end of \u0e1b\u0e35\u0e40\u0e15\u0e2d\u0e23\u0e4c \u0e04\u0e2d\u0e2a\u0e40\u0e15\u0e25\u0e42\u0e25 \u0e40\u0e2b\u0e23\u0e31\u0e0d\u0e0d\u0e34\u0e01\u0e0a\u0e32\u0e27\u0e2d\u0e2d\u0e2a\u0e40\u0e15\u0e23\u0e40\u0e25\u0e35\u0e22\u0e41\u0e25\u0e30\u0e1c\u0e39\u0e49\u0e17\u0e35\u0e48\u0e21\u0e35\u0e41\u0e19\u0e27\u0e42\u0e19\u0e49\u0e21\u0e27\u0e48\u0e32\u0e08\u0e30\u0e44\u0e14\u0e49\u0e23\u0e31\u0e1a\u0e2a\u0e37\u0e1a\u0e17\u0e2d\u0e14\u0e15\u0e33\u0e41\u0e2b\u0e19\u0e48\u0e07\u0e15\u0e48\u0e2d\u0e08\u0e32\u0e01\u0e19\u0e32\u0e22\u0e01\u0e23\u0e31\u0e10\u0e21\u0e19\u0e15\u0e23\u0e35\u0e08\u0e2d\u0e2b\u0e4c\u0e19 \u0e42\u0e2e\u0e40\u0e27\u0e34\u0e23\u0e4c\u0e14 \u0e43\u0e19\u0e10\u0e32\u0e19\u0e30\u0e2b\u0e31\u0e27\u0e2b\u0e19\u0e49\u0e32\u0e1e\u0e23\u0e23\u0e04\u0e40\u0e2a\u0e23\u0e35\u0e19\u0e34\u0e22\u0e21 \u0e44\u0e14\u0e49\u0e43\u0e2b\u0e49\u0e01\u0e32\u0e23\u0e2a\u0e19\u0e31\u0e1a\u0e2a\u0e19\u0e38\u0e19\u0e2d\u0e38\u0e15\u0e2a\u0e32\u0e2b\u0e01\u0e23\u0e23\u0e21\u0e1e\u0e25\u0e31\u0e07\u0e07\u0e32\u0e19\u0e19\u0e34\u0e27\u0e40\u0e04\u0e25\u0e35\u0e22\u0e23\u0e4c\u0e43\u0e19\u0e2d\u0e2d\u0e2a\u0e40\u0e15\u0e23\u0e40\u0e25\u0e35\u0e22, taking every 3-th character, composed of decimal characters?",
            "Does the substring of \u0e1b\u0e35\u0e40\u0e15\u0e2d\u0e23\u0e4c \u0e04\u0e2d\u0e2a\u0e40\u0e15\u0e25\u0e42\u0e25 \u0e40\u0e2b\u0e23\u0e31\u0e0d\u0e0d\u0e34\u0e01\u0e0a\u0e32\u0e27\u0e2d\u0e2d\u0e2a\u0e40\u0e15\u0e23\u0e40\u0e25\u0e35\u0e22\u0e41\u0e25\u0e30\u0e1c\u0e39\u0e49\u0e17\u0e35\u0e48\u0e21\u0e35\u0e41\u0e19\u0e27\u0e42\u0e19\u0e49\u0e21\u0e27\u0e48\u0e32\u0e08\u0e30\u0e44\u0e14\u0e49\u0e23\u0e31\u0e1a\u0e2a\u0e37\u0e1a\u0e17\u0e2d\u0e14\u0e15\u0e33\u0e41\u0e2b\u0e19\u0e48\u0e07\u0e15\u0e48\u0e2d\u0e08\u0e32\u0e01\u0e19\u0e32\u0e22\u0e01\u0e23\u0e31\u0e10\u0e21\u0e19\u0e15\u0e23\u0e35\u0e08\u0e2d\u0e2b\u0e4c\u0e19 \u0e42\u0e2e\u0e40\u0e27\u0e34\u0e23\u0e4c\u0e14 \u0e43\u0e19\u0e10\u0e32\u0e19\u0e30\u0e2b\u0e31\u0e27\u0e2b\u0e19\u0e49\u0e32\u0e1e\u0e23\u0e23\u0e04\u0e40\u0e2a\u0e23\u0e35\u0e19\u0e34\u0e22\u0e21 \u0e44\u0e14\u0e49\u0e43\u0e2b\u0e49\u0e01\u0e32\u0e23\u0e2a\u0e19\u0e31\u0e1a\u0e2a\u0e19\u0e38\u0e19\u0e2d\u0e38\u0e15\u0e2a\u0e32\u0e2b\u0e01\u0e23\u0e23\u0e21\u0e1e\u0e25\u0e31\u0e07\u0e07\u0e32\u0e19\u0e19\u0e34\u0e27\u0e40\u0e04\u0e25\u0e35\u0e22\u0e23\u0e4c\u0e43\u0e19\u0e2d\u0e2d\u0e2a\u0e40\u0e15\u0e23\u0e40\u0e25\u0e35\u0e22 starting at the 11-th character and taking every 3-th character consist only of decimal digits?",
            "Check if the substring from the 11-th character to the end of \u0e1b\u0e35\u0e40\u0e15\u0e2d\u0e23\u0e4c \u0e04\u0e2d\u0e2a\u0e40\u0e15\u0e25\u0e42\u0e25 \u0e40\u0e2b\u0e23\u0e31\u0e0d\u0e0d\u0e34\u0e01\u0e0a\u0e32\u0e27\u0e2d\u0e2d\u0e2a\u0e40\u0e15\u0e23\u0e40\u0e25\u0e35\u0e22\u0e41\u0e25\u0e30\u0e1c\u0e39\u0e49\u0e17\u0e35\u0e48\u0e21\u0e35\u0e41\u0e19\u0e27\u0e42\u0e19\u0e49\u0e21\u0e27\u0e48\u0e32\u0e08\u0e30\u0e44\u0e14\u0e49\u0e23\u0e31\u0e1a\u0e2a\u0e37\u0e1a\u0e17\u0e2d\u0e14\u0e15\u0e33\u0e41\u0e2b\u0e19\u0e48\u0e07\u0e15\u0e48\u0e2d\u0e08\u0e32\u0e01\u0e19\u0e32\u0e22\u0e01\u0e23\u0e31\u0e10\u0e21\u0e19\u0e15\u0e23\u0e35\u0e08\u0e2d\u0e2b\u0e4c\u0e19 \u0e42\u0e2e\u0e40\u0e27\u0e34\u0e23\u0e4c\u0e14 \u0e43\u0e19\u0e10\u0e32\u0e19\u0e30\u0e2b\u0e31\u0e27\u0e2b\u0e19\u0e49\u0e32\u0e1e\u0e23\u0e23\u0e04\u0e40\u0e2a\u0e23\u0e35\u0e19\u0e34\u0e22\u0e21 \u0e44\u0e14\u0e49\u0e43\u0e2b\u0e49\u0e01\u0e32\u0e23\u0e2a\u0e19\u0e31\u0e1a\u0e2a\u0e19\u0e38\u0e19\u0e2d\u0e38\u0e15\u0e2a\u0e32\u0e2b\u0e01\u0e23\u0e23\u0e21\u0e1e\u0e25\u0e31\u0e07\u0e07\u0e32\u0e19\u0e19\u0e34\u0e27\u0e40\u0e04\u0e25\u0e35\u0e22\u0e23\u0e4c\u0e43\u0e19\u0e2d\u0e2d\u0e2a\u0e40\u0e15\u0e23\u0e40\u0e25\u0e35\u0e22, taking every 3-th character, contains only decimal numbers."
        ],
        "language": "tha_Thai"
    },
    {
        "solution": "```python\nanswer = a[x::y].isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u0648\u0642\u062f \u0643\u0627\u0646 \u0647\u062f\u0641\u0647 \u0627\u0644\u062b\u0627\u0646\u064a \u062a\u0644\u0643 \u0627\u0644\u0644\u064a\u0644\u0629 \u0647\u0648 \u0627\u0644\u0647\u062f\u0641 \u0631\u0642\u0645 60 \u0644\u0647 \u0641\u064a \u0647\u0630\u0627 \u0627\u0644\u0645\u0648\u0633\u0645 \u062d\u062a\u0649 \u0623\u0635\u0628\u062d \u0627\u0644\u0644\u0627\u0639\u0628 \u0627\u0644\u0623\u0648\u0644 \u0627\u0644\u0630\u064a \u064a\u062d\u0631\u0632 60 \u0623\u0648 \u0623\u0643\u062b\u0631 \u0645\u0646 \u0627\u0644\u0623\u0647\u062f\u0627\u0641 \u0641\u064a \u0645\u0648\u0633\u0645 \u0645\u0646\u0630 \u0645\u0648\u0633\u0645 1995-96 \u060c\u0639\u0646\u062f\u0645\u0627 \u0648\u0635\u0644 \u0643\u0644 \u0645\u0646 \u062c\u0627\u0631\u0648\u0645\u064a\u0631 \u062c\u0627\u062c\u0631 \u0648\u0645\u0627\u0631\u064a\u0648 \u0644\u064a\u0645\u064a\u0643\u0633 \u0625\u0644\u0649 \u0630\u0644\u0643 \u0627\u0644\u0644\u0642\u0628.",
            "x": 10,
            "y": 5
        },
        "query": [
            "Check if every {y}-th character starting from position {x} in {a} is a digit.",
            "Verify if each {y}-th character starting from index {x} in the string {a} is a digit.",
            "Determine if all characters at every {y}-th position starting from position {x} in {a} are digits."
        ],
        "language": "arb_Arab"
    },
    {
        "solution": "```python\nanswer = a.encode(x).decode(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u0644\u0637\u064a\u0627\u0631\u0629 \u0643\u0627\u0646\u062a \u062a\u0648\u062c\u0647\u062a \u0625\u0644\u0649 \u0625\u064a\u0631\u0643\u0648\u062a\u0633\u0643 \u0648\u0643\u0627\u0646\u062a \u0628\u0634\u063a\u0644\u0647\u0627 \u0642\u0648\u0627\u062a \u062f\u0627\u062e\u0644\u064a\u0629.",
            "x": "utf-8",
            "y": "utf-8"
        },
        "query": [
            "Encode {a} with {x} and then decode it with {y}.",
            "First encode {a} using {x}, then decode it using {y}.",
            "Use {x} to encode {a}, and then decode it with {y}."
        ],
        "language": "apc_Arab_sout3123"
    },
    {
        "solution": "```python\nanswer = a.endswith(x) and a.find(y) != -1\nprint(answer)\n```",
        "variables": {
            "a": "\u0e43\u0e04\u0e23\u0e01\u0e47\u0e15\u0e32\u0e21\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e32\u0e01\u0e40\u0e2b\u0e47\u0e19\u0e04\u0e27\u0e32\u0e21\u0e40\u0e2a\u0e35\u0e22\u0e2b\u0e32\u0e22\u0e17\u0e35\u0e48\u0e40\u0e01\u0e34\u0e14\u0e02\u0e36\u0e49\u0e19\u0e01\u0e31\u0e1a\u0e21\u0e31\u0e21\u0e21\u0e35\u0e48\u0e08\u0e32\u0e01\u0e01\u0e32\u0e23\u0e1e\u0e22\u0e32\u0e22\u0e32\u0e21\u0e19\u0e33\u0e2d\u0e2d\u0e01\u0e21\u0e32\u0e08\u0e32\u0e01\u0e42\u0e25\u0e07\u0e28\u0e1e\u0e04\u0e07\u0e15\u0e49\u0e2d\u0e07\u0e1c\u0e34\u0e14\u0e2b\u0e27\u0e31\u0e07\u0e40\u0e1e\u0e23\u0e32\u0e30\u0e08\u0e30\u0e40\u0e2b\u0e47\u0e19\u0e44\u0e14\u0e49\u0e41\u0e15\u0e48\u0e40\u0e1e\u0e35\u0e22\u0e07\u0e2a\u0e48\u0e27\u0e19\u0e28\u0e35\u0e23\u0e29\u0e30\u0e01\u0e31\u0e1a\u0e44\u0e2b\u0e25\u0e48\u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19",
            "x": "\u0e40\u0e17\u0e48\u0e32\u0e19\u0e31\u0e49\u0e19",
            "y": "\u0e21\u0e31\u0e21\u0e21\u0e35\u0e48"
        },
        "query": [
            "Check if {a} ends with {x} and contains {y}.",
            "Verify if {a} has {x} at the end and includes {y}.",
            "Determine if {a} concludes with {x} and has {y} within it."
        ],
        "language": "tha_Thai"
    },
    {
        "solution": "```python\nanswer = a.isidentifier() and a.endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u2d46\u2d53\u2d5c\u2d30\u2d4e \u2d5c\u2d30\u2d4f \u2d61\u2d30\u2d4f \u2d30\u2d5c\u2d49\u2d36\u2d54\u2d30\u2d53\u2d30\u2d4f \u2d3c\u2d30\u2d4d \u2d30\u2d49\u2d53\u2d54 \u2d3c\u2d53\u2d3e \u2d4f<\u2d5c \u2d5c\u2d53\u2d4d\u2d30\u2d59 \u2d30\u2d63\u2d36\u2d30\u2d54 \u2d30\u2d37 \u2d30\u2d59 \u2d5c-\u2d30\u2d61\u2d30\u2d54 \u2d5c\u2d30\u2d4f \u2d5c\u2d30\u2d4f\u2d49\u2d3e \u2d30\u2d4f\u2d37\u2d30\u2d54\u2d54\u2d30\u2d4f, \u2d42\u2d30\u2d54\u2d30\u2d5c <\u2d48\u2d48\u2d30\u2d4d\u2d30\u2d4f \u2d59\u2d30\u2d4e\u2d30\u2d4d \u2d4f \u2d30\u2d59 \u2d42\u2d30\u2d54\u2d30\u2d5c\u2d30\u2d4f \u2d53\u2d30 \u2d37\u2d30\u2d57 \u2d30\u2d57\u2d4f\u2d30\u2d4f <\u2d62\u2d4f\u2d30 \u2d62\u2d30\u2d4f.",
            "x": "\u2d62\u2d30\u2d4f."
        },
        "query": [
            "Check if {a} is a valid identifier and ends with {x}.",
            "Verify if {a} is a valid identifier and has a suffix {x}.",
            "Determine if {a} is a valid identifier and ends with the string {x}."
        ],
        "language": "taq_Tfng"
    },
    {
        "solution": "```python\nanswer = a.split(x, y)[0].isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u092c\u0917\u0940\u091a\u093e\u0915 \u0906\u0938\u092a\u093e\u0938 \u0915\u0924\u0947\u0915\u094b \u0930\u0947\u0938\u094d\u0924\u0930\u093e\u0902 \u0905\u091b\u093f, \u0906 \u0926\u094b\u092a\u0939\u0930 \u0906 \u0938\u093e\u0901\u091d \u092e\u0947\u0902 \u0915\u0947\u0902\u0926\u094d\u0930\u0940\u092f \u0917\u091c\u093c\u0947\u092c\u094b \u0938\u0901 \u0905\u0915\u094d\u0938\u0930 \u0928\u093f:\u0936\u0941\u0932\u094d\u0915 \u0938\u0902\u0917\u0940\u0924 \u0915\u093e\u0930\u094d\u092f\u0915\u094d\u0930\u092e \u092a\u0947\u0936 \u0915\u090f\u0932 \u091c\u0948\u0924 \u0905\u091b\u093f\u0964",
            "x": " ",
            "y": 3
        },
        "query": [
            "Split {a} by {x} at most {y} times and check if the first segment is composed of digits.",
            "Divide {a} using {x} up to {y} splits and verify if the initial part consists of digits.",
            "Break {a} by {x} no more than {y} times and determine if the first section contains only digits."
        ],
        "language": "mai_Deva"
    },
    {
        "solution": "```python\nanswer = a[x:y].encode('utf-8').isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u0412\u0438\u043a\u0438\u043d\u0433\u0438\u0442\u0435 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u043b\u0438 \u0440\u0443\u0441\u043a\u0438\u0442\u0435 \u0432\u043e\u0434\u043d\u0438 \u043f\u044a\u0442\u0438\u0449\u0430, \u0437\u0430 \u0434\u0430 \u0441\u0442\u0438\u0433\u043d\u0430\u0442 \u0434\u043e \u0427\u0435\u0440\u043d\u043e \u043c\u043e\u0440\u0435 \u0438 \u041a\u0430\u0441\u043f\u0438\u0439\u0441\u043a\u043e \u043c\u043e\u0440\u0435. \u0427\u0430\u0441\u0442\u0438 \u043e\u0442 \u0442\u0435\u0437\u0438 \u043c\u0430\u0440\u0448\u0440\u0443\u0442\u0438 \u0432\u0441\u0435 \u043e\u0449\u0435 \u0441\u0430 \u0438\u0437\u043f\u043e\u043b\u0437\u0432\u0430\u0435\u043c\u0438. \u041f\u0440\u043e\u0432\u0435\u0440\u0435\u0442\u0435 \u0434\u0430\u043b\u0438 \u0441\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u0438 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u043d\u0438 \u0440\u0430\u0437\u0440\u0435\u0448\u0438\u0442\u0435\u043b\u043d\u0438, \u043a\u043e\u0438\u0442\u043e \u043c\u043e\u0436\u0435 \u0434\u0430 \u0431\u044a\u0434\u0435 \u0442\u0440\u0443\u0434\u043d\u043e \u0434\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u0435.",
            "x": 10,
            "y": 20
        },
        "query": [
            "Check if the substring of {a} from {x} to {y} encoded in UTF-8 is alphanumeric.",
            "Determine if the UTF-8 encoded substring of {a} from index {x} to {y} is alphanumeric.",
            "Verify if the portion of {a} between {x} and {y}, when encoded in UTF-8, consists of alphanumeric characters."
        ],
        "language": "bul_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x:y].strip(z).isdecimal()\nprint(answer)\n```",
        "variables": {
            "a": "\u10db\u10d8\u10e3\u10ee\u10d4\u10d3\u10d0\u10d5\u10d0\u10d3 \u10d8\u10db\u10d8\u10e1\u10d0, \u10e0\u10dd\u10db \u10db\u10d8\u10e1\u10d8 \u10ef\u10d0\u10e0\u10d8 \u10d3\u10d0 \u10e1\u10d0\u10d6\u10e6\u10d5\u10d0\u10dd \u10e4\u10da\u10dd\u10e2\u10d8 \u10e3\u10e4\u10e0\u10dd \u10e1\u10e3\u10e1\u10e2\u10d8 \u10d8\u10e7\u10dd, \u10dd\u10db\u10d8\u10e1 \u10d3\u10d0\u10ec\u10e7\u10d4\u10d1\u10d0\u10db\u10d3\u10d4 \u10db\u10d0\u10d7 \u10dd\u10d7\u10ee\u10d8 \u10d0\u10ee\u10d0\u10da\u10d8 \u10d2\u10d4\u10db\u10d8 \u10f0\u10e5\u10dd\u10dc\u10d3\u10d0\u10d7 \u10d0\u10e8\u10d4\u10dc\u10d4\u10d1\u10e3\u10da\u10d8.",
            "x": 10,
            "y": 20,
            "z": " "
        },
        "query": [
            "Verify if the substring of {a} from {x} to {y} without any characters in {z} is decimal.",
            "Check if the substring of {a} from index {x} to {y}, after removing characters in {z}, is a decimal number.",
            "Determine if the portion of {a} between {x} and {y}, stripped of characters in {z}, is a decimal."
        ],
        "language": "kat_Geor"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).isdecimal()\nprint(answer)\n```",
        "variables": {
            "a": "\u062a\u0648\u0631\u0646\u0627\u062f\u0648 \u0645\u0627\u0646\u0648\u0645\u0628\u0627\u06a0\u0646 \u0628\u0627\u062a\u06a0 \u06a9\u0627\u064a\u0648\u060c \u0645\u0627\u0648\u0631\u0642 \u06a4\u0627\u06a4\u0646 \u062f\u0631\u064a \u0628\u0627\u06a0\u0648\u0646\u0646\u060c \u062c\u0648 \u0645\u0646\u0686\u0645\u06a4\u0627\u0643\u0646 \u0627\u0648\u062a\u0648 \u0643 \u0644\u0627\u06a0\u0643\u06d4 \u062f\u0648\u0648 \u06a4\u0631\u0633\u0646 \u062a\u0648\u0631\u0646\u0627\u062f\u0648 \u06a4\u0627\u0644\u064a\u06a0 \u06ac\u0627\u0646\u0627\u0621\u0647 \u0628\u0627\u0644\u06a0\u0633\u0648\u0621\u06a0 \u0644\u0627\u0628\u064a\u0647 \u062f\u0631\u064a \u062a\u064a\u06ac\u0648 \u062c\u0645.",
            "x": "\u062a\u0648\u0631\u0646\u0627\u062f\u0648",
            "y": "12345"
        },
        "query": [
            "Replace {x} with {y} in {a} and check if the result contains only decimal characters.",
            "Substitute {x} with {y} in {a} and verify if the outcome consists solely of decimal digits.",
            "Swap {x} with {y} in {a} and determine if the resulting string is entirely decimal."
        ],
        "language": "min_Arab"
    },
    {
        "solution": "```python\nanswer = a[:y].istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Jala\u00f1anx Keselowski jupax p'iqi\u00f1chaskakiwa khaysa Campeonato de Pilotos ukanx 2.250 ukhampiwa.",
            "y": 10
        },
        "query": [
            "Check if the substring from the beginning of {a} up to (but not including) index {y} follows title case capitalization.",
            "Determine if the substring from the start of {a} to index {y} (exclusive) is in title case.",
            "Verify if the portion of {a} from the beginning to just before index {y} is capitalized in title case."
        ],
        "language": "ayr_Latn"
    },
    {
        "solution": "```python\nanswer = a.title().split(x)\nprint(answer)\n```",
        "variables": {
            "a": "Ha du\u0253i 1970, Roymond Damadian, lekkita bo'o teffowo ilmu kimiya, hefti nafturuggo be kuran kerfe ngam a nan be bo\u0257\u0257um larugo nyau\u0257o be na\u2019ura",
            "x": " "
        },
        "query": [
            "Convert {a} to title case and split it by {x}.",
            "Transform {a} to title case and divide it by {x}.",
            "Change {a} to title case and separate it by {x}."
        ],
        "language": "fuv_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().split(x)[y].isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u0a86 \u0a95\u0abf\u0ab8\u0acd\u0ab8\u0abe\u0aae\u0abe\u0a82, \u0a89\u0aa6\u0acd\u0aaf\u0acb\u0a97\u0ab8\u0abe\u0ab9\u0ab8\u0abf\u0a95\u0aa4\u0abe\u0ab2\u0a95\u0acd\u0ab7\u0ac0 \u0ab5\u0ab0\u0acd\u0aa4\u0aa3\u0ac2\u0a95\u0aa8\u0abe \u0aaa\u0abe\u0a9b\u0ab2\u0abe \u0a95\u0abf\u0ab8\u0acd\u0ab8\u0abe \u0a85\u0aa8\u0ac7 \u092a\u0930\u093f\u0923\u0abe\u0aae\u0ac0 \u0ab8\u0aab\u0ab3\u0aa4\u0abe\u0a93 \u0aaf\u0abe\u0aa6 \u0a95\u0ab0\u0ab5\u0abe\u0aa8\u0ac7 \u0a95\u0abe\u0ab0\u0aa3\u0ac7 \u0ab2\u0acb\u0a95\u0acb \u0ab8\u0acd\u0aa5\u0abe\u0aa8\u0abf\u0a95 \u0a9a\u0ab0\u0acd\u0a9a \u0aaa\u0acd\u0ab0\u0aa4\u0abf \u0aa8\u0ab5\u0abe\u0a82 \u0aaa\u0ab0\u0abf\u0ab5\u0ab0\u0acd\u0aa4\u0aa8\u0acb \u0a85\u0aa8\u0ac7 \u0aa8\u0ab5\u0ac0 \u0aa6\u0abf\u0ab6\u0abe \u0aae\u0abe\u0a9f\u0ac7 \u0aae\u0acb\u0a95\u0ab3\u0ac1\u0a82 \u0aae\u0aa8 \u0ab0\u0abe\u0a96\u0aa4\u0abe \u0aa5\u0aaf\u0abe.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Verify if the {y+1}-th element of {a} split by {x} and stripped of spaces is a digit.",
            "Check if the element at position {y+1} in the list obtained by splitting {a} by {x} and removing spaces is a digit.",
            "Determine if the {y+1}-th item from the split and stripped version of {a} using {x} is a digit."
        ],
        "language": "guj_Gujr"
    },
    {
        "solution": "```python\nanswer = a.title().replace(x, y).islower()\nprint(answer)\n```",
        "variables": {
            "a": "Viking hnam te chuan Russia a tui kalna te chu Black Sea leh Caspian Sea kal nan an hmang thin a.Heng kalna hmun thenkhat te hi tun thleng pawh hian hman theih a la ni bawk.I kal duh chuan permit bik a ngai nge ngai lo tih enfiah la, a lak erawh a harsa deuh maithei.",
            "x": "Russia",
            "y": "Soviet Union"
        },
        "query": [
            "Determine if {a} is entirely lowercase after titling and replacing {x} with {y}.",
            "Check if {a} remains in lowercase after converting to title case and substituting {x} with {y}.",
            "Is {a} still in lowercase after applying title case and replacing {x} with {y}?"
        ],
        "language": "lus_Latn"
    },
    {
        "solution": "```python\nanswer = a.rjust(x, y).count(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0425\u0430\u043b\u044c\u0445\u0438 \u0432\u04d1\u0445\u04d1\u0442\u0440\u0430 \u043c\u04d7\u043d\u043b\u0435 \u0442\u0435 \u043f\u0443\u043b\u0438\u043d \u0441\u0438\u0435\u043d\u043b\u0435\u043d\u043d\u0438 \u0435 \u0448\u044b\u0432 \u0430\u0439\u043d\u0435 \u043f\u0443\u043b\u043d\u0438 \u04ab\u0438\u043d\u0447\u0435\u043d \u043f\u04d7\u043b\u0442\u0435\u0440\u043c\u0435\u043d \u043f\u0443\u043b\u0441\u0430\u043d \u0442\u0430, \u0103\u043d\u0430 \u043f\u0443\u043b\u0430 \u0443\u0442\u0440\u0430\u0432\u0441\u0435\u043d \u043d\u0443\u043c\u0430\u0439\u0103\u0448\u0115 \u00e7\u0438\u043d\u0435 \u0432\u04d1\u0439\u043b\u04d1 \u04ab\u0443\u043c\u04d1\u0440 \u00e7\u0438\u0442\u043d\u0115.",
            "x": 150,
            "y": " ",
            "z": "\u043f"
        },
        "query": [
            "How many times does {z} appear in the right-justified version of {a} with length {x} using {y} as the fill character?",
            "Count the occurrences of {z} in the right-justified string of {a} with a total length of {x} and {y} as the padding character.",
            "What is the number of times {z} appears in the right-justified string of {a} padded to length {x} with {y}?"
        ],
        "language": "chv_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y)[::-1]\nprint(answer)\n```",
        "variables": {
            "a": "\u03a4\u03bf \u03c4\u03b1\u03be\u03af\u03b4\u03b9 \u03c3\u03c4\u03bf\u03bd \u039a\u03cc\u03c3\u03bc\u03bf \u03c4\u03b7\u03c2 \u039d\u03c4\u03af\u03c3\u03bd\u03b5\u03ca \u03b1\u03bd\u03c4\u03b9\u03c0\u03c1\u03bf\u03c3\u03c9\u03c0\u03b5\u03cd\u03b5\u03b9 \u03ad\u03bd\u03b1 \u03c3\u03b7\u03bc\u03b1\u03bd\u03c4\u03b9\u03ba\u03cc \u03c0\u03c1\u03bf\u03c3\u03ba\u03cd\u03bd\u03b7\u03bc\u03b1 \u03b3\u03b9\u03b1 \u03c0\u03bf\u03bb\u03bb\u03ad\u03c2 \u03bf\u03b9\u03ba\u03bf\u03b3\u03ad\u03bd\u03b5\u03b9\u03b5\u03c2 \u0391\u03bc\u03b5\u03c1\u03b9\u03ba\u03b1\u03bd\u03ce\u03bd.",
            "x": 120,
            "y": " "
        },
        "query": [
            "What is the reverse of the left-justified version of {a} with length {x} using {y} as the fill character?",
            "How does the reversed left-justified string of {a} look when padded to length {x} with {y}?",
            "Can you show the reverse of the string {a} after left-justifying it to length {x} with {y} as the padding character?"
        ],
        "language": "ell_Grek"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).isspace()\nprint(answer)\n```",
        "variables": {
            "a": "\u0645\u064e\u0627\u0631\u064e \u0633\u0657\u062a\u064e\u062f\u064f\u0633\u0652 \u0628\u0650 \u062a\u064e\u0631\u0650\u062d\u0650 \u0643\u064f\u0631\u064e \u063a\u0657\u0646\u064e\u062c\u0650\u0646\u0652 \u0643\u0657\u0644\u064e \u0634\u0650\u0645\u064e \u0645\u064e\u0627\u0631\u064e \u0628\u064f\u0631\u064f\u064a\u0650 \u062f\u0650\u0646\u064e\u0631\u064f \u0648\u064e\u0644\u0652\u062a\u0657\u0646\u064e\u0645\u064e\u060c \u0623\u064e\u0648\u064f\u0644\u064e\u0627 \u0643\u0657\u0646\u0652\u062a\u064e\u0648\u0652 \u0645\u0650\u064a\u0652 1969 \u0646\u0657\u0645\u0652 \u063a\u064f\u0646\u0650\u064a \u0628\u064f\u0631\u064f\u0628\u0650 \u0643\u064f\u0643\u0652\u0633\u0657\u0646\u064e \u0646\u064f\u062a\u0657\u064a\u0650 \u062a\u0657\u0646\u0652 \u0643\u064e\u0648\u0652 \u0645\u064e\u0627\u0631\u064e \u0623\u064e\u0641\u064f\u0648\u0644\u064f \u0625\u0650\u0643\u0652\u0633 \u0643\u064f\u0645\u064e\u0646\u0652\u062f \u0645\u064f\u062f\u0650\u0644\u0652 \u062f\u0657 \u0648\u064e\u0644\u0652\u062a\u0650\u0646\u0652\u0646\u064f",
            "x": "\u0645\u064e\u0627\u0631\u064e",
            "y": " "
        },
        "query": [
            "Replace {x} with {y} in {a} and check if the result consists only of whitespace characters.",
            "Substitute {x} with {y} in {a} and verify if the resulting string contains only whitespace.",
            "Change {x} to {y} in {a} and determine if the final string is made up entirely of whitespace characters."
        ],
        "language": "knc_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:y].title().find(z)\nprint(answer)\n```",
        "variables": {
            "a": "Ang mga website na ito ay nakatawag ng maraming pansin, lalo na sa larangan ng edukasyon.",
            "x": 4,
            "y": 20,
            "z": "Website"
        },
        "query": [
            "Convert the substring from {x} to {y} in {a} to title case and find the position of {z} in it.",
            "Find the index of {z} in the title-cased substring of {a} from {x} to {y}.",
            "Change the substring from {x} to {y} in {a} to title case and locate the position of {z}."
        ],
        "language": "fil_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:].islower()\nprint(answer)\n```",
        "variables": {
            "a": "Die Stadt gilt in den drei monotheistischen Religionen \u2013 Judentum, Christentum und Islam \u2013 als heilig und dient als spirituelles, religi\u00f6ses und kulturelles Zentrum.",
            "x": 50
        },
        "query": [
            "Check if the substring of {a} from index {x} to the end is all lowercase.",
            "Verify if the substring of {a} starting from index {x} is entirely in lowercase.",
            "Determine if the portion of {a} from index {x} onwards consists only of lowercase letters."
        ],
        "language": "deu_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8', errors='ignore').decode('utf-8').endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0647\u0648\u0627\u067e\u06cc\u0645\u0627\u06cc \u0627\u0648\u062a\u0631 \u062f\u0648\u0645\u0648\u062a\u0648\u0631\u0647 \u062f\u06cc\u0631\u0648\u0632 \u0633\u0639\u06cc \u062f\u0627\u0634\u062a \u0628\u0627 \u0634\u0645\u0627\u0631\u0647 \u067e\u0631\u0648\u0627\u0632 CG4684 \u0627\u0632 \u062e\u0637\u0648\u0637 \u0647\u0648\u0627\u06cc\u06cc Airlines PNG \u062f\u0631 \u06a9\u0648\u06a9\u0648\u062f\u0627 \u0628\u0647 \u0632\u0645\u06cc\u0646 \u0628\u0646\u0634\u06cc\u0646\u062f\u060c \u0627\u0645\u0627 \u0647\u0645\u0627\u0646 \u0645\u0648\u0642\u0639 \u0647\u0645 \u06cc\u06a9 \u0628\u0627\u0631 \u0646\u0627\u0645\u0648\u0641\u0642 \u0639\u0645\u0644 \u06a9\u0631\u062f\u0647 \u0628\u0648\u062f.",
            "x": "\u0639\u0645\u0644 \u06a9\u0631\u062f\u0647 \u0628\u0648\u062f."
        },
        "query": [
            "Does the UTF-8 encoded and decoded version of {a} end with {x}?",
            "After encoding and decoding {a} in UTF-8, does it end with {x}?",
            "Will the UTF-8 encoded and decoded string of {a} have {x} as its ending?"
        ],
        "language": "pes_Arab"
    },
    {
        "solution": "```python\nanswer = a[:x].istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Algene produserer et nevrotoksin som kan deaktivere nerver hos b\u00e5de mennesker og fisk.",
            "x": 6
        },
        "query": [
            "Is the substring of {a} from the start to index {x} in title case?",
            "Does the substring of {a} from the beginning to index {x} follow title case rules?",
            "Is the portion of {a} up to index {x} in title case format?"
        ],
        "language": "nob_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:].capitalize().endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "O \u0129ngi ni usikat\u0129itwe kutula m\u0129ao ya kum\u0129thya ind\u0129 ndaa na ndaa\u0129v\u0129thwa.",
            "x": 10,
            "y": "Ndaa\u0129v\u0129thwa."
        },
        "query": [
            "Does the capitalized substring of {a} from index {x} to the end end with {y}?",
            "Is the substring of {a} starting at index {x} and capitalized ending with {y}?",
            "Does the substring of {a} from index {x} to the end, when capitalized, end with {y}?"
        ],
        "language": "kam_Latn"
    },
    {
        "solution": "```python\nanswer = a.zfill(x).find(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0412\u0435\u045b\u0438\u043d\u0430 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u0430 \u043a\u043e\u0458\u0438 \u0441\u0443 \u0441\u0430\u0445\u0440\u0430\u045a\u0435\u043d\u0438 \u0443\u0437 \u0422\u0443\u0442\u0430\u043d\u043a\u0430\u043c\u043e\u043d\u0430 \u0441\u0443 \u0434\u043e\u0431\u0440\u043e \u043e\u0447\u0443\u0432\u0430\u043d\u0438, \u0443\u043a\u0459\u0443\u0447\u0443\u0458\u0443\u045b\u0438 \u0445\u0438\u0459\u0430\u0434\u0435 \u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0430\u0442\u0430 \u043d\u0430\u043f\u0440\u0430\u0432\u0459\u0435\u043d\u0438\u0445 \u043e\u0434 \u043f\u043b\u0435\u043c\u0435\u043d\u0438\u0442\u0438\u0445 \u043c\u0435\u0442\u0430\u043b\u0430 \u0438 \u0440\u0435\u0442\u043a\u043e\u0433 \u043a\u0430\u043c\u0435\u045a\u0430.",
            "x": 150,
            "y": "\u0430\u0440\u0442\u0435\u0444\u0430\u043a\u0430\u0442\u0430"
        },
        "query": [
            "Zero-fill {a} to a length of {x} and then find the position of {y}.",
            "Pad {a} with zeros to make its length {x} and locate the index of {y}.",
            "Fill {a} with leading zeros up to {x} characters and determine the position of {y}."
        ],
        "language": "srp_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].isspace()\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u0648\u0646\u0627 \u06af\u0648\u0631\u0647 \u0628\u0648 \u062a\u0634\u06a9\u06cc\u0644\u0627\u062a\u0644\u0627\u0631\u0646 \u0644\u0627\u067e \u06cc\u0627\u062e\u062c\u0633\u0646\u062f\u0627 \u0628\u06cc\u0631 \u0646\u0641\u0631 \u0645\u0645\u06a9\u0646\u062f\u06cc \u0644\u0627\u067e \u0644\u0648\u06a9\u0633 \u062a\u062e\u062a\u060c \u0634\u0627\u06cc\u062f \u0628\u06cc\u0631 \u0642\u0634\u0647 \u06cc\u0648\u0631\u0642\u0627\u0646 \u06cc\u0627 \u0628\u06cc\u0631 \u0639\u062a\u06cc\u0642\u0647 \u062a\u062e\u062a \u06af\u0648\u0631\u0647.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Split {a} by {x} and check if the {y}-th segment consists only of whitespace characters.",
            "Divide {a} using {x} and verify if the {y}-th part is made up entirely of whitespace.",
            "Separate {a} with {x} and determine if the {y}-th section contains only whitespace characters."
        ],
        "language": "azb_Arab"
    },
    {
        "solution": "```python\nanswer = a.split(x, y)[0].capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "Uruhande rumwe mu biharyohora ni ukuba ata mashirahamwe y'ubudandaji ahaboneka. Amayira, gari ya mwuka n'amato bihuza ibigwati, n'imiduga ntishobora kubashikira ivuye inyuma.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Split {a} by {x} at most {y} times and capitalize the first substring.",
            "Divide {a} using {x} up to {y} splits and capitalize the initial part.",
            "Break {a} by {x} no more than {y} times and capitalize the first segment."
        ],
        "language": "run_Latn"
    },
    {
        "solution": "```python\nanswer = a.partition(x)[2].upper()\nprint(answer)\n```",
        "variables": {
            "a": "S\u00fblav\u00ean Victoria-y\u00ea li al\u00eey\u00ea rojavay\u00ea Z\u00eembabwey\u00ea, bajarokek\u00ea li p\u00ea\u015fber\u00ee s\u00eenor\u00ea n\u00eaz\u00eek\u00ea Livingstone-\u00ea, Zamb\u00eeyay\u00ea \u00fb Botswanay\u00ea.",
            "x": "li"
        },
        "query": [
            "Partition {a} at the first occurrence of {x} and convert the substring after {x} to uppercase.",
            "Split {a} at the first instance of {x} and change the part after {x} to uppercase.",
            "Divide {a} at the first appearance of {x} and transform the segment following {x} to uppercase."
        ],
        "language": "kmr_Latn"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Eine Ver\u00e4nderung gab es in dieser Legislaturperiode, als der zweite Satz erst vom Abgeordnetenhaus entfernt und dann am Montag in \u00e4hnlicher Form vom Senat verabschiedet wurde.",
            "x": "E"
        },
        "query": [
            "Remove leading {x} from {a} and check if the result is alphabetic.",
            "Strip leading {x} from {a} and verify if the remaining string is alphabetic.",
            "Check if the string {a} without leading {x} is composed only of alphabetic characters."
        ],
        "language": "deu_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).title().isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "Robert Hooke, biologist da\u0263 England, inhay tikku\u1e93un tin-ntuknin da\u0263 .",
            "x": "da\u0263",
            "y": "from"
        },
        "query": [
            "Replace {x} with {y} in {a}, convert it to title case, and check if it is a valid identifier.",
            "Substitute {x} with {y} in {a}, change it to title case, and verify if it is a valid identifier.",
            "Swap {x} with {y} in {a}, transform it to title case, and determine if it is a valid identifier."
        ],
        "language": "taq_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('ascii', errors='replace').decode('ascii').startswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u042d\u043d\u044d\u0442\u0445\u044d\u0433\u0438\u0439\u043d \u0437\u0443\u043d\u044b \u0443\u043b\u0438\u0440\u043b\u044b\u043d \u0442\u0443\u0440\u0448\u0438\u0434 \u0435\u0440\u04e9\u043d\u0445\u0438\u0439\u0434\u04e9\u04e9 \u0433\u04af\u0432\u044d\u044d \u0434\u0430\u0432\u0430\u0430\u043d\u044b \u04e9\u0440\u0442\u04e9\u04e9\u043d\u04af\u04af\u0434\u044d\u0434 \u0437\u043e\u0440\u0438\u0443\u043b\u0441\u0430\u043d \u0436\u0443\u0443\u043b\u0447\u043d\u044b \u0443\u043b\u0438\u0440\u0430\u043b \u043e\u0440\u0433\u0438\u043b\u0434\u043e\u043e \u0445\u04af\u0440\u0434\u044d\u0433.",
            "x": "?"
        },
        "query": [
            "Encode {a} to ASCII, replacing unencodable characters with '?', decode it back, and check if it starts with {x}.",
            "Convert {a} to ASCII with unencodable characters as '?', then decode and verify if it begins with {x}.",
            "Transform {a} to ASCII, substituting unencodable characters with '?', decode it, and determine if it starts with {x}."
        ],
        "language": "khk_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.split(x)[0].islower()\nprint(answer)\n```",
        "variables": {
            "a": "M\u025b e j\u0254 wu\u030c do nu\u030c n\u025b m\u025b l\u025b e \u0256o\u0300 li\u0300nli\u0300n w\u025b na yi nu\u030cby\u0254by\u0254\u0301 li\u030cvi 1.2 do yi xwle\u0301 Kple\u0301-g\u0254nu \u0256axo\u0301 Bresil t\u0254n \u0254 ab\u0254xwi\u0301su\u0300n \u0254\u0301 m\u025b.",
            "x": " "
        },
        "query": [
            "Check if the first part of {a} split by {x} is in lowercase.",
            "Determine if the segment of {a} before {x} is all lowercase.",
            "Is the portion of {a} before splitting by {x} in lowercase?"
        ],
        "language": "fon_Latn"
    },
    {
        "solution": "```python\nanswer = a.count(x) == len(a.split(x)) - 1\nprint(answer)\n```",
        "variables": {
            "a": "Luno-\u10e1 120-160 \u10d9\u10e3\u10d1\u10e3\u10e0\u10d8 \u10db\u10d4\u10e2\u10e0\u10d8 \u10dc\u10d0\u10d5\u10d7\u10dd\u10d1\u10d8 \u10d2\u10d0\u10d3\u10d0\u10f0\u10e5\u10dd\u10dc\u10d3\u10d0, \u10e0\u10dd\u10d3\u10d4\u10e1\u10d0\u10ea \u10d8\u10e1 \u10d3\u10d0\u10d6\u10d8\u10d0\u10dc\u10d3\u10d0 \u10d3\u10d0 \u10eb\u10da\u10d8\u10d4\u10e0\u10db\u10d0 \u10e5\u10d0\u10e0\u10db\u10d0 \u10d3\u10d0 \u10e2\u10d0\u10da\u10e6\u10d4\u10d1\u10db\u10d0 \u10d8\u10e1 \u10ef\u10d4\u10d1\u10d8\u10e0\u10d8\u10e1\u10d9\u10d4\u10dc \u10d2\u10d0\u10d0\u10e5\u10d0\u10dc\u10d4\u10e1.",
            "x": " "
        },
        "query": [
            "Verify if the number of occurrences of {x} in {a} matches the number of splits by {x} minus one.",
            "Check if the count of {x} in {a} is equal to the number of segments obtained by splitting {a} with {x} minus one.",
            "Determine if the occurrences of {x} in {a} are the same as the number of parts from splitting {a} by {x} minus one."
        ],
        "language": "kat_Geor"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y)[::2]\nprint(answer)\n```",
        "variables": {
            "a": "\u0646\u0634\u0627\u0637 \u0627\u0644\u0632\u0644\u0632\u0627\u0644 \u0627\u0644\u0643\u0628\u064a\u0631 \u0627\u0644\u0644\u064a \u0635\u0627\u0631 \u0633\u0628\u0628 \u062a\u063a\u064a\u064a\u0631 \u0627\u0644\u0645\u0631\u062d\u0644\u0629 \u0641\u064a 10 \u0645\u0627\u0631\u0633 \u0639\u0644\u0649 \u0627\u0644\u062c\u0627\u0646\u0628 \u0627\u0644\u0634\u0645\u0627\u0644\u064a \u0627\u0644\u0634\u0631\u0642\u064a \u0645\u0646 \u0642\u0645\u0629 \u0627\u0644\u0628\u0631\u0643\u0627\u0646 \u0643\u0627\u0644\u062f\u064a\u0631\u0627.",
            "x": "\u0627\u0644",
            "y": "\u0627\u0644\u0645"
        },
        "query": [
            "Replace {x} with {y} in {a} and then take every second character from the result.",
            "Substitute {x} with {y} in {a} and then select every alternate character from the outcome.",
            "Change {x} to {y} in {a} and then pick every second character from the resulting string."
        ],
        "language": "apc_Arab_sout3123"
    },
    {
        "solution": "```python\nanswer = a[:y].rfind(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0924\u0942\u0902 \u090f\u0915\u0926\u093e\u0902 \u092e\u0930\u093f\u0928\u093e\u091a\u0947\u0930 \u092a\u093e\u0935\u0924\u0915\u091a \u0938\u0917\u0933\u0947\u0902 \u0938\u093e\u092e\u0915\u0947\u0902 \u0938\u094d\u092a\u0936\u094d\u091f \u091c\u093e\u0924\u0932\u0947\u0902. \u0924\u0941\u0915\u093e \u092c\u094b\u091f\u0940\u0902\u0924 \u092b\u0941\u0915\u091f \u092d\u094b\u0902\u0935\u092a\u0940 \u092e\u0947\u0933\u091f\u0932\u0947 \u0906\u0928\u0940 \u0924\u0947 \u0906\u092a\u0932\u0947 \u0915\u0921\u0932\u0940 \u092e\u094d\u0939\u093e\u092f\u0924\u0940 \u0924\u0941\u0915\u093e \u0926\u093f\u0924\u0932\u0947.",
            "x": "\u0924\u0941\u0915\u093e",
            "y": 50
        },
        "query": [
            "Find the last occurrence of {x} in the first {y} characters of {a}.",
            "Locate the final instance of {x} within the initial {y} characters of {a}.",
            "Identify the last position of {x} in the first {y} characters of {a}."
        ],
        "language": "gom_Deva"
    },
    {
        "solution": "```python\nanswer = a.strip().encode(encoding=x, errors='replace')\nprint(answer)\n```",
        "variables": {
            "a": "\u041e\u0448\u043e \u0439\u044b\u043b\u0434\u044b\u04a3 \u0430\u043f\u0440\u0435\u043b\u0435\u043d\u0434\u04d9 \u0441\u0443\u0434\u044c\u044f \u0413\u043b\u0438\u043d\u043d \u04a1\u0443\u043b\u0493\u0430 \u0430\u043b\u044b\u043d\u0493\u0430\u043d\u0434\u0430\u043d \u04bb\u0443\u04a3 \u0441\u0443\u0434 \u043a\u043e\u043c\u0438\u0441\u0441\u0430\u0440\u044b \u0442\u0430\u0440\u0430\u0444\u044b\u043d\u0430\u043d \u0442\u044b\u04a3\u043b\u0430\u043d\u044b\u043b\u043c\u0430\u0439\u044b\u043d\u0441\u0430 24 \u0441\u04d9\u0493\u04d9\u0442\u0442\u04d9\u043d \u0430\u0448\u044b\u0443 \u04bb\u0430\u04a1 \u0430\u04ab\u0442\u044b\u043d\u0434\u0430 \u0442\u043e\u0442\u043e\u043b\u0493\u0430\u043d\u0434\u0430\u0440\u0499\u044b \u043c\u04d9\u0436\u0431\u04af\u0440\u0438 \u0430\u0437\u0430\u0442 \u0438\u0442\u0435\u04af \u043c\u0430\u04a1\u0441\u0430\u0442\u044b\u043d\u0434\u0430 \u0443\u0447\u0440\u0435\u0436\u0434\u0435\u043d\u0438\u0435\u0493\u0430 \u04a1\u0430\u0440\u0430\u0442\u0430 \u0432\u0430\u04a1\u044b\u0442\u043b\u044b\u0441\u0430 \u0442\u044b\u0439\u044b\u0443 \u0442\u0443\u0440\u0430\u04bb\u044b\u043d\u0434\u0430 \u04a1\u0430\u0440\u0430\u0440 \u0441\u044b\u0493\u0430\u0440\u0430.",
            "x": "bak_Cyrl"
        },
        "query": [
            "Trim whitespace from both ends of {a} and encode it using {x} encoding, replacing unencodable characters with a question mark.",
            "Remove leading and trailing spaces from {a} and encode it with {x} encoding, substituting unencodable characters with a question mark.",
            "Strip spaces from the start and end of {a} and encode it in {x} format, replacing characters that can't be encoded with a question mark."
        ],
        "language": "bak_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x:y:z].istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Naikiya, t\u00e9l\u00e9skop pammulang tongeng \u00e9 riakkibu\u2019 ri Eropa ri cappa'na aba' 16.",
            "x": 0,
            "y": 7,
            "z": 1
        },
        "query": [
            "Check if the substring of {a} from {x} to {y} with steps of {z} is in title case.",
            "Determine if the sliced string of {a} from index {x} to {y} with a step of {z} is in title case.",
            "Verify if the section of {a} from {x} to {y} with step {z} is in title case."
        ],
        "language": "bug_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:].expandtabs(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u041e\u043b\t\u0441\u0435\u0439\u0441\u0435\u043d\u0431\u0456\t\u043a\u04af\u043d\u0456\t\u041e\u0441\u0430\u0493\u0430\u0434\u0430\t\u049b\u0430\u0439\u0442\u044b\u0441\t\u0431\u043e\u043b\u0434\u044b.",
            "x": 3,
            "y": 4
        },
        "query": [
            "Expand tabs in the substring of {a} from {x} to the end, with each tab being {y} spaces.",
            "Convert tabs to spaces in the substring of {a} starting from index {x}, using {y} spaces per tab.",
            "Replace tabs with {y} spaces in the substring of {a} from position {x} onwards."
        ],
        "language": "kaz_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x::y].rjust(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "\u1c5f\u1c62 \u1c61\u1c5a\u1c60\u1c77\u1c5a\u1c71 \u1c62\u1c5f\u1c6d\u1c60\u1c68\u1c73\u1c65\u1c60\u1c73\u1c6f \u1c5b\u1c6e \u1c61\u1c5f\u1c66\u1c5f\u1c71 \u1c61\u1c64\u1c63\u1c64\u1c6d\u1c5f\u1c71 \u1c61\u1c64\u1c71\u1c64\u1c65\u1c6e\u1c62 \u1c67\u1c6e\u1c5e-\u1c5f, \u1c5f\u1c62\u1c6e\u1c62 \u1c67\u1c6e\u1c5e\u1c5f \u1c61\u1c6e \u1c5a\u1c71\u1c5f \u1c60\u1c5a\u1c6b\u1c5a \u1c60\u1c5f\u1c79\u1c74\u1c64\u1c61 \u1c60\u1c5f\u1c79\u1c74\u1c64\u1c61 \u1c6a\u1c5f\u1c79\u1c63\u1c60\u1c5f\u1c79 \u1c5f\u1c68\u1c75\u1c5f\u1c5d \u1c75\u1c5a\u1c5e \u1c60\u1c5a\u1c5b\u1c6e \u1c5b\u1c6e\u1c6d\u1c5f\u1c68 \u1c60\u1c5a\u1c5c-\u1c5f\u1c7e",
            "x": 5,
            "y": 2,
            "z": 30,
            "w": "\u1c79"
        },
        "query": [
            "Right-justify the substring of {a} starting from position {x} with steps of {y} in a field of {z} characters, using {w} as padding.",
            "Take the substring of {a} starting at index {x} with a step of {y}, right-justify it in a field of {z} characters, and pad with {w}.",
            "Extract the substring from {a} starting at index {x} with a step of {y}, right-align it in a field of {z} characters, and use {w} for padding."
        ],
        "language": "sat_Olck"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).title().zfill(z)\nprint(answer)\n```",
        "variables": {
            "a": "Poate economisi bani \u00een loc s\u0103 cumperi noi h\u0103r\u021bi pentru un GPS, sau un dispozitiv GPS independent sau s\u0103 \u00eenchiriezi unul de la o companie de \u00eenchirieri de ma\u0219ini.",
            "x": "GPS",
            "y": "naviga\u021bie",
            "z": 150
        },
        "query": [
            "Replace {x} with {y} in {a}, convert it to title case, and pad it with zeros to make it {z} characters long.",
            "Substitute {x} with {y} in {a}, change it to title case, and add leading zeros to make it {z} characters in length.",
            "Swap {x} with {y} in {a}, transform it to title case, and zero-fill it to ensure it is {z} characters long."
        ],
        "language": "ron_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].encode('ascii')\nprint(answer)\n```",
        "variables": {
            "a": "\u0628\u0628\u0631\u0641 \u06a9\u0648\u062f\u0627\u06a9\u0646 \u0641\u064a\u0644\u0645 \u062c\u064a\u0646\u0633 \u0641\u0648\u0631\u0645\u0629 \u0640\u0640 \u0633\u062f\u0627\u06a0 \u0645\u0645\u06a9\u0649 \u0641\u0648\u0631\u0645\u0629 \u0666 \u06a9\u0644\u064a \u0666 \u0686\u0645\u060c \u0627\u062a\u0648\u0627 \u0646\u06a0 \u0641\u0633\u06bd \u0646\u064a\u0762\u062a\u064a\u0641 \u0665\u0666 \u06a9\u0644\u064a \u0665\u0666 \u0645\u0645.",
            "x": " ",
            "y": 3
        },
        "query": [
            "Encode the {y}-th element of {a} split by {x} in ASCII.",
            "Convert the {y}-th part of {a} split using {x} to ASCII encoding.",
            "Get the ASCII encoding of the {y}-th segment of {a} when split by {x}."
        ],
        "language": "bjn_Arab"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode(x).find(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u092a\u0928\u0921\u0941\u092c\u094d\u092c\u093f\u092f\u0947\u0902 \u0926\u0947 \u0915\u0928\u094d\u0928\u0948 \u0909\u0902\u02bc\u0926\u0940 \u0915\u093e\u092e\u092f\u093e\u092c\u0940 \u0926\u0947 \u0915\u093e\u0930\u0923, \u0928\u0947\u0939\u093e \u092e\u0928\u094d\u0928\u0947\u0906 \u091c\u0902\u0926\u093e \u0910 \u091c\u0947 \u091c\u0941\u0926\u094d\u0927 \u0926\u0947 \u092a\u0930\u0948\u0902\u0924\u094d\u0924 \u091c\u0930\u094d\u092e\u0928 \u0926\u0947 \u0915\u094b\u0932 \u0909\u0902\u02bc\u0926\u0940 \u092e\u0924\u0940 \u0917\u093f\u0928\u0924\u0940 \u0928\u0947\u0908\u0902 \u0939\u094b\u0917\u0964",
            "x": "utf-8",
            "y": "\u0915\u093e\u092e\u092f\u093e\u092c\u0940"
        },
        "query": [
            "Encode {a} to {x} encoding, decode it back, and find the first occurrence of {y}.",
            "Convert {a} to {x} encoding, revert it, and locate the first instance of {y}.",
            "Transform {a} using {x} encoding, decode it, and identify the initial position of {y}."
        ],
        "language": "dgo_Deva"
    },
    {
        "solution": "```python\nanswer = a.ljust(y, x).rfind(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0c07\u0c24\u0c30 \u0c39\u0c3f\u0c02\u0c38\u0c3e\u0c24\u0c4d\u0c2e\u0c15 \u0c24\u0c41\u0c2b\u0c3e\u0c28\u0c41\u0c32\u0c24\u0c4b \u0c2a\u0c4b\u0c32\u0c3f\u0c38\u0c4d\u0c24\u0c47 \u0c38\u0c41\u0c21\u0c3f\u0c17\u0c3e\u0c32\u0c3f \u0c12\u0c15 \u0c1a\u0c3f\u0c28\u0c4d\u0c28 \u0c2a\u0c4d\u0c30\u0c3e\u0c02\u0c24\u0c3e\u0c28\u0c4d\u0c28\u0c3f \u0c26\u0c46\u0c2c\u0c4d\u0c2c\u0c24\u0c40\u0c38\u0c4d\u0c24\u0c41\u0c02\u0c26\u0c3f, \u0c15\u0c3e\u0c28\u0c40 \u0c05\u0c35\u0c3f \u0c35\u0c3e\u0c1f\u0c3f \u0c2e\u0c3e\u0c30\u0c4d\u0c17\u0c02\u0c32\u0c4b \u0c28\u0c3f\u0c66\u0c21\u0c3f\u0c2a\u0c4b\u0c2f\u0c3f\u0c28 \u0c2a\u0c4d\u0c30\u0c24\u0c3f\u0c26\u0c3e\u0c28\u0c4d\u0c28\u0c3f \u0c28\u0c3e\u0c36\u0c28\u0c66 \u0c1a\u0c47\u0c2f\u0c17\u0c32\u0c35\u0c41.",
            "x": " ",
            "y": 150,
            "z": "\u0c28\u0c3e\u0c36\u0c28\u0c66"
        },
        "query": [
            "Left-justify {a} within {y} characters using {x} for padding, then find the last occurrence of {z}.",
            "Pad {a} to the left with {x} until it is {y} characters long, then locate the last position of {z}.",
            "Make {a} left-aligned in a field of {y} characters with {x} as the fill character, and find the last index of {z}."
        ],
        "language": "tel_Telu"
    },
    {
        "solution": "```python\nanswer = a[x::z].find(y)\nprint(answer)\n```",
        "variables": {
            "a": "\uabc4\uabed\uabd4\uabe4\uabca\uabe4\uabd5\uabe4\uabd7 \uabcc\uabe5\uabdd\uabc5 \uabc7\uabe5\uabe1\uabc5 \uabd0\uabea\uabd5 \uabc5\uabe8\uabe1 \uabc8\uabd4 \uabd1\uabc1\uabe4 \uabd1\uabce\uabdf\uabc1 \uabd1\uabc3\uabd7 \uabcc\uabe8.\uabd1\uabe6\uabc1. $\uabf1\uabf1,\uabf0\uabf0\uabf0\uabd7\uabd2\uabe4 $\uabf2\uabf2\uabf5\uabf0\uabf0 \uabd0\uabe5\uabce\uabd5\uabd7 \uabcc\uabe3\uabdf\uabc8\uabe4, \uabcd\uabe5\uabcf\uabd4\uabe4\uabd5 \uabd1\uabc1\uabe4 \uabc1\uabc5\uabe5\uabd2\uabe4 \uabc3\uabc3\uabdc\uabd7\uabd2\uabe4 \uabc1\uabd4\uabe8\uabdb \uabc7\uabd4\uabe5 \uabcd\uabe6\uabdf\uabc5 \uabcb\uabe5\uabe1\uabc8\uabe4\uabeb",
            "x": 5,
            "y": "\uabcc\uabe5\uabdd\uabc5",
            "z": 3
        },
        "query": [
            "Find the position of {y} in the substring of {a} starting at index {x} and taking every {z}-th character.",
            "Locate the index of {y} within the substring of {a} that begins at position {x} and includes every {z}-th character.",
            "Determine the position of {y} in the segment of {a} starting from position {x} and selecting every {z}-th character."
        ],
        "language": "mni_Mtei"
    },
    {
        "solution": "```python\nanswer = a.strip(x).title().zfill(y)\nprint(answer)\n```",
        "variables": {
            "a": "Un torn\u00e0do l\u2019\u00e8 \u00fcna col\u00f2na de \u00e0ria a presi\u00f9n par\u00e9cc b\u00e0sa che la p\u00ecrla, e la t\u00ecra l\u2019\u00e0ria inturn v\u00e8rs el dad\u00e9nt e \u2018l de sura.",
            "x": "Un ",
            "y": 100
        },
        "query": [
            "Strip characters in {x} from both ends of {a}, convert the result to title case, and pad it with leading zeros to make it {y} characters long.",
            "Remove characters in {x} from the start and end of {a}, change the result to title case, and add leading zeros to ensure it is {y} characters in length.",
            "Trim characters in {x} from both sides of {a}, transform the result to title case, and prepend zeros to make the total length {y} characters."
        ],
        "language": "lmo_Latn"
    },
    {
        "solution": "```python\nanswer = a.rjust(x, y).startswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u2d30\u2d62\u2d30 \u2d49\u2d56\u2d62 \u2d30\u2d37 \u2d49\u2d33 \u2d49\u2d4e\u2d49\u2d63\u2d49 \u2d4e\u2d33 \u2d49\u2d39\u2d3c\u2d30\u2d55 \u2d53\u2d4f\u2d4e\u2d4e\u2d30\u2d37\u2d37\u2d53 \u2d4e\u2d30\u2d54\u2d53\u2d54\u2d4f, \u2d49\u2d61\u2d39\u2d39\u2d55 \u2d5c\u2d30\u2d54\u2d4f\u2d30 \u2d37 \u2d61\u2d30\u2d4e\u2d30\u2d4f \u2d37 \u2d49\u2d56\u2d30\u2d4e\u2d30\u2d4f.",
            "x": 100,
            "y": "\u2d62",
            "z": "\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d62\u2d30\u2d62\u2d30 \u2d49\u2d56\u2d62 \u2d30\u2d37 \u2d49\u2d33 \u2d49\u2d4e\u2d49\u2d63\u2d49 \u2d4e\u2d33 \u2d49\u2d39\u2d3c\u2d30\u2d55 \u2d53\u2d4f\u2d4e\u2d4e\u2d30\u2d37\u2d37\u2d53 \u2d4e\u2d30\u2d54\u2d53\u2d54\u2d4f, \u2d49\u2d61\u2d39\u2d39\u2d55 \u2d5c\u2d30\u2d54\u2d4f\u2d30 \u2d37 \u2d61\u2d30\u2d4e\u2d30\u2d4f \u2d37 \u2d49\u2d56\u2d30\u2d4e\u2d30\u2d4f."
        },
        "query": [
            "Right justify {a} within {x} characters, padding with {y}, and check if it starts with {z}.",
            "Pad {a} to the right within {x} characters using {y} and verify if it begins with {z}.",
            "Ensure {a} is right-justified to {x} characters with {y} padding and see if it starts with {z}."
        ],
        "language": "zgh_Tfng"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).encode('ascii', errors='ignore')\nprint(answer)\n```",
        "variables": {
            "a": "\u1019\u102d\u1030\u1004\u103a\u1038 U.S. \u1076\u101d\u103a\u101c\u1086\u1088\u1081\u1015\u103a\u1089\u1076\u1062\u101d\u103a\u1087\u1004\u1062\u101d\u103a\u1038\u1022\u107c\u103a\u1022\u1019\u103a\u1087\u1015\u102d\u102f\u1010\u103a\u1087\u107d\u102f\u107a\u103a\u1087\u107c\u1084\u1010\u102e\u1088\u1019\u1083\u1038\u107c\u107c\u103a\u1089\u101d\u1083\u1088 \u1010\u1031\u1019\u102e\u1038\u1075\u1062\u107c\u103a\u1078\u1082\u103a\u1089\u1075\u1030\u107c\u103a\u1038\u1078\u102f\u107c\u103a\u1089\u1022\u101e\u1062\u1075\u103a\u1088\u1010\u1030\u101d\u103a\u1078\u101d\u103a\u1088\u1075\u101d\u103a\u1087\u101e\u1031\u1022\u101d\u103a\u1019\u1062\u1075\u103a\u1087\u1010\u1085\u1075\u103a\u1087\u1075\u1082\u1083\u1087\u1015\u103d\u1086\u1087\u101e\u1082\u103a\u1087\u1010\u102e\u1088 \u201c \u1022\u103d\u1004\u103a\u1088\u1010\u102e\u1088\u1019\u1062\u1086\u1010\u103d\u1004\u103a\u1038\u1022\u107c\u103a\u1019\u102e \u1038\u1078\u102d\u102f\u101d\u103a\u1088\u101e\u1035\u1004\u103a\u201d \u107c\u1082\u103a\u1038\u1019\u102d\u1030\u1004\u103a\u1038 Ethiopia \u101c\u1084\u1088\u1019\u102d\u1030\u1004\u103a\u1038 Kenya \u101d\u1083\u1088\u107c\u1086\u101a\u101d\u103a\u1089\u104b",
            "x": "\u104b"
        },
        "query": [
            "Remove trailing {x} from {a} and encode the result in 'ascii', ignoring unencodable characters.",
            "Strip trailing {x} from {a} and convert the result to 'ascii', ignoring characters that can't be encoded.",
            "Trim the trailing {x} from {a} and encode the result in 'ascii', skipping any unencodable characters."
        ],
        "language": "shn_Mymr"
    },
    {
        "solution": "```python\nanswer = a.swapcase().rjust(x, y).isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Bak musem leupie, neupeurasat padum boh ski nyang get i Ameurika Utara, ngon musem seuuem aci cuba padum aseuli dairah gunong nyang get jak ngon geuritan angen gunong.",
            "x": 150,
            "y": "*"
        },
        "query": [
            "Verify if {a} is ASCII after swapping case and right-justifying to {x} characters with {y}.",
            "Check if {a} remains ASCII after changing case and padding to {x} characters with {y}.",
            "Determine if {a} is ASCII following case swap and right-justification to {x} characters using {y}."
        ],
        "language": "ace_Latn"
    },
    {
        "solution": "```python\nanswer = a[:y].zfill(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0baa\u0bbe\u0b9a\u0bbf, \u0bae\u0ba9\u0bbf\u0ba4\u0bb0\u0bcd\u0b95\u0bb3\u0bcd \u0bae\u0bb1\u0bcd\u0bb1\u0bc1\u0bae\u0bcd \u0bae\u0bc0\u0ba9\u0bcd\u0b95\u0bb3\u0bbf\u0ba9\u0bcd \u0ba8\u0bb0\u0bae\u0bcd\u0baa\u0bc1\u0b95\u0bb3\u0bc8 \u0bae\u0bc1\u0b9f\u0b95\u0bcd\u0b95\u0bc1\u0bae\u0bcd \u0ba8\u0bbf\u0baf\u0bc2\u0bb0\u0bcb\u0b9f\u0bbe\u0b95\u0bcd\u0b9a\u0bbf\u0ba9\u0bcd \u0b8e\u0ba9\u0baa\u0bcd\u0baa\u0b9f\u0bc1\u0bae\u0bcd \u0ba8\u0b9a\u0bcd\u0b9a\u0bc8 \u0b89\u0bb1\u0bcd\u0baa\u0ba4\u0bcd\u0ba4\u0bbf \u0b9a\u0bc6\u0baf\u0bcd\u0b95\u0bbf\u0bb1\u0ba4\u0bc1.",
            "y": 10,
            "z": 15
        },
        "query": [
            "Extract the first {y} characters of {a} and pad the result with leading zeros until its length is {z}.",
            "Take the initial {y} characters from {a} and add leading zeros to make the total length {z}.",
            "Get the first {y} characters of {a} and prepend zeros so that the final length is {z}."
        ],
        "language": "tam_Taml"
    },
    {
        "solution": "```python\nanswer = a[:x].rfind(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0628\u0639\u0644\u0627\u0648\u0647 \u0645\u062d\u062f\u0648\u062f\u06cc\u062a \u0647\u0627\u06cc \u0632\u0645\u0627\u0646\u06cc \u06a9\u0645\u062a\u0631\u06cc \u0628\u0627 \u0627\u0645\u06a9\u0627\u0646 \u0633\u0627\u0639\u062a \u0647\u0627\u06cc \u06a9\u0627\u0631\u06cc \u0627\u0646\u0639\u0637\u0627\u0641 \u067e\u0630\u06cc\u0631 \u0648\u062c\u0648\u062f \u062f\u0627\u0631\u062f. (\u0628\u0631\u0645\u0631\u060c 1998)",
            "x": 50,
            "y": "\u0647\u0627\u06cc"
        },
        "query": [
            "Find the last occurrence of {y} in the first {x} characters of {a}.",
            "Locate the final instance of {y} within the initial {x} characters of {a}.",
            "Determine the last position of {y} in the first {x} characters of {a}."
        ],
        "language": "prs_Arab"
    },
    {
        "solution": "```python\nanswer = a.strip().capitalize().encode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "Barudak ieu condong ngalaman seueur masalah, sabab \"kalibet dina perilaku anu berisiko, gelut, sareng nangtang aparat\" pikeun ngarangsang otak, sabab otak aranjeunna teu tiasa dirangsang ku cara anu biasa."
        },
        "query": [
            "Trim whitespace from {a}, capitalize the first letter, and encode the result in UTF-8.",
            "Remove leading and trailing spaces from {a}, capitalize the first character, and convert it to UTF-8 encoding.",
            "Strip spaces from both ends of {a}, make the first letter uppercase, and encode it in UTF-8."
        ],
        "language": "sun_Latn"
    },
    {
        "solution": "```python\nanswer = a.swapcase().rjust(x, y).startswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "Mala yi kese \u00f1oo am xel (donte du sax mala y\u00e9pp; pul-pul, ci missal, amu \u00f1u xel).",
            "x": 100,
            "y": "*",
            "z": "****mALA"
        },
        "query": [
            "Verify if the swapcased version of {a} right-justified to {x} characters with {y} starts with {z}.",
            "Check if the swapcased string of {a}, right-justified to {x} characters using {y}, begins with {z}.",
            "Determine if the swapcased form of {a}, padded to {x} characters with {y}, starts with {z}."
        ],
        "language": "wol_Latn"
    },
    {
        "solution": "```python\nanswer = a.isalpha() and a[::-1].isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "Difenstere tsa yone tse di tona le mabota a a masesanyane, ne di ka seke tsa kgona go emelela tlhaselo e e mashetla lebaka le le leele."
        },
        "query": [
            "Check if all characters in {a} are alphabetic and if the reverse of {a} is alphanumeric.",
            "Verify if every character in {a} is a letter and if the reversed {a} contains only letters and numbers.",
            "Determine if {a} consists solely of alphabetic characters and if its reverse is composed of alphanumeric characters."
        ],
        "language": "tsn_Latn"
    },
    {
        "solution": "```python\nanswer = a.rsplit(x, y)[-1].isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u2d49\u2d63\u2d53\u2d63\u2d63\u2d3c \u2d53\u2d4f\u2d59\u2d59\u2d49\u2d45\u2d3c \u2d30\u2d4f\u2d4e\u2d40\u2d30\u2d4d \u2d30\u2d4e\u2d30\u2d5c\u2d30\u2d62 \u2d4f \u2d30\u2d31\u2d4d, \u2d59\u2d5c\u2d49\u2d31 \u2d37\u2d4a\u2d53\u2d31\u2d63, \u2d30\u2d4d\u2d4d\u2d30\u2d4d \u2d3d\u2d53\u2d37\u2d4f\u2d4f\u2d30 \u2d62\u2d53\u2d4d\u2d49 \u2d56\u2d3c \u2d5c\u2d30\u2d37\u2d3d\u2d3d\u2d6f\u2d30\u2d4f\u2d5c \u2d49\u2d59\u2d59\u2d53\u2d3c\u2d56 \u2d37 \u2d30\u2d62\u2d3c\u2d53\u2d4f \u2d59\u2d33 \u2d49\u2d59\u2d54\u2d30\u2d61\u2d4d \u2d4f\u2d4f\u2d59 \u2d4f \u2d37\u2d4a\u2d49\u2d4f.",
            "x": " ",
            "y": 3
        },
        "query": [
            "Is the last substring of {a} split by {x} no more than {y} times alphanumeric?",
            "After splitting {a} by {x} up to {y} times, is the last part alphanumeric?",
            "Does the last segment of {a} obtained by splitting it with {x} at most {y} times consist only of alphanumeric characters?"
        ],
        "language": "zgh_Tfng"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).title().startswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "Le b\u00e9n\u00e9volat en voyage est un excellent moyen de faire une diff\u00e9rence, mais il ne s\u2019agit pas seulement de donner.",
            "x": ".",
            "y": "Le B\u00e9n\u00e9volat"
        },
        "query": [
            "Check if the string {a} with trailing {x} removed and converted to title case starts with {y}.",
            "Determine if the string {a} without the trailing {x} and converted to title case begins with {y}.",
            "Verify if the string {a} after removing trailing {x} and converting to title case starts with {y}."
        ],
        "language": "fra_Latn"
    },
    {
        "solution": "```python\nanswer = a.casefold().replace(x, y).isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "Swiphemu swa Belgium ya namuntlha a ku ri xiphemu xa Luxembourg hi nkarhi lowu hundzeke kambe yi xiphemu xa Belgium endzhaku ka Nhlunga-vuhosi wa le Belgium was 1830.",
            "x": "Belgium",
            "y": "123"
        },
        "query": [
            "Check if the string {a} converted to lowercase and with {x} replaced by {y} is numeric.",
            "Determine if the string {a}, after converting to lowercase and replacing {x} with {y}, is numeric.",
            "Is the string {a}, when converted to lowercase and {x} replaced by {y}, numeric?"
        ],
        "language": "tso_Latn"
    },
    {
        "solution": "```python\nanswer = a.zfill(x).isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0917\u0930\u094d\u092e\u093f\u092e\u0928",
            "x": 10
        },
        "query": [
            "Check if the string {a} padded with zeros to length {x} is a valid identifier.",
            "Determine if the string {a}, when padded with zeros to a length of {x}, forms a valid identifier.",
            "Verify if padding the string {a} with zeros to reach a length of {x} results in a valid identifier."
        ],
        "language": "hne_Deva"
    },
    {
        "solution": "```python\nanswer = a[:x].replace(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u090f\u0917\u094b\u0930 \u092e\u0924\u0932\u092c \u0939\u092f \u0915\u0940 \u0939\u092e \u0938\u092b\u0932\u0924\u093e\u092a\u0942\u0930\u094d\u0935\u0915 \u092d\u0935\u093f\u0937\u094d\u092f\u0935\u093e\u0923\u0940 \u0915\u0930\u0947 \u092e\u0947\u0902 \u0938\u0915\u094d\u0937\u092e \u0939\u092f \u0915\u093f \u0926\u0942\u0938\u0930 \u0906\u0926\u092e\u0940 \u0915\u093f \u0905\u0928\u0941\u092d\u0935 \u0915\u0930\u094b \u0939\u092f, \u0907\u0930\u093e\u0926\u093e \u0915\u0930\u094b \u0939\u092f, \u0935\u093f\u0936\u094d\u0935\u093e\u0938 \u0915\u0930\u094b \u0939\u092f, \u091c\u093e\u0928 \u0939\u092f \u092f\u093e \u091a\u093e\u0939 \u0939\u092f\u0964",
            "x": 20,
            "y": "\u0939\u092f",
            "z": "\u0939\u0948\u0902"
        },
        "query": [
            "Take the first {x} characters of {a} and replace {y} with {z}.",
            "Extract the first {x} characters from {a} and substitute {y} with {z}.",
            "Get the initial {x} characters of {a} and change {y} to {z}."
        ],
        "language": "mag_Deva"
    },
    {
        "solution": "```python\nanswer = a.isalnum() and a.endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u9f8d\u6372\u98a8\u5c07\u6a39\u6728\u9023\u6839\u62d4\u8d77\uff0c\u626f\u7529\u5efa\u7bc9\u7269\u4e0a\u9762\u5605\u6728\u677f\uff0c\u5c07\u5572\u8eca\u62cb\u4e0a\u5929\u3002\u6700\u731b\u70c8\u56052%\u5605\u9f8d\u6372\u98a8\u6301\u7e8c\u6642\u9593\u8d85\u904e\u4e09\u500b\u9418\u3002",
            "x": "\u9418\u3002"
        },
        "query": [
            "Check if {a} contains only alphanumeric characters and ends with {x}.",
            "Verify that {a} is alphanumeric and ends with {x}.",
            "Determine if {a} has only alphanumeric characters and concludes with {x}."
        ],
        "language": "yue_Hant"
    },
    {
        "solution": "```python\nanswer = a.strip().isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u0625\u06a0\u0627\u062a\u064a \u06a4\u0627\u0633 \u0645\u0627\u0631\u0627\u0646\u0686\u0627\u0646\u0627\u0627\u0643\u0627\u0646 \u0628\u0627\u0647\u0648\u0648\u0627 \u0628\u064a\u0627\u0631 \u0623\u0641\u0631\u064a\u0643\u0627 \u0633\u0644\u0627\u062a\u0627\u0646 \u0633\u062a\u0627\u0628\u064a\u0644, \u0643\u0627\u062f\u0627 \u0633\u0627\u0645\u0648\u0627\u0627\u0646 \u0646\u0627\u0762\u0627\u0631\u0627 \u062a\u0627\u062a\u0627\u06a0\u0762\u0627\u064a\u0627 \u0633\u062a\u0627\u0628\u064a\u0644."
        },
        "query": [
            "Are all characters in {a} without leading and trailing whitespaces printable?",
            "Is the string {a} without leading and trailing spaces composed of only printable characters?",
            "Does the string {a} contain only printable characters after removing leading and trailing whitespaces?"
        ],
        "language": "bjn_Arab"
    },
    {
        "solution": "```python\nanswer = a[:x].isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u05e0\u05d0\u05d3\u05d0\u05dc \u05d4\u05d0\u05d8 \u05d0\u05d9\u05d9\u05e0\u05e7\u05d0\u05e1\u05d9\u05e8\u05d8 88% \u05e0\u05e2\u05d8 \u05e4\u05d5\u05e0\u05e7\u05d8\u05df \u05d0\u05d9\u05e0\u05e2\u05dd \u05e9\u05e4\u05d9\u05dc \u05d2\u05e2\u05d5\u05d5\u05d9\u05e0\u05e2\u05e0\u05d3\u05d9\u05d2\u05d8 76 \u05e4\u05d5\u05e0\u05e7\u05d8\u05df \u05de\u05d9\u05d8\u05df \u05e2\u05e8\u05e9\u05d8\u05df \u05d5\u05d5\u05d0\u05e8\u05e3.",
            "x": 10
        },
        "query": [
            "Check if the first {x} characters of {a} are alphanumeric.",
            "Verify if the initial {x} characters in {a} are alphanumeric.",
            "Determine if the first {x} characters of {a} consist of alphanumeric characters."
        ],
        "language": "ydd_Hebr"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Ad gen Skiing wi ha\u1e0dnin da\u0263Taizicheng da\u0263 Zhangjikou i Yuhazen Full Beijing 220km(140 miles).",
            "x": " miles)."
        },
        "query": [
            "Remove any trailing characters in {x} from {a} and check if the result contains only ASCII characters.",
            "Strip trailing characters in {x} from {a} and verify if the resulting string is ASCII.",
            "Eliminate trailing {x} from {a} and determine if the final string is composed solely of ASCII characters."
        ],
        "language": "taq_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='ignore').decode(x).find(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0644\u0627 \u064a\u0632\u0627\u0644 \u0644\u0644\u0646\u064a\u062a\u0631\u0648\u062c\u064a\u0646 \u0643\u063a\u0627\u0632 \u0646\u0641\u0633 \u062e\u0635\u0627\u0626\u0635 \u0627\u0644\u0646\u064a\u062a\u0631\u0648\u062c\u064a\u0646 \u0627\u0644\u0633\u0627\u0626\u0644. \u062a\u0643\u0648\u0646 \u0627\u0644\u062d\u0627\u0644\u0629 \u0627\u0644\u0633\u0627\u0626\u0644\u0629 \u0623\u0643\u062b\u0631 \u0643\u062b\u0627\u0641\u0629 \u0648\u0644\u0643\u0646 \u0627\u0644\u062c\u0632\u064a\u0626\u0627\u062a \u062a\u0628\u0642\u0649 \u0643\u0645\u0627 \u0647\u064a.",
            "x": "utf-8",
            "y": "\u0627\u0644\u0646\u064a\u062a\u0631\u0648\u062c\u064a\u0646"
        },
        "query": [
            "Encode {a} using {x}, ignore errors, decode it back, and find the index of {y}.",
            "Convert {a} to bytes using {x} encoding, skip errors, convert it back to string, and locate the position of {y}.",
            "Using {x} encoding, encode {a}, ignore any errors, decode it back to string, and determine the index of {y}."
        ],
        "language": "ars_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:y:z].isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u0a86\u0a96\u0abe \u0a9c\u0abf\u0ab2\u0acd\u0ab2\u0abe\u0aa8\u0ac7 \u0aa4\u0ac7\u0aa8\u0abe \u0a85\u0aa8\u0acb\u0a96\u0abe \u0ab8\u0abe\u0a82\u0ab8\u0acd\u0a95\u0ac3\u0aa4\u0abf\u0a95 \u0a85\u0aa8\u0ac7 \u0a90\u0aa4\u0abf\u0ab9\u0abe\u0ab8\u0abf\u0a95 \u0aae\u0ac2\u0ab2\u0acd\u0aaf \u0aae\u0abe\u0a9f\u0ac7 \u0aaf\u0ac1\u0aa8\u0ac7\u0ab8\u0acd\u0a95\u0acb \u0ab5\u0ab0\u0acd\u0ab2\u0acd\u0aa1 \u0ab9\u0ac7\u0ab0\u0abf\u0a9f\u0ac7\u0a9c \u0ab8\u0abe\u0a87\u0a9f\u0aa8\u0acb \u0aa6\u0ab0\u0a9c\u0acd\u0a9c\u0acb \u0aaa\u0acd\u0ab0\u0abe\u0aaa\u0acd\u0aa4 \u0aa5\u0aaf\u0acb \u0a9b\u0ac7 \u0a85\u0aa8\u0ac7 \u0aa6\u0ac7\u0ab6\u0aae\u0abe\u0a82 \u0aaa\u0acd\u0ab0\u0acb\u0aaa\u0ab0\u0acd\u0a9f\u0ac0\u0aa8\u0ac0 \u0ab8\u0acc\u0aa5\u0ac0 \u0ab5\u0aa7\u0ac1 \u0a95\u0abf\u0a82\u0aae\u0aa4 \u0aa7\u0ab0\u0abe\u0ab5\u0aa4\u0abe \u0ab8\u0acd\u0aa5\u0abe\u0aa8\u0acb\u0aae\u0abe\u0a82\u0aa5\u0ac0 \u0a8f\u0a95 \u0a9b\u0ac7.",
            "x": 5,
            "y": 20,
            "z": 2
        },
        "query": [
            "Are all characters numeric in the slice of {a} from {x} to {y} with step {z}?",
            "Is every character in the slice of {a} from {x} to {y} with step {z} a number?",
            "Does the slice of {a} from {x} to {y} with step {z} contain only numeric characters?"
        ],
        "language": "guj_Gujr"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='ignore').decode(encoding=y)\nprint(answer)\n```",
        "variables": {
            "a": "\u1340\u120a\u121d \u1213\u12ed\u120a \u12a3\u1265 \u12d3\u1208\u121d\u1293 \u1265\u12d8\u12ed\u121d\u1251\u122b\u133d \u12a5\u1293\u1270\u1295\u1250\u1233\u1250\u1230 \u12dd\u122d\u12a8\u1265 \u1219\u1209\u12a5 \u1265\u1219\u1209 \u12d8\u12ed\u1228\u12a0 \u1213\u12ed\u120a \u12a5\u12e9\u1362",
            "x": "utf-8",
            "y": "utf-16"
        },
        "query": [
            "Change {a} to {x} encoding, ignoring unencodable characters, then decode it back using {y} encoding.",
            "Convert {a} to {x} encoding, skip characters that can't be encoded, and then decode it back with {y} encoding.",
            "Encode {a} in {x} encoding, ignoring characters that can't be encoded, and decode it back using {y} encoding."
        ],
        "language": "tir_Ethi"
    },
    {
        "solution": "```python\nanswer = a.title().istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Syina ivinda yimwe ya masaa ta Hawaii, nthi isu syi kati kati wa kiw'u mavinda angi isuaniawa ta \u201cHawaii nthi y'uungu\u201d."
        },
        "query": [
            "Verify if the title-cased version of {a} adheres to title case formatting.",
            "Check if converting {a} to title case results in a properly formatted title case string.",
            "Determine if the title-cased form of {a} is correctly formatted as a title case string."
        ],
        "language": "kam_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x)[-1].isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u064a\u062a\u0645 \u0644\u0639\u0628 \u062b\u0645\u0627\u0646\u064a \u0639\u0634\u0631\u0629 \u062d\u0641\u0631\u0629\u064d \u062e\u0644\u0627\u0644 \u0627\u0644\u062c\u0648\u0644\u0629 \u0627\u0644\u0639\u0627\u062f\u064a\u0629\u060c \u062d\u064a\u062b \u064a\u0628\u062f\u0623 \u0627\u0644\u0644\u0627\u0639\u0628\u0648\u0646 \u0639\u0627\u062f\u0629\u064b \u0645\u0646 \u0623\u0648\u0644 \u062d\u0641\u0631\u0629 \u0641\u064a \u0627\u0644\u0645\u0644\u0639\u0628 \u0648\u064a\u0646\u062a\u0647\u0648\u0646 \u0641\u064a \u0627\u0644\u062b\u0627\u0645\u0646\u0629 \u0639\u0634\u0631\u0629.",
            "x": " "
        },
        "query": [
            "Split {a} by {x} and check if the last substring is numeric.",
            "Divide {a} using {x} and verify if the final segment is a number.",
            "Separate {a} with {x} and determine if the last part is numeric."
        ],
        "language": "ars_Arab"
    },
    {
        "solution": "```python\nanswer = a.isascii() and a.isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "An South Pole Traverse (o Highway) usa nga 1600 km nga dalan tikang ha Istasyon han McMurdo ha Dagat han Ross tipakadto ha Pole."
        },
        "query": [
            "Check if {a} contains only ASCII characters and all of them are printable.",
            "Verify that {a} has only ASCII characters and they are all printable.",
            "Determine if {a} consists solely of printable ASCII characters."
        ],
        "language": "war_Latn"
    },
    {
        "solution": "```python\nanswer = a.isidentifier() and a.isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "2004\u0621 \u06a9\u06d2 \u0627\u0648\u0644\u0645\u067e\u06a9 \u0633\u0644\u0648\u0631 \u0645\u06cc\u0688\u0644\u0633\u0679 \u0639\u0627\u0645\u0631 \u062e\u0627\u0646 \u0646\u06d2 \u06a9\u06c1\u0627\u060c\u201d\u0630\u0627\u062a\u06cc \u0637\u0648\u0631 \u067e\u0631 \u0645\u06cc\u0631\u0627 \u062e\u06cc\u0627\u0644 \u06c1\u06d2 \u06a9\u06c1 \u062e\u0648\u0627\u062a\u06cc\u0646 \u06a9\u0648 \u0644\u0691\u0646\u0627 \u0646\u06c1\u06cc\u06ba \u0686\u0627\u06c1\u06cc\u0626\u06d2 \u06cc\u06c1 \u0645\u06cc\u0631\u0627 \u0646\u064f\u0642\u0637\u06c1\u0621\u0650 \u0646\u0638\u0631 \u06c1\u06d2\u06d4\u201c"
        },
        "query": [
            "Check if {a} is a valid Python identifier and if it contains only alphanumeric characters.",
            "Determine if {a} is a valid identifier in Python and consists solely of alphanumeric characters.",
            "Verify whether {a} is a valid Python identifier and contains only letters and numbers."
        ],
        "language": "urd_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:y].title().rjust(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "Mae'n rhaid i'r bleidlais gael ei chadarnhau o hyd gan y Pwyllgor Olympaidd Rhyngwladol llawn yn ei gyfarfod ym mis Hydref yn Copenhagen.",
            "x": 10,
            "y": 30,
            "z": 40,
            "w": "*"
        },
        "query": [
            "Take the substring of {a} from index {x} to {y}, convert it to title case, and right justify it to length {z} using {w}.",
            "Extract the substring from {a} starting at index {x} and ending at index {y}, change it to title case, and pad it on the left to make its length {z} with {w}.",
            "Get the substring of {a} from position {x} to {y}, transform it to title case, and right-align it to a total length of {z} using {w} as the padding character."
        ],
        "language": "cym_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].upper().rjust(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "Ve\u0107ina predmeta zakopana s Tutankamonom dobro je o\u010duvana, uklju\u010duju\u0107i na tisu\u0107e artefakata od dragocjenih metala i rijetkog kamenja.",
            "x": 8,
            "y": 16,
            "z": 20,
            "w": "*"
        },
        "query": [
            "Extract the substring of {a} from index {x} to {y}, convert it to uppercase, and right justify it to length {z} using {w}.",
            "Get the substring of {a} from position {x} to {y}, change it to uppercase, and pad it on the left to make its length {z} with {w}.",
            "Take the part of {a} from index {x} to {y}, turn it into uppercase, and right-align it to a total length of {z} with {w}."
        ],
        "language": "hrv_Latn"
    },
    {
        "solution": "```python\nanswer = a[:y].rjust(x, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u0647\u064a \u0627\u0633\u06aa\u0631\u064a\u067e \u0633\u0684\u064a \u0686\u0646\u068a \u062a\u064a \u0645\u0644\u064a\u0627 \u0622\u0647\u0646 \u06fd \u06af\u0647\u067d \u0645\u0648\u0633\u0645\u064a \u0627\u062b\u0631 \u0638\u0627\u0647\u0631 \u067f\u0626\u064a \u067f\u0648\u060c \u0627\u0647\u0648 \u0638\u0627\u0647\u0631 \u06aa\u0631\u064a \u067f\u0648 \u0647\u0646 \u06a9\u064a \u067e\u064a\u062f\u0627 \u06aa\u0631\u06bb \u0648\u0627\u0631\u0627 \u0627\u0631\u0636\u064a\u0627\u062a\u064a \u0648\u0627\u0642\u0639\u0627 \u06aa\u0627\u0641\u064a \u062a\u0627\u0632\u0627 \u0647\u0626\u0627.",
            "x": 50,
            "y": 10,
            "z": " "
        },
        "query": [
            "Take the first {y} characters of {a} and right-justify them in a string of length {x} using {z} as the fill character.",
            "Extract the first {y} characters from {a} and pad them on the left with {z} to make a string of length {x}.",
            "Get the first {y} characters of {a}, then right-align them in a string of length {x} with {z} as the padding character."
        ],
        "language": "snd_Arab"
    },
    {
        "solution": "```python\nanswer = a[:y:z].islower()\nprint(answer)\n```",
        "variables": {
            "a": "O tagata ta\u2019ito\u2019atasi sa auai i le tele o tausaga na fesoasoani ia i matou e talisapaia lo matou malosi ma matou naunauta\u2019iga a o iloiloina ma le fa\u2019amaoni fa\u2019afitauli e oo lava i to\u2019ilalo.",
            "y": 50,
            "z": 2
        },
        "query": [
            "Verify if the first {y} characters of {a}, selecting every {z}-th character, are all lowercase.",
            "Check if every {z}-th character in the first {y} characters of {a} is lowercase.",
            "Determine if the first {y} characters of {a}, taking every {z}-th character, are all in lowercase."
        ],
        "language": "smo_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().center(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0424\u043b\u043e\u0440\u0438\u0434\u0430\u043d\u044b\u04a3 \u041c\u0430\u0439\u0430\u043c\u0438 \u049b\u0430\u043b\u0430\u0441\u044b\u043d\u0430\u043d \u0448\u0430\u043c\u0430\u043c\u0435\u043d 3 000 \u043c\u0438\u043b\u044c \u049b\u0430\u0448\u044b\u049b\u0442\u044b\u049b\u0442\u0430 \u043e\u0440\u043d\u0430\u043b\u0430\u0441\u049b\u0430\u043d \u0434\u0430\u0443\u044b\u043b\u0434\u044b\u04a3 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u0434\u044b \u0442\u04b1\u0440\u0430\u049b\u0442\u044b \u0436\u044b\u043b\u0434\u0430\u043c\u0434\u044b\u0493\u044b 40 \u043c\u0438\u043b\u044c/\u0441\u0430\u0493 (64 \u043a\u043c/\u0441\u0430\u0493) \u049b\u04b1\u0440\u0430\u0439\u0434\u044b.",
            "x": 100,
            "y": "*"
        },
        "query": [
            "Trim whitespace from {a} and center it within {x} characters, using {y} for padding.",
            "Remove spaces from {a} and align it centrally within {x} characters, padding with {y}.",
            "Strip spaces from {a} and place it in the center of {x} characters, using {y} as the padding character."
        ],
        "language": "kaz_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.split(x, y).count(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0422\u0438\u0431\u049b\u0438 \u0433\u0443\u0437\u043e\u0440\u0438\u0448\u04b3\u043e, \u0434\u0430\u0440 \u0445\u043e\u043d\u0430\u0438 \u0432\u043e\u049b\u0435\u044a \u0434\u0430\u0440 \u043a\u04ef\u0447\u0430\u0438 \u041c\u0430\u043a\u0431\u0435\u0442 \u0431\u0438\u043d\u043e\u0431\u0430\u0440 \u0441\u0430\u0431\u0430\u0431\u0438 \u0438\u0445\u0440\u043e\u04b7\u0438 \u0433\u0430\u0437 \u0442\u0430\u0440\u043a\u0438\u0448 \u0431\u0430 \u0430\u043c\u0430\u043b \u043e\u043c\u0430\u0434\u0430\u0430\u0441\u0442.",
            "x": " ",
            "y": 5,
            "z": "\u0434\u0430\u0440"
        },
        "query": [
            "Count how many times {z} appears in the substrings of {a} split by {x} up to {y} times.",
            "Determine the number of occurrences of {z} in the parts of {a} obtained by splitting it with {x} up to {y} splits.",
            "Find the frequency of {z} in the segments of {a} after splitting it by {x} up to {y} times."
        ],
        "language": "tgk_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[:y].encode(encoding='utf-8', errors='replace')\nprint(answer)\n```",
        "variables": {
            "a": "Jard\u00edn de la Uni\u00f3n. \u0411\u044b\u043b \u0443\u0440\u044b\u043d 17-\u0441\u0435 \u0431\u044b\u0443\u0430\u0442 \u043c\u043e\u043d\u0430\u0441\u0442\u044b\u0440\u044b Templo de San Diego \u04e9\u0441\u04e9\u043d \u0430\u0442\u0440\u0438\u0443\u043c \u0431\u0443\u043b\u0430\u0440\u0430\u04a1 \u0442\u04e9\u0499\u04e9\u043b\u0433\u04d9\u043d, \u0431\u0435\u0440\u0499\u04d9\u043d-\u0431\u0435\u0440 \u04bb\u0430\u04a1\u043b\u0430\u043d\u044b\u043f \u04a1\u0430\u043b\u0493\u0430\u043d \u0431\u0438\u043d\u0430 \u0431\u0443\u043b\u0493\u0430\u043d.",
            "y": 50
        },
        "query": [
            "Get the substring from the beginning of {a} up to (but not including) index {y}, then encode it in 'utf-8' using a question mark for characters that can't be encoded.",
            "Extract the substring from the start of {a} to just before index {y}, and encode it in 'utf-8', replacing unencodable characters with a question mark.",
            "Take the substring from the start of {a} to index {y} (excluding {y}), then encode it in 'utf-8' and replace any characters that can't be encoded with a question mark."
        ],
        "language": "bak_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[y:].replace(x, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u05d0\u05db\u05e6\u05df \u05dc\u05e2\u05db\u05e2\u05e8 \u05d5\u05d5\u05e2\u05e8\u05df \u05d2\u05e2\u05e9\u05e4\u05d9\u05dc\u05d8 \u05d1\u05e9\u05e2\u05ea \u05d0 \u05d2\u05e2\u05d4\u05e2\u05e8\u05d9\u05d2\u05e2 \u05e8\u05d5\u05e0\u05d3\u05e2, \u05de\u05d9\u05d8 \u05e9\u05e4\u05d9\u05dc\u05e2\u05e8\u05e1 \u05d2\u05e2\u05d5\u05d5\u05e2\u05e0\u05dc\u05d9\u05da \u05d0\u05e0\u05d4\u05d5\u05d9\u05d1\u05e0\u05d3\u05d9\u05d2 \u05d6\u05d9\u05d9\u05e2\u05e8 \u05e2\u05e8\u05e9\u05d8\u05e2 \u05dc\u05d0\u05da \u05d0\u05d5\u05d9\u05e3 \u05d3\u05d9 \u05e7\u05d5\u05e8\u05e1 \u05d0\u05d5\u05df \u05e2\u05e0\u05d3\u05d9\u05d2\u05df \u05d0\u05d5\u05d9\u05e3 \u05d3\u05d9 \u05d0\u05db\u05e6\u05e0\u05d8\u05e2.",
            "x": "\u05d0\u05db\u05e6\u05df",
            "y": 10,
            "z": "\u05e4\u05d5\u05e4\u05e6\u05df"
        },
        "query": [
            "Replace {x} with {z} in the substring of {a} starting from index {y}.",
            "In the substring of {a} starting at index {y}, replace {x} with {z}.",
            "Starting from index {y} in {a}, replace {x} with {z}."
        ],
        "language": "ydd_Hebr"
    },
    {
        "solution": "```python\nanswer = a[y:].zfill(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0cb8\u0cae\u0cc1\u0ca6\u0ccd\u0cb0\u0ca6\u0cb2\u0ccd\u0cb2\u0cbf\u0ca8 \u0c87\u0cb3\u0cbf\u0ca4, \u0ca6\u0ccd\u0cb5\u0cc0\u0caa\u0c95\u0cb2\u0ccd\u0caa\u0ca6 \u0c88\u0cb6\u0cbe\u0ca8\u0ccd\u0caf\u0ca6\u0cb2\u0ccd\u0cb2\u0cbf \u0cae\u0cbf\u0cb8\u0ccd\u0c9f\u0cbf\u0c95\u0ccd \u0ca8\u0ca6\u0cbf\u0caf \u0c89\u0ca6\u0ccd\u0ca6\u0c95\u0ccd\u0c95\u0cc2 \u0c85\u0c82\u0ca4\u0cb0 \u0c89\u0c82\u0c9f\u0cc1 \u0cae\u0cbe\u0ca1\u0cbf\u0ca6\u0cbe\u0c97, \u0c85\u0cb5\u0cb0\u0cc1 \u0ca4\u0c95\u0ccd\u0cb7\u0ca3 \u0c86 \u0cb8\u0ca3\u0ccd\u0ca3 \u0cac\u0cc0\u0c9a\u0ccd\u200c\u0ca8 \u0cac\u0cc7\u0cb2\u0cbf\u0caf\u0ca8\u0ccd\u0ca8\u0cc1 \u0c92\u0c82\u0ca6\u0cc1 \u0cb8\u0ca3\u0ccd\u0ca3 \u0c95\u0cb2\u0ccd\u0cb2\u0cbf\u0ca8 \u0c97\u0ccb\u0ca1\u0cc6\u0caf\u0cca\u0c82\u0ca6\u0cbf\u0c97\u0cc6 \u0c89\u0ca4\u0ccd\u0ca4\u0cb0\u0ca6\u0cbf\u0c95\u0ccd\u0c95\u0cbf\u0ca8\u0cb2\u0ccd\u0cb2\u0cbf\u0ca8 \u0cb5\u0cbe\u0c9f\u0cb0\u0ccd\u0cb8\u0ccd \u0c8f\u0ca1\u0ccd\u0c9c\u0ccd \u0c95\u0cca\u0ca8\u0cc6\u0caf\u0cbe\u0c97\u0cc1\u0cb5\u0cb5\u0cb0\u0cc6\u0c97\u0cc6 \u0cb5\u0cbf\u0cb8\u0ccd\u0ca4\u0cb0\u0cbf\u0cb8\u0cbf\u0ca6\u0cb0\u0cc1.",
            "x": 100,
            "y": 10
        },
        "query": [
            "Take the substring of {a} starting from position {y} and pad it with zeros until its length is {x}.",
            "Extract the substring from {a} starting at index {y} and pad it with zeros to make its length {x}.",
            "Get the substring of {a} beginning at {y} and add leading zeros until its length reaches {x}."
        ],
        "language": "kan_Knda"
    },
    {
        "solution": "```python\nanswer = a[x:y].title().zfill(z)\nprint(answer)\n```",
        "variables": {
            "a": "The invention of spoke wheels made Assyrian chariots lighter, faster, and better prepared to outrun soldiers and other chariots.",
            "x": 4,
            "y": 20,
            "z": 30
        },
        "query": [
            "Extract a substring from {a} starting at the {x+1}-th character up to the {y}-th character, capitalize the first character of each word, and pad it with leading zeros until it is {z} characters long.",
            "Get a substring from {a} starting at the {x+1}-th character and ending at the {y}-th character, convert it to title case, and pad it with leading zeros to make it {z} characters in length.",
            "From {a}, take the substring starting at the {x+1}-th character and ending at the {y}-th character, capitalize each word, and add leading zeros to ensure the total length is {z} characters."
        ],
        "language": "eng_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].islower() and a[y:z].isupper()\nprint(answer)\n```",
        "variables": {
            "a": "Li Hong Kong\u00ea ji day\u00eek b\u00fb, li Un\u00eevers\u00eeteya New York\u00ea \u00fb Xwandingeha Hiq\u00fbq\u00ea ya Harvard\u00ea MA xwand \u00fb demek\u00ea \"karta kesk\" a \u015f\u00ean\u00eeb\u00fbna da\u00eem\u00ee ya Emer\u00eekan saz kir.",
            "x": 3,
            "y": 7,
            "z": 10
        },
        "query": [
            "Check if the substring of {a} from {x+1} to {y} is all lowercase and the substring from {y+1} to {z} is all uppercase.",
            "Verify if the segment of {a} between {x+1} and {y} consists entirely of lowercase letters and the segment between {y+1} and {z} consists entirely of uppercase letters.",
            "Determine if the portion of {a} from {x+1} to {y} is completely in lowercase and the portion from {y+1} to {z} is completely in uppercase."
        ],
        "language": "kmr_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].strip(z).capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "T\u00e1 neart foirgnimh go h\u00e1lainn le breathn\u00fa orthu agus is f\u00e9idir leis an radharc \u00f3 fhoirgneamh ard n\u00f3 fuinneog at\u00e1 suite go cliste a bheith ina h\u00e1bhar \u00e1illeachta.",
            "x": " ",
            "y": 5,
            "z": "a"
        },
        "query": [
            "Split {a} by {x}, take the {y+1}-th segment, strip {z} from its ends, and capitalize it.",
            "Divide {a} using {x} as the delimiter, select the {y+1}-th part, remove {z} from both ends, and capitalize the result.",
            "Break {a} at each {x}, pick the {y+1}-th piece, trim {z} from the edges, and capitalize the first letter."
        ],
        "language": "gle_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).isupper()\nprint(answer)\n```",
        "variables": {
            "a": "Riib seglsa ko-gu\u0303b-te\u0303nsa yaa ko-gu\u0303b-te\u0303ng n tar naagr-taab zaale ne Nouvelle-Z\u00e9lande t\u1ebdnga n bee Polyn\u00e9sie soolma p\u028bga la bee Pacifique mog-ma goabg baobgo pusuke.",
            "x": "R"
        },
        "query": [
            "Check if {a} without leading and trailing {x} is all uppercase.",
            "Determine if the string {a} with {x} stripped from both ends is entirely in uppercase.",
            "Is the string {a}, after removing {x} from the start and end, completely uppercase?"
        ],
        "language": "mos_Latn"
    },
    {
        "solution": "```python\nanswer = a.swapcase()[x:y].isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "O mulivaetetee o seevae e tatau ona maulalo ma lautele. O le oneone, \u2018ili\u2019ili po o le masima (calcium chloride) e masani ona fa\u2019asalalau i luga o auala po o ala savali ina ia fa\u2019aleleia ai le tosoina o uta.",
            "x": 2,
            "y": 15
        },
        "query": [
            "Determine if the substring of {a} from {x} to {y} with swapped case is a valid identifier.",
            "Check if the substring of {a} from {x} to {y} after swapping case is a valid identifier.",
            "Is the substring of {a} from {x} to {y} with case swapped a valid identifier?"
        ],
        "language": "smo_Latn"
    },
    {
        "solution": "```python\nanswer = a[:y].upper().find(x)\nprint(answer)\n```",
        "variables": {
            "a": "I-Pureland origami i-origami onokukhawulelwa kokuthi ukusonga okukodwa kuphela kungenziwa ngesikhathi, okunye ukusonga okuyinkimbinkimbi njengokusongela emuva akuvunyelwe, futhi konke ukusonga kunezindawo eziqondile.",
            "x": "ORIGAMI",
            "y": 50
        },
        "query": [
            "Find the position of {x} in the first {y} characters of the uppercase version of {a}.",
            "Locate the index of {x} within the first {y} characters of the string {a} after converting it to uppercase.",
            "Determine the position of {x} in the initial {y} characters of the uppercase form of {a}."
        ],
        "language": "zul_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:].lower().isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "Menawi ida dan\u00e9 sedek nginep ring hotel, ida dan\u00e9 polih galah antuk nraktir ragan ida dan\u00e9n\u00e9 tur ngambil galah malih antuk ngaryanang minuman panes san\u00e9 sp\u00e9sial.",
            "x": 10
        },
        "query": [
            "Determine if the substring of {a} starting from index {x} in lowercase is a valid identifier.",
            "Check if the lowercase substring of {a} from index {x} is a valid identifier.",
            "Is the substring of {a} starting at index {x} in lowercase a valid identifier?"
        ],
        "language": "ban_Latn"
    },
    {
        "solution": "```python\nanswer = a[::-1].title().startswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "Yo kele ntangu bantu ke kwendaka na kisika yina me swaswana kibeni ti luzingu na bo ya konso kiluombu sambu na kupema mpi kusepela.",
            "x": "Alapesek"
        },
        "query": [
            "Check if the title-cased version of the reversed string {a} starts with {x}.",
            "Determine if the reversed string {a}, when title-cased, begins with {x}.",
            "Verify if the title-cased form of the reversed string {a} starts with {x}."
        ],
        "language": "ktu_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode(x).isdecimal()\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u06cc\u0691 \u0648\u0627\u0644\u06cc\u065b\u0646 \u0634\u06cc\u065b\u0631\u0646 \u0686\u064f\u06be \u0633\u06a9\u0648\u0644\u0686 \u06a9\u0627\u0670\u0645 \u06c1\u06cc\u0648\u0646 \u0686\u06cc\u0632\u0646 \u067e\u06cc\u0679\u06be \u062a\u0648\u062c\u06c1 \u062a\u06be\u0627\u0648\u0646 \u0645\u0634\u06a9\u0644 \u06af\u0698\u06be\u0627\u0646\u060c \u0645\u06af\u0631 \u062a\u0645 \u06c1\u06cc\u06a9\u0646 \u062a\u0645\u0646 \u0686\u06cc\u0632\u0646 \u067e\u06cc\u0679\u06be \u062a\u0648\u062c\u06c1 \u062a\u06be\u0627\u0648\u062a\u06be \u06cc\u0645\u0648 \u0633\u06cc\u062a \u062a\u0645 \u0644\u0637\u0641 \u0627\u0646\u062f\u0648\u0632 \u0627\u0670\u0633\u0646 \u0633\u067e\u062f\u0627\u0646 \u06cc\u06cc\u062a\u06be \u06a9\u06cc\u065b\u0646 \u0632\u0646 \u06af\u06cc\u0645 \u06af\u06cc\u0646\u062f\u0646 \u06cc\u0627 \u067e\u0646\u0646 \u067e\u0633\u0646\u062f\u06cc\u062f\u0655 \u06a9\u0627\u0679\u0648\u0646 \u0648\u0686\u06be\u0646 \u06cc\u0627 \u0628\u063a\u06cc\u0631\u0655 \u0648\u0642\u0641\u06c1 \u062c\u0645\u0644\u06c1 \u0644\u06cc\u06a9\u06be\u0646\u06d4",
            "x": "utf-8"
        },
        "query": [
            "Verify if the string {a} encoded and then decoded with {x} consists only of decimal characters.",
            "Check if the string {a} after being encoded and decoded with {x} contains only decimal digits.",
            "Determine if the string {a} encoded and decoded using {x} is made up entirely of decimal characters."
        ],
        "language": "kas_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:].rfind(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0643\u0627\u0643\u0648\u0631\u0627\u06a0\u0646 \u0644\u0627\u064a\u0646 \u0644\u064a\u0646\u0633\u0627 \u06a4\u0631\u06ac\u0627\u0646\u0644 \u064a\u0627\u064a\u062a\u0648 \u0628\u0648\u0643\u0623\u0646 \u0645\u0643\u0633\u064a\u0645\u0648\u0645 (\u0643\u0627\u0686\u0627\u06a4\u062a\u0646\u06bd) \u0644\u064a\u0646\u0633\u0627\u06bd \u0631\u0646\u0686\u0643 \u062a\u0648\u0647 \u0644\u0627\u0628\u064a\u0647 \u0631\u0646\u062f\u0647.",
            "x": 10,
            "y": "\u0644\u064a\u0646\u0633\u0627"
        },
        "query": [
            "Find the last occurrence of {y} in the substring of {a} starting from position {x}.",
            "Locate the final instance of {y} within the substring of {a} beginning at index {x}.",
            "Determine the last position of {y} in the portion of {a} that starts from position {x}."
        ],
        "language": "bjn_Arab"
    },
    {
        "solution": "```python\nanswer = a[x::z].title()\nprint(answer)\n```",
        "variables": {
            "a": "Una persone chi pesat 200 libras (90kg) in sa Terra diat pesare pagu prus o mancu 36 libras (16kg) in Io. Duncas sa gravidade est \u00f2viu chi t\u2019atirat prus pagu.",
            "x": 10,
            "z": 3
        },
        "query": [
            "Extract the substring from {a} starting at index {x} to the end, taking every {z}-th character, and capitalize the first character of each word in the result.",
            "From the string {a}, get the substring starting at index {x}, taking every {z}-th character, and convert it to title case.",
            "Take the substring of {a} starting at index {x}, skipping {z}-1 characters each time, and convert the result to title case."
        ],
        "language": "srd_Latn"
    },
    {
        "solution": "```python\nanswer = a.isdecimal() and a.isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u04e8\u0434\u04e9\u0440 \u0442\u0443\u0442\u043c\u044b\u043d \u0448\u043e\u0443 \u0431\u043e\u043b\u043e\u043d \u041a\u043e\u043b\u0431\u0435\u0440\u0442\u044b\u043d \u043c\u044d\u0434\u044d\u044d \u043d\u044d\u0440\u0442\u044d\u0439 \u043d\u044d\u0432\u0442\u0440\u04af\u04af\u043b\u0433\u04af\u04af\u0434\u044d\u044d\u0441 \u0438\u0445 \u044d\u0440\u0442, \u0425\u044d\u043a \u0431\u043e\u043b\u043e\u043d \u0416\u043e\u043d\u0441\u043e\u043d \u043d\u0430\u0440 1988 \u043e\u043d\u0434 UW-\u0434 \u043e\u044e\u0443\u0442\u0430\u043d \u0431\u0430\u0439\u0445 \u04af\u0435\u0434\u044d\u044d \u043c\u044d\u0434\u044d\u044d, \u0441\u0443\u0440\u0432\u0430\u043b\u0436\u043b\u0430\u0433\u044b\u0433 \u043f\u0430\u0440\u043e\u0434\u0438 \u0431\u0430\u0439\u0434\u043b\u0430\u0430\u0440 \u0433\u0430\u0440\u0433\u0430\u0441\u0430\u043d \u0442\u043e\u0432\u0445\u0438\u043c\u043e\u043b\u044b\u0433 \u0443\u0440\u044c\u0434\u0447\u0438\u043b\u0430\u043d \u0442\u04e9\u0441\u04e9\u04e9\u043b\u0436 \u0431\u0430\u0439\u0436\u044d\u044d."
        },
        "query": [
            "Check if {a} consists only of decimal digits and is a valid Python identifier.",
            "Determine if {a} is composed solely of decimal digits and qualifies as a valid Python identifier.",
            "Verify whether {a} contains only decimal digits and is a valid identifier in Python."
        ],
        "language": "khk_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.ljust(y, z).swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "Mandray ny finoany ho fivavahana samy hafa amin\u2019ny Hindoisma ny Sikhs na dia eken\u2019izy ireo aza ny fototra sy fombafomba Hindoa ao aminy.",
            "y": 150,
            "z": "*"
        },
        "query": [
            "Left-justify {a} with {y} characters, padded by {z}, and then swap the case of the result.",
            "Pad {a} to the left with {z} until it reaches {y} characters, then change the case of each letter.",
            "Make {a} {y} characters long by padding with {z} on the left, and then invert the case of the string."
        ],
        "language": "plt_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode(x).title()\nprint(answer)\n```",
        "variables": {
            "a": "Bomban\u0131 patlatqan\u0131ndan \u015f\u00fcbeli adam, patlama neticesinde yaralan\u0131p, tutuld\u0131.",
            "x": "crh_Latn"
        },
        "query": [
            "Encode {a} using {x} encoding with replacement for errors, decode it back, and convert it to title case.",
            "Using {x} encoding, encode {a} with error replacement, decode it, and change it to title case.",
            "Convert {a} to title case after encoding it with {x} encoding and replacing errors, then decoding it."
        ],
        "language": "crh_Latn"
    },
    {
        "solution": "```python\nanswer = a[y:z].isspace()\nprint(answer)\n```",
        "variables": {
            "a": "\u06ac\u064a\u06ac\u06bd\u0648 \u062a\u0631\u064a\u0686\u0631\u0627\u062a\u0648\u06a4 \u062f\u0627\u06a4\u0642 \u0645\u0623\u0646\u0686\u0648\u0621\u0623\u0646 \u0627\u0646\u062f\u0642 \u0633\u0627\u062c\u0648 \u062f\u0627\u0621\u0648\u0646 \u0646\u0627\u0645\u0648\u0646 \u0628\u0647\u06a9\u0646 \u0631\u0646\u062a\u064a\u06a0 \u062c\u0648 \u0627\u06a9\u0646 \u0646\u0646 \u0643\u0627\u0631\u0647 \u0628\u0627\u0646.",
            "y": 5,
            "z": 10
        },
        "query": [
            "Check if the substring of {a} from {y} to {z} consists only of whitespace characters.",
            "Determine if the section of {a} between {y} and {z} contains only whitespace.",
            "Verify if the part of {a} from index {y} to {z} is made up solely of whitespace characters."
        ],
        "language": "min_Arab"
    },
    {
        "solution": "```python\nanswer = a[y::z].isupper()\nprint(answer)\n```",
        "variables": {
            "a": "Sejo sa Hangi se phehelwa mokoting o tjhesang fatshe.",
            "y": 0,
            "z": 5
        },
        "query": [
            "Check if every {z}-th character from {y} in {a} is uppercase.",
            "Verify if each {z}-th character starting from index {y} in {a} is in uppercase.",
            "Determine if all characters at every {z}-th position from {y} in {a} are uppercase."
        ],
        "language": "sot_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].isalpha() and a[x:y].islower()\nprint(answer)\n```",
        "variables": {
            "a": "Selv om det er langt fra et moderne fenomen, forbinder de fleste sannsynligvis det med ungdom som vandaliserer offentlig og privat eiendom ved hjelp av spraymaling.",
            "x": 10,
            "y": 13
        },
        "query": [
            "Verify if the substring of {a} from {x} to {y} consists only of lowercase alphabetic characters.",
            "Check if the substring of {a} from index {x} to {y} contains only lowercase letters.",
            "Determine if the portion of {a} between {x} and {y} is made up solely of lowercase alphabetic characters."
        ],
        "language": "nob_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].isdigit() and a[x:y].isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u03a4\u03b1 \u03c0\u03c1\u03c9\u03c4\u03cc\u03bd\u03b9\u03b1 \u03ad\u03c7\u03bf\u03c5\u03bd \u03b8\u03b5\u03c4\u03b9\u03ba\u03cc \u03b7\u03bb\u03b5\u03ba\u03c4\u03c1\u03b9\u03ba\u03cc \u03c6\u03bf\u03c1\u03c4\u03af\u03bf \u03b5\u03bd\u03ce \u03c4\u03b1 \u03bd\u03b5\u03c4\u03c1\u03cc\u03bd\u03b9\u03b1 \u03b5\u03af\u03bd\u03b1\u03b9 \u03bf\u03c5\u03b4\u03ad\u03c4\u03b5\u03c1\u03b1. \u03a4\u03b1 \u03b7\u03bb\u03b5\u03ba\u03c4\u03c1\u03cc\u03bd\u03b9\u03b1 \u03c6\u03ad\u03c1\u03bf\u03c5\u03bd \u03b1\u03c1\u03bd\u03b7\u03c4\u03b9\u03ba\u03cc \u03c6\u03bf\u03c1\u03c4\u03af\u03bf.",
            "x": 10,
            "y": 15
        },
        "query": [
            "Check if the substring of {a} from {x} to {y} consists only of printable digit characters.",
            "Verify if the substring of {a} from index {x} to {y} contains only printable digits.",
            "Determine if the portion of {a} between {x} and {y} is made up solely of printable digit characters."
        ],
        "language": "ell_Grek"
    },
    {
        "solution": "```python\nanswer = a[x::y].islower() and a[x::y].isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Su tempus est una cosa chi est a ingh\u00ecriu de nois e interessat totu su chi faghimus, mancari siat dif\u00ectzile a cumpr\u00e8ndere.",
            "x": 5,
            "y": 3
        },
        "query": [
            "Verify if every {y}-th character starting from position {x} in {a} is a lowercase alphabetic character.",
            "Check if each {y}-th character from position {x} in {a} is a lowercase letter.",
            "Determine if all {y}-th characters starting at index {x} in {a} are lowercase alphabetic characters."
        ],
        "language": "srd_Latn"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).upper().count(y)\nprint(answer)\n```",
        "variables": {
            "a": "Il Capitano dei vigili del fuoco Scott Kouns ha dichiarato: \"A Santa Clara \u00e8 stata una giornata calda e le temperature si sono aggirate sui 90 gradi.\"",
            "x": ".",
            "y": "A"
        },
        "query": [
            "Remove trailing {x} from {a}, convert the result to uppercase, and count the occurrences of {y}.",
            "Trim the trailing {x} from {a}, change the result to uppercase, and find the number of times {y} appears.",
            "Strip the trailing {x} from {a}, turn the result to uppercase, and count how many times {y} occurs."
        ],
        "language": "ita_Latn"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).rsplit(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u041a\u0438\u043b\u0435\u043c\t\u04bb\u0430\u043b\u044b\u043c\u044b\t\u0442\u04e9\u0440\u043b\u04e9\t\u0438\u043b\u0434\u04d9\u0440\u0499\u04d9\t\u0442\u04e9\u0440\u043b\u04e9\u0441\u04d9\t\u0438\u04ab\u04d9\u043f\u043b\u04d9\u043d\u04d9,\t\u04d9\t\u0431\u0435\u0440\t\u0438\u043b\u0434\u04d9\u0433\u0435\t\u04bb\u0430\u043b\u044b\u043c\t\u0441\u0442\u0430\u0432\u043a\u0430\u043b\u0430\u0440\u044b\t\u043c\u0435\u043d\u04d9\u043d\t\u0442\u0430\u0448\u043b\u0430\u043c\u0430\u043b\u0430\u0440\t\u0438\u043a\u0435\u043d\u0441\u0435\t\u0438\u043b\u0434\u04d9\u0440\u0499\u04d9\u0433\u0435\u043d\u04d9\u043d\t\u043d\u044b\u04a1\t\u0430\u0439\u044b\u0440\u044b\u043b\u0430.",
            "x": 4,
            "y": " ",
            "z": 3
        },
        "query": [
            "Expand tabs in {a} to {x} spaces and then split the string at each {y}, with at most {z} splits from the end.",
            "Convert tabs in {a} to {x} spaces and then split the string by {y}, performing at most {z} splits from the right.",
            "Replace tabs in {a} with {x} spaces and then split the string at each {y}, allowing up to {z} splits from the end."
        ],
        "language": "bak_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x:y:z].isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u0b17\u0b24 3 \u0b2e\u0b3e\u0b38 \u0b2e\u0b27\u0b4d\u0b5f\u0b30\u0b47 \u0b06\u0b28\u0b41\u0b37\u0b4d\u0b20\u0b3e\u0b28\u0b3f\u0b15 \u0b2d\u0b3e\u0b2c\u0b47 \u0b05\u0b2d\u0b3f\u0b2f\u0b4b\u0b17 \u0b28\u0b15\u0b30\u0b3f \u0b15\u0b47\u0b28\u0b4d\u0b26\u0b4d\u0b30\u0b3f\u0b5f \u0b2c\u0b41\u0b15\u0b3f\u0b02 \u0b38\u0b41\u0b2c\u0b3f\u0b27\u0b3e\u0b30\u0b41 \u0b17\u0b3f\u0b30\u0b2b 80\u0b30\u0b41 \u0b05\u0b27\u0b3f\u0b15 \u0b2c\u0b4d\u0b5f\u0b15\u0b4d\u0b24\u0b3f\u0b19\u0b4d\u0b15\u0b41 \u0b2e\u0b41\u0b15\u0b4d\u0b24 \u0b15\u0b30\u0b3e\u0b2f\u0b3e\u0b07\u0b25\u0b3f\u0b32\u0b3e\u0964",
            "x": 0,
            "y": 10,
            "z": 2
        },
        "language": "ory_Orya",
        "query": [
            "Verify that all characters in the substring of {a} from {x} to {y} with every {z}-th step are alphanumeric.",
            "Check if every character in the substring of {a} from index {x} to {y} with a step of {z} is alphanumeric.",
            "Determine if all characters in the sliced string of {a} from {x} to {y} with a step of {z} are alphanumeric."
        ]
    },
    {
        "solution": "```python\nanswer = a[y:z].rjust(x, w)\nprint(answer)\n```",
        "variables": {
            "a": "\u092f\u093e\u0926 \u0906\u092a \u0915\u0941\u091b \u092c\u0928\u093f\u092f\u093e\u0926\u0947 \u0935\u0930\u093f\u0937\u094d\u0920\u093e\u091a\u093e\u0930\u0940",
            "x": 20,
            "y": 4,
            "z": 8,
            "w": " "
        },
        "query": [
            "Right justify the substring of {a} from {y} to {z} within {x} characters, padding with {w}.",
            "Pad the substring of {a} from {y} to {z} to the right within {x} characters using {w}.",
            "Make the substring of {a} from {y} to {z} right-aligned within {x} characters, filling with {w}."
        ],
        "language": "mag_Deva"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).upper().split(z)\nprint(answer)\n```",
        "variables": {
            "a": "Xumuruudhaaf, gareen shubbisa Faayir oof Anatooliyaa agarsiisa \"Tirooy\" irratti hojjate.",
            "x": "a",
            "y": "o",
            "z": " "
        },
        "query": [
            "Replace {x} with {y} in {a}, convert it to uppercase, and then split by {z}.",
            "Substitute {x} with {y} in {a}, change it to uppercase, and then divide by {z}.",
            "Swap {x} with {y} in {a}, turn it to uppercase, and then separate by {z}."
        ],
        "language": "gaz_Latn"
    },
    {
        "solution": "```python\nanswer = a[:x].upper().count(y)\nprint(answer)\n```",
        "variables": {
            "a": "Lis lenghis ausiliariis a son lenghis artifici\u00e2ls o costruidis, creadis cul intent di favor\u00ee la comunicazion jenfri personis che se no a varessin dificolt\u00e2t a comunic\u00e2.",
            "x": 50,
            "y": "L"
        },
        "query": [
            "Convert the first {x} characters of {a} to uppercase and count the occurrences of {y}.",
            "Count how many times {y} appears in the first {x} characters of {a} after converting them to uppercase.",
            "After converting the first {x} characters of {a} to uppercase, count the number of times {y} occurs."
        ],
        "language": "fur_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y:z].lower().strip()\nprint(answer)\n```",
        "variables": {
            "a": "Com a mudan\u00e7a do percurso \u2013 de quarto de milha para meia milha \u2013, a velocidade torna-se menos importante, e a resist\u00eancia torna-se uma necessidade indispens\u00e1vel.",
            "x": 10,
            "y": 50,
            "z": 3
        },
        "query": [
            "Extract every {z}-th character from {x} to {y} in {a}, convert to lowercase, and strip whitespace.",
            "Get every {z}-th character from index {x} to {y} in {a}, change to lowercase, and remove leading and trailing spaces.",
            "Take every {z}-th character from position {x} to {y} in {a}, make it lowercase, and trim any surrounding whitespace."
        ],
        "language": "por_Latn"
    },
    {
        "solution": "```python\nanswer = a.isidentifier() and a.islower()\nprint(answer)\n```",
        "variables": {
            "a": "generaljohncadwalterye"
        },
        "query": [
            "Verify that {a} is a valid identifier and all characters are lowercase.",
            "Check if {a} is a valid identifier and consists only of lowercase letters.",
            "Determine if {a} is a valid identifier and all its characters are in lowercase."
        ],
        "language": "knc_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode(x).rfind(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0689\u06cc\u0631 \u0645\u062e\u06a9\u06d0 \u062f \u0648\u0631\u0681\u0646\u06cd \u0646\u0646\u062f\u0627\u0631\u06d0 \u0627\u0648 \u062f \u06a9\u0648\u0644\u0628\u0631\u067c \u0631\u0627\u067e\u0648\u0631 \u0646\u0647 \u0647\u06cc\u06a9 \u0627\u0648 \u062c\u0627\u0646\u0633\u0646 heck and johnson \u06cc\u0648 \u062f\u0627\u0633\u06d0 \u062e\u067e\u0631\u0648\u0646\u0647 \u062e\u0648\u069a\u0647 \u06a9\u0693\u064a \u0627\u0648 \u0646\u0638\u0631 \u06a9\u06d0 \u0646\u06cc\u0648\u0644\u06cc \u0648\u0647 \u0686\u06d0 \u062f \u062e\u0628\u0631\u0648\u0646\u0648 \u0627\u0648 \u062e\u0628\u0631\u06cc \u0631\u0627\u067e\u0648\u0631\u0648\u0646\u0648 \u0646\u0642\u0644 \u0628\u0647 \u06a9\u0648\u064a . \u06a9\u0644\u0647 \u0686\u06d0 \u0647\u063a\u0648\u064a 1988 \u06a9\u06d0 \u067e\u0647 \u06cc\u0648 \u0689\u0628\u0644\u06cc\u0648 UW\u06a9\u06d0 \u0645\u062d\u0635\u0644\u06cc\u0646 \u0648",
            "x": "utf-8",
            "y": "johnson"
        },
        "query": [
            "Encode {a} with {x}, replace non-encodable characters, decode it back, and find the last occurrence of {y}.",
            "Convert {a} to bytes using {x} encoding with replacement for errors, decode it back, and locate the last position of {y}.",
            "Transform {a} using {x} encoding, substituting unencodable characters, revert it to string, and identify the final instance of {y}."
        ],
        "language": "pbt_Arab"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode(x).startswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u07cf\u07ec \u07d8\u07cc\u07eb \u07de\u07cd\u07eb \u07dd\u07db\u07ce\u07de\u07ce \u07d8\u07d0\u07e6\u07d9\u07cc\u07e5\u07ca \u07db\u07cc\u07df\u07ca\u07eb \u07de\u07ce\u07d8\u07ca\u07eb \u07d8\u07cc\u07eb \u07f8 \u07de\u07ca\u07ec \u07d8\u07d0\u07ec\u07e3\u07d0\u07ef\u07e6\u07ca \u07de\u07f4\u07cc \u07e6\u07cb\u07eb \u07e6\u07d9\u07d0 \u07d8\u07cf\u07eb \u07e1\u07ca\u07ec\u07de\u07cd\u07ec\u07df\u07cc \u07d8\u07d0\u07eb \u07de\u07ca\u07ec \u07d6\u07ca\u07f2\u07ec\u07e7\u07ca\u07eb \u07f8 \u07d3\u07ca\u07cf\u07ec \u07d3\u07d0\u07d2\u07d6\u07d8\u07cd\u07d8\u07d0\u07eb \u07d7\u07cb\u07d8\u07ca\u07eb \u07e6\u07d9\u07cc\u07de\u07ca \u07e6\u07cb\u07eb \u07d8\u07cd\u07ec\u07e1\u07cd\u07f2\u07ec \u07de\u07cd\u07eb \u07df\u07ca\u07eb \u07df\u07cb\u07ec \u07d3\u07cf\u07f2\u07de\u07cf \u07e3\u07cc\u07eb \u07db\u07ce\u07ec\u07e1\u07ca\u07f2\u07ec\u07de\u07cf \u07d8\u07d0\u07eb \u07f8 \u07ca\u07ec \u07e3\u07f4\u07ca\u07ec \u07d8\u07cf\u07eb \u07db\u07d9\u07ca\u07ec\u07df\u07cc \u07d8\u07d0\u07eb \u07db\u07d9\u07ca\u07ec\u07e3\u07cd\u07f2\u07ec \u07e2\u07ca\u07f2\u07d5\u07ca\u07e3\u07cd\u07f2\u07eb \u07d8\u07df\u07cc \u07df\u07ca\u07eb.",
            "x": "nqo_Nkoo",
            "y": "\u07cf\u07ec"
        },
        "query": [
            "After encoding {a} in 'utf-8' and decoding it with {x}, does it start with {y}?",
            "Does the string {a} start with {y} after being encoded in 'utf-8' and decoded using {x}?",
            "If you encode {a} in 'utf-8' and then decode it with {x}, will it start with {y}?"
        ],
        "language": "nqo_Nkoo"
    },
    {
        "solution": "```python\nanswer = a.split(x, y)[z].isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\uabc3\uabca\uabea\uabd2\uabe4 \uabc6\uabcc\uabe3\uabdc \uabd0\uabe5\uabce\uabd5\uabd2\uabe4 \uabc3\uabc3\uabe5\uabe1\uabd7\uabd7\uabe4 \uabd0\uabe4\uabda\uabdd \uabd1\uabc1\uabe4 \uabd0\uabd2\uabe0\uabc2\uabdb\uabc2\uabe3\uabcf \uabcd\uabe5\uabcf\uabc5 \uabc4\uabe4\uabe0\uabc3\uabe6\uabdf\uabc5 \uabcd\uabe5\uabcf\uabd4\uabdd\uabc3\uabe4\uabeb",
            "x": " ",
            "y": 3,
            "z": 2
        },
        "query": [
            "Is the {z}-th segment of {a} split by {x} up to {y} times alphanumeric?",
            "Does the {z}-th part of {a} obtained by splitting with {x} up to {y} times contain only alphanumeric characters?",
            "After splitting {a} by {x} up to {y} times, is the {z}-th segment alphanumeric?"
        ],
        "language": "mni_Mtei"
    },
    {
        "solution": "```python\nanswer = a[x:y].capitalize().istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Minolovka t\u0159\u00eddy Avenger byla na cest\u011b do Puerto Princesa v Palawanu.",
            "x": 10,
            "y": 15
        },
        "query": [
            "Extract the substring of {a} from index {x} to {y}, capitalize it, and check if it is title-cased.",
            "Get the substring from {a} starting at index {x} and ending at index {y}, capitalize it, and verify if it is in title case.",
            "Take the substring of {a} between indices {x} and {y}, capitalize it, and determine if it is title-cased."
        ],
        "language": "ces_Latn"
    },
    {
        "solution": "```python\nanswer = a.join(x).split(y)\nprint(answer)\n```",
        "variables": {
            "a": " ",
            "x": [
                "26",
                "\u0928\u0935\u092e\u094d\u092c\u0930",
                "2008",
                "\u092e\u093e\u0907\u0925\u093e\u092f\u093e\u0935",
                "\u092e\u0941\u092e\u094d\u092c\u093e\u0907\u0928\u093f",
                "\u0928\u093e\u0916\u094d\u0930\u0947\u092c\u0917\u094d\u0930\u093e\u092b\u094b\u0930\u093e",
                "\u092b\u093f\u0938\u093e",
                "\u0926\u093f\u0919\u091c\u094b\u0902",
                "\u092b\u0948\u0926\u094b\u0902\u092e\u094b\u0928",
                "\u0917\u093e\u0935\u0938\u094b\u0930\u091c\u094b\u0902",
                "\u0917\u094d\u0930\u0947\u0928\u0947\u0921",
                "\u0917\u093e\u0935",
                "\u0916\u093e\u0930\u0917\u094d\u0930\u093e",
                "\u0939\u093e\u0925\u093f\u092f\u093e\u0930\u092b\u094b\u0930",
                "\u0906\u0930\u094b",
                "\u0917\u094b\u092c\u093e\u0902",
                "\u0925\u093e\u0902\u0916\u093f\u092b\u094b\u0930\u0916\u094c",
                "\u0917\u093e\u0917\u094d\u0932\u094b\u092c\u0926\u094b\u0902\u092e\u094b\u0928",
                "\u091c\u093e\u092f\u0928\u093f",
                "\u092e\u093e\u0926\u093e\u0935",
                "\u091b\u0924\u094d\u0930\u092a\u0924\u093f",
                "\u0936\u093f\u0935\u093e\u091c\u0940",
                "\u091f\u0930\u094d\u092e\u093f\u0928\u0938",
                "\u0930\u0947\u0932\u0935\u0947",
                "\u0938\u094d\u0924\u0947\u0936\u0928",
                "\u0906\u0930\u094b",
                "\u092e\u0941\u0902\u0926\u093e\u0902\u0916\u093e",
                "\u0924\u093e\u091c",
                "\u092e\u0939\u0932",
                "\u0939\u091f\u0947\u0932\u092c\u094b",
                "\u092e\u094b\u0928"
            ],
            "y": " "
        },
        "query": [
            "Join the elements of {x} with {a} and then split the result by {y}.",
            "Combine the elements in {x} using {a} and then divide the combined string by {y}.",
            "Merge the items in {x} with {a} and then separate the merged string using {y}."
        ],
        "language": "brx_Deva"
    },
    {
        "solution": "```python\nanswer = a[x:y].title().center(z, y)\nprint(answer)\n```",
        "variables": {
            "a": "Buron wantah kapanggihin ring sajeroning gumi. Ipun ngehkeh ring tanah, nglangi ring segara, miwah makeber ring akasa.",
            "x": 6,
            "y": 20,
            "z": 30
        },
        "query": [
            "Center the title-cased substring of {a} from position {x} to {y} within {z} characters, using {y} as padding.",
            "Take the substring of {a} from index {x} to {y}, convert it to title case, and center it within {z} characters using {y} as the padding character.",
            "Extract the substring from {a} starting at index {x} and ending at index {y}, title-case it, and center it in a field of {z} characters wide, padded with {y}."
        ],
        "language": "ban_Latn"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).rstrip()\nprint(answer)\n```",
        "variables": {
            "a": "\u0996\u09c1\u09ce\u09aa\u09be\u0987\u09b6\u09bf\u0982 \u0985\u09b8\u09bf \u09a4\u0982\u0999\u09be\u0987 \u09ab\u09a6\u09cd\u09b0\u09ac\u0995\u09be\u09a8\u09cd\u09a6\u09be \u09b2\u09c8\u09ac\u09be \u09df\u09be\u0987, \u0985\u09a6\u09c1\u09ac\u09c1 \u0985\u09df\u09be\u09ae\u09cd\u09ac\u09a8\u09be \u09ae\u09b6\u09be\u09a8\u09cd\u09a8\u09be \u0985\u09b8\u09bf \u09aa\u09be\u0982\u09a5\u09cb\u0995\u09aa\u09a6\u09be \u09ae\u0996\u09cb\u09df\u0997\u09c0 \u0995\u09be\u09a8\u09cd\u09a8\u09ac\u09be \u0985\u09a6\u09c1 \u0996\u099c\u09bf\u0995\u09cd\u09a4\u0982 \u09a8\u09ce\u09a4\u09cd\u09b0\u0997\u09be \u0995\u09b0\u09bf\u09b8\u09c1 \u09b2\u09c8\u09a4\u09ac\u09be \u09ab\u09be\u0993\u09ac\u09be \u09df\u09be\u0987\u0964",
            "x": 100,
            "y": " "
        },
        "query": [
            "Center {a} in a string of length {x} with {y} as padding, then remove trailing whitespace.",
            "Align {a} in the middle of a string of length {x} using {y} as the fill character, and strip trailing spaces.",
            "Place {a} in the center of a string of length {x} padded with {y}, then trim the trailing spaces."
        ],
        "language": "mni_Beng"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).title().center(z)\nprint(answer)\n```",
        "variables": {
            "a": "Handle ka swihehlo leswi, Ma u hlule kahle eka ndlela yo hlohlotela leswaku ku va ni ntirhisano swin\u2019we ni ntikokulu ra China.",
            "x": "swihehlo",
            "y": "swihehlo leswinene",
            "z": 100
        },
        "query": [
            "Replace {x} with {y} in {a}, convert to title case, and center the result in a field of {z} characters.",
            "Substitute {x} with {y} in {a}, change to title case, and center the output within {z} characters.",
            "Swap {x} for {y} in {a}, transform to title case, and align the result centrally in a space of {z} characters."
        ],
        "language": "tso_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(y).split(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u10db\u10d8\u10e3\u10ee\u10d4\u10d3\u10d0\u10d5\u10d0\u10d3 \u10de\u10d0\u10e2\u10d0\u10e0\u10d0 \u10d6\u10dd\u10db\u10d8\u10e1\u10d0, \u10e8\u10e2\u10d0\u10e2\u10d8\u10e1 \u10e1\u10e2\u10d0\u10e2\u10e3\u10e1\u10d8\u10e1 \u10db\u10d8\u10dc\u10d8\u10ed\u10d4\u10d1\u10d0\u10db\u10d3\u10d4 \u10d3\u10d0 \u10e7\u10d5\u10d4\u10da\u10d0 \u10d0\u10db \u10d3\u10d8\u10d3\u10d8 \u10e2\u10e3\u10e0\u10d8\u10e1\u10e2\u10e3\u10da\u10d8 \u10e1\u10d0\u10e1\u10e2\u10e3\u10db\u10e0\u10dd\u10d4\u10d1\u10d8\u10e1\u10d0 \u10d3\u10d0 \u10e1\u10ee\u10d5\u10d0 \u10d8\u10dc\u10e4\u10e0\u10d0\u10e1\u10e2\u10e0\u10e3\u10e5\u10e2\u10e3\u10e0\u10d8\u10e1 \u10d0\u10e8\u10d4\u10dc\u10d4\u10d1\u10d0\u10db\u10d3\u10d4, \u10d8\u10e1 \u10d6\u10dd\u10d2 \u10d0\u10e1\u10d0\u10d9\u10dd\u10d5\u10d0\u10dc \u10e1\u10e2\u10e3\u10db\u10d0\u10e0\u10e1 \u10f0\u10d0\u10d5\u10d0\u10d8\u10e1 \u10d0\u10d2\u10dd\u10dc\u10d4\u10d1\u10e1.",
            "x": " ",
            "y": ","
        },
        "query": [
            "Remove any characters in {y} from both ends of {a} and then split it by {x}.",
            "Trim characters in {y} from the start and end of {a}, then divide it using {x}.",
            "Strip {y} from the edges of {a} and split the result by {x}."
        ],
        "language": "kat_Geor"
    },
    {
        "solution": "```python\nanswer = a.zfill(x).isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Khilal assayf, i7taris aydhan mina al-ba3udh ashamal europy. 3ala arraghm min annahu la yanqul ay amradh, illa 2annahu qad yakunu muz3ijan.",
            "x": 100
        },
        "query": [
            "Check if {a} padded with zeros to length {x} consists only of alphabetic characters.",
            "Determine if the string {a}, when padded with zeros to a length of {x}, contains only letters.",
            "Verify whether {a}, after being zero-padded to a length of {x}, is composed solely of alphabetic characters."
        ],
        "language": "arb_Latn"
    },
    {
        "solution": "```python\nanswer = a[:y].islower()\nprint(answer)\n```",
        "variables": {
            "a": "Se spostar\u00e0 sora \u0142a costa ovest del nord dea Ca\u0142ifornia e i\u0142uminar\u00e0 el ciel da\u0142a Ca\u0142ifornia traverso l\u2019Oregon centra\u0142e e vanti traverso Nevada e Idaho e fin al Utah,\u201d ga dito Tom Duxbury capo progeto de Stardust.",
            "y": 10
        },
        "query": [
            "Check if the first {y} characters of {a} are all lowercase.",
            "Verify if the initial {y} characters of {a} are in lowercase.",
            "Determine if the first {y} characters of {a} are entirely lowercase."
        ],
        "language": "vec_Latn"
    },
    {
        "solution": "```python\nanswer = a[:y].swapcase().istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Crita sukses kaya mengkono nyuda rasa wedi marang perubahan, semono uga gawe kecenderungan positif tumrap perubahan ing mangsa ngarep.",
            "y": 10
        },
        "query": [
            "Check if the first {y} characters of {a} with swapped case follow title case rules.",
            "Determine if the initial {y} characters of {a}, after swapping case, are in title case.",
            "Verify if the first {y} characters of {a} with their case swapped are in title case format."
        ],
        "language": "jav_Latn"
    },
    {
        "solution": "```python\nanswer = a[::-1].title().endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "Als het verboden is om ergens van een foto te maken, moet je er al helemaal geen video van maken.",
            "x": "Nekam"
        },
        "query": [
            "Check if the title-cased reverse of {a} ends with {x}.",
            "Determine if the reversed and title-cased version of {a} has {x} as its suffix.",
            "Verify whether the title-cased reversed string of {a} ends with {x}."
        ],
        "language": "nld_Latn"
    },
    {
        "solution": "```python\nanswer = a[:y].encode('ascii').decode('ascii')\nprint(answer)\n```",
        "variables": {
            "a": "\u0ec1\u0e95\u0ec8\u0ec3\u0e99\u0ec0\u0e82\u0e94\u0ead\u0eb7\u0ec8\u0e99\u0ec6\u0e82\u0ead\u0e87\u0ec2\u0ea5\u0e81\u0e9a\u0ec8\u0ead\u0e99\u0e97\u0eb5\u0ec8\u0e9a\u0eb1\u0e99\u0e94\u0eb2\u0eaa\u0eb1\u0e94\u0ec3\u0e99\u0e94\u0ec9\u0eb2\u0e99\u0e81\u0ec8\u0ebd\u0ea7\u0e81\u0eb1\u0e9a\u0ec1\u0e9a\u0e81\u0e97\u0eb5\u0ec0\u0ea3\u0e8d \u0ec0\u0e9b\u0eb1\u0e99\u0eaa\u0eb4\u0ec8\u0e87\u0ec3\u0edd\u0ec8\u0eaa\u0eb3\u0ea5\u0eb1\u0e9a\u0e97\u0ec8\u0eb2\u0e99, \u0e97\u0ec8\u0eb2\u0e99\u0ead\u0eb2\u0e94\u0e88\u0eb0\u0e9b\u0eb0\u0eaa\u0ebb\u0e9a\u0e81\u0eb1\u0e9a\u0e9a\u0eb1\u0e99\u0eab\u0eb2\u0eab\u0ebc\u0eb2\u0e8d\u0e82\u0eb6\u0ec9\u0e99.",
            "y": 10
        },
        "query": [
            "Encode the first {y} characters of {a} to ASCII and then decode it back.",
            "Convert the first {y} characters of {a} to ASCII encoding and then back to string.",
            "Take the first {y} characters of {a}, encode them in ASCII, and decode them back."
        ],
        "language": "lao_Laoo"
    },
    {
        "solution": "```python\nanswer = a.capitalize().rsplit(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Syana isu nisyonaa thina mwingi muno. Nundu \u201csyithaa na tavia kya muisyo munene muno, ikokita na syii tata ukumu\u201d nikana yiamusye kiliko, nundu kiliko kiyisa kuamusywa na nzia kya kawaida.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Split the capitalized version of {a} by {x} with a maximum of {y} splits from the right.",
            "Take {a}, capitalize it, and split it by {x} from the right side, allowing up to {y} splits.",
            "Capitalize {a} and perform a right split by {x}, limiting the splits to {y} times."
        ],
        "language": "kam_Latn"
    },
    {
        "solution": "```python\nanswer = a.casefold().replace(x, y).isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Am Verglach zu de meeschten anere kinnekleche Griewer ass d'Graf vum Tutenchamun awer kaum e Besuch w\u00e4ert, well et vill m\u00e9i kleng ass a w\u00e9ineg Dekoratioun huet.",
            "x": "e",
            "y": "a"
        },
        "query": [
            "Check if the string {a} with {x} replaced by {y} and converted to lowercase contains only alphabetic characters.",
            "Determine if the string {a}, after replacing {x} with {y} and converting to lowercase, consists solely of alphabetic characters.",
            "Verify if the string {a}, with {x} substituted by {y} and changed to lowercase, is made up entirely of alphabetic characters."
        ],
        "language": "ltz_Latn"
    },
    {
        "solution": "```python\nanswer = a[:x].join(y).isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u06cc\u06a9 \u0645\u063a\u0627\u0631\u0647 \u06a9\u0648\u0686\u06a9 \u062f\u0631 \u0646\u0632\u062f\u06cc\u06a9\u06cc \u0642\u0633\u0645\u062a \u0628\u0627\u0644\u0627\u06cc\u06cc \u0648\u062c\u0648\u062f \u062f\u0627\u0631\u062f \u06a9\u0647 \u0628\u0627\u06cc\u062f \u0627\u0632 \u0622\u0646 \u0639\u0628\u0648\u0631 \u06a9\u0631\u062f\u060c \u0627\u06cc\u0646 \u0645\u063a\u0627\u0631\u0647 \u0628\u0633\u06cc\u0627\u0631 \u06a9\u0645 \u0627\u0631\u062a\u0641\u0627\u0639 \u0648 \u062a\u0646\u06af \u0627\u0633\u062a.",
            "x": 10,
            "y": [
                "123",
                "456",
                "789"
            ]
        },
        "query": [
            "Check if the string formed by joining elements of {y} with the first {x} characters of {a} is composed solely of digits.",
            "Verify if the concatenated string of the first {x} characters of {a} and elements of {y} contains only numeric characters.",
            "Determine if the string created by combining the first {x} characters of {a} with elements of {y} consists entirely of digits."
        ],
        "language": "prs_Arab"
    },
    {
        "solution": "```python\nanswer = a.title().swapcase().startswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "Ha iya pinakamakusog, an Tropical Cyclone Gonu, gin-ngaranan para han usa ka bag hin mga lukay ha yinaknan han Maldives, nakaabot an ginmimintinar nga mga hangin ha 240 kilometros kada oras (149 milyas kada oras) .",
            "x": "hA"
        },
        "query": [
            "Check if {a} starts with {x} after converting {a} to title case and then swapping the case of each character.",
            "Determine if {a} begins with {x} after changing {a} to title case and then reversing the case of each letter.",
            "Verify if {a} starts with {x} once {a} is converted to title case and the case of each character is swapped."
        ],
        "language": "war_Latn"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).rjust(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "\u0917\u093f\u092c\u093f \u092e\u0939\u0930\u0948, \u0928\u094b\u0902 \u0917\u093e\u0935\u0928\u093f \u092e\u0926\u0926 \u091c\u093e\u0938\u093f\u0928\u093e \u0928\u091f\u093f\u0938\u092b\u094b\u0930 \u0932\u093e\u0917\u093e\u092f\u0917\u094b\u0928, \u0921\u0915\u092b\u094d\u0930\u093e\u0935 \u0925\u093e\u0902\u0932\u093e\u092f-\u092b\u0948\u0932\u093e\u092f \u0916\u093e\u0932\u093e\u092e\u0917\u094b\u0928, \u0917\u093e\u0935-\u0917\u093e\u0935\u0928\u093f \u0928\u093e\u0935 \u0938\u093e\u092b\u093e \u0916\u093e\u0932\u093e\u092e\u0928\u093e\u092f \u0938\u0941\u092c\u0941\u0902\u092b\u094b\u0930\u0928\u093f \u0916\u093e\u0925\u093f\u092f\u093e\u0935 \u0925\u093e\u0902\u0917\u094b\u0928, \u092c\u093e\u0930\u093e\u0935 \u0928\u093e\u0935 \u091c\u093e\u0935\u0917\u094d\u0930\u093e\u092b\u094b\u0930\u091c\u094b\u0902 \u0938\u094b\u092e\u094b\u0928\u0926\u094b \u0916\u093e\u0932\u093e\u092e\u0928\u094b \u0928\u093e\u091c\u093e\u0917\u094b\u0928,\u092c\u093e\u092f\u0926\u093f, \u092c\u093e\u092f\u0926\u093f\u0964",
            "x": 150,
            "y": " ",
            "z": 200,
            "w": " "
        },
        "query": [
            "Left-justify {a} to length {x} with {y}, then right-justify the result to length {z} with {w}.",
            "First, left-justify {a} to a length of {x} using {y}, then right-justify this result to a length of {z} using {w}.",
            "Align {a} to the left to make its length {x} with {y}, then align the result to the right to make its length {z} with {w}."
        ],
        "language": "brx_Deva"
    },
    {
        "solution": "```python\nanswer = a.split(x)[0].rjust(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0b2a\u0b43\u0b25\u0b3f\u0b2c\u0b40\u0b15\u0b41 \u0b16\u0b38\u0b3f \u0b2a\u0b21\u0b3f\u0b25\u0b3f\u0b2c\u0b3e \u0b2a\u0b4d\u0b30\u0b3e\u0b5f 24,000 \u0b1c\u0b23\u0b3e\u0b36\u0b41\u0b23\u0b3e \u0b09\u0b32\u0b15\u0b3e\u0b2a\u0b3f\u0b23\u0b4d\u0b21 \u0b2e\u0b27\u0b4d\u0b5f\u0b30\u0b41 \u0b15\u0b47\u0b2c\u0b33 34 \u0b1f\u0b3f\u0b30 \u0b09\u0b24\u0b4d\u0b2a\u0b24\u0b4d\u0b24\u0b3f \u0b2e\u0b19\u0b4d\u0b17\u0b33 \u0b17\u0b4d\u0b30\u0b39\u0b30\u0b41 \u0b39\u0b4b\u0b07\u0b1b\u0b3f \u0b2c\u0b4b\u0b32\u0b3f \u0b2a\u0b41\u0b37\u0b4d\u0b1f\u0b3f \u0b15\u0b30\u0b3e\u0b2f\u0b3e\u0b07\u0b1b\u0b3f\u0964",
            "x": " ",
            "y": 50,
            "z": "\u0b05"
        },
        "query": [
            "Split {a} by {x}, take the first part, and right-align it in a field of {y} characters, filling with {z}.",
            "Divide {a} using {x} as the delimiter, select the initial segment, and pad it to the right to a width of {y} characters with {z}.",
            "Break {a} at each {x}, grab the first section, and right-justify it within a space of {y} characters, using {z} as the padding."
        ],
        "language": "ory_Orya"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).title().isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "Amb d'astre, la m\u00e0ger part de las gents realizar\u00e0n que l'opcion melhora a long t\u00e8rme per eles es de trabalhar amassa amb los autres.",
            "x": 4
        },
        "query": [
            "Convert tabs in {a} to {x} spaces, capitalize each word, and check if the result is a valid identifier.",
            "Replace tabs in {a} with {x} spaces, capitalize each word, and verify if the result is a valid identifier.",
            "Change tabs in {a} to {x} spaces, capitalize each word, and determine if the result is a valid identifier."
        ],
        "language": "oci_Latn"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).upper().startswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "N'agha mberede n'ebe \u1ecdw\u1ee5wa anyanw\u1ee5 Bardia, nd\u1ecb Britain jidere n'agha Onye isi Injinia nke Nd\u1ecb agha Nke iri nke Italy, General Lastucci.",
            "x": ".",
            "y": "N'AGHA"
        },
        "query": [
            "Trim trailing {x} characters from {a}, convert to uppercase, and check if it starts with {y}.",
            "Remove trailing {x} from {a}, change to uppercase, and verify if it begins with {y}.",
            "Strip trailing {x} from {a}, transform to uppercase, and determine if it starts with {y}."
        ],
        "language": "ibo_Latn"
    },
    {
        "solution": "```python\nanswer = a[:x].rjust(y, z).isascii()\nprint(answer)\n```",
        "variables": {
            "a": "He went on to say, \"This case is serious. Rest assured that our system is working as well as it should.\"",
            "x": 10,
            "y": 20,
            "z": "*"
        },
        "query": [
            "Extract the first {x} characters of {a}, right-justify within {y} characters using {z} for padding, and check if the result is ASCII.",
            "Take the first {x} characters from {a}, pad it to the right with {z} to make it {y} characters long, and verify if the final string is ASCII.",
            "Get the initial {x} characters of {a}, right-align it to a total length of {y} using {z} as the padding character, and determine if the resulting string is ASCII."
        ],
        "language": "eng_Latn"
    },
    {
        "solution": "```python\nanswer = a.upper()[x:y]\nprint(answer)\n```",
        "variables": {
            "a": "Ingon man usab, sa mas init nga mga klima, ang bakterya pareho nga dali modako ug mabuhi og dugay bisan sa gawas sa lawas.",
            "x": 10,
            "y": 20
        },
        "query": [
            "What is the substring of {a} from {x} to {y} in uppercase?",
            "Extract the substring from {x} to {y} in {a} and convert it to uppercase.",
            "Get the uppercase substring of {a} starting at index {x} and ending at index {y}."
        ],
        "language": "ceb_Latn"
    },
    {
        "solution": "```python\nanswer = a.upper().split(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Sanglit, magkakamay-ada permiso ha gintikangan nga nasud para bisan ano nga petsa ha pagtikang han Mayo nga magagamit ha Enero 1.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Split the uppercase version of {a} using {x} as delimiter, performing up to {y} splits.",
            "Convert {a} to uppercase and split it by {x}, allowing a maximum of {y} splits.",
            "Transform {a} to uppercase and divide it using {x} as the separator, with up to {y} splits."
        ],
        "language": "war_Latn"
    },
    {
        "solution": "```python\nanswer = a[y:].islower()\nprint(answer)\n```",
        "variables": {
            "a": "Ketua peneliti mengatakan bahwa diagnosis ini mungkin dapat menghasilkan deteksi dini kanker, tuberkulosis, HIV, dan malaria kepada pasien-pasien di negara berpenghasilan rendah, di mana tingkat kesembuhan dari penyakit-penyakit seperti kanker payudara bisa mencapai setengah dari negara-negara kaya.",
            "y": 6
        },
        "query": [
            "Determine if the substring of {a} starting from index {y} is in lowercase.",
            "Check if the substring of {a} from index {y} onwards is all in lowercase.",
            "Is the substring of {a} starting at index {y} entirely in lowercase?"
        ],
        "language": "ind_Latn"
    },
    {
        "solution": "```python\nanswer = a[y::z].isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Massa azyndan 2009-njy \u00fdylky m\u00f6ws\u00fcmi\u0148 ahyryna \u00e7enli bolmaz.",
            "y": 0,
            "z": 2
        },
        "query": [
            "Check if every {z}-th character starting from index {y} in {a} consists only of letters.",
            "Verify if each {z}-th character from index {y} in {a} is a letter.",
            "Determine if all {z}-th characters starting at index {y} in {a} are alphabetic."
        ],
        "language": "tuk_Latn"
    },
    {
        "solution": "```python\nanswer = a[x].isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u043d\u0435\u0433\u043e\u0432\u0438\u043e\u0442 \u0432\u0442\u043e\u0440 \u0433\u043e\u043b \u0432\u0435\u0447\u0435\u0440\u0442\u0430 \u0431\u0435\u0448\u0435 60-\u0442\u0438 \u0432\u043e \u0441\u0435\u0437\u043e\u043d\u0430\u0442\u0430, \u0441\u043e \u0448\u0442\u043e \u0441\u0442\u0430\u043d\u0430 \u043f\u0440\u0432\u0438\u043e\u0442 \u0438\u0433\u0440\u0430\u0447 \u0448\u0442\u043e \u043f\u043e\u0441\u0442\u0438\u0433\u043d\u0430\u043b 60 \u0438\u043b\u0438 \u043f\u043e\u0432\u0435\u045c\u0435 \u0433\u043e\u043b\u043e\u0432\u0438 \u0432\u043e \u0441\u0435\u0437\u043e\u043d\u0430 \u043e\u0434 1995-96 \u0433\u043e\u0434\u0438\u043d\u0430 \u043d\u0430\u0432\u0430\u043c\u0443, \u043a\u043e\u0433\u0430 \u0442\u043e\u0458 \u0440\u0435\u043a\u043e\u0440\u0434 \u0433\u043e \u043f\u043e\u0441\u0442\u0438\u0433\u043d\u0430\u0430 \u0408\u0430\u0440\u043e\u043c\u0438\u0440 \u0408\u0430\u0433\u0440 \u0438 \u041c\u0430\u0440\u0438\u043e \u041b\u0435\u043c\u0458\u0443.",
            "x": 30
        },
        "query": [
            "Return the character from the string {a} at the {x+1}-th position and check if it is a digit.",
            "Check if the character at position {x+1} in the string {a} is a digit.",
            "Determine if the character at the {x+1}-th index of the string {a} is a numeric digit."
        ],
        "language": "mkd_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.swapcase().rsplit(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Assim sendo, rememorar casos anteriores de comportamento empreendedor e sucessos resultantes incentivou as pessoas a se permitirem novas mudan\u00e7as e novos rumos para a igreja local.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Swap the case of all characters in {a}, then split the result by {x} from the right, making up to {y} splits.",
            "Change the case of each character in {a} and then split the modified string by {x} from the right, allowing up to {y} splits.",
            "Convert all characters in {a} to their opposite case, then perform a right split on the result using {x}, with a maximum of {y} splits."
        ],
        "language": "por_Latn"
    },
    {
        "solution": "```python\nanswer = a[:y:z].istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Ifyalo fimo fyalikwata amafunde ayakosa ayakukandilamo bacintomfwa nangu fye ni pa muku wa kubalilapo; pali ici kuti paba no kukakwa ukufika pa myaka 10 nangu fye ukwipaiwa.",
            "y": 50,
            "z": 2
        },
        "query": [
            "Is the substring of {a} from the start to {y}, taking every {z}-th character, in title case?",
            "Does the substring of {a} up to {y}, considering every {z}-th character, have title case?",
            "Check if the substring of {a} from the beginning to {y}, with every {z}-th character, is in title case."
        ],
        "language": "bem_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::].replace(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u2d30\u2d3e\u2d62\u2d30\u2d37 \u2d30\u2d3c\u2d53\u2d59-\u2d4f<\u2d3e <\u2d65\u2d65\u2d30\u2d4d \u2d42\u2d53\u2d4d\u2d4d\u2d30\u2d4f, \u2d3e\u2d53\u2d3e<\u2d4d \u2d3c\u2d53\u2d4d \u2d30\u2d3e \u2d5c\u2d49\u2d57\u2d62\u2d49\u2d5c\u2d49\u2d4f <\u2d4d\u2d30\u2d4f \u2d37\u2d49\u2d57, \u2d5c\u2d49\u2d61<\u2d5c\u2d5c\u2d49 \u2d5c\u2d49 \u2d42\u2d53\u2d59\u2d59\u2d30\u2d62<\u2d5c,\u2d53\u2d3e\u2d59\u2d30\u2d37 \u2d30\u2d37 \u2d5c<\u2d4d\u2d4e\u2d30\u2d57<\u2d37 \u2d30\u2d37 \u2d5c<\u2d34\u2d34<\u2d5c \u2d5c<\u2d36\u2d30\u2d53\u2d5c <\u2d62<\u2d5c \u2d61\u2d30\u2d54 \u2d5c<\u2d42\u2d42\u2d53\u2d59\u2d59\u2d30\u2d62 \u2d59 <\u2d39\u2d30\u2d39\u2d61\u2d30\u2d4f-\u2d4f<\u2d3e.",
            "x": 10,
            "y": "\u2d53",
            "z": "\u2d61"
        },
        "query": [
            "From the {x}-th character to the end of {a}, replace {y} with {z}.",
            "Starting from the {x}-th character in {a}, substitute {y} with {z}.",
            "Replace {y} with {z} in {a} starting from the {x}-th character to the end."
        ],
        "language": "taq_Tfng"
    },
    {
        "solution": "```python\nanswer = a.title().encode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "O romeletse baithuti ba yunibestithi e e gaufi molaetsa wa email, mme a amogela diphetolo tse dintsi thata, e le tsa batho ba ba reng ba ka mo fa boroko ja mahala."
        },
        "query": [
            "Convert {a} to title case and encode it in UTF-8.",
            "Transform {a} to title case and encode it using UTF-8.",
            "Change {a} to title case and encode it in UTF-8 format."
        ],
        "language": "tsn_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "Panama Belgeleri, 2016 bahar\u0131nda bas\u0131na s\u0131zan, Panamal\u0131 hukuk firmas\u0131 Mossock Fonseca'dan kaynakl\u0131 a\u015fa\u011f\u0131 yukar\u0131 on milyon belge i\u00e7in kullan\u0131lan \u015femsiye bir terimdir."
        },
        "query": [
            "Remove leading and trailing whitespace from {a} and capitalize the first character.",
            "Trim the spaces around {a} and make the first letter uppercase.",
            "Strip whitespace from both ends of {a} and capitalize the initial letter."
        ],
        "language": "tur_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='ignore').decode('ascii')\nprint(answer)\n```",
        "variables": {
            "a": "\u062a\u062c\u0631\u0628\u062a\u0646\u0627 \u0627\u0644\u062d\u0627\u0644\u064a\u0629 \u0645\u0639 \u0643\u0644 \u0627\u0644\u0639\u0631\u0648\u0636 \u0627\u0644\u062a\u0644\u064a\u0641\u0632\u064a\u0648\u0646\u064a\u0629 \u0627\u0644\u0642\u0627\u0626\u0645\u0629 \u0639\u0644\u0649 \u0627\u0644\u062a\u0639\u0644\u0645 \u0648\u0627\u0644\u062a\u0639\u0644\u064a\u0645 \u0627\u0644\u0630\u0627\u062a\u064a \u0648\u062a\u0642\u062f\u064a\u0645 \u0627\u0644\u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0628\u062a\u0648\u0636\u062d \u0647\u064a\u062f\u064a \u0627\u0644\u0646\u0642\u0637\u0629.",
            "x": "utf-8"
        },
        "query": [
            "Transform {a} into {x} encoding, ignoring unencodable characters, then decode it back to ASCII.",
            "Convert {a} to {x} encoding, skip characters that can't be encoded, and then decode it to ASCII.",
            "Encode {a} using {x} encoding, ignore characters that can't be encoded, and decode it back to ASCII."
        ],
        "language": "apc_Arab_nort3139"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u1021\u1004\u103d\u1031\u1037\u1016\u103c\u1005\u103a\u101e\u100a\u1037\u103a \u1014\u102d\u102f\u1000\u103a\u1011\u101b\u102d\u102f\u1002\u103b\u1004\u103a\u101e\u100a\u103a \u1021\u101b\u100a\u103a\u1016\u103c\u1005\u103a\u101e\u100a\u1037\u103a \u1014\u102d\u102f\u1000\u103a\u1011\u101b\u102d\u102f\u1002\u103b\u1004\u103a\u1014\u103e\u1004\u1037\u103a \u1002\u102f\u100f\u103a\u101e\u1010\u1039\u1010\u102d\u1021\u1010\u1030\u1010\u1030\u1016\u103c\u1005\u103a\u101e\u100a\u103a\u104b \u1021\u101b\u100a\u103a\u1021\u1001\u103c\u1031\u1021\u1014\u1031\u101e\u100a\u103a \u1015\u102d\u102f\u1019\u102d\u102f\u101e\u102d\u1015\u103a\u101e\u100a\u103a\u1038\u1006\u1019\u103b\u102c\u1038\u101e\u1031\u102c\u103a\u101c\u100a\u103a\u1038 \u1019\u1031\u102c\u103a\u101c\u102e\u1000\u103b\u1030\u1038\u1019\u103b\u102c\u1038\u1019\u103e\u102c \u1021\u1010\u1030\u1010\u1030\u1015\u1004\u103a\u1016\u103c\u1005\u103a\u101e\u100a\u103a\u104b",
            "x": "\u104b"
        },
        "query": [
            "Check if {a}, with trailing characters in {x} removed, is alphanumeric.",
            "Determine if {a} is alphanumeric after removing trailing characters found in {x}.",
            "Is {a} alphanumeric after stripping trailing characters specified in {x}?"
        ],
        "language": "mya_Mymr"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('ascii', errors='replace')\nprint(answer)\n```",
        "variables": {
            "a": "\u53d8\u7126\u955c\u5934\u7684\u7f3a\u70b9\u662f\uff0c\u8981\u60f3\u5b9e\u73b0\u4e00\u5b9a\u7684\u7126\u8ddd\u8303\u56f4\uff0c\u6240\u9700\u7684\u7126\u8ddd\u590d\u6742\u5ea6\u548c\u900f\u955c\u5143\u4ef6\u7684\u6570\u91cf\u8fdc\u8fdc\u5927\u4e8e\u5b9a\u7126\u955c\u5934\u3002"
        },
        "query": [
            "Encode {a} in UTF-8 and then decode it in ASCII, replacing unencodable characters with a question mark.",
            "Convert {a} to UTF-8 encoding and then decode it to ASCII, substituting unencodable characters with a question mark.",
            "Transform {a} into UTF-8 and decode it back to ASCII, using a question mark for characters that can't be encoded."
        ],
        "language": "cmn_Hans"
    },
    {
        "solution": "```python\nanswer = a.strip().replace(x, y).isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0e97\u0ec8\u0eb2\u0e99\u0e9b\u0eb0\u0e97\u0eb2\u0e99\u0e99\u0eb2\u0e97\u0eb4\u0e9a\u0ecd\u0e94\u0eb5 \u0ec2\u0ea3\u0e94\u0ebc\u0eb5\u0ec2\u0e81 \u0ec0\u0ead\u0ea3\u0eb4\u0ead\u0eb1\u0e94\u0eaa\u0ecc (Rodrigo Arias) \u0e81\u0ec8\u0eb2\u0ea7\u0ea7\u0ec8\u0eb2 \u0e97\u0ec8\u0eb2\u0e99 \u0ec0\u0ead\u0ea3\u0eb4\u0ead\u0eb1\u0e94\u0eaa\u0ecc (Arias) \u0ec4\u0e94\u0ec9\u0e96\u0eb7\u0e81\u0e81\u0ea7\u0e94\u0ead\u0ead\u0e81\u0ea1\u0eb2\u0ec0\u0e9b\u0eb1\u0e99\u0e84\u0ec8\u0eb2\u0e9a\u0ea7\u0e81 \u0ea7\u0ec8\u0eb2\u0ec0\u0e9b\u0eb1\u0e99\u0e81\u0ecd\u0ea5\u0eb0\u0e99\u0eb5\u0e97\u0eb5\u0ec8\u0e9a\u0ecd\u0ec8\u0eae\u0eb8\u0e99\u0ec1\u0eae\u0e87 \u0e82\u0ead\u0e87\u0ec0\u0e8a\u0eb7\u0ec9\u0ead\u0ec4\u0ea7\u0ea3\u0eb1\u0e94\u0e94\u0eb1\u0ec8\u0e87\u0e81\u0ec8\u0eb2\u0ea7.",
            "x": " ",
            "y": "_"
        },
        "query": [
            "Is the string {a} a valid identifier after stripping whitespace and replacing {x} with {y}?",
            "After removing whitespace and replacing {x} with {y}, is the string {a} a valid identifier?",
            "Does the string {a} become a valid identifier if whitespace is stripped and {x} is replaced with {y}?"
        ],
        "language": "lao_Laoo"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).split(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0a06\u0a38 \u0a39\u0a48 \u0a15\u0a3f \u0a5b\u0a3f\u0a06\u0a26\u0a3e\u0a24\u0a30 \u0a32\u0a4b\u0a15 \u0a2e\u0a39\u0a3f\u0a38\u0a42\u0a38 \u0a15\u0a30\u0a28\u0a17\u0a47 \u0a15\u0a3f \u0a09\u0a39\u0a28\u0a3e\u0a02 \u0a26\u0a3e \u0a1a\u0a3f\u0a30\u0a38\u0a25\u0a3e\u0a08 \u0a35\u0a27\u0a40\u0a06 \u0a35\u0a3f\u0a15\u0a32\u0a2a \u0a26\u0a42\u0a38\u0a30\u0a3f\u0a06\u0a02 \u0a28\u0a3e\u0a32 \u0a07\u0a15\u0a71\u0a20\u0a3f\u0a06\u0a02 \u0a15\u0a70\u0a2e \u0a15\u0a30\u0a28\u0a3e \u0a39\u0a48\u0964",
            "x": 4,
            "y": " ",
            "z": 5
        },
        "query": [
            "Expand tabs in {a} to be {x} spaces long, then split the string using {y} as the delimiter, making up to {z} splits.",
            "Convert tabs in {a} to {x} spaces, then divide the string by {y}, allowing a maximum of {z} splits.",
            "Replace tabs in {a} with {x} spaces and then split the string at {y}, performing up to {z} splits."
        ],
        "language": "pan_Guru"
    },
    {
        "solution": "```python\nanswer = a.capitalize().count(x)\nprint(answer)\n```",
        "variables": {
            "a": "Ukungabi khona kukagesi ngemva kokuhlolwa okuvamile kohlelo lwezicima-mlilo lubangele umgudu wokufutha ukuba uvuleke futhi uwoyela ongahluziwe wachitheka eduza nesiteshi sokumpompa 9.",
            "x": "u"
        },
        "query": [
            "Capitalize the string {a} and count the occurrences of {x}.",
            "Convert the first character of {a} to uppercase and count how many times {x} appears.",
            "Make the first letter of {a} uppercase and find the number of times {x} is present."
        ],
        "language": "zul_Latn"
    },
    {
        "solution": "```python\nanswer = a.istitle() and a.endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "Rekodhi yekukwikwidzana pakati paNadal newekuCanada zvinonwe pane zviviri.",
            "x": "zviviri."
        },
        "query": [
            "Check if the string {a} follows the rules of a title and ends with {x}.",
            "Verify if the string {a} is in title case and concludes with {x}.",
            "Determine if the string {a} is a title and terminates with {x}."
        ],
        "language": "sna_Latn"
    },
    {
        "solution": "```python\nanswer = a.rjust(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "\u1015\u102d\u1030\u1004\u103a\u101c\u1030\u1004\u103a\u1019\u107c\u103a\u1038 \u107c\u1082\u103a\u1038\u1076\u1062\u101d\u103a\u1038\u1019\u1086\u1088\u107c\u1086\u1078\u102d\u102f\u1004\u103a \u101e\u1004\u103a\u101d\u1083\u1088\u101e\u1030\u1010\u1031\u1010\u1085\u1015\u103a\u1038\u1010\u1010\u103a\u1038\u1022\u1062\u107c\u103a\u1038\u1076\u102d\u102f\u107c\u103a\u1088\u101c\u103d\u107a\u103a \u1022\u107c\u103a\u101c\u1010\u103a\u1038\u107d\u1062\u107c\u103a\u1087\u1010\u102e\u1088\u107c\u1082\u103a\u1038\u1015\u1083\u1087\u1011\u102d\u1030\u107c\u103a\u1087\u107e\u1030\u107c\u103a\u107c\u1019\u103a\u107c\u107c\u103a\u1089\u107c\u1086 \u101e\u1030\u1010\u102d\u102f\u107c\u103a\u1038\u101c\u1030\u101d\u103a\u1087\u101c\u1086\u1088\u107e\u1062\u1004\u103a\u1089\u101c\u103d\u1004\u103a\u1088\u101a\u102f\u1004\u103a\u1038\u107c\u1019\u103a\u101c\u1062\u1086\u107c\u107c\u103a\u1089\u101a\u101d\u103a\u1089\u104b",
            "x": 150,
            "y": " "
        },
        "query": [
            "Right-justify {a} in a field of width {x}, padding with {y}.",
            "Pad {a} on the left with {y} to make its total length {x}.",
            "Make {a} right-aligned in a string of length {x} using {y} as the padding character."
        ],
        "language": "shn_Mymr"
    },
    {
        "solution": "```python\nanswer = a.split(x)[0].startswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u090f\u0928\u094d\u0915\u0947\u0932\u093e\u0921\u0938\u094b\u092a\u0917\u094d\u0930\u0939\u0903 \u0938\u0942\u0930\u094d\u092f\u092e\u093e\u0932\u093e\u092f\u093e\u0902 \u0905\u0924\u0940\u0935 \u092a\u0930\u093e\u0935\u0930\u094d\u0924\u0928\u0936\u0940\u0932\u0902 \u0935\u0938\u094d\u0924\u0941 \u0905\u0938\u094d\u0924\u093f \u092f\u0924\u094d \u0924\u092e\u093e\u0917\u0924\u0902 90% \u0938\u0942\u0930\u094d\u092f\u092a\u094d\u0930\u0915\u093e\u0936\u0902 \u092a\u0930\u093e\u0935\u0930\u094d\u0924\u092f\u0924\u093f\u0964",
            "x": " ",
            "y": "\u090f\u0928\u094d\u0915\u0947\u0932\u093e\u0921\u0938"
        },
        "query": [
            "Determine if the first segment of {a} split by {x} starts with {y}.",
            "Check if the initial part of {a} after splitting by {x} begins with {y}.",
            "Verify if the first portion of {a} when divided by {x} starts with {y}."
        ],
        "language": "san_Deva"
    },
    {
        "solution": "```python\nanswer = a.lower().startswith(x) and a.endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "Hesperonychus elizabethae l\u00e0 m\u1ed9t lo\u00e0i thu\u1ed9c h\u1ecd Dromaeosauridae v\u00e0 l\u00e0 anh em h\u1ecd c\u1ee7a Velociraptor.",
            "x": "hesperonychus",
            "y": "velociraptor."
        },
        "query": [
            "Check if {a} converted to lowercase starts with {x} and ends with {y}.",
            "Verify if {a} in lowercase begins with {x} and concludes with {y}.",
            "Determine if {a} when converted to lowercase starts with {x} and finishes with {y}."
        ],
        "language": "vie_Latn"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).encode('ascii', 'ignore')\nprint(answer)\n```",
        "variables": {
            "a": "\u0412\u0438\u0442\u0115\u043c \u0431\u0430\u043b\u0430\u043d\u0441\u04d7 \u043f\u0443\u043b\u043d\u0103 \u0442\u0103\u0440\u0103\u0445 \u0435\u0432\u0440\u043e\u043f\u04d1\u0440\u0438 \u0445\u0430\u043b\u04d1\u0445\u0441\u0435\u043c \u0435\u0432\u0440\u043e\u043f\u04d1\u0440\u0438 \u043c\u04d7\u043d\u043f\u0443\u0440 \u043f\u0430\u0442\u0448\u0430\u043b\u04d1\u0445\u0441\u0435\u043d \u0441\u0443\u0432\u0435\u0440\u0435\u043d\u0438\u0442\u0435\u0442\u043d\u0435 \u0441\u044b\u0445\u043b\u0430\u0441\u0430 \u0445\u04d1\u0432\u0430\u0440\u043c\u0430 \u0442\u04d1\u0440\u04d1\u0448\u043d\u04d1 \u0441\u0438\u0441\u0442\u0435\u043c\u04d1 \u043f\u0443\u043b\u043d\u04d1.",
            "x": "."
        },
        "query": [
            "Strip trailing {x} from {a} and encode the result in ASCII, ignoring errors.",
            "Remove trailing {x} from {a} and convert the result to ASCII, ignoring errors.",
            "Trim the trailing {x} from {a} and encode the result as ASCII, ignoring errors."
        ],
        "language": "chv_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).title()\nprint(answer)\n```",
        "variables": {
            "a": "\u010carlzas tapo pirmuoju Britanijos karali\u0161kosios \u0161eimos nariu, turin\u010diu mokslo laipsn\u012f.",
            "x": "\u012f."
        },
        "query": [
            "Remove trailing characters in {x} from {a} and convert the result to title case.",
            "Strip trailing characters specified by {x} from {a} and change the result to title case.",
            "Trim the characters in {x} from the end of {a} and format the result in title case."
        ],
        "language": "lit_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].expandtabs(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u063a\u064f\u0645\u0652\u0646\u064e\u062a\u0650 \u0646\u063a\u064e\u0644\u064e\u0648\u0652 \u0623\u064f\u0633\u0652\u062a\u0657\u0631\u064f\u0644\u0650\u064a\u064e\u0628\u0650 \u062f\u0650\u0646\u064e\u062f\u0657 \u0646\u0650\u0632\u064e\u0645\u0652 Kyoto \u062f\u0657\u0631\u064f \u0645\u064f\u0633\u0652\u0643\u064f \u064a\u064e\u0643\u064f \u0648\u064e\u0627\u0646\u064f\u060c \u0633\u064e\u0646\u0652\u062f\u0650\u064a\u0650 \u063a\u064f\u0644\u0652\u0632\u064e\u064a\u0650\u0646\u0652 \u0632\u064e\u0632\u0657\u0646\u0652\u0632\u064e \u0628\u064e\u0646\u0652\u0646\u064e\u062c\u0650\u0646\u0652 \u060c \u0634\u0650\u064a\u0650 \u0643\u064f\u0631\u064f \u0643\u0657\u0646\u0652\u062f\u064e\u0648\u0652 Coal \u0644\u064e\u0631\u0652\u062f\u0657 \u062f\u0650\u064a\u064e\u0628\u0650\u0631\u064f \u062a\u064f\u0644\u064f\u0648\u062f\u0657 \u0644\u0650\u0632\u0657\u0646\u064e\u060c \u0644\u064e\u0631\u0652\u062f\u0657\u0623\u064e \u0625\u0650\u0646\u0652\u062f\u0650\u064a\u064e\u0633\u064f \u062a\u0634\u064e\u064a\u0652\u0646\u064e\u0633\u064f\u062f\u0657 \u0633\u064e\u0646\u0652\u062f\u0650\u064a\u064e \u062a\u064f\u0644\u064f\u0648\u062f\u0657 \u0646\u063a\u064e\u0646\u0652\u0632\u064e\u062a\u0657\u064a\u0650",
            "x": 10,
            "y": 50,
            "z": 4
        },
        "query": [
            "Expand tabs in the substring of {a} from {x} to {y} to {z} spaces.",
            "Convert tabs to {z} spaces in the substring of {a} from index {x} to {y}.",
            "Replace tabs with {z} spaces in the section of {a} from {x} to {y}."
        ],
        "language": "knc_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:y].rjust(z, y)\nprint(answer)\n```",
        "variables": {
            "a": ".\u0633\u064a \u0643\u064a\u0645\u0627\u062f\u0648 \u062f\u0646\u0626 \u0634\u0631\u0647 white sea \u0633\u0626\u0646 \u062f\u064a \u0634\u0627 \u0643\u064a\u0645\u062f\u0648 \u0639\u0631\u062a\u0642 \u064a\u0626 \u0643\u064a\u0644\u062a\u0646\u0631 \u062d\u062a\u062a\u0627 \u0643\u064a\u0645\u062f\u0648 \u0628\u0644\u062a\u0643 \u0626\u0631\u0647 \u0644\u0626\u064a\u0646\u0647\u060c\u0633\u0643 \u0646\u062c\u064a \u0627\u0648\u0646\u063a\u0627 \u0628\u0646\u060c\u0643\u064a\u0645\u062f\u0648 \u0644\u062f\u0648\u063a\u0627 \u0633\u064a\u0646\u062a \u0641\u062a\u0626\u0631\u0633\u0628\u0648\u0631\u063a \u064a\u0626 \u0627\u0645\u0645\u0627 \u0633\u0646\u062f\u064a \u062f\u064a \u0643\u0645\u0628\u0648\u0633\u0648 \u0643\u0648\u0644\u0648 \u0639 \u0643\u0648\u0631\u0648 \u0643\u064a\u0645\u062f\u0648 \u0633\u0647",
            "x": 10,
            "y": 20,
            "z": 30
        },
        "query": [
            "Right-justify the substring of {a} from {x} to {y} within {z} characters, using {y} for padding.",
            "Pad the substring of {a} from index {x} to {y} on the left to make it {z} characters long, using {y} as the padding character.",
            "Take the substring of {a} from {x} to {y} and right-align it to {z} characters, filling with {y}."
        ],
        "language": "knc_Arab"
    },
    {
        "solution": "```python\nanswer = a.split(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0ec0\u0ea1\u0eb7\u0ec8\u0ead\u0e96\u0eb7\u0e81\u0e96\u0eb2\u0ea1\u0ea7\u0ec8\u0eb2\u0e9e\u0ecd\u0ec8\u0ec0\u0ea7\u0ebb\u0ec9\u0eb2\u0eab\u0e8d\u0eb1\u0e87\u0ec1\u0e99\u0ec8, \u0ea5\u0eb2\u0ea7\u0e95\u0ead\u0e9a\u0ea7\u0ec8\u0eb2 \u201c\u0ea5\u0eb2\u0ea7\u0e9a\u0ecd\u0ec8\u0eaa\u0eb2\u0ea1\u0eb2\u0e94\u0ec0\u0ea7\u0ebb\u0ec9\u0eb2\u0eab\u0e8d\u0eb1\u0e87\u0ec4\u0e94\u0ec9 - \u0ea5\u0eb2\u0ea7\u0e9e\u0ebd\u0e87\u0ec1\u0e95\u0ec8\u0ea2\u0eb7\u0e99\u0e81\u0eb0\u0e9e\u0eb4\u0e9a\u0e95\u0eb2\u0ea2\u0eb9\u0ec8\u0eab\u0eb1\u0ec9\u0e99.\u201d",
            "x": " ",
            "y": 5
        },
        "query": [
            "Divide {a} by {x} into a maximum of {y} parts.",
            "Split {a} using {x} into at most {y} segments.",
            "Break {a} at {x} into no more than {y} sections."
        ],
        "language": "lao_Laoo"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode(x).find(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u2d30\u2d3c \u2d30\u2d37 \u2d37 \u2d53\u2d54\u2d54\u2d49\u2d4f \u2d59 \u2d53\u2d59\u2d61\u2d49\u2d54 \u2d4f\u2d4f\u2d59\u2d4f \u2d49\u2d63\u2d61\u2d30\u2d54\u2d4f \u2d33 \u2d5c\u2d30\u2d65\u2d39\u2d30\u2d55\u2d5c, \u2d49\u2d47\u2d47\u2d4f \u2d5c \u2d49\u2d4f\u2d4f \u2d30\u2d37 \u2d59\u2d59\u2d53\u2d3c\u2d56\u2d4f \u2d5c\u2d30\u2d65\u2d39\u2d30\u2d55\u2d5c \u2d5c\u2d30\u2d4e\u2d54\u2d4f\u2d30\u2d61\u2d5c \u2d4d\u2d4d\u2d49 \u2d37 \u2d53\u2d33\u2d4e\u2d4f \u2d59\u2d33 \u2d5c\u2d30\u2d3c\u2d53\u2d3d\u2d5c.",
            "x": "utf-8",
            "y": "\u2d53\u2d54\u2d54\u2d49\u2d4f"
        },
        "query": [
            "Find the position of {y} in {a} after encoding to 'utf-8' and decoding with {x}.",
            "Determine the index of {y} in {a} after it has been encoded in 'utf-8' and decoded using {x}.",
            "Locate the position of {y} within {a} after encoding it to 'utf-8' and decoding it with {x}."
        ],
        "language": "zgh_Tfng"
    },
    {
        "solution": "```python\nanswer = a.rjust(x, y).isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u09e7\u09e8\u09e9",
            "x": 6,
            "y": "\u09e6"
        },
        "query": [
            "After right-justifying {a} to {x} characters using {y} for padding, is the resulting string numeric?",
            "Is the string numeric after right-justifying {a} to {x} characters with {y} as the padding character?",
            "When {a} is right-justified to {x} characters with {y} padding, does the resulting string consist only of numeric characters?"
        ],
        "language": "ben_Beng"
    },
    {
        "solution": "```python\nanswer = a[x:].isspace()\nprint(answer)\n```",
        "variables": {
            "a": "\u07de\u07cf\u07ec\u07e3\u07cc\u07f2\u07ec \u07ca\u07ec\u07dc\u07ed\u07df\u07cb\u07ec\u07d8\u07ce\u07ef \u07e1\u07ca\u07f2\u07ec\u07db\u07ca\u07ec\u07df\u07ca \u07d3\u07ca\u07e1\u07d0\u07ef \u07dd\u07ca\u07f2\u07de\u07ca \u07d5\u07ce\u07f2\u07ec \u07de\u07ca\u07eb \u07d3\u07cf\u07f2\u07ec \u07ca\u07df\u07d1\u07e1\u07ca\u07f2\u07d8\u07ce\u07ef \u07d3\u07ca\u07e1\u07d0\u07ef \u07dd\u07ca\u07f2\u07de\u07ca ( \u07de\u07d9\u07cc\u07dc\u07ed\u07db\u07d1\u07e1\u07ca\u07d9\u07cc\u07e3 ) \u07d8\u07cc\u07eb \u07d4\u07ca\u07e3\u07ca\u07f2\u07ce\u07f2\u07eb\u07f8 \u07d3\u07ca\u07cf\u07ec \u07ca\u07ec \u07d5\u07ce\u07f2\u07ec \u07d8\u07cc\u07eb \u07db\u07cb\u07eb \u07d7\u07cd\u07d2\u07de\u07ca\u07f2\u07e0\u07cc\u07f2\u07eb \u07d6\u07cc\u07de\u07ce\u07df\u07ce\u07f2 \u07db\u07ce\u07ee \u07d3\u07cd\u07ef \u07d3\u07cd\u07d8\u07cd\u07f2\u07db\u07cd\u07eb \u07df\u07ca\u07eb \u07e1\u07cd\u07f2 \u07d3\u07ca\u07ef \u07d5\u07ca\u07ec\u07e1\u07cc\u07f2\u07ec \u07ca\u07f2\u07ec\u07dc\u07ed\u07cc\u07ec\u07d8\u07ce\u07ef \u07de\u07d0\u07ec\u07d6\u07ca\u07d9\u07ca\u07f2 \u07dd\u07cd\u07ec.",
            "x": 10
        },
        "query": [
            "Check if the substring of {a} starting from the {x+1}-th character to the end consists only of whitespace characters.",
            "Determine if the portion of {a} from the {x+1}-th character onwards is made up entirely of whitespace.",
            "Verify whether the substring of {a} beginning at the {x+1}-th character and extending to the end contains only whitespace characters."
        ],
        "language": "nqo_Nkoo"
    },
    {
        "solution": "```python\nanswer = a.isprintable() and a.startswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u06cc\u06c1 \u0627\u0646 \u06c1\u0648\u0679\u0644\u0648\u06ba \u0645\u06cc\u06ba \u0633\u06d2 \u062a\u06be\u06d2 \u062c\u06c1\u0627\u06ba \u0645\u0634\u06be\u0648\u0631 \u0632\u0645\u0627\u0646\u06c1 \u0627\u0648\u0631 \u0627\u0645\u06cc\u0631 \u0644\u0648\u06af \u0631\u06a9\u0627 \u06a9\u0631\u062a\u06d2 \u062a\u06be\u06d2\u060c \u0627\u0648\u0631 \u0627\u06a9\u062b\u0631 \u0639\u0645\u062f\u06c1 \u06a9\u06be\u0627\u0646\u06d2 \u06a9\u06be\u0627\u062a\u06d2 \u0627\u0648\u0631 \u0631\u0627\u062a \u06a9\u06cc \u0632\u0646\u062f\u06af\u06cc \u06af\u0630\u0627\u0631\u062a\u06d2 \u062a\u06be\u06d2\u06d4",
            "x": "\u06cc\u06c1"
        },
        "query": [
            "Verify if all characters in {a} are printable and if {a} starts with {x}.",
            "Check if {a} contains only printable characters and begins with {x}.",
            "Determine if {a} is fully printable and starts with {x}."
        ],
        "language": "urd_Arab"
    },
    {
        "solution": "```python\nanswer = a.strip(x).title().startswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "De vierde tropische storm boven de Atlantische Oceaan in het seizoen van 2010, genaamd Danielle, heeft zich in het oosten van de oceaan gevormd.",
            "x": "De",
            "y": "Vierde"
        },
        "query": [
            "Check if the title-cased version of {a} after stripping {x} starts with {y}.",
            "Determine if {a} after removing {x} and converting to title case begins with {y}.",
            "Verify if the title-cased form of {a} after trimming {x} commences with {y}."
        ],
        "language": "nld_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].rjust(z, w).isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0411\u0438\u0440\u043e\u043a \u0443\u0447\u0443\u0440\u0434\u0430 \u0442\u0430\u0430\u043d\u044b\u043c\u0430\u043b \u0433\u0440\u0430\u0444\u0444\u0438\u0442\u0438 \u0441\u04af\u0440\u04e9\u0442\u0447\u04af\u043b\u04e9\u0440\u04af, \u0433\u0440\u0430\u0444\u0444\u0438\u0442\u0438 \u0438\u0448-\u0447\u0430\u0440\u0430\u043b\u0430\u0440\u044b \u0436\u0430\u043d\u0430 \"\u043c\u044b\u0439\u0437\u0430\u043c\u0434\u0443\u0443\" \u0434\u0443\u0431\u0430\u043b\u0434\u0430\u0440 \u0431\u0430\u0440. \u0411\u0443\u043b \u043a\u043e\u043d\u0442\u0435\u043a\u0441\u0442\u0442\u0435\u0433\u0438 \u0433\u0440\u0430\u0444\u0444\u0438\u0442\u0438 \u0441\u04af\u0440\u04e9\u0442\u0442\u04e9\u0440\u04af \u0442\u04af\u0448\u04af\u043d\u04af\u043a\u0441\u04af\u0437 \u0431\u0435\u043b\u0433\u0438\u043b\u0435\u0440\u0433\u0435 \u044d\u043c\u0435\u0441, \u043a\u04e9\u0440\u043a\u04e9\u043c \u0447\u044b\u0433\u0430\u0440\u043c\u0430\u043b\u0430\u0440\u0433\u0430 \u043e\u043a\u0448\u043e\u0448\u0443\u043f \u043a\u0435\u0442\u0435\u0442.",
            "x": 10,
            "y": 20,
            "z": 15,
            "w": "_"
        },
        "query": [
            "Right-justify the substring of {a} from {x} to {y} within {z} characters using {w} as padding, and check if the result is a valid identifier.",
            "Take the substring of {a} from index {x} to {y}, right-justify it to {z} characters with {w} as the padding character, and determine if it is a valid identifier.",
            "Extract the substring of {a} from {x} to {y}, pad it on the left with {w} to make it {z} characters long, and verify if it forms a valid identifier."
        ],
        "language": "kir_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.split(x)[-1].strip(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0938\u0942\u0930\u094d\u092f \u0915\u0947 \u092a\u093e\u0938 \u092a\u0943\u0925\u094d\u0935\u0940 \u091c\u0948\u0938\u0940 \u0938\u0924\u0939 \u0928\u0939\u0940\u0902 \u0939\u0948 \u091c\u093f\u0938 \u092a\u0930 \u0906\u092a \u0916\u0921\u093c\u0947 \u0939\u094b \u0938\u0915\u0947\u0902. \u092a\u0942\u0930\u093e \u0938\u0942\u0930\u094d\u092f \u0917\u0948\u0938, \u0905\u0917\u094d\u0928\u093f \u0914\u0930 \u092a\u094d\u0932\u093e\u091c\u093c\u094d\u092e\u093e \u0938\u0947 \u092c\u0928\u093e \u0939\u0948.",
            "x": "\u0964",
            "y": " "
        },
        "query": [
            "Split {a} by {x}, take the last element, and strip {y} characters from both ends.",
            "Divide {a} using {x} as the delimiter, select the final segment, and remove {y} characters from the start and end.",
            "Break {a} at each {x}, get the last part, and trim {y} characters from either side."
        ],
        "language": "hin_Deva"
    },
    {
        "solution": "```python\nanswer = a[:y].swapcase().endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "K\u025b kui\u0331c k\u00e4 \u0263\u00f6\u00f6 di\u0331dni\u0331 ta\u0331a\u0331 r\u025blij\u0254n\u00e4 r\u025by r\u025b\u0308\u025b\u0308k, k\u025bn\u025b j\u025bn ta\u0331a\u0331 k\u00e4 \u0263\u00f6\u00f6  te gua\u0331th tee \u014ba\u0331c k\u025b ni\u0331 wal thi\u0331n R\u025b\u025bk ee Wal, J\u025bruth\u025bl\u025bm \u025b j\u025bn gua\u0331a\u0331th \u025bn nh\u0254k ja\u0331a\u0331l gui\u0331l\u025b \u025bl\u0254\u0331\u014b k\u00e4 I\u0331thr\u025b\u025bl.",
            "x": "\u0263\u00f6\u00f6",
            "y": 20
        },
        "query": [
            "Does the first {y} characters of {a} with swapped case end with {x}?",
            "Do the first {y} characters of {a} after swapping case end with {x}?",
            "Is {x} the ending of the first {y} characters of {a} after case swap?"
        ],
        "language": "nus_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('utf-8').istitle()\nprint(answer)\n```",
        "variables": {
            "a": "N'oge s\u1ecdma, kpachara anya maka \u1ee5m\u1ee5 anw\u1ee5nta n\u1ecddik. \u1ecc b\u1ee5 eziokwu na ha anagh\u1ecb ebufe \u1ecdr\u1ecba \u1ecdb\u1ee5la, mana ha nwere ike \u1ecbmekpa mmad\u1ee5 ah\u1ee5."
        },
        "query": [
            "Does {a} remain a title after encoding to UTF-8 and decoding back?",
            "Is {a} still a title after being encoded in UTF-8 and then decoded?",
            "After encoding {a} to UTF-8 and decoding it back, does it still qualify as a title?"
        ],
        "language": "ibo_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().rfind(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0622\u0647\u0646\u06af\u200c\u0647\u0627 \u0631\u0627 \u0627\u063a\u0644\u0628 \u0628\u0627 \u0631\u0627\u06cc\u0627\u0646\u0647\u200c\u0647\u0627\u06cc \u067e\u06cc\u0634\u0631\u0641\u062a\u0647 \u0636\u0628\u0637 \u0645\u06cc\u200c\u06a9\u0646\u0646\u062f \u0648 \u0635\u062f\u0627\u0647\u0627 \u0631\u0627 \u067e\u0631\u062f\u0627\u0632\u0634 \u0648 \u0628\u0627 \u0647\u0645 \u062a\u0644\u0641\u06cc\u0642 \u0645\u06cc\u200c\u06a9\u0646\u0646\u062f.",
            "x": "\u0645\u06cc\u200c\u06a9\u0646\u0646\u062f"
        },
        "query": [
            "Remove leading and trailing spaces from {a} and find the last occurrence of {x}.",
            "Trim the spaces from the start and end of {a} and locate the last position of {x}.",
            "Strip spaces from both ends of {a} and determine the last index of {x}."
        ],
        "language": "pes_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:].upper().isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "Kompani\u00fda \u00f6z girdeji \u00e7e\u015fmelerini diwersifisirl\u00e4p, \"Skype\"-y\u0148 Hyta\u00fd, G\u00fcndogar \u00ddewropa we Brazili\u00fda \u00fdaly g\u00fc\u00fd\u00e7li orun e\u00fdele\u00fd\u00e4n \u00fderlerinde me\u015fhurlyk gazanmagy tama ed\u00fd\u00e4r.",
            "x": 10
        },
        "query": [
            "Take the substring of {a} from index {x} to the end, convert it to uppercase, and check if it is a valid identifier.",
            "Extract the substring from {a} starting at index {x}, change it to uppercase, and determine if it is a valid identifier.",
            "Get the substring of {a} from position {x} onwards, transform it to uppercase, and verify if it is a valid identifier."
        ],
        "language": "tuk_Latn"
    },
    {
        "solution": "```python\nanswer = a.casefold().startswith(x.lower())\nprint(answer)\n```",
        "variables": {
            "a": "El n\u00famberu de muertos ye de polo menos 15, una cifra que s\u2019espera qu\u2019aumente.",
            "x": "el"
        },
        "query": [
            "Convert {a} to casefold and check if it starts with the lowercase version of {x}.",
            "Transform {a} to casefold and verify if it begins with the lowercase form of {x}.",
            "Change {a} to casefold and determine if it starts with the lowercase variant of {x}."
        ],
        "language": "ast_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u5bf6\u96f2\u5cf6\u4fc2\u4e00\u500b\u597d\u53d7\u6b61\u8fce\u5605\u4e00\u65e5\u904a\u6216\u8005\u9031\u672b\u77ed\u9014\u904a\u6253\u5361\u5730\uff0c\u6709\u76ae\u5212\u8247\u3001\u9060\u8db3\u3001\u5546\u5e97\u540c\u9910\u5ef3\u7b49\u3002"
        },
        "query": [
            "Check if {a} without leading and trailing spaces is numeric.",
            "Determine if the trimmed version of {a} is a numeric value.",
            "Is the string {a} without any leading or trailing spaces a numeric value?"
        ],
        "language": "yue_Hant"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).isupper()\nprint(answer)\n```",
        "variables": {
            "a": "Per a poder tornar al nivell d'energia anterior, s'han d'alliberar d'energia extra que han obtingut de la llum.",
            "x": "llum."
        },
        "query": [
            "Check if {a} without trailing {x} is entirely in uppercase.",
            "Determine if the string {a} without the trailing {x} characters is all uppercase.",
            "Is the string {a} in uppercase after removing the trailing {x}?"
        ],
        "language": "cat_Latn"
    },
    {
        "solution": "```python\nanswer = a.rjust(x, y).swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "The National Congress of Brazil hian kum 10 chhung teh meuh mai an lo sawiho tawh a, hetianga inneih phalna hi tun dinhmunah chuan Rio Grande do Sul ah chiah phal ala ni.",
            "x": 150,
            "y": "-"
        },
        "query": [
            "Right-justify {a} with {x} characters, padded by {y}, and swap the case of the result.",
            "Pad {a} to the right with {y} until it is {x} characters long, then swap the case.",
            "Make {a} {x} characters long by padding with {y} on the left, and then change the case of each character."
        ],
        "language": "lus_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].encode('ascii').decode('ascii')\nprint(answer)\n```",
        "variables": {
            "a": "\u1c68\u1c64\u1c62\u1c64\u1c5e \u1c60\u1c5a\u1c6b\u1c5a \u1c71\u1c5a\u1c5d\u1c60\u1c5f\u1c71 \u1c6b\u1c5f\u1c72\u1c6e \u1c65\u1c6e\u1c6b \u1c69\u1c71\u1c69\u1c6b\u1c69\u1c5c \u1c60\u1c6e\u1c5c\u1c7c\u1c5f\u1c6d \u1c61\u1c6e \u1c65\u1c5f\u1c79\u1c68\u1c64\u1c5c\u1c6e \u1c62\u1c64\u1c6b \u1c75\u1c64\u1c65\u1c6f\u1c77\u1c5a\u1c74 \u1c66\u1c69\u1c6d \u1c5f\u1c60\u1c5f\u1c71 \u1c5e\u1c6e\u1c60\u1c5f\u1c7e",
            "x": 0,
            "y": 5
        },
        "query": [
            "Encode the substring of {a} from index {x} to {y} to ASCII and then decode it back.",
            "Convert the substring of {a} from index {x} to {y} to ASCII and then revert it back.",
            "Transform the substring of {a} from index {x} to {y} to ASCII and then decode it back to its original form."
        ],
        "language": "sat_Olck"
    },
    {
        "solution": "```python\nanswer = a.upper()[::z]\nprint(answer)\n```",
        "variables": {
            "a": "\u00c9quateur ezosenga ete bato ya Cuba bazwa mokanda ya libiangi liboso bakota na \u00c9quateur na nzela ya libanda ya mpepo ya mikili mingi to na bangambo mosusu ya kokotela na mikili.",
            "z": 3
        },
        "query": [
            "Convert {a} to uppercase and select every {z}-th character.",
            "Transform {a} to uppercase and pick every {z}-th character.",
            "Change {a} to uppercase and extract every {z}-th character."
        ],
        "language": "lin_Latn"
    },
    {
        "solution": "```python\nanswer = a.lower().split(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u2018Architecture\u2019 adwumay\u0511 no ne ebinom te s\u0511 \u2018urban planning\u2019, \u2018civil engineering\u2019, \u2018decorative arts\u2019, \u2018interior design\u2019 \u0511ne \u2018landscape design\u2019de\u0511 no na \u0511k\u0254.",
            "x": "\u2018"
        },
        "query": [
            "Split the lowercase version of {a} by {x}.",
            "Divide the lowercase form of {a} using {x} as the delimiter.",
            "Break down the lowercase string {a} by the separator {x}."
        ],
        "language": "twi_Latn_asan1239"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Nk\u2019uko biri ubu ku Buyapani. Ubuyapani bwari igihugu cy\u2019ikirwa, kimwe n'Ubwongereza.",
            "x": 100,
            "y": " "
        },
        "query": [
            "Left justify {a} within {x} characters, padding with {y}, and check if the result is composed entirely of ASCII characters.",
            "Pad {a} to the left with {y} until it reaches {x} characters and verify if the resulting string contains only ASCII characters.",
            "Ensure {a} is left-justified to {x} characters using {y} as padding and determine if the final string is purely ASCII."
        ],
        "language": "kin_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].encode('ascii', errors='ignore').decode('ascii')\nprint(answer)\n```",
        "variables": {
            "a": "\u0f42\u0f63\u0f0b\u0f66\u0fb2\u0f72\u0f51\u0f0b \u0f41\u0fb1\u0f7c\u0f51\u0f0b\u0f62\u0f44\u0f0b \u0f42\u0f53\u0f58\u0f0b\u0f42\u0fb2\u0f74\u0f0b\u0f53\u0f44\u0f0b\u0f63\u0f74\u0f0b \u0f60\u0f5b\u0f58\u0f0b\u0f42\u0fb3\u0f72\u0f44\u0f0b\u0f56\u0f66\u0f90\u0f7c\u0f62\u0f0b\u0f62\u0f0b\u0f62\u0f90\u0fb1\u0f56\u0f0b\u0f66\u0f9f\u0f7a\u0f0b \u0f63\u0fb7\u0f7c\u0f0b\u0f55\u0fb1\u0f7c\u0f42\u0f66\u0f0b\u0f60\u0f5b\u0f58\u0f0b\u0f42\u0fb3\u0f72\u0f44\u0f0b\u0f55\u0fb1\u0f7a\u0f51\u0f0b\u0f40\u0f0b\u0f63\u0f66\u0f0b \u0f60\u0f55\u0f74\u0f63\u0f0b\u0f60\u0f42\u0fb2\u0f74\u0f63\u0f0b\u0f60\u0f56\u0f51\u0f0b\u0f53\u0f72\u0f0b\u0f68\u0f72\u0f53\u0f0b\u0f54\u0f0b\u0f45\u0f72\u0f53\u0f0b \u0f60\u0f55\u0f74\u0f62\u0f0b\u0f60\u0f42\u0fb2\u0f74\u0f63\u0f0b\u0f51\u0f44\u0f0b\u0f60\u0f42\u0fb1\u0f7c\u0f0b\u0f66\u0f0b\u0f60\u0f51\u0f72\u0f0b\u0f5a\u0f51\u0f0b\u0f42\u0f45\u0f72\u0f42\u0f0b\u0f63\u0f66\u0f0b\u0f56\u0f62\u0f92\u0f63\u0f0b\u0f58\u0f7a\u0f51\u0f0b\u0f58\u0f72\u0f0b\u0f60\u0f51\u0f72\u0f0b \u0f4f\u0fb2\u0f71\u0f53\u0f66\u0f72\u0f0b\u0f68\u0f7c\u0f0b\u0f64\u0f0b\u0f53\u0f72\u0f40\u0f0b\u0f60\u0f42\u0fb2\u0f74\u0f63\u0f0b\u0f63\u0f58\u0f0b\u0f58\u0f7a\u0f51\u0f0b\u0f53\u0f72\u0f0b\u0f60\u0f51\u0f72\u0f0b\u0f42\u0f72\u0f66\u0f0b\u0f68\u0f72\u0f53\u0f0d",
            "x": 0,
            "y": 10
        },
        "query": [
            "Extract a substring from {x} to {y} in {a}, encode it to ASCII ignoring errors, and decode it back.",
            "Get a substring from {x} to {y} in {a}, convert it to ASCII while ignoring errors, and then decode it.",
            "Take a substring from {x} to {y} in {a}, encode it as ASCII ignoring errors, and decode it back to a string."
        ],
        "language": "dzo_Tibt"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).encode(encoding='utf-8', errors='replace')\nprint(answer)\n```",
        "variables": {
            "a": "\u0924\u0938\u0947\u091a, \u0926\u092e\u091f \u0939\u0935\u093e\u092e\u093e\u0928\u093e\u092e\u0927\u094d\u092f\u0947 \u0935\u093f\u0937\u093e\u0923\u0942 \u0935\u0947\u0917\u093e\u0928\u0947 \u0935\u093e\u0922\u0924\u094b \u0906\u0923\u093f \u0936\u0930\u0940\u0930\u093e\u092c\u093e\u0939\u0947\u0930 \u0926\u0940\u0930\u094d\u0918\u0915\u093e\u0933 \u091c\u093f\u0935\u0902\u0924 \u0930\u093e\u0939\u0942 \u0936\u0915\u0924\u094b.",
            "x": 100,
            "y": " "
        },
        "query": [
            "Center {a} within a string of {x} characters using {y} for padding, then encode it in UTF-8.",
            "Pad {a} to a total length of {x} characters with {y} and encode it in UTF-8.",
            "Align {a} in the center of a string of length {x} using {y} as padding, then encode it in UTF-8."
        ],
        "language": "mar_Deva"
    },
    {
        "solution": "```python\nanswer = a.isidentifier() and a.startswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u092e\u094d\u0939\u0933\u094d\u092f\u093e\u0930\u0942\u091a",
            "x": "\u092e\u094d\u0939"
        },
        "query": [
            "Check if {a} is a valid identifier and starts with {x}.",
            "Verify if {a} is a valid identifier and begins with {x}.",
            "Determine if {a} is a valid identifier and starts with the prefix {x}."
        ],
        "language": "gom_Deva"
    },
    {
        "solution": "```python\nanswer = a.split(x, y)[z].islower()\nprint(answer)\n```",
        "variables": {
            "a": "Las construccions diferentas an de capacitats diferentas, son sensiblas a de longors d'onda diferentas e an de gras diferents d'acuitat, demandan tanben un tractament diferent per donar de sens a l'intrada e de nombres diferents per foncionar d'un biais optimal.",
            "x": " ",
            "y": 5,
            "z": 3
        },
        "query": [
            "Is the {z}-th substring of {a} split by {x} up to {y} times in lowercase?",
            "Check if the {z}-th part of {a} obtained by splitting with {x} up to {y} times is in lowercase.",
            "Determine if the {z}-th segment of {a} after splitting by {x} up to {y} times is in lowercase."
        ],
        "language": "oci_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode(x).endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u1c75\u1c77\u1c5f\u1c5e\u1c75 \u1c61\u1c77\u1c64\u1c61 \u1c5b\u1c6e \u1c65\u1c64\u1c65\u1c74\u1c6e\u1c62 \u1c68\u1c6e \u1c6f\u1c68\u1c6e\u1c65\u1c5f\u1c68 \u1c5a\u1c70\u1c5a\u1c5c\u1c5a\u1c5c\u1c7c\u1c5f \u1c5f\u1c68 \u1c65\u1c69\u1c71\u1c69\u1c62 \u1c6f\u1c6e\u1c70 \u1c60\u1c77\u1c5a\u1c71 \u1c62\u1c64\u1c6b \u1c74\u1c6e\u1c5d\u1c60 \u1c68\u1c6e \u1c5e\u1c64\u1c78\u1c5c\u1c64\u1c71\u1c5a\u1c5c\u1c7c\u1c5f \u1c61\u1c5f\u1c66\u1c5f\u1c78 \u1c68\u1c6e \u1c55\u1c55,\u1c50\u1c50\u1c50 \u1c75\u1c6e\u1c68\u1c6e\u1c5e (\u1c52.\u1c53 \u1c62\u1c64\u1c5e\u1c64\u1c6d\u1c5a\u1c71 \u1c5c\u1c6e\u1c5e\u1c5a\u1c71) \u1c65\u1c5f\u1c66\u1c5a\u1c75\u1c5a\u1c5c\u1c7c\u1c5f\u1c7e",
            "x": "utf-8",
            "y": "\u1c7e"
        },
        "query": [
            "Does {a}, after being encoded with {x} and decoded back, end with {y}?",
            "After encoding {a} with {x} and decoding it, does it end with {y}?",
            "If {a} is encoded using {x} and then decoded, does it end in {y}?"
        ],
        "language": "sat_Olck"
    },
    {
        "solution": "```python\nanswer = a.casefold().replace(x, y).isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "Otro na veh\u00edkulonan grandi, abo probablemente ta kustum\u00e1 kaba ku kore bo outo i bo konos\u00e9 su limitashonnan.",
            "x": " ",
            "y": "_"
        },
        "query": [
            "Is {a}, after being casefolded and replacing {x} with {y}, a valid identifier?",
            "After casefolding {a} and replacing {x} with {y}, is it a valid identifier?",
            "Can {a} be considered a valid identifier after casefolding and replacing {x} with {y}?"
        ],
        "language": "pap_Latn"
    },
    {
        "solution": "```python\nanswer = a.swapcase().encode(encoding=x, errors='replace')\nprint(answer)\n```",
        "variables": {
            "a": "O, yerli universitet t\u0259l\u0259b\u0259l\u0259rin\u0259 e-po\u00e7t vasit\u0259sil\u0259 m\u0259ktub yollad\u0131 v\u0259 \u00f6d\u0259ni\u015fsiz qonaqlama \u00fc\u00e7\u00fcn h\u0259dd\u0259n art\u0131q \u00e7ox t\u0259klif ald\u0131.",
            "x": "azj_Latn"
        },
        "query": [
            "Swap the case of {a} and then encode it using {x} encoding, replacing unencodable characters.",
            "Change the case of {a} to the opposite and encode it with {x}, replacing characters that can't be encoded.",
            "Convert {a} to its opposite case and encode it with {x} encoding, substituting unencodable characters."
        ],
        "language": "azj_Latn"
    },
    {
        "solution": "```python\nanswer = a.casefold().replace(x, y).istitle()\nprint(answer)\n```",
        "variables": {
            "a": "M\u00e4nniskor har tillverkat och anv\u00e4nt f\u00f6rstoringslinser i tusentals \u00e5r.",
            "x": "f\u00f6rstoringslinser",
            "y": "mikroskop"
        },
        "query": [
            "Casefold {a}, replace {x} with {y}, and check if the result is in title case.",
            "Convert {a} to lowercase, substitute {x} with {y}, and verify if the outcome is in title case.",
            "Lowercase {a}, change {x} to {y}, and determine if the final string is in title case."
        ],
        "language": "swe_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u0645\u062f\u0631\u0646 \u0634\u0645\u0634\u06cc\u0631\u0628\u0627\u0632\u06cc \u0648\u0631\u0632\u0634\u06cc \u0686\u0648\u062e \u0633\u0637\u062d\u0644\u0631\u0647 \u062f\u0627\u0646\u0634\u062c\u0648\u0644\u0627\u0631\u062f\u0627\u0646 \u06a9\u06cc \u062f\u0627\u0646\u0634\u06af\u0627\u0647 \u062f\u0627 \u0627\u0648\u0631\u06af\u0634\u06cc\u0644\u0644\u0631 \u062d\u0631\u0641\u0647 \u0627\u06cc \u0646\u0646 \u0627\u0648\u0644\u0645\u067e\u06cc\u06a9 \u0631\u0642\u0627\u0628\u062a\u0644\u0631\u0646\u0647 \u062c\u0627\u0646 \u0627\u0646\u062c\u0627\u0645 \u0627\u0648\u0644\u0648\u0631.",
            "x": " "
        },
        "query": [
            "Is the string {a} with leading and trailing {x} removed printable?",
            "After removing leading and trailing {x} from {a}, is the resulting string printable?",
            "Does the string {a} become printable after stripping {x} from both ends?"
        ],
        "language": "azb_Arab"
    },
    {
        "solution": "```python\nanswer = a.lower().startswith(x) and a.upper().endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "Mune dzimwe nyika dzine matunhu anoita zvinhu nenzira dzakasiyana-siyana, dzakadai seUnited States neCanada, mutero wevashandi unobviswa muguta maunogara wobviswa zvakare kuhurumende, saka mutero wacho unogona kusiyana dunhu nedunhu.",
            "x": "mune",
            "y": "DUNHU NEDUNHU."
        },
        "query": [
            "Does {a} in lowercase start with {x} and in uppercase end with {y}?",
            "Is it true that {a} starts with {x} when in lowercase and ends with {y} when in uppercase?",
            "Check if {a} starts with {x} in lowercase and ends with {y} in uppercase."
        ],
        "language": "sna_Latn"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u062f \u0645\u0645\u0628\u06cd \u062d\u0645\u0644\u0647 \u06a9\u0648\u0648\u0646\u06a9\u06d0 \u062f \u06a9\u069a\u062a\u06cc \u062f \u0644\u0627\u0631\u06d0 \u062f 2008 \u062f \u0646\u0648\u0645\u0628\u0631 \u067e\u0647 26 \u0646\u06cc\u067c\u0647 \u0631\u0627\u0631\u0633\u06cc\u062f\u0644\u06cc \u0648 . \u0686\u06d0 \u0644\u0647 \u0681\u0627\u0646 \u0633\u0631\u0647 \u06ab\u0631\u0646\u06cc\u067c\u0648\u0646\u0647 \u0627\u0648 \u0627\u062a\u0648\u0645\u0627\u062a \u0648\u0633\u0644\u06cc \u0631\u0627\u0648\u0693\u06cc \u0648\u064a . \u0686\u06d0 \u067e\u0647 \u0645\u062a\u0639\u062f\u062f\u0648 \u0647\u062f\u0641\u0648\u0646\u0648 \u06cc\u06d0 \u062f \u0686\u062a\u0631 \u067e\u062a\u06cc \u0634\u064a\u0648\u0627 \u0686\u06d0 chatar pati shivaji \u062f \u0627\u0648\u0631 \u06ab\u0627\u0689\u06cc \u067e\u0647 \u062a\u0645\u0681\u0627\u06d0 \u0627\u0648 \u0645\u0634\u0647\u0648\u0631 \u062a\u0627\u062c \u0645\u062d\u0644 \u0647\u0648\u067c\u0644 \u067e\u0647 \u06ab\u0689\u0648\u0646 \u0628\u0627\u0646\u062f\u064a \u06cc\u06d0 \u062d\u0645\u0644\u06cc \u0648\u06a9\u0693\u064a",
            "x": "\u062f \u0645\u0645\u0628\u06cd \u062d\u0645\u0644\u0647 \u06a9\u0648\u0648\u0646\u06a9\u06d0 \u062f \u06a9\u069a\u062a\u06cc \u062f \u0644\u0627\u0631\u06d0 \u062f "
        },
        "query": [
            "Remove characters in {x} from the beginning of {a} and check if the result is composed entirely of digits.",
            "Strip characters in {x} from the start of {a} and verify if the remaining string is numeric.",
            "Check if the string {a} becomes a number after removing the leading characters specified in {x}."
        ],
        "language": "pbt_Arab"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).encode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "\u041c\u0430\u0442\u0447\u0440\u0430 \u041d\u0430\u0434\u0430\u043b \u043c\u04d7\u043d\u043f\u0443\u0440 \u043e\u0447\u043a\u043e\u0441\u0435\u043d\u0447\u0435\u043d 88% \u043f\u0443\u0445\u043c\u0430 \u043f\u0443\u043b\u0442\u0430\u0440\u043d\u04d1, 76 \u043e\u0447\u043a\u043e\u043d\u0430 \u0432\u04d1\u043b \u043f\u04d7\u0440\u0440\u0435\u043c\u04d7\u0448 \u043f\u043e\u0434\u0430\u0447\u04d1\u0440\u0430 \u0442\u0438\u0432\u04d7\u04ab\u043d\u04d7.",
            "x": "\u041c\u0430\u0442\u0447\u0440\u0430"
        },
        "query": [
            "Remove leading characters in {x} from {a} and encode the result in UTF-8.",
            "Strip leading characters specified by {x} from {a} and convert the result to UTF-8 encoding.",
            "Trim the leading characters in {x} from the string {a} and encode the output in UTF-8."
        ],
        "language": "chv_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.lower().replace(x, y).isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "Ol famili we i gat ol liklik pikinini i nid long redi gut moa, tasol wanpela de autsait em i isi long mekim wantaim ol bebi na ol 'pre-school' pikinini.",
            "x": " ",
            "y": "_"
        },
        "query": [
            "Is the string {a} a valid identifier after converting to lowercase and replacing {x} with {y}?",
            "After converting {a} to lowercase and replacing {x} with {y}, is it a valid identifier?",
            "Will the string {a} be a valid identifier if we convert it to lowercase and replace {x} with {y}?"
        ],
        "language": "tpi_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].encode('ascii', errors='replace')\nprint(answer)\n```",
        "variables": {
            "a": "\u0938\u092c\u0938\u0947 \u091c\u093e\u0926\u0947 \u092b\u0947\u092e\u0938 \u091c\u0917\u0939 \u091c\u0948\u0938\u0947 \u0915\u093f \u092b\u0948\u0902\u091f\u092e \u0930\u0948\u0902\u091a \u0938\u0947 \u0938\u091f\u0932 \u092c\u094d\u0930\u093e\u0907\u091f \u090f\u0902\u091c\u0947\u0932 \u0915\u0948\u0902\u092a\u0917\u094d\u0930\u093e\u0909\u0902\u0921 \u0932\u0917\u0940 \u0905\u0928\u0941\u0930\u094b\u0927 \u092a\u093e\u0939\u093f\u0932\u0947 \u0924\u093e\u0930\u0940\u0916 \u0938\u0947 \u092e\u093f\u0932\u0947 \u0932\u0917\u093e \u0939\u0915\u0947, \u091c\u0947\u0915\u0930\u093e \u0915\u0940 \u092c\u093e\u0926 \u092e\u0947\u0902 \u0906\u0930\u0915\u094d\u0937\u0923 \u0916\u093e\u0924\u093f\u0930 \u0916\u094b\u0932 \u0926\u0947\u0935\u0932 \u091c\u093e \u0939\u0915\u0947\u0964",
            "x": 0,
            "y": 20
        },
        "query": [
            "Convert the substring of {a} from {x} to {y} to ASCII encoding, replacing characters that can't be encoded.",
            "Encode the substring of {a} from index {x} to {y} in ASCII, substituting unencodable characters.",
            "Transform the substring of {a} from position {x} to {y} into ASCII encoding, using replacement for characters that cannot be encoded."
        ],
        "language": "mag_Deva"
    },
    {
        "solution": "```python\nanswer = a[x:y].isdigit() and a[x:y].isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u0c2a\u0c4d\u0c30\u0c38\u0c3e\u0c30 \u0c38\u0c47\u0c35\u0c32 \u0c1a\u0c1f\u0c4d\u0c1f\u0c02 \u0c07\u0c02\u0c1f\u0c30\u0c4d\u0c28\u0c46\u0c1f\u0c4d \u0c35\u0c3f\u0c37\u0c2f\u0c02 \u0c2f\u0c4a\u0c15\u0c4d\u0c15 \u0c28\u0c3f\u0c2f\u0c02\u0c24\u0c4d\u0c30\u0c23\u0c28\u0c41 \u0c05\u0c02\u0c26\u0c3f\u0c38\u0c4d\u0c24\u0c41\u0c02\u0c26\u0c3f, \u0c05\u0c2f\u0c3f\u0c24\u0c47 \u0c07\u0c02\u0c1f\u0c30\u0c4d\u0c28\u0c46\u0c1f\u0c4d \u0c15\u0c02\u0c1f\u0c46\u0c02\u0c1f\u0c4d \u0c17\u0c3e \u0c2a\u0c30\u0c3f\u0c17\u0c23\u0c3f\u0c02\u0c1a\u0c2c\u0c21\u0c41\u0c24\u0c41\u0c02\u0c26\u0c3f, \u0c07\u0c26\u0c3f \u0c2d\u0c4c\u0c24\u0c3f\u0c15\u0c02\u0c17\u0c3e \u0c38\u0c30\u0c4d\u0c35\u0c30\u0c4d \u0c32\u0c4b \u0c09\u0c02\u0c1f\u0c41\u0c02\u0c26\u0c3f.",
            "x": 10,
            "y": 20
        },
        "query": [
            "Check if the substring from {x} to {y} in {a} is composed entirely of digits and numeric characters.",
            "Verify if the section of {a} from index {x} to {y} contains only digit and numeric characters.",
            "Determine if the part of {a} between {x} and {y} is made up solely of digits and numeric characters."
        ],
        "language": "tel_Telu"
    },
    {
        "solution": "```python\nanswer = a.strip().zfill(x).isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\uabc2\uabe3\uabdf \uabd1\uabc1\uabe4\uabd5\uabe8 \uabc9\uabe5\uabe1\uabc2\uabe4\uabd5 \uabc3\uabe4\uabd1\uabe3\uabcf\uabc1\uabe4\uabe1\uabd2\uabe4 \uabc3\uabc1\uabe4\uabe1 \uabd1\uabc1\uabe4 \uabc3\uabe4\uabc2\uabe4\uabcc\uabdf \uabf3\uabf4\uabf0\uabd7\uabd2\uabe4 \uabf5\uabf0\uabf0 \uabd0\uabe5\uabce\uabd5 \uabd1\uabe3\uabcf, \uabd1\uabc3\uabc1\uabe8\uabe1 \uabc3\uabe4\uabd1\uabe3\uabcf \uabc3\uabe4\uabc2\uabe4\uabcc\uabdf \uabf8\uabf0\uabf0 \uabc3\uabe8\uabdb \uabcc\uabe5\uabdd\uabc2\uabd5 \uabc3\uabe4\uabd1\uabe3\uabcf\uabc1\uabe4\uabe1\uabc5 \uabc2\uabe3\uabdf \uabd1\uabd7\uabe8\uabd5\uabe8 \uabc8\uabea\uabd5 \uabc9\uabdd\uabc3\uabe4\uabeb",
            "x": 10
        },
        "query": [
            "Is the stripped and zero-filled version of {a} of length {x} numeric?",
            "After stripping and zero-filling {a} to length {x}, is it numeric?",
            "Does the stripped and zero-padded {a} of length {x} consist only of numeric characters?"
        ],
        "language": "mni_Mtei"
    },
    {
        "solution": "```python\nanswer = a.encode('ascii', errors='ignore').decode('ascii').isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u107d\u102e\u1076\u103d\u1010\u103a\u1089\u1075\u103b\u1031\u1087\u1022\u1083\u1087 \u1015\u1035\u107c\u103a\u101c\u103d\u1004\u103a\u1088\u1075\u1083\u1038\u107d\u1083\u1087\u101c\u1085\u101d\u103a\u1019\u102d\u1030\u101d\u103a\u1088\u1015\u1062\u1004\u103a\u1015\u103d\u1086\u1038  Grand Prix 2008 \u101e\u102d\u1004\u103a\u1087\u1075\u1015\u1030\u101d\u103a\u1087 \u101d\u1062\u1086\u1038\u101e\u1031\u1075\u102d\u102f\u1010\u103a\u1038\u1075\u1019\u103a\u1038\u107c\u102d\u1030\u1004\u103a\u1088\u1010\u103d\u107c\u103a\u1088\u1010\u1083\u1087\u1019\u1031\u1038\u1075\u1083\u1038\u1010\u1083\u1087 \u107d\u1083\u1087\u107c\u1062\u107c\u103a\u1087\u1010\u1030\u101d\u103a\u1087 \u1022\u101c\u102f\u107c\u103a\u1087\u101e\u1030\u101d\u103a\u1087 \u107c\u107c\u103a\u1089\u1081\u1035\u1010\u103a\u1038\u1081\u1082\u103a\u1088 \u1022\u101d\u103a\u1022\u103d\u1075\u103a\u1087\u1019\u1083\u1038\u1075\u1083\u1038 \u1022\u107c\u103a\u1019\u102e\u1038\u101c\u103d\u1004\u103a\u1088\u1081\u1030\u1019\u103a\u1087\u101c\u1030\u1019\u103a\u1088\u107c\u107c\u103a\u1089\u104b"
        },
        "query": [
            "Is the ASCII-encoded and decoded version of {a} printable?",
            "Can the string {a} be encoded and decoded in ASCII and still be printable?",
            "Will the string {a} remain printable after ASCII encoding and decoding?"
        ],
        "language": "shn_Mymr"
    },
    {
        "solution": "```python\nanswer = a.partition(x)[2].rjust(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0924\u0926\u0928\u0941\u0938\u093e\u0930, \u0908 \u0924\u0930\u0939 \u0915\u0947 \u092c\u0947\u0939\u0924\u0930\u0940\u0928 \u092a\u094d\u0930\u0924\u093f\u0937\u094d\u0920\u093e\u0928 \u092e\u0947\u0902 \u0938\u092c\u0938\u0947 \u0936\u093e\u0928\u0926\u093e\u0930 \u092c\u093f\u0938\u094d\u0924\u0930, \u0936\u093e\u092f\u0926 \u090f\u0917\u094b \u0939\u0938\u094d\u0924\u0928\u093f\u0930\u094d\u092e\u093f\u0924 \u0930\u091c\u093e\u0908 \u092f\u093e \u090f\u0917\u094b \u092a\u094d\u0930\u093e\u091a\u0940\u0928 \u092c\u093f\u0938\u094d\u0924\u0930 \u0916\u094b\u091c\u0947 \u0915\u0947 \u0932\u0917\u0940 \u0909\u092a\u092f\u0941\u0915\u094d\u0924 \u0939\u092f\u0964",
            "x": "\u0936\u093e\u0928\u0926\u093e\u0930",
            "y": 50,
            "z": " "
        },
        "query": [
            "Partition {a} at the first occurrence of {x}, take the part after {x}, and right-justify it in a field of {y} characters using {z}.",
            "Split {a} at the first occurrence of {x}, take the substring after {x}, and pad it on the left to make it {y} characters wide using {z}.",
            "Divide {a} at the first instance of {x}, extract the segment after {x}, and align it to the right in a space of {y} characters with {z}."
        ],
        "language": "mag_Deva"
    },
    {
        "solution": "```python\nanswer = a.splitlines()[x].capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "La capsula se semblar\u00e0 f\u00f2r\u00e7a a una estela fugidissa que trav\u00e8rsa lo c\u00e8l.",
            "x": 0
        },
        "query": [
            "Split {a} into lines, take the {x+1}-th line, and capitalize it.",
            "Divide {a} into separate lines, select the {x+1}-th line, and make the first letter uppercase.",
            "Break {a} into lines, pick the {x+1}-th line, and convert it to start with a capital letter."
        ],
        "language": "oci_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y)[::-1]\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u0644\u0644\u0627\u0641\u062a\u0629 \u0645\u0627 \u0645\u0633\u0651\u0647\u0627 \u062d\u062a\u0651\u0649 \u0636\u0631\u0631 \u0645\u0627\u062f\u064a\u061b \u0639\u0644\u0649 \u062e\u0627\u0637\u0631 \u0627\u0644\u0645\u062a\u0639\u062f\u064a \u0627\u0633\u062a\u062e\u062f\u0645 \u062a\u0631\u0628\u0648\u0644\u064a\u0646 \u0623\u0643\u062d\u0644 \u0645\u0632\u064a\u0646 \u0628\u0639\u0644\u0627\u0645\u0629 \u0627\u0644\u0633\u0644\u0627\u0645 \u0648\u062a\u0635\u0648\u064a\u0631\u0629 \u0642\u0644\u0628 \u0641\u064a \u062a\u0639\u062f\u064a\u0644\u0627\u062a\u0647 \u0628\u0634 \u064a\u063a\u064a\u0651\u0631 \u0634\u0643\u0644 \u062d\u0631\u0641 \u0627\u0644\"O\" \u0628\u0634 \u064a\u0636\u0647\u0631 \u0643\u064a\u0645\u0627 \u062d\u0631\u0641 \"e\".",
            "x": "O",
            "y": "e"
        },
        "query": [
            "Replace {x} with {y} in {a} and then reverse the result.",
            "Substitute {x} with {y} in {a} and reverse the string.",
            "Change {x} to {y} in {a} and then reverse the entire string."
        ],
        "language": "aeb_Arab"
    },
    {
        "solution": "```python\nanswer = a.zfill(x)[::2]\nprint(answer)\n```",
        "variables": {
            "a": "\u0915\u0941\u0932\u094d\u092f\u093e \u092e\u0923\u094d\u0921\u0932\u0902 (\u0921\u091a: Grachtengordel) 17 \u0936\u0924\u092c\u094d\u0926\u0938\u094d\u092f \u092a\u094d\u0930\u0938\u093f\u0926\u094d\u0927\u0902 \u092e\u0923\u094d\u0921\u0932\u0902 \u090f\u092e\u094d\u0938\u094d\u091f\u0930\u094d\u0921\u092e\u0938\u094d\u092f \u092c\u093f\u0928\u094d\u0928\u0947\u0902\u0938\u094d\u091f\u0947\u0921\u0938\u094d\u092f \u092a\u0930\u093f\u0938\u0930\u0947 \u0905\u0938\u094d\u0924\u093f\u0964",
            "x": 100
        },
        "query": [
            "Pad {a} with zeros to length {x} and then take every second character.",
            "Zero pad {a} to a length of {x} and select every other character.",
            "Fill {a} with leading zeros to make its length {x} and then extract every second character."
        ],
        "language": "san_Deva"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).ljust(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "1994 \u092e\u0947\u0902, \u0905\u091c\u093c\u0930\u092c\u0948\u091c\u093e\u0928 \u0915\u0947 \u091c\u093e\u0924\u0940\u092f \u0905\u0930\u094d\u092e\u0947\u0928\u093f\u092f\u093e\u0908 \u0928\u093e\u0917\u094b\u0930\u094d\u0928\u094b-\u0915\u0930\u093e\u092c\u093e\u0916 \u0915\u094d\u0937\u0947\u0924\u094d\u0930 \u0928\u0947 \u0905\u091c\u093c\u0930\u093f\u092e\u0928 \u0915\u0947 \u0916\u093f\u0932\u093e\u092b \u092f\u0941\u0926\u094d\u0927 \u0915\u0930\u093f\u0938\u0964",
            "x": "\u0964",
            "y": 100,
            "z": " "
        },
        "query": [
            "Remove trailing {x} from {a} and left-justify it to length {y} with {z}.",
            "Trim trailing {x} from {a} and pad it to the left to length {y} with {z}.",
            "Strip trailing {x} from {a} and align it to the left to length {y} using {z}."
        ],
        "language": "hne_Deva"
    },
    {
        "solution": "```python\nanswer = a.casefold().split(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Ses baies fen\u00eatres vitr\u00e9es et ses minces parois n'auraient pas pu r\u00e9sister longtemps \u00e0 un assaut acharn\u00e9.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Convert {a} to lowercase using casefold and split it by {x} up to {y} times.",
            "Lowercase {a} with casefold and then split it by {x} up to {y} times.",
            "Use casefold to convert {a} to lowercase and split it by {x} up to {y} times."
        ],
        "language": "fra_Latn"
    },
    {
        "solution": "```python\nanswer = a[:x].isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "K\u00e8k moun kapab pa dak\u00f2 men ki mele m.",
            "x": 10
        },
        "query": [
            "Are all characters in the first {x} characters of {a} alphabetic?",
            "Do the first {x} characters of {a} consist only of alphabetic characters?",
            "Is the substring of the first {x} characters in {a} entirely alphabetic?"
        ],
        "language": "hat_Latn"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).encode('ascii', errors='ignore')\nprint(answer)\n```",
        "variables": {
            "a": "\u0c2f\u0c42\u0c30\u0c4b\u0c2a\u0c3f\u0c2f\u0c28\u0c4d \u0c1f\u0c30\u0c4d\u0c15\u0c40 (\u0c2c\u0c3e\u0c32\u0c4d\u0c15\u0c28\u0c4d \u0c26\u0c4d\u0c35\u0c40\u0c2a\u0c15\u0c32\u0c4d\u0c2a\u0c02\u0c32\u0c4b\u0c28\u0c3f \u0c24\u0c42\u0c30\u0c4d\u0c2a\u0c41 \u0c25\u0c4d\u0c30\u0c47\u0c38\u0c4d \u0c32\u0c47\u0c26\u0c3e \u0c30\u0c41\u0c2e\u0c47\u0c32\u0c3f\u0c2f\u0c3e) \u0c26\u0c47\u0c36\u0c02 3% \u0c28\u0c41 \u0c15\u0c32\u0c3f\u0c17\u0c3f \u0c09\u0c02\u0c26\u0c3f.",
            "x": 100,
            "y": " "
        },
        "query": [
            "Left-justify {a} with {x} characters, padded by {y}, and encode it to ASCII ignoring errors.",
            "Pad {a} to the left with {y} until it reaches {x} characters, then encode it to ASCII ignoring errors.",
            "Make {a} left-justified with a total length of {x} characters using {y} as padding, and convert it to ASCII while ignoring errors."
        ],
        "language": "tel_Telu"
    },
    {
        "solution": "```python\nanswer = a.split(x, y)[-1].isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0f51\u0f7c\u0f53\u0f0b\u0f51\u0f42\u0f0b\u0f44\u0f7c\u0f0b\u0f58\u0f0b\u0f62\u0f44\u0f0b \u0f63\u0f66\u0f0b\u0f66\u0fa1\u0f7a\u0f0b\u0f60\u0f51\u0f72\u0f0b\u0f5a\u0f74\u0f0b\u0f42\u0f72\u0f66\u0f0b \u0f5a\u0f7c\u0f44\u0f0b\u0f56\u0f66\u0f92\u0fb2\u0f42\u0f66\u0f0b\u0f40\u0fb1\u0f72\u0f0b\u0f51\u0f7c\u0f53\u0f0b\u0f63\u0f74\u0f0b \u0f51\u0f56\u0f44\u0f0b\u0f60\u0f5b\u0f72\u0f53\u0f0b\u0f58\u0f44\u0f0b\u0f66\u0f74\u0f0b\u0f66\u0fa6\u0f7a\u0f0b\u0f60\u0f56\u0f51\u0f0b\u0f53\u0f72\u0f0b\u0f42\u0f72\u0f0b\u0f51\u0f7c\u0f53\u0f0b\u0f63\u0f66\u0f0b\u0f68\u0f72\u0f53\u0f0d \u0f60\u0f51\u0f72\u0f0b\u0f61\u0f44\u0f0b \u0f5a\u0f7c\u0f44\u0f0b\u0f56\u0f66\u0f92\u0fb2\u0f42\u0f66\u0f0b\u0f51\u0f44\u0f0b\u0f5a\u0f7c\u0f44\u0f0b\u0f63\u0f58\u0f0b\u0f5a\u0f74\u0f0b\u0f63\u0f66\u0f0b\u0f56\u0f62\u0f9f\u0f7a\u0f53\u0f0b\u0f4f\u0f7a\u0f0b \u0f4f\u0f72\u0f0b\u0f62\u0f74\u0f0b\u0f63\u0f74\u0f0b\u0f41\u0f7a\u0f0b\u0f55\u0f53\u0f0b\u0f61\u0f7c\u0f51\u0f0b\u0f53\u0f72\u0f0b\u0f60\u0f51\u0f72\u0f0b\u0f42\u0f72\u0f66\u0f0b\u0f68\u0f72\u0f53\u0f0b\u0f58\u0f66\u0f0d",
            "x": "\u0f0b",
            "y": 5
        },
        "query": [
            "Split {a} by {x} up to {y} times and check if the last segment is a valid identifier.",
            "Divide {a} using {x} as the delimiter up to {y} times and verify if the final part is a valid identifier.",
            "Break {a} by {x} up to {y} times and determine if the last piece is a valid identifier."
        ],
        "language": "dzo_Tibt"
    },
    {
        "solution": "```python\nanswer = a.startswith(x) and a.isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Luksemburg sabe useuha keu teutap jeuet nanggroe netral teutapi di giduek mandua Prang Donya I ng\u00f6n Prang Donya II le Jeurman.",
            "x": "Luksemburg"
        },
        "query": [
            "Determine if {a} starts with {x} and contains only ASCII characters.",
            "Check if {a} begins with {x} and is composed solely of ASCII characters.",
            "Verify whether {a} starts with {x} and includes only ASCII characters."
        ],
        "language": "ace_Latn"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u063a\u0627\u0644\u0628\u0627\u064b \u0645\u0627 \u064a\u062a\u0637\u0644\u0628 \u062a\u0635\u0648\u064a\u0631 \u0627\u0644\u062d\u064a\u0627\u0629 \u0627\u0644\u0628\u0631\u064a\u0629 \u0639\u062f\u0633\u0629 \u062a\u0642\u0631\u064a\u0628 \u0637\u0648\u064a\u0644\u0629\u060c \u0639\u0644\u0649 \u0627\u0644\u0631\u063a\u0645 \u0645\u0646 \u0623\u0646 \u0623\u0634\u064a\u0627\u0621 \u0645\u062b\u0644 \u0633\u0631\u0628 \u0645\u0646 \u0627\u0644\u0637\u064a\u0648\u0631 \u0623\u0648 \u0645\u062e\u0644\u0648\u0642 \u0635\u063a\u064a\u0631 \u062a\u062d\u062a\u0627\u062c \u0639\u062f\u0633\u0627\u062a \u0623\u062e\u0631\u0649.",
            "x": "\u0629."
        },
        "query": [
            "Remove trailing characters in {x} from {a} and check if the result is printable.",
            "Trim the trailing characters specified by {x} from {a} and verify if the outcome is printable.",
            "Check if the string obtained by removing trailing {x} characters from {a} is printable."
        ],
        "language": "acm_Arab"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('utf-8').isdecimal()\nprint(answer)\n```",
        "variables": {
            "a": "\u0647\u0647\u200c\u0631\u0686\u06c6\u0646\u06ce\u06a9 \u0628\u06ce\u060c \u0628\u0627\u0633\u06cc \u0648\u0648\u062a\u06d5\u06a9\u06d5\u06cc \u067e\u06ce\u0634\u0648\u0648\u06cc \u062e\u06c6\u06cc \u06a9\u0631\u062f \u06a9\u06d5 \u0695\u06c6\u0648 \u0628\u06d5\u0631\u0627\u0645\u0628\u06d5\u0631 \u0648\u06d5\u06cc\u062f \u0628\u0631\u06cc\u062a\u06cc \u0628\u0648\u0648\u06d5 \u0644\u06d5 \"\u06cc\u0627\u0633\u0627\u06cc \u062c\u06ce\u06af\u06cc\u0631 \u06a9\u0631\u0627\u0648\u06cc \u062e\u0627\u06a9\u0647\u200c\u06a9\u0647\u200c\" \u0648 \u062c\u06d5\u062e\u062a\u06cc \u06a9\u0631\u062f\u06d5\u0648\u06d5 \u0633\u06d5\u0631 \u06af\u0631\u0646\u06af\u06cc\u06cc \u0695\u06ce\u06a9\u0648\u067e\u06ce\u06a9\u06cc\u06cc \u062d\u0648\u06a9\u0645\u06d5\u06a9\u0627\u0646\u06cc \u062f\u0627\u062f\u06af\u0627\u06cc \u0628\u0627\u06b5\u0627."
        },
        "query": [
            "Encode {a} to UTF-8 and decode it back, then check if all characters are decimals.",
            "Convert {a} to UTF-8 and back, then verify if it consists only of decimal characters.",
            "Transform {a} to UTF-8 encoding and then decode it, and check if it contains only decimal digits."
        ],
        "language": "ckb_Arab"
    },
    {
        "solution": "```python\nanswer = a.count(x) == y.count(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u10d7\u10e3\u10e0\u10e5\u10d4\u10d7\u10d8 \u10db\u10e1\u10dd\u10e4\u10da\u10d8\u10dd\u10e8\u10d8 37-\u10d4 \u10d0\u10d3\u10d2\u10d8\u10da\u10d6\u10d4\u10d0 \u10e5\u10d5\u10d4\u10e7\u10dc\u10d4\u10d1\u10e1 \u10e8\u10dd\u10e0\u10d8\u10e1 \u10e1\u10d8\u10d3\u10d8\u10d3\u10d8\u10d7 \u10d3\u10d0 \u10d8\u10e1 \u10d6\u10dd\u10db\u10d0\u10e8\u10d8 \u10d4\u10e0\u10d7\u10d0\u10d3 \u10d0\u10e6\u10d4\u10d1\u10e3\u10da \u10d7\u10d8\u10d7\u10e5\u10db\u10d8\u10e1 \u10e1\u10d0\u10e4\u10e0\u10d0\u10dc\u10d2\u10d4\u10d7\u10d8\u10e1\u10d0 \u10d3\u10d0 \u10d2\u10d0\u10d4\u10e0\u10d7\u10d8\u10d0\u10dc\u10d4\u10d1\u10e3\u10da \u10e1\u10d0\u10db\u10d4\u10e4\u10dd\u10e1 \u10e3\u10e2\u10dd\u10da\u10d3\u10d4\u10d1\u10d0.",
            "x": "\u10d0",
            "y": "\u10d7\u10e3\u10e0\u10e5\u10d4\u10d7\u10d8 \u10db\u10e1\u10dd\u10e4\u10da\u10d8\u10dd\u10e8\u10d8 37-\u10d4 \u10d0\u10d3\u10d2\u10d8\u10da\u10d6\u10d4\u10d0 \u10e5\u10d5\u10d4\u10e7\u10dc\u10d4\u10d1\u10e1 \u10e8\u10dd\u10e0\u10d8\u10e1 \u10e1\u10d8\u10d3\u10d8\u10d3\u10d8\u10d7 \u10d3\u10d0 \u10d8\u10e1 \u10d6\u10dd\u10db\u10d0\u10e8\u10d8 \u10d4\u10e0\u10d7\u10d0\u10d3 \u10d0\u10e6\u10d4\u10d1\u10e3\u10da \u10d7\u10d8\u10d7\u10e5\u10db\u10d8\u10e1 \u10e1\u10d0\u10e4\u10e0\u10d0\u10dc\u10d2\u10d4\u10d7\u10d8\u10e1\u10d0 \u10d3\u10d0 \u10d2\u10d0\u10d4\u10e0\u10d7\u10d8\u10d0\u10dc\u10d4\u10d1\u10e3\u10da \u10e1\u10d0\u10db\u10d4\u10e4\u10dd\u10e1 \u10e3\u10e2\u10dd\u10da\u10d3\u10d4\u10d1\u10d0."
        },
        "query": [
            "Verify if the number of occurrences of {x} in {a} is the same as in {y}.",
            "Check if {x} appears the same number of times in both {a} and {y}.",
            "Determine if the frequency of {x} in {a} matches its frequency in {y}."
        ],
        "language": "kat_Geor"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).title().swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "Gareng ga bokgoni bo, go tlhaloganya maikaelelo a ba bangwe go botlhokwa thata. Go re letlelela gore re rarabolole go sa tlhomamang go go ka tliswang ke boitshwaro.",
            "x": "go",
            "y": "ke"
        },
        "query": [
            "Replace {x} with {y} in {a}, convert the result to title case, and then swap the case of all characters.",
            "Substitute {x} with {y} in {a}, change the result to title case, and then invert the case of all characters.",
            "Change {x} to {y} in {a}, transform the result to title case, and then reverse the case of all characters."
        ],
        "language": "tsn_Latn"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).encode(encoding=z, errors='replace')\nprint(answer)\n```",
        "variables": {
            "a": "\u1270\u1348\u1325\u122f\u12ca \u1201\u1294\u1273\u12ce\u127d \u1270\u1235\u121b\u121a \u1201\u1294\u1273\u12ce\u127d\u1295 \u1208\u121b\u121d\u1323\u1275 \u12a5\u122d\u1235 \u1260\u12a5\u122d\u1235 \u120a\u1270\u1233\u1230\u1229 \u12ed\u127d\u120b\u1209 \u1363 \u12ed\u1205\u121d \u12a0\u120d\u130c \u1260\u12a8\u134d\u1270\u129b \u1241\u1325\u122d \u12a5\u1295\u12f2\u1328\u121d\u122d \u12eb\u1235\u127d\u1208\u12cb\u120d\u1362",
            "x": 100,
            "y": " ",
            "z": "utf-8"
        },
        "query": [
            "Center {a} in a string of length {x} using {y} as the fill character, then encode the result using {z} encoding, replacing unencodable characters.",
            "Pad {a} to a total length of {x} with {y} as the padding character, then encode it with {z} encoding, replacing any characters that can't be encoded.",
            "Align {a} in the center of a string of length {x} with {y} as the padding character, then encode it using {z} encoding, replacing characters that cannot be encoded."
        ],
        "language": "amh_Ethi"
    },
    {
        "solution": "```python\nanswer = a.strip().islower()\nprint(answer)\n```",
        "variables": {
            "a": "Fi ghudun bidh3 s\u0640anawat ba3da wusul al-mustakshifin al-europiyin, 2inkhafadha 3adad sukkan Tainos bi-shaklin kabir min qibal al-ghuzat al-espan"
        },
        "query": [
            "Check if the stripped version of {a} consists only of lowercase letters.",
            "Determine if the trimmed version of {a} is entirely in lowercase.",
            "Verify if the stripped string {a} is composed solely of lowercase characters."
        ],
        "language": "arb_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].isupper()\nprint(answer)\n```",
        "variables": {
            "a": "D'ions\u00f3dh an Ginear\u00e1l John Cadwalder ionsa\u00ed mearaithe in \u00e9adan an gharast\u00fain Bhriot\u00e1naigh ag Bordentown, chun bac a chur ar aon thr\u00fapa\u00ed athneartaithe.",
            "x": 12,
            "y": 21
        },
        "query": [
            "Check if the substring of {a} from position {x} to {y} is in uppercase.",
            "Determine if the section of {a} from index {x} to {y} is all uppercase.",
            "Verify if the part of {a} between indices {x} and {y} is uppercase."
        ],
        "language": "gle_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().replace(x, y).upper()\nprint(answer)\n```",
        "variables": {
            "a": "Intr\u00e2 in Africa meridionale in machina o l\u2019\u00e9 un m\u00f2ddo fantastico pe vedde tutte e bellesse da region e pe razzonze di p\u00f2sti feua da-e normale rotte turistiche.",
            "x": "e",
            "y": "E"
        },
        "query": [
            "Trim whitespace from {a}, replace {x} with {y}, and convert the result to uppercase.",
            "Remove leading and trailing spaces from {a}, substitute {x} with {y}, and change the text to uppercase.",
            "Strip spaces from the edges of {a}, swap {x} with {y}, and transform the string to uppercase."
        ],
        "language": "lij_Latn"
    },
    {
        "solution": "```python\nanswer = a.capitalize().istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Pasmens, la reduccion del niv\u00e8l de mena\u00e7a a sev\u00e8r significa pas que la mena\u00e7a globala a desaparegut."
        },
        "query": [
            "Check if the capitalized version of {a} follows the title case rules.",
            "Verify if {a} when capitalized adheres to title case conventions.",
            "Determine if the capitalized form of {a} meets the criteria for title case."
        ],
        "language": "oci_Latn"
    },
    {
        "solution": "```python\nanswer = a[::x].islower()\nprint(answer)\n```",
        "variables": {
            "a": "Gayunpaman, noong Hunyo 1956, nasubok ang mga pangako ni Krushchev nang magkagulo sa Poland, kung saan nagreklamo ang mga manggagawa dahil sa kakulangan sa pagkain at pagbabawas sa suweldo, na naging isang malawakang protesta laban sa Komunismo.",
            "x": 3
        },
        "query": [
            "Determine if the characters in {a} taken at steps of {x} are all lowercase.",
            "Check if every {x}th character in {a} is lowercase.",
            "Are all characters in {a} at intervals of {x} lowercase?"
        ],
        "language": "fil_Latn"
    },
    {
        "solution": "```python\nanswer = a.isalnum() and a.istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Dunkaanaqabeenyadhunfaairrattiyknmagaalahangabarbaadameyyuukessattidhaabbachuunilaalchahimmalleharkiisuudanda\u2019a"
        },
        "query": [
            "Check if {a} is alphanumeric and in title case.",
            "Determine if {a} is in title case and contains only alphanumeric characters.",
            "Verify if {a} is a title-cased alphanumeric string."
        ],
        "language": "gaz_Latn"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).strip(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0ab9\u0a9c\u0abe\u0ab0\u0acb \u0ab5\u0ab0\u0acd\u0ab7\u0acb\u0aa5\u0ac0 \u0aa7\u0ab0\u0acd\u0aae\u0a97\u0ac1\u0ab0\u0ac1\u0a93, \u0aa4\u0aa4\u0acd\u0ab5\u0a9c\u0acd\u0a9e\u0abe\u0aa8\u0ac0\u0a93 \u0a85\u0aa8\u0ac7 \u0ab5\u0abf\u0aa6\u0acd\u0ab5\u0abe\u0aa8 \u0ab5\u0ac8\u0a9c\u0acd\u0a9e\u0abe\u0aa8\u0abf\u0a95\u0acb \u0ab8\u0aae\u0aaf\u0aa8\u0acb \u0a85\u0aad\u0acd\u0aaf\u0abe\u0ab8 \u0a95\u0ab0\u0ab5\u0abe\u0aae\u0abe\u0a82 \u0a86\u0ab5\u0ac0 \u0a9b\u0ac7.",
            "x": 100,
            "y": " ",
            "z": "\u0ab9\u0a9c\u0abe\u0ab0\u0acb"
        },
        "query": [
            "Left-justify {a} in a field of {x} characters using {y} as the fill character, then strip characters in {z} from both ends.",
            "Pad {a} to the left with {y} to make its length {x}, then remove characters in {z} from both sides.",
            "Make {a} left-aligned in a string of length {x} with {y} as padding, and then trim characters in {z} from the edges."
        ],
        "language": "guj_Gujr"
    },
    {
        "solution": "```python\nanswer = a.lower().rjust(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Makhumbi na ku fuleriwa ka mabakwa lama nga na gwitsi ma nga wa naswona ku pandzeka ku nga pfaleka.",
            "x": 100,
            "y": "-"
        },
        "query": [
            "Convert {a} to lowercase and right-justify it within {x} characters, using {y} for padding.",
            "Transform {a} to lowercase and align it to the right within {x} characters, padding with {y}.",
            "Change {a} to lowercase and right-align it in a field of {x} characters, using {y} as the padding character."
        ],
        "language": "tso_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('utf-8').title()\nprint(answer)\n```",
        "variables": {
            "a": "Dispiaci ca quannu si fa un DVD, capaci ca puru li burda su' tagghiati, e si lu vidiu \u00e0vi li suttat\u00ectuli troppu vicini \u00f4 funnu d\u00fb discu, nun si v\u00ecdinu sani."
        },
        "query": [
            "Encode {a} to UTF-8 and decode it back, then convert it to title case.",
            "Convert {a} to UTF-8 encoding and back, then change it to title case.",
            "Transform {a} to UTF-8 and back, then make it title case."
        ],
        "language": "scn_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].title().split(z)\nprint(answer)\n```",
        "variables": {
            "a": "Mokano na yango eza ya kopesa bakompani wana boyangeli mingi na bazando; eza kaka makambo ya mbongo.",
            "x": 0,
            "y": 20,
            "z": " "
        },
        "query": [
            "Convert the substring from {x} to {y} in {a} to title case and then split it by {z}.",
            "Transform the substring of {a} from index {x} to {y} to title case and split it using {z}.",
            "Take the substring from {x} to {y} in {a}, convert it to title case, and split it by {z}."
        ],
        "language": "lin_Latn"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Italy ni a awngdan ai lam gaw African mungdan ni kaw re. dai mungdan ni hpe shanhte gaw masha law law hte Mediterranean panglai hpe lai nna Africa hpe aup hkang na re.",
            "x": 4
        },
        "query": [
            "Does the string {a} consist solely of letters after expanding tabs to {x} spaces?",
            "After converting tabs to {x} spaces in the string {a}, does it contain only alphabetic characters?",
            "Is the string {a} made up entirely of letters once tabs are expanded to {x} spaces?"
        ],
        "language": "kac_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('ascii').decode('ascii')\nprint(answer)\n```",
        "variables": {
            "a": "\u0647\u0645\u0627\u0646\u0637\u0648\u0631 \u06a9\u0647 \u062f\u0631 \u0628\u0627\u0644\u0627 \u0630\u06a9\u0631 \u0634\u062f\u060c \u06af\u0631\u0686\u0647 \u06a9\u0644\u0645\u0647 \"\u0627\u0633\u06a9\u06cc\u0645\u0648\" \u062f\u0631 \u0627\u06cc\u0627\u0644\u0627\u062a \u0645\u062a\u062d\u062f\u0647 \u0647\u0645\u0686\u0646\u0627\u0646 \u0642\u0627\u0628\u0644 \u0642\u0628\u0648\u0644 \u0627\u0633\u062a\u060c \u0627\u0645\u0627 \u0628\u0633\u06cc\u0627\u0631\u06cc \u0627\u0632 \u0628\u0627\u0634\u0646\u062f\u06af\u0627\u0646 \u0645\u0646\u0627\u0637\u0642 \u063a\u06cc\u0631 \u0627\u0645\u0631\u06cc\u06a9\u0627\u06cc\u06cc \u0642\u0637\u0628 \u0634\u0645\u0627\u0644\u060c \u0645\u062e\u0635\u0648\u0635\u0627\u064b \u06a9\u0627\u0646\u0627\u062f\u0627\u060c \u0622\u0646 \u0631\u0627 \u062a\u062d\u0642\u06cc\u0631\u0622\u0645\u06cc\u0632 \u0645\u06cc \u062f\u0627\u0646\u0646\u062f."
        },
        "query": [
            "Encode {a} to ASCII and then decode it back to a string.",
            "Convert {a} to ASCII bytes and then back to a string.",
            "Transform {a} to ASCII encoding and then revert it to a string."
        ],
        "language": "prs_Arab"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).split(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0421\u0435\u043f\u0430\u043a, \u043e\u0432\u0430 \u043d\u0435 \u0442\u0440\u0435\u0431\u0430 \u0434\u0430 \u0431\u0438\u0434\u0435 \u0432\u0430\u0448\u0430 \u0433\u0440\u0438\u0436\u0430, \u0437\u0430\u0448\u0442\u043e \u043d\u0430\u0458\u0447\u0435\u0441\u0442\u043e \u0442\u0443\u0440\u0438\u0441\u0442\u0438\u0442\u0435 \u0441\u0435 \u043c\u0435\u0448\u0430\u0430\u0442 \u0437\u0430 \u0434\u0430 \u0441\u0435 \u043d\u0430\u043f\u043e\u043b\u043d\u0430\u0442 \u0441\u0438\u0442\u0435 \u043a\u043e\u043b\u0438.",
            "x": "\u0438.",
            "y": ", "
        },
        "query": [
            "Remove any characters in {x} from the end of {a}, then split the result by {y}.",
            "Trim characters in {x} from the end of {a} and then divide the string by {y}.",
            "Strip characters in {x} from the end of {a} and then split the string using {y}."
        ],
        "language": "mkd_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.title().expandtabs(x)\nprint(answer)\n```",
        "variables": {
            "a": "O ne a amogela tlotla ya \"Mogaka wa Soviet Union\", tlotla e kgolo go di gaisa kwa Soviet Union, go lebogiwa tiro ya gagwe.",
            "x": 4
        },
        "query": [
            "Convert {a} to title case and expand tabs to {x} spaces.",
            "Change {a} to title case and set tab width to {x} spaces.",
            "Transform {a} to title case and replace tabs with {x} spaces."
        ],
        "language": "tsn_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x)[-1].isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u064a\u064f\u0639\u062f \u0633\u0648\u0641\u0648\u0643\u0644\u064a\u0633 \u0648\u0623\u0631\u064a\u0633\u062a\u0648\u0641\u0627\u0646 \u0645\u0646 \u0643\u062a\u0627\u0628 \u0627\u0644\u0645\u0633\u0631\u062d\u064a\u0627\u062a \u0627\u0644\u0645\u0634\u0647\u0648\u0631\u064a\u0646 \u062d\u062a\u0649 \u0627\u0644\u0622\u0646 \u0648\u062a\u0639\u062f \u0645\u0633\u0631\u062d\u064a\u0627\u062a\u0647\u0645\u0627 \u0645\u0646 \u0623\u0639\u0638\u0645 \u0627\u0644\u0623\u0639\u0645\u0627\u0644 \u0641\u064a \u0627\u0644\u0623\u062f\u0628 \u0627\u0644\u0639\u0627\u0644\u0645\u064a.",
            "x": " "
        },
        "query": [
            "Split {a} by {x} and check if the last segment is a valid identifier.",
            "Divide {a} using {x} and verify if the final part is a valid identifier.",
            "Separate {a} with {x} and determine if the last section is a valid identifier."
        ],
        "language": "ars_Arab"
    },
    {
        "solution": "```python\nanswer = a.join(x).isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u897f\u73ed\u7259\u7ee7\u627f\u6743\u4e4b\u6218\u6807\u5fd7\u7740\u7b2c\u4e00\u573a\u4ee5\u6743\u529b\u5e73\u8861\u4e3a\u6838\u5fc3\u95ee\u9898\u7684\u6218\u4e89\u3002",
            "x": [
                "1",
                "2",
                "3"
            ]
        },
        "query": [
            "Join elements of {x} with {a} and check if the result is numeric.",
            "Combine elements of {x} using {a} and verify if the outcome is numeric.",
            "Merge elements of {x} with {a} and determine if the resulting string is numeric."
        ],
        "language": "cmn_Hans"
    },
    {
        "solution": "```python\nanswer = a.isascii() and a.isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "Tasik Onega juga tersambung dengan Volga, maka masih boleh untuk sampai dari Laut Caspian menerusi Rusia."
        },
        "query": [
            "Check if all characters in {a} are ASCII and if {a} is a valid identifier.",
            "Verify if {a} contains only ASCII characters and is a valid identifier.",
            "Determine if {a} is composed entirely of ASCII characters and is a valid identifier."
        ],
        "language": "zsm_Latn"
    },
    {
        "solution": "```python\nanswer = a[::-1].split(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0dbd\u0d9a\u0dd4\u0dab\u0da7 \u0db7\u0dde\u0dad\u0dd2\u0d9a\u0dc0 \u0dc4\u0dcf\u0db1\u0dd2 \u0db1\u0ddc\u0dc0\u0dd3 \u0dba; \u0dc3\u0dcf\u0db8\u0dba \u0dc3\u0dc4 \u0dc4\u0daf\u0dc0\u0dad\u0dca \u0dbd\u0d9a\u0dd4\u0dab\u0dd4\u0dc0\u0dbd\u0dd2\u0db1\u0dca \u0dc4\u0dd0\u0da9 \u0d9a\u0dbb \u0dad\u0dd2\u0db6\u0dd6 \u0d9a\u0dc5\u0dd4 \u0da7\u0dcf\u0db4\u0ddd\u0dbd\u0dd2\u0db1\u0dca \u0db7\u0dcf\u0dc0\u0dd2\u0dad\u0dcf \u0d9a\u0dbb \"O\" \u0dc3\u0dd2\u0db8\u0dca\u0db4\u0dbd\u0dca \"e\" \u0dbd\u0dd9\u0dc3 \u0d9a\u0dd2\u0dba\u0dc0\u0dd9\u0db1 \u0db4\u0dbb\u0dd2\u0daf\u0dd2 \u0dc3\u0d82\u0dc1\u0ddd\u0db0\u0db1\u0dba \u0d9a\u0dd2\u0dbb\u0dd3\u0db8\u0da7 \u0db1\u0dc0\u0dd3\u0d9a\u0dbb\u0dab\u0dba\u0db1\u0dca \u0d9a\u0dbb\u0db1 \u0dbd\u0daf\u0dd3.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Split the reverse of {a} at {x} into a list of substrings, with no more than {y} splits.",
            "Reverse {a}, then split it at {x} into a list of substrings, limiting the splits to {y}.",
            "Take the reverse of {a} and split it at {x} into a list of substrings, with a maximum of {y} splits."
        ],
        "language": "sin_Sinh"
    },
    {
        "solution": "```python\nanswer = a[x:y].swapcase().isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Leitu sezon\u0101 (nu novembra leidz martam) iudi\u0146a leimi\u0146s byus augstuoks i iudi\u0146skrytums izav\u0113rs dramatiskuok.",
            "x": 10,
            "y": 30
        },
        "query": [
            "Determine if the substring of {a} from {x} to {y} with swapped case is composed entirely of ASCII characters.",
            "Check if the substring of {a} from index {x} to {y} with swapped case consists only of ASCII characters.",
            "Verify if the substring of {a} between indices {x} and {y} with swapped case contains only ASCII characters."
        ],
        "language": "ltg_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:].replace(y, z).isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u0644\u0625\u0639\u0644\u0627\u0646 \u0645\u062a\u0627\u0639 \u0627\u0644\u064a\u0648\u0645 \u0632\u0627\u062f \u0623\u0643\u062f \u0639\u0644\u0649 \u0625\u0646\u0648 \u0627\u0644\u062d\u0643\u0648\u0645\u0629 \u0645\u0644\u062a\u0632\u0645\u0629 \u0628\u0643\u0644\u0645\u062a\u0647\u0627 \u0627\u0644\u0644\u064a \u0639\u0637\u0627\u062a\u0647\u0627 \u0641\u064a \u0645\u0627\u0631\u0633 \u0627\u0644\u0639\u0627\u0645 \u0647\u0630\u0627 \u0628\u0627\u0634 \u062a\u0645\u0648\u0644 \u0627\u0644\u0639\u0631\u0628\u0627\u062a \u0627\u0644\u0632\u0627\u064a\u062f\u0629.",
            "x": 10,
            "y": " ",
            "z": "_"
        },
        "query": [
            "Check if the substring of {a} from index {x} to the end, with {y} replaced by {z}, is a valid identifier.",
            "Determine if the substring of {a} starting from index {x}, after replacing {y} with {z}, is a valid identifier.",
            "Is the substring of {a} from index {x} onwards, with {y} replaced by {z}, a valid identifier?"
        ],
        "language": "aeb_Arab"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].upper().find(z)\nprint(answer)\n```",
        "variables": {
            "a": "Zu den m\u00f6glichen langfristigen gesundheitlichen Problemen durch \u00fcberm\u00e4\u00dfigen Alkoholkonsum k\u00f6nnen Lebersch\u00e4den und sogar Blindheit und Tod geh\u00f6ren. Die potenzielle Gefahr wird durch den Konsum von illegal hergestelltem Alkohol erh\u00f6ht.",
            "x": " ",
            "y": 5,
            "z": "\u00dcBERM\u00c4SSIGEN"
        },
        "query": [
            "Split {a} by {x}, convert the {y}-th element to uppercase, and find the first occurrence of {z}.",
            "Divide {a} using {x} as the delimiter, change the {y}-th part to uppercase, and locate the first instance of {z}.",
            "Break {a} at each {x}, transform the {y}-th segment to uppercase, and search for the initial appearance of {z}."
        ],
        "language": "deu_Latn"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).upper()\nprint(answer)\n```",
        "variables": {
            "a": "Tr\u00e8kke\tis\t\u2018n\tboeteactiviteit\twat\tbesteit\tout\twandele\tin\tde\tnatuur,\tmiestal\top\ttr\u00e8kpaajer.",
            "x": 4
        },
        "query": [
            "Convert all tabs in {a} to {x} spaces and then transform the string to uppercase.",
            "Replace all tabs in {a} with {x} spaces and convert the string to uppercase.",
            "Change all tab characters in {a} to {x} spaces and make the string uppercase."
        ],
        "language": "lim_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding='utf-8', errors='replace').decode('utf-8').upper()\nprint(answer)\n```",
        "variables": {
            "a": "Bigaragara nkaho ari bwo buryo bwo gushuka abantu bakizera ko bagomba kwishyura menshi."
        },
        "query": [
            "Encode {a} using UTF-8, replace unencodable characters with a question mark, decode it back to a string, and convert it to uppercase.",
            "Convert {a} to UTF-8 encoding, substitute unencodable characters with a question mark, decode it back, and change it to uppercase.",
            "Transform {a} to UTF-8, replace characters that can't be encoded with a question mark, decode it, and make it uppercase."
        ],
        "language": "kin_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).rjust(z, '0')\nprint(answer)\n```",
        "variables": {
            "a": "\u0422\u0430\u0447\u0435 \u0411\u0435\u0440\u043b\u0438\u043d\u044b\u0448\u0442\u0435 \u0442\u04f1\u043d\u044f\u043c\u0431\u0430\u043b\u044b\u0441\u0435 \u043e\u043b\u0438\u043c\u043f\u0438\u0439 \u043a\u043e\u043c\u0438\u0442\u0435\u0442 \u0438\u0441\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u0438\u0442\u0435\u0442\u044b\u043d \u0437\u0430\u0441\u0435\u0434\u0430\u043d\u0438\u0439\u044b\u0448\u0442\u044b\u0436\u0435 \u043d\u0438\u043d\u0435 \u0432\u0438\u0434-\u0432\u043b\u0430\u043a\u044b\u043c \u043f\u0443\u0440\u0442\u044b\u043c\u043e \u0432\u0435\u0440\u0447 \u0439\u04f1\u043a\u043b\u0435\u043d. \u0420\u0435\u0433\u0431\u0438, \u0430 \u043b\u0430\u0447\u044b\u043c\u0436\u0435 \u0440\u0435\u0433\u0431\u0438-\u044e\u043d\u0438\u043e\u043d, \u0434\u0430 \u0433\u043e\u043b\u044c\u0444, \u043d\u0443\u043d\u044b\u043c \u041e\u043b\u0438\u043c\u043f\u0438\u0439 \u043c\u043e\u0434\u043c\u0430\u0448 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b\u0448 \u043f\u0443\u0440\u0442\u044b\u043c\u044b\u043c \u043e\u043d\u0447\u0430\u0448 \u043c\u0430\u043d\u044b\u043d, \u0441\u043f\u043e\u0440\u0442\u044b\u043d \u043c\u043e\u043b\u043e \u0432\u0438\u0447 \u0442\u04f1\u0440\u043b\u04e7 \u0432\u0438\u0434\u0448\u0435 \u043e\u043b\u043c\u0435\u0448 \u043e\u0439\u044b\u0440\u0435\u043d \u043d\u0430\u043b\u0430\u043b\u0442\u044b\u043d\u044b\u0442.",
            "x": "\u043e",
            "y": "0",
            "z": 300
        },
        "query": [
            "Replace all instances of {x} with {y} in {a} and right-justify the result with zeros to make it {z} characters long.",
            "Substitute every occurrence of {x} with {y} in {a} and pad the result with zeros on the left to ensure it is {z} characters in length.",
            "Change all {x} to {y} in {a} and add leading zeros to make the total length {z} characters."
        ],
        "language": "mhr_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.swapcase().isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Nazolikia, bato mingi bakoyeba ete liponi na bango ya malamu ya ntango molai eza ya kosala elongo na basusu."
        },
        "query": [
            "Check if all characters in {a} are alphabetic after swapping case.",
            "Determine if the swapped case version of {a} contains only alphabetic characters.",
            "Verify if {a} consists solely of alphabetic characters after changing the case."
        ],
        "language": "lin_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].swapcase().encode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "\u00c2 wa voungang\u00f4 sang\u00f6 a fa s\u00f4 mb\u00e9ni kutukutu ti mingong\u00f4 w\u00e2 ti d\u00e4 lapara a t\u00ef na ngoye ti mingong\u00f4 w\u00e2 s\u00f4.",
            "x": 5,
            "y": 20
        },
        "query": [
            "Extract a substring from {x} to {y} in {a}, swap its case, and encode it in UTF-8.",
            "Get the substring from index {x} to {y} in {a}, change its case, and encode it using UTF-8.",
            "Take the substring from {x} to {y} in {a}, invert its case, and encode it in UTF-8 format."
        ],
        "language": "sag_Latn"
    },
    {
        "solution": "```python\nanswer = a.find(x) != -1 and a[::-1].find(x) != -1\nprint(answer)\n```",
        "variables": {
            "a": "\u0d36\u0d40\u0d24\u0d15\u0d3e\u0d32\u0d24\u0d4d\u0d24\u0d4d \u0d05\u0d2a\u0d15\u0d1f\u0d19\u0d4d\u0d19\u0d7e \u0d09\u0d23\u0d4d\u0d1f\u0d3e\u0d35\u0d41\u0d28\u0d4d\u0d28\u0d24\u0d3f\u0d28\u0d4d \u0d2a\u0d4d\u0d30\u0d27\u0d3e\u0d28\u0d15\u0d3e\u0d30\u0d23\u0d02 \u0d35\u0d34\u0d41\u0d15\u0d4d\u0d15\u0d32\u0d41\u0d33\u0d4d\u0d33 \u0d31\u0d4b\u0d21\u0d41\u0d15\u0d33\u0d41\u0d02, \u0d15\u0d7d\u0d2a\u0d1f\u0d35\u0d41\u0d15\u0d33\u0d41\u0d02 (\u0d28\u0d1f\u0d2a\u0d4d\u0d2a\u0d3e\u0d24\u0d15\u0d7e), \u0d2a\u0d4d\u0d30\u0d24\u0d4d\u0d2f\u0d47\u0d15\u0d3f\u0d1a\u0d4d\u0d1a\u0d41\u0d02 \u0d2a\u0d1f\u0d3f\u0d15\u0d33\u0d41\u0d2e\u0d3e\u0d23\u0d4d.",
            "x": "\u0d2a\u0d1f"
        },
        "query": [
            "Check if the substring {x} is present in both {a} and its reverse.",
            "Determine if {x} exists in both {a} and the reverse of {a}.",
            "Verify if {x} can be found in {a} and its reversed version."
        ],
        "language": "mal_Mlym"
    },
    {
        "solution": "```python\nanswer = a.join(x).count(y)\nprint(answer)\n```",
        "variables": {
            "a": " ",
            "x": [
                "\u0410\u0434\u043d\u0443",
                "\u043a\u043e\u043f\u0456\u044e",
                "\u043f\u0430\u043a\u043b\u0430\u0434\u0437\u0456\u0446\u0435",
                "\u045e",
                "\u0447\u0430\u043c\u0430\u0434\u0430\u043d,",
                "\u044f\u0448\u0447\u044d",
                "\u0430\u0434\u043d\u0443",
                "\u043c\u0430\u0439\u0446\u0435",
                "\u045e",
                "\u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u044b\u043c",
                "\u0432\u044b\u0433\u043b\u044f\u0434\u0437\u0435",
                "(\u043f\u0435\u0440\u0430\u0448\u043b\u0456\u0446\u0435",
                "\u0441\u0430\u0431\u0435",
                "\u044d\u043b\u0435\u043a\u0442\u0440\u043e\u043d\u043d\u044b",
                "\u043b\u0456\u0441\u0442",
                "\u0437",
                "\u0434\u0430\u0434\u0430\u0442\u043a\u0430\u043c",
                "\u0430\u043b\u044c\u0431\u043e",
                "\u0437\u0430\u0445\u0430\u0432\u0430\u0439\u0446\u0435",
                "\u044f\u0435",
                "\u045e",
                "\u00ab\u0432\u043e\u0431\u043b\u0430\u043a\u0443\u00bb)."
            ],
            "y": "\u045e"
        },
        "query": [
            "Count the occurrences of {y} in the string formed by joining {x} with {a}.",
            "Determine how many times {y} appears in the string created by joining {x} using {a}.",
            "Find the number of times {y} occurs in the string that results from joining {x} with {a}."
        ],
        "language": "bel_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.strip().istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Ubu bwangalo bwangalwa na bantu babili, kancinga umo uucingilisha umunankwe."
        },
        "query": [
            "Remove leading and trailing whitespace from {a} and check if it follows title case capitalization.",
            "Trim the whitespace from both ends of {a} and verify if it is in title case.",
            "Check if {a}, after removing leading and trailing spaces, is in title case format."
        ],
        "language": "bem_Latn"
    },
    {
        "solution": "```python\nanswer = a[:x].upper()\nprint(answer)\n```",
        "variables": {
            "a": "Terdapat lebih daripada 60 buah kapal pelayaran yang berada di perairan Galapagos - bersaiz dari 8 hingga 100 penumpang.",
            "x": 10
        },
        "query": [
            "Convert the first {x} characters of {a} to uppercase.",
            "Change the first {x} letters of {a} to uppercase.",
            "Make the first {x} characters of {a} uppercase."
        ],
        "language": "zsm_Latn"
    },
    {
        "solution": "```python\nanswer = a.upper().rjust(x, y).istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Matunga abunyi atu alomba ku benyi badi baya mu ditunga diabu, anyi ba mu ditunga badi bamu patuka, bapete bisalu bia masama mashilangane.",
            "x": 100,
            "y": " "
        },
        "query": [
            "Is {a} in title case after converting to uppercase and right-aligning within {x} characters using {y} as padding?",
            "After converting {a} to uppercase and right-aligning it within {x} characters using {y} as padding, is it in title case?",
            "Does {a} become title case after being converted to uppercase and right-aligned within {x} characters with {y} as the padding character?"
        ],
        "language": "lua_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y)[z::w]\nprint(answer)\n```",
        "variables": {
            "a": "\u0924\u0947\u092e \u0935\u094b\u0928 \u095b\u093f, \"\u090f\u092e \u0915\u0925\u093f \u0939\u093f\u0902\u095b \u091b\u0941 \u0928\u093f \u0915\u0939 \u0924\u093f \u092f\u093f \u092e\u0936\u0935\u0930 \u092f\u0940 \u0926\u093f\u0928\u0940 \u095b\u093f \u0939\u092e\u0932\u093e \u092f\u0940 \u091c\u0932\u094d\u0926\u0940 \u0915\u0930\u0928\u0940\u0964",
            "x": "\u095b\u093f",
            "y": "\u091c\u0940",
            "z": 5,
            "w": 3
        },
        "query": [
            "After replacing {x} with {y} in {a}, take every {w}-th character starting from index {z}.",
            "Replace {x} with {y} in {a}, then select every {w}-th character starting at position {z}.",
            "Substitute {x} with {y} in {a} and extract every {w}-th character beginning from index {z}."
        ],
        "language": "kas_Deva"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).encode('ascii', errors='replace')\nprint(answer)\n```",
        "variables": {
            "a": "\u0baa\u0bc1\u0ba4\u0bc8\u0b95\u0bcd\u0b95\u0baa\u0bcd\u0baa\u0b9f\u0bcd\u0b9f \u0baa\u0bc6\u0bb0\u0bc1\u0bae\u0bcd\u0baa\u0bbe\u0bb2\u0bbe\u0ba9 \u0baa\u0bca\u0bb0\u0bc1\u0b9f\u0bcd\u0b95\u0bb3\u0bcd, \u0ba4\u0bc1\u0b9f\u0bcd\u0b9f\u0ba9\u0bcd\u0b95\u0bbe\u0bae\u0bc2\u0ba9\u0bc1\u0b9f\u0ba9\u0bcd \u0ba8\u0ba9\u0bcd\u0b95\u0bc1 \u0baa\u0bbe\u0ba4\u0bc1\u0b95\u0bbe\u0b95\u0bcd\u0b95\u0baa\u0bcd\u0baa\u0b9f\u0bcd\u0b9f\u0bc1\u0bb3\u0bcd\u0bb3\u0ba9, \u0b87\u0ba4\u0bbf\u0bb2\u0bcd \u0bb5\u0bbf\u0bb2\u0bc8\u0bae\u0ba4\u0bbf\u0baa\u0bcd\u0baa\u0bb1\u0bcd\u0bb1 \u0b89\u0bb2\u0bcb\u0b95\u0b99\u0bcd\u0b95\u0bb3\u0bcd \u0bae\u0bb1\u0bcd\u0bb1\u0bc1\u0bae\u0bcd \u0b85\u0bb0\u0bbf\u0baf \u0b95\u0bb1\u0bcd\u0b95\u0bb3\u0bbe\u0bb2\u0bcd \u0b86\u0ba9 \u0b86\u0baf\u0bbf\u0bb0\u0b95\u0bcd\u0b95\u0ba3\u0b95\u0bcd\u0b95\u0bbe\u0ba9 \u0b95\u0bb2\u0bc8\u0baa\u0bcd\u0baa\u0bca\u0bb0\u0bc1\u0b9f\u0bcd\u0b95\u0bb3\u0bcd \u0b89\u0bb3\u0bcd\u0bb3\u0ba9.",
            "x": 200,
            "y": " "
        },
        "query": [
            "Left-justify {a} with {x} characters using {y} for padding, then encode it to ASCII, replacing unencodable characters.",
            "Pad {a} to the left with {y} to make it {x} characters long, then convert it to ASCII, replacing any characters that can't be encoded.",
            "Make {a} left-aligned with a total length of {x} characters using {y} as padding, and encode it to ASCII, substituting unencodable characters."
        ],
        "language": "tam_Taml"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).center(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0c38\u0c02\u0c17\u0c40\u0c24\u0c02\t\u0c24\u0c30\u0c1a\u0c41\u0c17\u0c3e\t\u0c05\u0c27\u0c41\u0c28\u0c3e\u0c24\u0c28\t\u0c15\u0c02\u0c2a\u0c4d\u0c2f\u0c42\u0c1f\u0c30\u0c4d\u0c32\u0c24\u0c4b\t\u0c30\u0c3f\u0c15\u0c3e\u0c30\u0c4d\u0c21\u0c41\t\u0c1a\u0c47\u0c38\u0c3f\t\u0c36\u0c2c\u0c4d\u0c26\u0c3e\u0c32\u0c28\u0c41\t\u0c2a\u0c4d\u0c30\u0c3e\u0c38\u0c46\u0c38\u0c4d\t\u0c1a\u0c47\u0c38\u0c3f\t\u0c2e\u0c3f\u0c15\u0c4d\u0c38\u0c4d\t\u0c1a\u0c47\u0c38\u0c4d\u0c24\u0c3e\u0c30\u0c41.",
            "x": 4,
            "y": 100,
            "z": " "
        },
        "query": [
            "Expand tabs in {a} to {x} spaces and center the result in a string of {y} characters using {z} for padding.",
            "Convert tabs in {a} to {x} spaces, then center the string to a width of {y} characters with {z} as the fill character.",
            "Replace tabs in {a} with {x} spaces and center the resulting string to {y} characters wide using {z} as padding."
        ],
        "language": "tel_Telu"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).upper()\nprint(answer)\n```",
        "variables": {
            "a": "Pi\u013cs\u0101ta ir sv\u0101ta trejom monoteiskom religejom \u2013 judaismam, krist\u012bteibai i islamam \u2013 i kolpoj kai goreigais, religiskais i kulturys centrs.",
            "x": 150,
            "y": "*"
        },
        "query": [
            "Center {a} in a string of length {x} using {y} as padding and convert it to uppercase.",
            "Pad {a} to a total length of {x} with {y} and change it to uppercase.",
            "Make {a} uppercase and center it in a string of length {x} using {y} as the padding character."
        ],
        "language": "ltg_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding='utf-8', errors='replace').decode('utf-8').startswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u05d3\u05d9 \u05d0\u05d9\u05d9\u05d6\u05e2\u05e0\u05e2 \u05e0\u05d0\u05d3\u05dc \u05e9\u05d5\u05d5\u05d9\u05de\u05d8 \u05d0\u05d5\u05d9\u05d1\u05df \u05d0\u05d5\u05d9\u05e3 \u05d3\u05d9 \u05d5\u05d5\u05d0\u05e1\u05e2\u05e8 \u05e6\u05d5\u05dc\u05d9\u05d1 \u05d3\u05d9 \u05d0\u05d5\u05d9\u05d1\u05e2\u05e8\u05e4\u05dc\u05d0\u05da \u05e9\u05e4\u05d0\u05e0\u05d5\u05e0\u05d2.",
            "x": "\u05d3\u05d9"
        },
        "query": [
            "Encode {a} to UTF-8, decode it back, and check if it starts with {x}.",
            "Convert {a} to UTF-8, revert it, and verify if it begins with {x}.",
            "Transform {a} to UTF-8, decode it, and determine if it starts with {x}."
        ],
        "language": "ydd_Hebr"
    },
    {
        "solution": "```python\nanswer = a[x:].zfill(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0e2a\u0e15\u0e23\u0e32\u0e42\u0e1a \u0e19\u0e31\u0e01\u0e1b\u0e23\u0e30\u0e27\u0e31\u0e15\u0e34\u0e28\u0e32\u0e2a\u0e15\u0e23\u0e4c\u0e0a\u0e32\u0e27\u0e01\u0e23\u0e35\u0e01\u0e44\u0e14\u0e49\u0e1a\u0e31\u0e19\u0e17\u0e36\u0e01\u0e0a\u0e37\u0e48\u0e2d\u0e19\u0e31\u0e49\u0e19\u0e44\u0e27\u0e49\u0e43\u0e19\u0e20\u0e32\u0e22\u0e2b\u0e25\u0e31\u0e07 \u0e0b\u0e36\u0e48\u0e07\u0e40\u0e1b\u0e47\u0e19\u0e0a\u0e37\u0e48\u0e2d\u0e17\u0e35\u0e48\u0e40\u0e23\u0e32\u0e23\u0e39\u0e49\u0e08\u0e31\u0e01\u0e43\u0e19\u0e1b\u0e31\u0e08\u0e08\u0e38\u0e1a\u0e31\u0e19 \u0e27\u0e34\u0e2b\u0e32\u0e23\u0e16\u0e39\u0e01\u0e17\u0e33\u0e25\u0e32\u0e22\u0e43\u0e19\u0e04\u0e37\u0e19\u0e40\u0e14\u0e35\u0e22\u0e27\u0e01\u0e31\u0e1a\u0e17\u0e35\u0e48\u0e2d\u0e40\u0e25\u0e47\u0e01\u0e0b\u0e32\u0e19\u0e40\u0e14\u0e2d\u0e23\u0e4c\u0e21\u0e2b\u0e32\u0e23\u0e32\u0e0a\u0e1b\u0e23\u0e30\u0e2a\u0e39\u0e15\u0e34",
            "x": 10,
            "y": 50
        },
        "query": [
            "Take the substring of {a} starting from position {x} and pad it with leading zeros to make its length {y}.",
            "Extract the substring from {a} starting at index {x} and pad it with zeros on the left to ensure it is {y} characters long.",
            "Get the substring of {a} beginning at position {x} and add leading zeros so that its total length is {y}."
        ],
        "language": "tha_Thai"
    },
    {
        "solution": "```python\nanswer = a.isascii() and a.islower()\nprint(answer)\n```",
        "variables": {
            "a": "A m\u00e9s, cada pa\u00eds t\u00e9 lleis espec\u00edfiques descrivint quins objectes d'emerg\u00e8ncia cal portar dins el cotxe."
        },
        "query": [
            "Check if all characters in {a} are ASCII and in lowercase.",
            "Verify that every character in {a} is an ASCII character and is in lowercase.",
            "Determine if all characters in {a} are ASCII and are lowercase letters."
        ],
        "language": "cat_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x, y)[z].isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Schumacher te pran retr\u00e8t li an 2006 apr\u00e8 li te fin ranp\u00f2te s\u00e8t fwa chanpyona F\u00f2mil 1 an te dwe ranplase Felipe Massa ki blese.",
            "x": " ",
            "y": 5,
            "z": 3
        },
        "query": [
            "Determine if the {z}th substring of {a} split by {x} up to {y} times contains only alphabetic characters.",
            "Check if the {z}th segment of {a} obtained by splitting with {x} up to {y} times is purely alphabetic.",
            "Verify whether the {z}th part of {a} after splitting by {x} up to {y} times consists solely of alphabetic characters."
        ],
        "language": "hat_Latn"
    },
    {
        "solution": "```python\nanswer = a.isalnum() and a.isascii()\nprint(answer)\n```",
        "variables": {
            "a": "M\u00f6\u00ef, cath piny eya dhi\u00ebr Nordic ku ace tuaany b\u025b\u0308i, ak\u0254c geet."
        },
        "query": [
            "Check if {a} contains only alphanumeric characters and is composed of ASCII characters.",
            "Verify that {a} is made up of only ASCII alphanumeric characters.",
            "Determine if {a} consists solely of ASCII alphanumeric characters."
        ],
        "language": "dik_Latn"
    },
    {
        "solution": "```python\nanswer = a.capitalize().swapcase().istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Na z\u00e1ver tureck\u00e1 tane\u010dn\u00e1 skupina Fire of Anatolia predstavila svoju show Tr\u00f3ja."
        },
        "query": [
            "Is {a} capitalized, then swapcased, in title case?",
            "After capitalizing and swapcasing {a}, is it in title case?",
            "Does {a} become title case after being capitalized and swapcased?"
        ],
        "language": "slk_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).strip(z).isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u092f\u093e\u0924\u094d\u0930\u0940 \u0907\u0915 \u092c\u0936\u0947\u0936 \u0926\u0947\u0938\u0948 \u0926\u0947 \u092c\u0915\u094d\u0916-\u092c\u0915\u094d\u0916 \u0938\u094d\u0925\u093e\u0928\u0947\u0902 \u0926\u0940 \u092f\u093e\u0924\u094d\u0930\u093e \u0915\u0930\u0940 \u0938\u0915\u0926\u0947 \u0928 \u091c\u093e\u0902 \u0913\u0939\u094d\u200c\u200c \u091b\u095c\u0947 \u0907\u0915 \u0916\u0947\u0924\u0930 \u092a\u0930 \u0927\u094d\u092f\u093e\u0928 \u0915\u0947\u0902\u0926\u0930\u0924 \u0915\u0930\u0940 \u0938\u0915\u0926\u0947 \u0928 \u0964",
            "x": "\u092c\u0915\u094d\u0916",
            "y": "\u0935\u093f\u0936\u0947\u0937",
            "z": " \u0964"
        },
        "query": [
            "Is {a} with {x} replaced by {y} and stripped of {z} alphanumeric?",
            "After replacing {x} with {y} in {a} and stripping {z}, is it alphanumeric?",
            "Does {a} become alphanumeric after replacing {x} with {y} and stripping {z}?"
        ],
        "language": "dgo_Deva"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u0938\u0902\u092d\u0935 \u0905\u091b\u093f \u0915\u0940 \u0905\u0939\u093e\u0902 \u0915\u094b\u0928\u094b \u0938\u093e\u0927\u093e\u0930\u0923 \u092a\u0947\u092f \u092a\u0926\u093e\u0930\u094d\u0925\u0915 \u0916\u094b\u091c \u0915\u090f \u0932\u0940 \u091c\u0947\u0915\u0930 \u0909\u092a\u092f\u094b\u0917 \u0905\u0939\u093e\u0902 \u0926\u0948\u0928\u093f\u0915 \u0926\u093f\u0928\u091a\u0930\u094d\u092f\u093e \u092e\u0947 \u0918\u0941\u0930\u092c\u093e\u0915 \u092c\u093e\u0926 \u091c\u0932\u092a\u093e\u0928 \u092e\u0947 \u0915\u090f \u0938\u0915\u0948\u0924 \u091b\u0940\u0964",
            "x": " ",
            "y": 5
        },
        "query": [
            "Check if the {y}-th substring of {a} split by {x} is printable.",
            "Determine if the {y}-th segment of {a} when split by {x} is a printable string.",
            "Verify if the {y}-th part of {a} obtained by splitting with {x} is printable."
        ],
        "language": "mai_Deva"
    },
    {
        "solution": "```python\nanswer = a.strip(x).join(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0425\u04af\u043d\u0434 \u0437\u044d\u0440\u0433\u0438\u0439\u043d \u0433\u044d\u043c\u0442\u044d\u043b \u0431\u04af\u0440\u0442\u0433\u044d\u0433\u0434\u044d\u044d\u0433\u04af\u0439 \u0447 \u0434\u044d\u043b\u0431\u044d\u0440\u044d\u043b\u0442\u0438\u0439\u043d \u04af\u0435\u044d\u0440 \u0442\u044d\u043d\u0434 \u0431\u0430\u0439\u0441\u0430\u043d \u0434\u043e\u0440 \u0445\u0430\u044f\u0436 \u0442\u0430\u0432\u0430\u043d \u0445\u04af\u043d \u0446\u043e\u0447\u0440\u043e\u043b\u0434 \u0430\u0432\u0442\u0441\u0430\u043d\u0430\u0430\u0440 \u044d\u043c\u0447\u043b\u04af\u04af\u043b\u0441\u044d\u043d \u0431\u0430\u0439\u043d\u0430.",
            "x": "\u0425\u04af\u043d\u0434",
            "y": [
                "\u042d\u043d\u044d",
                "\u0431\u043e\u043b",
                "\u0436\u0438\u0448\u044d\u044d"
            ]
        },
        "query": [
            "Remove leading and trailing characters in {x} from {a} and join the elements of {y} with the result.",
            "Trim characters in {x} from both ends of {a} and concatenate the elements of {y} with the trimmed result.",
            "Strip characters in {x} from the start and end of {a} and merge the elements of {y} using the stripped string."
        ],
        "language": "khk_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x::y].zfill(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0645\u064a\u0633\u06a4\u0627\u0686\u064a \u0627\u062f\u0648\u0644\u0647 \u0648\u0628\u0633\u064a\u062a\u064a \u06a4\u0627\u0644\u064a\u06a0 \u06a4\u0648\u06a4\u0648\u0644\u0631 \u0643\u0627\u062a\u064a\u06ac\u0648 \u0646\u0646 \u062f\u06a4\u0627\u06a9\u0627\u064a \u062f \u0627\u0645\u0631\u064a\u0643 \u062f\u0627\u0646 \u06a4\u0648\u06bd\u0648 \u0665\u0664 \u062c\u0648\u062a\u0627 \u06a4\u0631\u0648\u06a4\u0644 \u0633\u0645\u06a4\u0627\u064a \u0633\u0627\u0639\u062a \u0627\u064a\u0643\u0648.",
            "x": 2,
            "y": 3,
            "z": 20
        },
        "query": [
            "Extract every {y}-th character from {x} to the end of {a} and pad the result with zeros to length {z}.",
            "From {a}, take every {y}-th character starting at index {x} and pad the resulting string with zeros to make its length {z}.",
            "Get every {y}-th character from {a} starting at position {x}, then pad the string with zeros until its length is {z}."
        ],
        "language": "min_Arab"
    },
    {
        "solution": "```python\nanswer = a.strip().rjust(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0905\u0917\u0930 \u092a\u0941\u0937\u094d\u091f\u093f \u0915\u0930\u0947 \u091c\u093e\u0925\u0947,  \u0924 \u092f\u0947 \u0916\u094b\u091c \u0939 \u090f\u0932\u0928 \u0915\u0940 \u092e\u0941\u0938\u093e\u0936\u0940 \u0915\u0947 \u0906\u0920 \u0938\u093e\u0932 \u0915\u0947 \u0916\u094b\u091c \u0932\u093e \u092a\u0942\u0930\u093e \u0915\u0930\u0939\u0940\u0964",
            "x": 80,
            "y": " "
        },
        "query": [
            "Trim spaces from both ends of {a} and right-align it in a field of {x} characters, using {y} as the fill character.",
            "Remove spaces from the start and end of {a}, then right-align it in a field of {x} characters with {y} as the padding character.",
            "Strip spaces from both sides of {a} and right-align it in a field of {x} characters, filling with {y}."
        ],
        "language": "hne_Deva"
    },
    {
        "solution": "```python\nanswer = a[x:y].rjust(z, w).isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "white Sea-Baltic \u0c15\u0c3e\u0c32\u0c35 Onega \u0c38\u0c30\u0c38\u0c4d\u0c38\u0c41, Ladoga \u0c38\u0c30\u0c38\u0c4d\u0c38\u0c41 \u0c07\u0c02\u0c15\u0c3e Saint Petersburg\u0c32 \u0c2e\u0c40\u0c26\u0c41\u0c17\u0c3e \u0c0e\u0c15\u0c4d\u0c15\u0c41\u0c35\u0c17\u0c3e \u0c28\u0c26\u0c41\u0c32\u0c41, \u0c38\u0c30\u0c38\u0c4d\u0c38\u0c41\u0c32 \u0c26\u0c4d\u0c35\u0c3e\u0c30\u0c3e Arctic \u0c2e\u0c39\u0c3e\u0c38\u0c2e\u0c41\u0c26\u0c4d\u0c30\u0c3e\u0c28\u0c4d\u0c28\u0c3f Baltic \u0c38\u0c2e\u0c41\u0c26\u0c4d\u0c30\u0c02\u0c24\u0c4b \u0c15\u0c32\u0c41\u0c2a\u0c41\u0c24\u0c41\u0c02\u0c26\u0c3f.",
            "x": 6,
            "y": 20,
            "z": 30,
            "w": "-"
        },
        "query": [
            "Check if the substring of {a} from index {x} to {y}, right-aligned in a string of length {z} padded with {w}, is printable.",
            "Determine if the substring of {a} from index {x} to {y}, right-justified in a string of length {z} with padding character {w}, is printable.",
            "Verify if the substring of {a} from index {x} to {y}, right-aligned to a length of {z} with padding {w}, is printable."
        ],
        "language": "tel_Telu"
    },
    {
        "solution": "```python\nanswer = a[x:y].zfill(z).isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Pa kumala kwa nkhondo na France, German yikamba kunozgeka kuya karwa nkhondo pa chirwa cha Britain.",
            "x": 3,
            "y": 20,
            "z": 25
        },
        "query": [
            "Check if the substring of {a} from index {x} to {y}, zero-filled to length {z}, consists only of ASCII characters.",
            "Determine if the substring of {a} from index {x} to {y}, padded with zeros to length {z}, contains only ASCII characters.",
            "Verify if the substring of {a} from index {x} to {y}, zero-padded to length {z}, is composed solely of ASCII characters."
        ],
        "language": "tum_Latn"
    },
    {
        "solution": "```python\nanswer = (a.strip(x)).isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u062c\u064e\u0645\u064e\u0627 \u0646\u0652\u063a\u064f\u0648\u0633\u064f \u062f\u064e\u0627 \u062a\u0650\u0649 \u0632\u064e\u0627 \u0646\u064e\u0646\u0652\u0632\u064e\u0627 \u063a\u0650\u0646\u064e\u0632\u0650\u0627\u0646\u0652 (\u0633\u064e\u0648 \u0645\u0651\u064e\u0627\u0631\u064e \u0646\u0652\u062c\u0650\u0628\u0650\u0649 \u062f\u0650\u0649 \u0646\u0652\u063a\u064f\u0648\u0633\u064f \u0632\u0650\u0645\u0652\u0628\u064f\u0644\u064f\u0648\u0646\u064e \u0644\u064f\u0648\u0643\u0652\u062a\u064f\u0648\u064e\u0627 \u062c\u0650\u0650\u064a\u0631\u0650 \u0643\u064f\u0648\u0631\u064e \u0643\u064f\u0648\u0631\u064e \u0627\u064e\u0644\u0652\u0644\u064e\u0646\u0652).",
            "x": "\u062c\u064e\u0645\u064e\u0627 \u0646\u0652\u063a\u064f\u0648\u0633\u064f \u062f\u064e\u0627 \u062a\u0650\u0649 \u0632\u064e\u0627 \u0646\u064e\u0646\u0652\u0632\u064e\u0627 \u063a\u0650\u0646\u064e\u0632\u0650\u0627\u0646\u0652 (\u0633\u064e\u0648 \u0645\u0651\u064e\u0627\u0631\u064e \u0646\u0652\u062c\u0650\u0628\u0650\u0649 \u062f\u0650\u0649 \u0646\u0652\u063a\u064f\u0648\u0633\u064f \u0632\u0650\u0645\u0652\u0628\u064f\u0644\u064f\u0648\u0646\u064e \u0644\u064f\u0648\u0643\u0652\u062a\u064f\u0648\u064e\u0627 \u062c\u0650\u0650\u064a\u0631\u0650 \u0643\u064f\u0648\u0631\u064e \u0643\u064f\u0648\u0631\u064e \u0627\u064e\u0644\u0652\u0644\u064e\u0646\u0652)."
        },
        "query": [
            "Is the string {a} without characters in {x} made up of only letters and numbers?",
            "Does the string {a} without the characters in {x} consist solely of alphanumeric characters?",
            "After removing characters in {x} from {a}, is the resulting string composed only of letters and digits?"
        ],
        "language": "knc_Arab"
    },
    {
        "solution": "```python\nanswer = (a.center(x, y)).istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Ngadto ha pangpang han mga glacier nagbubulag an dagku nga mga bloke, mahuhulog ngan posible umambak o magkaliding pahirayo tikang ha pangpang.",
            "x": 100,
            "y": " "
        },
        "query": [
            "Is the string {a} centered within {x} characters with {y} on both sides in title case?",
            "Does the string {a} appear in title case when centered within {x} characters with {y} padding?",
            "When centered within {x} characters with {y} on both sides, is the string {a} in title case?"
        ],
        "language": "war_Latn"
    },
    {
        "solution": "```python\nanswer = (a.split(x, y))[z]\nprint(answer)\n```",
        "variables": {
            "a": "\u092f\u093f \u0930\u0947\u095b\u094b\u0932\u0942\u0936\u0928 \u091b\u0941 35 mm (3136 mm2 \u092c\u093e \u092e\u0941\u0915\u093e\u092c\u0932 864) \u0928\u0917\u0947\u091f\u093f\u0935 \u0928\u093f\u0936 \u0932\u0917 \u092c\u0917 \u091a\u094b\u0930 \u0918\u0928 \u0926\u093f\u0935\u093e\u0928 \u0964",
            "x": " ",
            "y": 5,
            "z": 3
        },
        "query": [
            "What is the {z}-th element after splitting {a} by {x} with a maximum of {y} splits?",
            "After splitting {a} by {x} up to {y} times, what is the {z}-th element?",
            "If you split {a} by {x} with a limit of {y} splits, what is the {z}-th part?"
        ],
        "language": "kas_Deva"
    },
    {
        "solution": "```python\nanswer = (a.ljust(x, y)).islower()\nprint(answer)\n```",
        "variables": {
            "a": "Saa anomaa a \u0254w\u0254 asaase so na wafu ntakra na w\u0254gye di s\u025b w\u0254nante nan abien so na \u0254w\u0254 b\u2184wer\u03b5w s\u025b Velociraptor.",
            "x": 100,
            "y": " "
        },
        "query": [
            "Is the string {a} left-justified within {x} characters with {y} and all in lowercase?",
            "Does the string {a} become left-justified to {x} characters using {y} and remain in lowercase?",
            "Will the string {a} be left-justified to {x} characters with {y} and be entirely in lowercase?"
        ],
        "language": "twi_Latn_akua1239"
    },
    {
        "solution": "```python\nanswer = (a.capitalize()).isascii()\nprint(answer)\n```",
        "variables": {
            "a": "E Isoe Cook son un stato de isoe in libera asso\u00e7ia\u00e7ion co-a Neuva Zelanda, ch\u2019o sta in Polinesia, into mezo de l\u2019Oceano Pacifico meridionale."
        },
        "query": [
            "Is the capitalized version of {a} made up of only ASCII characters?",
            "Does the capitalized form of {a} consist solely of ASCII characters?",
            "Are all characters in the capitalized version of {a} ASCII?"
        ],
        "language": "lij_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:].lower()\nprint(answer)\n```",
        "variables": {
            "a": "Tudert tawe\u1e25cit d ayen iwa\u025b\u1e5ben i win i tta\u1e6d\u1e6dafen tugniwin, i\u1e25wa\u01e7 zzher, ssbe\u1e5b, tamusni akked le\u1e25wal n l\u025bali.",
            "x": 10
        },
        "query": [
            "Transform the part of {a} starting from position {x} to the end to lowercase.",
            "Convert the substring of {a} from index {x} onwards to lowercase.",
            "Change the section of {a} beginning at index {x} to the end to lowercase."
        ],
        "language": "kab_Latn"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).title()\nprint(answer)\n```",
        "variables": {
            "a": "u-Karno ungumfundisi weSingisi odumile kodwa onempikiswano i owafundisa ngaphansi Kwemfundo Yesimanje Kanye ne-Kind\u2019s Glory owayethi unabafundi abangu-9,000 ekukhuleni komsebenzi wakhe.",
            "x": 150,
            "y": " "
        },
        "query": [
            "Center the string {a} with {y} to make {x} characters and then capitalize the first letter of each word.",
            "Pad the string {a} with {y} to reach a total length of {x} characters and then capitalize the first letter of each word.",
            "Make the string {a} centered with {y} to a length of {x} characters and then capitalize the first letter of each word."
        ],
        "language": "zul_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:].isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "2007 \u092e\u0947\u0902 \u0938\u092c\u092a\u094d\u0930\u093e\u0907\u092e \u092e\u0949\u0930\u094d\u0917\u0947\u091c \u0938\u0902\u0915\u091f \u0915\u0947 \u0926\u094c\u0930\u093e\u0928 \u0928\u0949\u0930\u094d\u0926\u0930\u094d\u0928 \u0930\u0949\u0915 \u0915\u094b \u0907\u0938\u0915\u0947 \u090f\u0915\u094d\u0938\u092a\u094b\u091c\u093c\u0930 \u0915\u0947 \u0915\u093e\u0930\u0923 \u0938\u092e\u0930\u094d\u0925\u0928 \u0915\u0940 \u091c\u093c\u0930\u0942\u0930\u0924 \u0925\u0940.",
            "x": 5
        },
        "query": [
            "Check if the substring of {a} starting from index {x} is printable.",
            "Determine if the portion of {a} from index {x} onwards is printable.",
            "Verify if the segment of {a} beginning at index {x} is printable."
        ],
        "language": "hin_Deva"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding='utf-8', errors='replace').decode('utf-8').isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u0397 \u03b2\u03c1\u03b5\u03c4\u03b1\u03bd\u03b9\u03ba\u03ae \u03b5\u03c6\u03b7\u03bc\u03b5\u03c1\u03af\u03b4\u03b1 The Guardian \u03c5\u03c0\u03bf\u03b4\u03ae\u03bb\u03c9\u03c3\u03b5 \u03cc\u03c4\u03b9 \u03b7 \u03c4\u03c1\u03ac\u03c0\u03b5\u03b6\u03b1 Deutsche \u03ad\u03bb\u03b5\u03b3\u03c7\u03b5 \u03c0\u03b5\u03c1\u03af\u03c0\u03bf\u03c5 \u03c4\u03bf \u03ad\u03bd\u03b1 \u03c4\u03c1\u03af\u03c4\u03bf \u03c4\u03c9\u03bd 1.200 \u03b5\u03b9\u03ba\u03bf\u03bd\u03b9\u03ba\u03ce\u03bd \u03b5\u03c4\u03b1\u03b9\u03c1\u03b5\u03b9\u03ce\u03bd \u03c0\u03bf\u03c5 \u03c7\u03c1\u03b7\u03c3\u03b9\u03bc\u03bf\u03c0\u03bf\u03b9\u03ae\u03b8\u03b7\u03ba\u03b1\u03bd \u03b3\u03b9\u03b1 \u03c4\u03b7\u03bd \u03b5\u03c0\u03af\u03c4\u03b5\u03c5\u03be\u03ae \u03c4\u03bf\u03c5."
        },
        "query": [
            "Encode {a} to UTF-8, decode it back, and check if all characters are numeric.",
            "Convert {a} to UTF-8 encoding, then decode it and verify if it consists solely of numeric characters.",
            "Transform {a} to UTF-8, decode it, and determine if every character is a number."
        ],
        "language": "ell_Grek"
    },
    {
        "solution": "```python\nanswer = a[x].isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0ab5\u0abf\u0ab6\u0acd\u0ab5\u0aa8\u0abe\u0a82 \u0a85\u0aa8\u0ac7\u0a95 \u0aad\u0abe\u0a97\u0acb\u0aae\u0abe\u0a82, \u0ab9\u0abe\u0aa5 \u0ab9\u0ab2\u0abe\u0ab5\u0ab5\u0acb \u0a8f \u0aae\u0ac8\u0aa4\u0acd\u0ab0\u0ac0\u0aaa\u0ac2\u0ab0\u0acd\u0aa3 \u0ab9\u0abe\u0ab5\u0aad\u0abe\u0ab5 \u0a9b\u0ac7, \u0a9c\u0ac7 \"\u0ab9\u0ac7\u0ab2\u0acd\u0ab2\u0acb.\" \u0ab8\u0ac2\u0a9a\u0ab5\u0ac7 \u0a9b\u0ac7.",
            "x": 5
        },
        "query": [
            "Check if the character at index {x} in {a} is a valid identifier.",
            "Determine if the character at position {x} in {a} can be used as an identifier.",
            "Verify if the character at the {x}th position in {a} is a valid identifier."
        ],
        "language": "guj_Gujr"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).title().zfill(y)\nprint(answer)\n```",
        "variables": {
            "a": "Bisa bat lortzeko prozesuan, erregistratu ere egin behar da. Herrialde batzuetan, zeure presentzia eta ostatuaren helbidea erregistratu behar dituzu tokiko agintaritzan.",
            "x": "Bisa",
            "y": 100
        },
        "query": [
            "Remove leading {x} from {a}, convert it to title case, and pad it with zeros to make it {y} characters long.",
            "Strip leading {x} from {a}, change it to title case, and zero-fill it to ensure it is {y} characters in length.",
            "Eliminate leading {x} from {a}, transform it to title case, and add leading zeros to make its length {y} characters."
        ],
        "language": "eus_Latn"
    },
    {
        "solution": "```python\nanswer = a.rsplit(x, y)[z].isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "1957 dii ayay Luxembourg noqotay xubintii aasaastay ururka maanta loo yaqaano Midowga Yurub.",
            "x": " ",
            "y": 3,
            "z": 2
        },
        "query": [
            "Split {a} by {x} into a list, making up to {y} splits from the right, then check if the {z}-th element consists solely of letters.",
            "Divide {a} by {x} into a list, performing up to {y} splits from the right, and verify if the {z}-th element is entirely alphabetic.",
            "Separate {a} by {x} into a list, allowing up to {y} splits from the right, and determine if the {z}-th element contains only letters."
        ],
        "language": "som_Latn"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).encode(encoding=y, errors='replace')\nprint(answer)\n```",
        "variables": {
            "a": "\u0422\u0440\u0438\u0446\u0435\u0440\u0430\u0442\u043e\u043f\u0441 \u0436\u0435\u0443\u0434\u0435\u043d \u0431\u04b1\u0440\u044b\u043d \u0436\u0430\u043f\u044b\u0440\u0430\u049b\u0442\u0430\u0440\u0434\u044b \u0436\u04b1\u043b\u044b\u043f \u0430\u043b\u0443 \u04af\u0448\u0456\u043d \u043a\u04af\u0448\u0442\u0456 \u0442\u04b1\u043c\u0441\u044b\u0493\u044b\u043d \u049b\u043e\u043b\u0434\u0430\u043d\u0430 \u0430\u043b\u0430\u0442\u044b\u043d \u0431\u043e\u043b\u0493\u0430\u043d.",
            "x": "\u043d",
            "y": "kaz_Cyrl"
        },
        "query": [
            "Remove any {x} characters from the end of {a} and encode it in {y} encoding, replacing unencodable characters with a question mark.",
            "Trim all {x} characters from the end of {a} and convert it to {y} encoding, substituting unencodable characters with a question mark.",
            "Strip {x} characters from the end of {a} and encode it using {y} encoding, replacing characters that can't be encoded with a question mark."
        ],
        "language": "kaz_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.swapcase().islower()\nprint(answer)\n```",
        "variables": {
            "a": "Abans de comprovar l'estat de la v\u00edctima, heu d'inspeccionar l'escena a fi de garantir la pr\u00f2pia seguretat."
        },
        "query": [
            "Invert the case of all letters in {a} and check if the result is all lowercase.",
            "Change the case of each character in {a} and verify if the new string is entirely in lowercase.",
            "Flip the case of every letter in {a} and determine if the outcome is completely lowercase."
        ],
        "language": "cat_Latn"
    },
    {
        "solution": "```python\nanswer = a.partition(x)[2].zfill(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u042d\u043b \u0430\u0439\u043d\u0435\u043a\u0442\u0435\u0440\u0434\u0438 \u043e\u0442\u0443\u0440\u0433\u0443\u0447\u0442\u0430\u0440 \u043c\u0435\u043d\u0435\u043d \u0443\u0440\u0433\u0443\u043b\u0430\u043f \u0436\u0430\u0442\u044b\u0448\u0441\u0430 \u0434\u0430, \u0442\u0435\u0440\u0435\u0437\u0435\u043b\u0435\u0440 \u0441\u044b\u043d\u0433\u0430\u043d \u044d\u043c\u0435\u0441.",
            "x": "\u043c\u0435\u043d\u0435\u043d",
            "y": 50
        },
        "query": [
            "Partition {a} at {x} and zero-fill the substring after {x} to length {y}.",
            "Split {a} at {x} and pad the part after {x} with zeros to make its length {y}.",
            "Divide {a} at {x} and fill the segment after {x} with leading zeros to reach length {y}."
        ],
        "language": "kir_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.rjust(x, y).zfill(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0f51\u0f44\u0f74\u0f63\u0f0b\u0f41\u0f44\u0f0b\u0f42\u0f72\u0f0b\u0f42\u0f5e\u0f74\u0f44\u0f0b\u0f60\u0f5b\u0f72\u0f53\u0f0b\u0f51\u0f74\u0f0b\u0f42\u0fb1\u0f74\u0f62\u0f0b\u0f61\u0f42\u0f0b\u0f42\u0f72\u0f0b\u0f66\u0f94\u0f7c\u0f53\u0f0b\u0f63\u0f0b\u0f62\u0f72\u0f47\u0f62\u0fa1\u0f84\u0f0b\u0f56\u0fb2\u0f53\u0f84\u0f66\u0f71\u0f7c\u0f53\u0f84\u0f0b\u0f40\u0fb1\u0f72\u0f0b\u0f62\u0f74\u0f0b\u0f41\u0f42\u0f0b\u0f42\u0f72\u0f0b\u0f60\u0f51\u0f7c\u0f58\u0f66\u0f0b\u0f54\u0f0b\u0f44\u0f7c\u0f66\u0f0b\u0f63\u0f7a\u0f53\u0f0b\u0f58\u0f0b\u0f56\u0fb1\u0f66\u0f0d",
            "x": 100,
            "y": " ",
            "z": 120
        },
        "query": [
            "Right justify {a} within {x} characters, padding with {y}, and then fill with zeros to make it {z} characters long.",
            "Pad {a} to the right with {y} to make it {x} characters wide, then zero-fill to {z} characters.",
            "Make {a} right-aligned in a field of {x} characters using {y} as padding, and then pad with zeros to reach {z} characters."
        ],
        "language": "bod_Tibt"
    },
    {
        "solution": "```python\nanswer = a.strip(x).rjust(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0645\u0645\u0643\u0646 \u0623\u0646 \u0627\u0644\u0639\u0648\u0627\u0645\u0644 \u0627\u0644\u0637\u0628\u064a\u0639\u064a\u0629 \u062a\u062a\u062f\u0627\u062e\u0644 \u0648\u062a\u0639\u0637\u064a \u0638\u0631\u0648\u0641 \u0645\u062b\u0627\u0644\u064a\u0629\u060c \u0627\u0644\u0644\u064a \u063a\u0627\u062a\u062e\u0644\u064a \u0627\u0644\u0637\u062d\u0627\u0644\u0628 \u062a\u0643\u062a\u0627\u0631 \u0628\u0634\u0643\u0644 \u0643\u0628\u064a\u0631.",
            "x": "\u0645",
            "y": 100,
            "z": " "
        },
        "query": [
            "Strip characters in {x} from both ends of {a} and right-justify it with {y} characters, padded by {z}.",
            "Remove characters in {x} from the start and end of {a}, then right-align it to {y} characters using {z} as padding.",
            "Trim characters in {x} from both sides of {a} and align it to the right with a total width of {y} characters, filled with {z}."
        ],
        "language": "ary_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:y].isalpha() and a[x:y].isupper()\nprint(answer)\n```",
        "variables": {
            "a": "Populasi wantah kumpulan organisme antuk spesies kajantenang ring wewidangan geografis sane pastika.",
            "x": 0,
            "y": 8
        },
        "query": [
            "Check if the substring of {a} from {x} to {y} is all alphabetic and uppercase.",
            "Verify if the substring of {a} from index {x} to {y} consists only of uppercase alphabetic characters.",
            "Determine if the portion of {a} between {x} and {y} is entirely made up of uppercase letters."
        ],
        "language": "ban_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).upper().endswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "U.S. Kasamafo dada a na \u0254w\u0254 Newt Gingrich t\u0254\u0254 so abien na \u0254nyaa \u0254ha nkyeky\u025bmu 32.",
            "x": "Newt Gingrich",
            "y": "Kwame Nkrumah",
            "z": "NKYEKY\u0190MU 32."
        },
        "query": [
            "Replace {x} with {y} in {a}, convert it to uppercase, and check if it ends with {z}.",
            "Substitute {x} with {y} in {a}, change it to uppercase, and verify if it ends with {z}.",
            "Swap {x} with {y} in {a}, turn it to uppercase, and see if it ends with {z}."
        ],
        "language": "twi_Latn_akua1239"
    },
    {
        "solution": "```python\nanswer = a.partition(x)[y].upper()\nprint(answer)\n```",
        "variables": {
            "a": "Beemidka waxaa lagu xadiday inuu ilaaliyo karyonka, waxaana la helaa maalinta 1aad ee bisha, afar bilood ayaanu jiraa.",
            "x": " ",
            "y": 2
        },
        "query": [
            "Partition {a} by {x}, take the {y}th element, and convert it to uppercase.",
            "Split {a} using {x} as the delimiter, select the {y}th part, and change it to uppercase.",
            "Divide {a} at {x}, pick the {y}th segment, and transform it to uppercase."
        ],
        "language": "som_Latn"
    },
    {
        "solution": "```python\nanswer = a.rjust(x, y).encode('ascii', errors='ignore')\nprint(answer)\n```",
        "variables": {
            "a": "\u1794\u1785\u17d2\u1785\u17bb\u1794\u17d2\u1794\u1793\u17d2\u1793\u1793\u17c1\u17c7\u200b\u1780\u17bb\u17c6\u1796\u17d2\u1799\u17bc\u1791\u17d0\u179a\u178f\u17d2\u179a\u17bc\u179c\u1794\u17b6\u1793\u1782\u17c1\u1794\u17d2\u179a\u17be \u178a\u17be\u1798\u17d2\u1794\u17b8\u1780\u17c2\u178f\u1798\u17d2\u179a\u17bc\u179c\u200b\u179a\u17bc\u1794\u1797\u17b6\u1796 \u1793\u17b7\u1784\u179c\u17b8\u178a\u17c1\u17a2\u17bc\u1799\u17c9\u17b6\u1784\u1794\u17c9\u17b7\u1793\u1794\u17d2\u179a\u179f\u1794\u17cb\u17d4",
            "x": 100,
            "y": " "
        },
        "query": [
            "Right-align {a} in a field of {x} characters using {y} as padding, then encode it in ASCII ignoring errors.",
            "Pad {a} on the left with {y} to make its total length {x} characters, then convert it to ASCII ignoring errors.",
            "Align {a} to the right within a {x}-character field using {y} as the padding character, and encode it in ASCII while ignoring errors."
        ],
        "language": "khm_Khmr"
    },
    {
        "solution": "```python\nanswer = a[x:y].swapcase().zfill(z)\nprint(answer)\n```",
        "variables": {
            "a": "Estas plej bone vidi sur \u015dipo la lokojn kaj la fa\u016dnon de Galapagoj, tiel same kiel Charles Darwin en 1835.",
            "x": 10,
            "y": 20,
            "z": 15
        },
        "query": [
            "Extract the substring from {x} to {y} in {a}, swap its case, and pad it with zeros to length {z}.",
            "Get the substring from index {x} to {y} in {a}, change its case, and pad it with zeros to make its length {z}.",
            "Take the substring from {x} to {y} in {a}, invert its case, and zero-fill it to a total length of {z}."
        ],
        "language": "epo_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].upper().isspace()\nprint(answer)\n```",
        "variables": {
            "a": "Dagiti ayup ket buklen ti adu a selula. Manganda ken tunawenda iti unegda. Kaaduan nga ayup ket makagaraw.",
            "x": 6,
            "y": 10
        },
        "query": [
            "Verify if the uppercase version of the substring of {a} from {x} to {y} consists only of whitespace.",
            "Check if the substring of {a} from {x} to {y}, when converted to uppercase, is entirely whitespace.",
            "Determine if the uppercase transformation of the substring of {a} from {x} to {y} contains only whitespace characters."
        ],
        "language": "ilo_Latn"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).title().endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "Na a smartphone kaw GPS lam madun ai app hpe jai lang ai gaw na mungdan na pru mat wa ai ten htawng madun lu n amatu loi dik ai hte manu dik ai app langai re.",
            "x": "Na",
            "y": "Re."
        },
        "query": [
            "Remove leading {x} characters from {a}, convert it to title case, and check if it ends with {y}.",
            "Strip leading {x} characters from {a}, change it to title case, and verify if it ends with {y}.",
            "Eliminate leading {x} characters from {a}, transform it to title case, and determine if it ends with {y}."
        ],
        "language": "kac_Latn"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0905\u092e\u0940\u0930\u093e\u0924,\t\u0907\u0924\u093f\u0939\u093e\u0926\t\u090f\u0905\u0930\u0935\u0947\u091c,\t\u0915\u0924\u093e\u0930\t\u090f\u0905\u0930\u0935\u0947\u091c\t\u0906\u0928\u0940\t\u0924\u0941\u0930\u094d\u0915\u0940\t\u090f\u0905\u0930\u0932\u093e\u092f\u0928\u094d\u0938\t\u0939\u094d\u092f\u093e\t\u0935\u093f\u092e\u093e\u0928\t\u0915\u0902\u092a\u0928\u094d\u092f\u093e\u0902\u0928\u0940\t\u0906\u092b\u094d\u0930\u093f\u0915\u0947\u0902\u0924\t\u0906\u092a\u0932\u0947\t\u0938\u0947\u0935\u0947\u091a\u094b\t\u0935\u093f\u0938\u094d\u0924\u093e\u0930\t\u0915\u0947\u0932\u093e,\t\u0906\u0928\u0940\t\u0939\u0947\u0930\t\u092f\u0941\u0930\u094b\u092a\u0940\u092f\t\u0935\u093f\u092e\u093e\u0928\t\u0915\u0902\u092a\u0928\u094d\u092f\u093e\u0902\t\u092a\u0930\u0938\t\u0938\u094d\u092a\u0930\u094d\u0927\u093e\u0924\u094d\u092e\u0915\t\u0926\u0930\u093e\u0928\t\u091c\u093e\u092f\u0924\u094d\u092f\u093e\t\u092e\u0941\u0916\u0947\u0932\t\u0906\u092b\u094d\u0930\u093f\u0915\u0928\t\u0936\u093e\u0930\u093e\u0902\u0928\u0940\t\u0909\u0921\u094d\u0921\u093e\u0923\u093e\u0902\u091a\u094b\t\u092a\u094d\u0930\u0938\u094d\u0924\u093e\u0935\t\u0926\u093f\u0924\u093e\u0924.",
            "x": 4
        },
        "query": [
            "Determine if {a} with tabs expanded to {x} spaces can be used as an identifier.",
            "Check if {a} with tabs replaced by {x} spaces is a valid identifier.",
            "Is {a} with tabs expanded to {x} spaces a valid Python identifier?"
        ],
        "language": "gom_Deva"
    },
    {
        "solution": "```python\nanswer = a.casefold().startswith(x) and a.endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "Sankcije uklju\u010duju financijska ograni\u010denja i zabranu izvoza sirove nafte u Europsku uniju, od kojeg iransko gospodarstvo dobiva 80 % svog inozemnog dohotka.",
            "x": "sankcije",
            "y": "dohotka."
        },
        "query": [
            "Verify if the casefolded version of {a} starts with {x} and ends with {y}.",
            "Check if {a} in lowercase starts with {x} and ends with {y}.",
            "Determine if the lowercase version of {a} begins with {x} and concludes with {y}."
        ],
        "language": "hrv_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].strip()\nprint(answer)\n```",
        "variables": {
            "a": "\u0645\u062f\u062f\u0627\u0646 \u062f\u0648\u0634\u0645\u0648\u0634 \u0648\u0633\u0627\u06cc\u0644\u060c \u0644\u0627\u067e \u062a\u0627\u0632\u0627 \u062a\u0633\u0647\u06cc\u0644\u0627\u062a\u0646 \u0627\u0648\u0644\u0645\u0627\u0645\u0627\u0642\u06cc \u0648 \u0628\u06cc\u0631 \u06af\u0648\u0632\u0646 \u0642\u062f\u06cc\u0645\u06cc \u0627\u0648\u0644\u0645\u0627\u062e \u0627\u0648\u0644\u0627\u0631\u0646 \u0645\u0634\u062e\u0635\u0627\u062a\u0646\u0627\u0646 \u062f\u0644\u0627\u0631.",
            "x": 10,
            "y": 30
        },
        "query": [
            "Trim whitespace from the substring of {a} from {x} to {y}.",
            "Remove leading and trailing spaces from the substring of {a} between {x} and {y}.",
            "Get the substring of {a} from {x} to {y} and strip any surrounding whitespace."
        ],
        "language": "azb_Arab"
    },
    {
        "solution": "```python\nanswer = a.join(x).title()\nprint(answer)\n```",
        "variables": {
            "a": " ",
            "x": [
                "Esei",
                "ta",
                "nifik\u00e1",
                "ku",
                "nos",
                "ta",
                "kapas",
                "di",
                "pronostik\u00e1",
                "ku",
                "\u00e9ksito",
                "lokual",
                "otro",
                "ser",
                "humano",
                "ta",
                "persib\u00ed,",
                "kere,",
                "sa,",
                "dese\u00e1",
                "\u00f2f",
                "ke",
                "hasi."
            ]
        },
        "query": [
            "Join the elements of {x} using {a} as the separator and convert the result to title case.",
            "Combine the items in {x} with {a} as the delimiter and change the output to title case.",
            "Merge the elements in {x} with {a} as the separator and format the result in title case."
        ],
        "language": "pap_Latn"
    },
    {
        "solution": "```python\nanswer = a.isnumeric() and a.isdecimal()\nprint(answer)\n```",
        "variables": {
            "a": "\u05d8\u05d0\u05de\u05d1 \u05e4\u05d5\u05df \u05d8\u05d5\u05d8\u05d0\u05e0\u05db\u05d0\u05de\u05d5\u05df ((KV62. KV62 \u05e7\u05e2\u05df \u05d6\u05d9\u05d9\u05df \u05d3\u05d9 \u05de\u05e2\u05e8\u05e1\u05d8 \u05d1\u05d0\u05e7\u05d0\u05e0\u05d8\u05e2 \u05e4\u05d5\u05df \u05d3\u05d9 \u05d8\u05d0\u05de\u05d1\u05e1 \u05d0\u05d9\u05df \u05d3\u05d9 \u05d8\u05d0\u05dc, \u05d3\u05d9 \u05e1\u05e6\u05e2\u05e0\u05e2 \u05e4\u05d5\u05df \u05d4\u05d0\u05d5\u05d5\u05d0\u05e8\u05d3 \u05e7\u05d0\u05e8\u05d8\u05d0\u05e8'\u05e1 1922\u05d0\u05d5\u05d9\u05e4\u05d3\u05e2\u05e7\u05d5\u05e0\u05d2 \u05e4\u05d5\u05df \u05d3\u05d9 \u05db\u05de\u05e2\u05d8 \u05d2\u05d0\u05e0\u05e6\u05e2 \u05e7\u05e2\u05e0\u05d9\u05d2\u05dc\u05d9\u05db\u05e2 \u05d1\u05d0\u05d2\u05e8\u05d0\u05d1\u05df \u05e4\u05d5\u05df \u05d3\u05d9 \u05d9\u05d5\u05e0\u05d2\u05e2 \u05e7\u05e2\u05e0\u05d9\u05d2."
        },
        "query": [
            "Check if {a} consists only of numeric and decimal characters.",
            "Verify if {a} contains exclusively numeric and decimal digits.",
            "Determine if {a} is made up solely of numeric and decimal characters."
        ],
        "language": "ydd_Hebr"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding='utf-8').decode('utf-8').isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u0f68\u0f0b\u0f62\u0f72\u0f0b\u0f61\u0f72\u0f66\u0f0b\u0f41\u0f7c\u0f44\u0f0b\u0f5a\u0f7c\u0f60\u0f72\u0f0b\u0f58\u0f72\u0f44\u0f0b\u0f60\u0f51\u0f7c\u0f53\u0f0b\u0f58\u0f7a\u0f51\u0f0b\u0f54\u0f60\u0f72\u0f0b\u0f42\u0f53\u0f66\u0f0b\u0f5a\u0f74\u0f63\u0f0b\u0f60\u0f56\u0fb1\u0f74\u0f44\u0f0b\u0f41\u0f74\u0f44\u0f66\u0f0b\u0f53\u0f66\u0f0b\u0f42\u0f53\u0f66\u0f0b\u0f5a\u0f74\u0f63\u0f0b\u0f60\u0f56\u0fb1\u0f7c\u0f62\u0f0b\u0f56\u0f60\u0f72\u0f0b\u0f53\u0f44\u0f0b\u0f51\u0f58\u0f72\u0f42\u0f66\u0f0b\u0f42\u0f66\u0f63\u0f0b\u0f42\u0fb1\u0f72\u0f66\u0f0b\u0f68\u0f72\u0f50\u0f7c\u0f54\u0f72\u0f61\u0f0b\u0f51\u0f44\u0f0b\u0f40\u0f71\u0f7a\u0f53\u0f72\u0f61\u0f60\u0f72\u0f0b\u0f53\u0f44\u0f0b\u0f42\u0f72\u0f0b \"\u0f42\u0f4f\u0f53\u0f0b\u0f60\u0f47\u0f42\u0f66\u0f0b\u0f40\u0fb1\u0f72\u0f0b\u0f66\u0f0b\u0f62\u0f9f\u0f42\u0f66\u0f0b\" \u0f62\u0fa3\u0f58\u0f66\u0f0b\u0f66\u0f74\u0f0b\u0f62\u0f44\u0f0b\u0f64\u0f72\u0f0b\u0f62\u0f92\u0fb1\u0f42\u0f0b\u0f53\u0f66\u0f0b\u0f60\u0f56\u0f62\u0f0b\u0f62\u0fab\u0f66\u0f0b\u0f42\u0f4f\u0f7c\u0f62\u0f0b\u0f58\u0f41\u0f53\u0f0b\u0f66\u0fa4\u0fb1\u0f7c\u0f51\u0f0b\u0f40\u0fb1\u0f72\u0f0b\u0f61\u0f7c\u0f51\u0f0b\u0f54\u0f60\u0f72\u0f0b\u0f42\u0f53\u0f66\u0f0b\u0f5a\u0f74\u0f63\u0f0b\u0f60\u0f51\u0f74\u0f42\u0f0b\u0f45\u0f7a\u0f66\u0f0b\u0f56\u0f64\u0f51\u0f0d"
        },
        "query": [
            "Encode {a} using UTF-8, decode it back, and check if the result is printable.",
            "Convert {a} to UTF-8 bytes, then decode it and verify if the output is a printable string.",
            "Transform {a} to UTF-8 encoding, revert it back, and determine if the final string is printable."
        ],
        "language": "bod_Tibt"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode(x).strip(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0421\u044a\u0431\u0438\u0440\u0430\u043d\u0435\u0442\u043e \u043d\u0430 \u043e\u0440\u0433\u0430\u043d\u0438\u0437\u043c\u0438 \u043e\u0442 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d \u0432\u0438\u0434 \u0432 \u0440\u0430\u043c\u043a\u0438\u0442\u0435 \u043d\u0430 \u0434\u0430\u0434\u0435\u043d \u0433\u0435\u043e\u0433\u0440\u0430\u0444\u0441\u043a\u0438 \u0440\u0430\u0439\u043e\u043d \u0435 \u043f\u043e\u043f\u0443\u043b\u0430\u0446\u0438\u044f.",
            "x": "bul_Cyrl",
            "y": " "
        },
        "query": [
            "Encode {a} to {x} encoding, decode it back, and strip characters in {y} from both ends.",
            "Convert {a} to {x} encoding, revert it, and remove characters in {y} from the start and end.",
            "Transform {a} using {x} encoding, decode it, and trim characters in {y} from both sides."
        ],
        "language": "bul_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x:].split(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0628\u06c7\u0644\u0627\u0631 \u0626\u06c7\u0646\u0686\u06d5 \u0626\u06d5\u067e\u0686\u0649\u0644 \u0626\u06d5\u0645\u06d5\u0633\u060c \u0634\u06c7\u06ad\u0627 \u0628\u06c7 \u0643\u0649\u0686\u0649\u0643 \u064a\u0648\u0644 \u0628\u0649\u0644\u06d5\u0646 \u0626\u06d0\u06af\u0649\u0632\u0644\u0649\u0643\u0643\u06d5 \u0686\u0649\u0642\u0649\u0634 \u0626\u06c8\u0686\u06c8\u0646 \u0626\u0627\u0646\u062a\u0627\u0631\u0643\u062a\u0649\u0643\u0627 \u062a\u0648\u063a\u0631\u0627 \u0633\u0648\u0632\u06c7\u0644\u0645\u0627 \u062a\u06d0\u063a\u0649\u0646\u0649 \u0626\u0627\u064a\u0644\u0649\u0646\u0649\u067e \u0626\u06c7\u0632\u06c7\u0646 \u064a\u0648\u0644 \u0645\u06d0\u06ad\u0649\u0634 \u0643\u06d0\u0631\u06d5\u0643.",
            "x": 10,
            "y": " ",
            "z": 5
        },
        "query": [
            "Split the substring of {a} from index {x} using {y} as the separator, performing at most {z} splits.",
            "From index {x}, split the substring of {a} using {y} as the delimiter, with a maximum of {z} splits.",
            "Using {y} as the separator, split the substring of {a} starting from index {x}, allowing up to {z} splits."
        ],
        "language": "uig_Arab"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding='utf-8', errors='replace').decode('utf-8').find(x)\nprint(answer)\n```",
        "variables": {
            "a": "1649 \u0436\u044b\u043b\u044b \u0428\u0430\u0431\u0434\u0440\u0443\u043d\u0433 \u041d\u0433\u0430\u0432\u0430\u043d\u0433 \u041d\u0430\u043c\u0433\u044c\u044f\u043b \u04e9\u0437\u0456\u043d\u0456\u04a3 \u0442\u0438\u0431\u0435\u0442-\u043c\u043e\u04a3\u0493\u043e\u043b \u043a\u04af\u0448\u0442\u0435\u0440\u0456\u043d\u0435 \u049b\u0430\u0440\u0441\u044b \u0431\u043e\u043b\u0493\u0430\u043d \u0436\u0435\u04a3\u0456\u0441\u0456\u043d \u0435\u0441\u043a\u0435 \u0430\u043b\u0443 \u043c\u0430\u049b\u0441\u0430\u0442\u044b\u043d\u0434\u0430 \u049b\u0430\u043c\u0430\u043b \u0436\u0430\u0441\u0430\u0493\u0430\u043d \u0434\u0435\u043f \u0430\u0439\u0442\u044b\u043b\u0430\u0434\u044b.",
            "x": "\u049b\u0430\u043c\u0430\u043b"
        },
        "query": [
            "Encode {a} to UTF-8, replace unencodable characters with a question mark, decode it back to a string, and find the position of {x}.",
            "Convert {a} to UTF-8, substituting any characters that can't be encoded with a question mark, then decode it and locate the index of {x}.",
            "Transform {a} into UTF-8 encoding, replace any unencodable characters with a question mark, decode it back, and determine the position of {x}."
        ],
        "language": "kaz_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[:y:z].isdecimal()\nprint(answer)\n```",
        "variables": {
            "a": "\u0a39\u0a47\u0a20\u0a3e\u0a02 \u0a24\u0a4b\u0a02 \u0a07\u0a39 \u0a25\u0a4b\u0a5c\u0a3e \u0a1c\u0a3f\u0a39\u0a3e \u0a2e\u0a41\u0a38\u0a3c\u0a15\u0a32 \u0a32\u0a71\u0a17\u0a26\u0a3e \u0a39\u0a48, \u0a05\u0a24\u0a47 \u0a07\u0a39 \u0a07\u0a15 \u0a38\u0a3f\u0a71\u0a27\u0a40 \u0a05\u0a24\u0a47 \u0a2e\u0a41\u0a38\u0a3c\u0a15\u0a32 \u0a1a\u0a5c\u0a4d\u0a39\u0a3e\u0a08 \u0a39\u0a48, \u0a2a\u0a30 \u0a2a\u0a42\u0a30\u0a40 \u0a24\u0a30\u0a4d\u0a39\u0a3e\u0a02 \u0a24\u0a70\u0a26\u0a30\u0a41\u0a38\u0a24 \u0a35\u0a3f\u0a05\u0a15\u0a24\u0a40\u0a06\u0a02 \u0a32\u0a17\u0a2d\u0a17 45 \u0a2e\u0a3f\u0a70\u0a1f\u0a3e\u0a02 \u0a35\u0a3f\u0a71\u0a1a \u0a07\u0a38 '\u0a24\u0a47 \u0a1a\u0a5c\u0a4d\u0a39\u0a28 \u0a26\u0a47 \u0a2f\u0a4b\u0a17 \u0a39\u0a41\u0a70\u0a26\u0a47 \u0a39\u0a28\u0964",
            "y": 50,
            "z": 5
        },
        "query": [
            "Check if the first {y} characters of {a}, selecting every {z}-th character, are all decimals.",
            "Verify if every {z}-th character in the first {y} characters of {a} is a decimal.",
            "Determine if the first {y} characters of {a}, taking every {z}-th character, consist entirely of decimal digits."
        ],
        "language": "pan_Guru"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='ignore').decode(x).isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u0428\u043a\u0435\u0448\u043e\u0442\u0430\u043d \u0437\u0430\u043a\u043e\u043d\u043e\u043f\u0440\u043e\u0435\u043a\u0442\u044b\u043c \u0421\u0430\u043d-\u041f\u0430\u0443\u043b\u0443\u043d \u043e\u043d\u0447\u044b\u0447\u0441\u043e \u043c\u044d\u0440\u0436\u0435 \u041c\u0430\u0440\u0442\u0430 \u0421\u0443\u043f\u043b\u0438\u0441\u0438 \u044f\u043c\u0434\u044b\u043b\u0435\u043d. \u0422\u0443\u0448\u043a\u043e \u0442\u04e7\u0440\u043b\u0430\u0442\u044b\u043c\u0430\u0448\u044b\u043c \u043f\u0443\u0440\u0442\u044b\u043c\u0430\u043d \u0442\u0435\u043c\u043b\u044b\u043c\u0435 \u0437\u0430\u043a\u043e\u043d\u043e\u043f\u0440\u043e\u0435\u043a\u0442 \u044b\u043d\u0434\u0435 \u0420\u043e\u0431\u0435\u0440\u0442\u043e \u0414\u0436\u0435\u0444\u0444\u0435\u0440\u0441\u043e\u043d\u044b\u043d \u043a\u0438\u0434\u044b\u0448\u0442\u044b\u0436\u0435 \u0443\u043b\u0435\u0448.",
            "x": "mhr_Cyrl"
        },
        "query": [
            "Encode {a} using {x} encoding, ignore errors, decode it back, and check if the result is numeric.",
            "Using {x} encoding, encode {a}, ignore any errors, decode it back, and verify if the result is a numeric value.",
            "Check if the result is numeric after encoding {a} with {x} encoding, ignoring errors, and decoding it back."
        ],
        "language": "mhr_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x::z].rjust(y, w)\nprint(answer)\n```",
        "variables": {
            "a": "\u092c\u0930\u094d\u0926\u093f\u092f\u093e \u0915\u0947 \u092a\u0942\u0930\u0941\u092c \u0926\u093f\u0938\u093e \u0915\u0947 \u090f\u0915\u0920\u0928 \u0918\u093e\u0924 \u092e\u0947 \u0905\u0902\u0917\u094d\u0930\u0947\u091c\u092e\u0928 \u0907\u0924\u093e\u0932\u0935\u0940 \u0926\u0938\u0935\u0940\u0902 \u0938\u0947\u0928\u093e \u0915\u0947 \u0905\u092d\u093f\u092f\u0902\u0924\u093e\u092e\u0928 \u0915\u0947 \u092a\u0930\u092e\u0941\u0916 \u0932\u093e\u0938\u094d\u091f\u0941\u091a\u0940 \u0932 \u0927\u0930 \u0926\u093e\u0930\u093f\u0928\u0964",
            "x": 5,
            "y": 20,
            "z": 3,
            "w": " "
        },
        "query": [
            "From {a}, take every {z}-th character starting at index {x}, then right-justify the result within {y} characters using {w} as the padding character.",
            "Extract every {z}-th character from {a} starting at index {x}, then pad the result on the left with {w} to make it {y} characters long.",
            "Select every {z}-th character from {a} beginning at position {x}, and right-align the result in a field of width {y} using {w} as the fill character."
        ],
        "language": "hne_Deva"
    },
    {
        "solution": "```python\nanswer = a.split(x)[0].isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u054d\u0561 \u0564\u056a\u057e\u0561\u0580\u0561\u0581\u0576\u0578\u0582\u0574 \u0567 \u0578\u0579 \u0569\u0561\u0576\u056f\u0561\u0580\u056a\u0565\u0584 \u056d\u0578\u0577\u0578\u0580\u0561\u0581\u0576\u0578\u0572 \u0578\u057d\u057a\u0576\u0575\u0561\u056f\u0576\u0565\u0580\u056b\u055d \u0561\u057c\u0561\u0576\u0581 \u056c\u0578\u0582\u057d\u0561\u0580\u0571\u0561\u056f\u0574\u0561\u0576 \u0585\u0563\u057f\u0561\u0563\u0578\u0580\u056e\u0578\u0582\u0574\u0568 \u0581\u0561\u056e\u0580 \u056c\u0578\u0582\u057d\u0561\u057e\u0578\u0580\u0578\u0582\u0569\u0575\u0561\u0576 \u057a\u0561\u0575\u0574\u0561\u0576\u0576\u0565\u0580\u0578\u0582\u0574\u0589",
            "x": " "
        },
        "query": [
            "Split {a} by {x} and check if the first segment contains only alphanumeric characters.",
            "Divide {a} using {x} and verify if the initial part is alphanumeric.",
            "Separate {a} at {x} and determine if the first section is composed solely of alphanumeric characters."
        ],
        "language": "hye_Armn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).isdecimal()\nprint(answer)\n```",
        "variables": {
            "a": "\u0411\u0430\u0440\u043e\u0438 \u0438\u043d \u0437\u0430\u0440\u0443\u0440\u0438\u044f\u0442\u0438 \u043f\u0443\u0440 \u043a\u0430\u0440\u0434\u0430\u043d\u0438 \u0448\u0430\u043a\u043b\u0438 \u043c\u0430\u0445\u0441\u0443\u0441 \u0434\u0430\u0440 \u043f\u043e\u043b\u0438\u0441\u0438 \u043c\u0430\u04b3\u0430\u043b\u043b\u04e3 \u0451 \u0438\u043d \u043a\u0438 \u0442\u0430\u0448\u0440\u0438\u0444 \u043e\u0432\u0430\u0440\u0434\u0430\u043d \u0431\u0430 \u0445\u0430\u0434\u0430\u043c\u043e\u0442\u0438 \u043c\u0443\u04b3\u043e\u04b7\u0438\u0440\u0430\u0442\u04e3 \u0431\u0430 \u043c\u0438\u0451\u043d \u043c\u0435\u043e\u044f\u0434.",
            "x": " "
        },
        "query": [
            "After removing leading and trailing {x} from {a}, is the result a decimal number?",
            "Is the string {a} a decimal number after stripping the characters {x} from both ends?",
            "Does the string {a} become a decimal number after trimming {x} from its start and end?"
        ],
        "language": "tgk_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.partition(x)[y].isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u0917\u094d\u0932\u0947\u0936\u093f\u092f\u0930 \u0938\u094d\u0925\u093f\u0930 \u0928\u090f \u091b\u0932\u0908, \u0932\u0947\u0915\u093f\u0928 \u092a\u0939\u093e\u0921\u093c \u0938\u0947 \u0928\u0940\u091a\u093e \u092c\u0939\u0908 \u0939\u0908\u0964 \u092f\u0947\u0907\u0938\u0947 \u0926\u0930\u093e\u0930, \u0926\u0930\u093e\u0930 \u092a\u0921\u093c \u091c\u0924\u0908, \u091c\u0947 \u092c\u0930\u094d\u092b \u0915\u0947 \u092a\u0941\u0932 \u0926\u094d\u0935\u093e\u0930\u093e \u0905\u0938\u094d\u092a\u0937\u094d\u091f \u0939\u094b \u0938\u0915\u0908 \u0939\u0908\u0964",
            "x": " ",
            "y": 2
        },
        "query": [
            "Partition {a} by {x} and check if the {y}-th part is numeric.",
            "Split {a} using {x} and determine if the {y}-th segment is a number.",
            "Divide {a} at {x} and verify if the {y}-th section is numeric."
        ],
        "language": "mag_Deva"
    },
    {
        "solution": "```python\nanswer = a[x:y].replace(z, '').isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u0c05\u0c27\u0c3f\u0c15\u0c3e\u0c30\u0c41\u0c32\u0c41 \u0c28\u0c47\u0c1f\u0c3f \u0c05\u0c30\u0c46\u0c38\u0c4d\u0c1f\u0c4d\u200c \u0c27\u0c4d\u0c30\u0c41\u0c35\u0c40\u0c15\u0c30\u0c23 \u0c17\u0c41\u0c30\u0c3f\u0c02\u0c1a\u0c3f \u0c24\u0c2a\u0c4d\u0c2a, \u0c05\u0c27\u0c3f\u0c15\u0c3e\u0c30\u0c3f\u0c15\u0c02\u0c17\u0c3e \u0c0e\u0c15\u0c4d\u0c15\u0c41\u0c35 \u0c38\u0c2e\u0c3e\u0c1a\u0c3e\u0c30\u0c02 \u0c07\u0c35\u0c4d\u0c35\u0c32\u0c47\u0c26\u0c41.",
            "x": 10,
            "y": 20,
            "z": "\u0c3f"
        },
        "query": [
            "Take the substring of {a} from index {x} to {y}, remove all occurrences of {z}, and check if the result is all digits.",
            "Extract the part of {a} between indices {x} and {y}, eliminate every {z}, and verify if the remaining string consists only of digits.",
            "Get the substring from {a} starting at index {x} and ending at index {y}, delete all {z} characters, and determine if the final string is numeric."
        ],
        "language": "tel_Telu"
    },
    {
        "solution": "```python\nanswer = a.strip().title().swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "Maroochydore sau \u0111\u00f3 \u0111\u00e3 \u0111\u00e1nh b\u1ea1i Caboolture trong tr\u1eadn Chung k\u1ebft S\u01a1 b\u1ed9."
        },
        "query": [
            "Remove leading and trailing spaces from {a}, capitalize the first letter of each word, and then swap the case of all letters.",
            "Trim the spaces around {a}, make the first letter of each word uppercase, and then invert the case of all characters.",
            "Strip spaces from the beginning and end of {a}, capitalize each word's first letter, and then toggle the case of all letters."
        ],
        "language": "vie_Latn"
    },
    {
        "solution": "```python\nanswer = a[y:].zfill(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u062f\u0646\u064a\u0627 \u062c\u064a \u0633\u0680\u0646\u064a \u0627\u0645\u064a\u0631 \u0645\u0627\u06bb\u0647\u0646 \u0645\u0627\u0646 \u0647\u06aa\u060c \u0627\u064a\u0644\u0646 \u062e\u0628\u0631 \u062a\u062d\u062a \u067e\u0646\u0647\u0646\u062c\u064a \u06af\u0647\u06bb\u064a \u062f\u0648\u0644\u062a \u0628\u062d\u0631\u064a \u06b3\u0648\u0644\u0627 \u06fe \u0633\u064a\u0699\u067e \u06aa\u0626\u064a \u06fd \u0633\u0684\u064a \u0632\u0646\u062f\u06af\u064a \u0644\u0699\u0627\u0626\u064a \u0633\u0627\u0646 \u062f\u0644\u0686\u0633\u067e\u064a \u0631\u06a9\u0646\u062f\u0699 \u0645\u0648\u0633\u0627\u0634\u064a \u06a9\u064a \u06b3\u0648\u0644\u06bb \u062c\u064a \u067e\u0646\u0647\u0646\u062c\u064a \u062c\u0633\u062a\u062c\u0648 \u0634\u0631\u0648\u0639 \u06aa\u0626\u064a.",
            "y": 10,
            "z": 50
        },
        "query": [
            "Take the substring of {a} starting from position {y} and pad it with zeros to make it {z} characters long.",
            "Extract the substring from {a} starting at index {y} and pad it with leading zeros to ensure it is {z} characters in length.",
            "Get the substring of {a} beginning at position {y} and add leading zeros to make its length {z} characters."
        ],
        "language": "snd_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:y].encode('ascii', errors='ignore')\nprint(answer)\n```",
        "variables": {
            "a": "\u03a5\u03c0\u03ac\u03c1\u03c7\u03bf\u03c5\u03bd \u03b4\u03b9\u03ac\u03c6\u03bf\u03c1\u03b5\u03c2 \u03b4\u03bf\u03bc\u03ad\u03c2 \u03bc\u03b1\u03c4\u03b9\u03ce\u03bd, \u03c0\u03bf\u03c5 \u03b5\u03af\u03bd\u03b1\u03b9 \u03c0\u03bf\u03bb\u03cd\u03c0\u03bb\u03bf\u03ba\u03b5\u03c2 \u03b1\u03bd\u03ac\u03bb\u03bf\u03b3\u03b1 \u03bc\u03b5 \u03c4\u03b9\u03c2 \u03b1\u03c0\u03b1\u03b9\u03c4\u03ae\u03c3\u03b5\u03b9\u03c2 \u03c4\u03bf\u03c5 \u03bf\u03c1\u03b3\u03b1\u03bd\u03b9\u03c3\u03bc\u03bf\u03cd.",
            "x": 0,
            "y": 10
        },
        "query": [
            "Encode the substring of {a} from {x} to {y} to ASCII, ignoring errors.",
            "Convert the substring of {a} from index {x} to {y} to ASCII, ignoring any errors.",
            "Transform the slice of {a} from {x} to {y} into ASCII, while ignoring errors."
        ],
        "language": "ell_Grek"
    },
    {
        "solution": "```python\nanswer = a[x:].encode('utf-8').decode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "\u5eab\u514b\u7fa4\u5cf6\u4fc2\u4e00\u500b\u540c\u7d10\u897f\u862d\u81ea\u7531\u806f\u5408\u5605\u5cf6\u570b\uff0c\u4f4d\u65bc\u5357\u592a\u5e73\u6d0b\u4e2d\u90e8\u5605\u6ce2\u5229\u5c3c\u897f\u4e9e\u3002",
            "x": 5
        },
        "query": [
            "Encode the substring of {a} starting from position {x} to UTF-8 and then decode it back.",
            "Take the substring of {a} from index {x}, encode it in UTF-8, and then decode it back.",
            "From index {x} in {a}, encode the substring to UTF-8 and decode it back."
        ],
        "language": "yue_Hant"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding='utf-8').decode('utf-8').endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0428\u0443\u043d\u044b\u04bb\u044b \u04a1\u044b\u0499\u044b\u04a1: \u0431\u043e\u0440\u043e\u043d\u0493\u043e \u0437\u0430\u043c\u0430\u043d\u0434\u0430\u0440\u0499\u0430 \u0443\u043b \u0431\u0438\u043a \u043c\u04e9\u04bb\u0438\u043c \u0442\u0438\u043f \u04bb\u0430\u043d\u0430\u043b\u043c\u0430\u0493\u0430\u043d \u04bb\u04d9\u043c \u0431\u043e\u0440\u043e\u043d\u0493\u043e \u0431\u0430\u0442\u0448\u0430\u043b\u0430\u0440\u0499\u044b\u04a3 \u0438\u0441\u0435\u043c\u043b\u0435\u043a\u0442\u04d9\u0440\u0435\u043d\u0435\u04a3 \u043a\u04af\u0431\u0435\u04bb\u0435\u043d\u04d9 \u044f\u0499\u044b\u043b\u043c\u0430\u0493\u0430\u043d.",
            "x": "\u044f\u0499\u044b\u043b\u043c\u0430\u0493\u0430\u043d."
        },
        "query": [
            "Encode {a} to UTF-8, decode it back, and check if it ends with {x}.",
            "Convert {a} to UTF-8 encoding, revert it, and verify if it concludes with {x}.",
            "Transform {a} to UTF-8, decode it, and determine if it finishes with {x}."
        ],
        "language": "bak_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.title().zfill(x)\nprint(answer)\n```",
        "variables": {
            "a": "Za vsakim vogalom si zasut z begajo\u010do mno\u017eico predpla\u010dni\u0161kih telefonskih kartic, ki jih je mogo\u010de uporabiti tako za javne pla\u010dilne telefone kot za navadne telefone.",
            "x": 150
        },
        "query": [
            "What is the result of converting {a} to title case and then padding it with zeros to make its length {x}?",
            "How does {a} look after being converted to title case and zero-padded to a length of {x}?",
            "If you convert {a} to title case and pad it with zeros to reach a length of {x}, what will the result be?"
        ],
        "language": "slv_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().replace(x, y).istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Elke buurtwinkel is gevuld met een verwarrend assortiment aan prepaidtelefoonkaarten die kunnen worden gebruikt in telefooncellen of voor gewone telefoons.",
            "x": "buurtwinkel",
            "y": "winkel"
        },
        "query": [
            "Is {a} in title case after stripping whitespace and replacing {x} with {y}?",
            "After removing whitespace and replacing {x} with {y}, is {a} in title case?",
            "Does {a} become title case after trimming spaces and substituting {x} with {y}?"
        ],
        "language": "nld_Latn"
    },
    {
        "solution": "```python\nanswer = a.join(x).zfill(y)\nprint(answer)\n```",
        "variables": {
            "a": " ",
            "x": [
                "\u0c87\u0c82\u0ca6\u0cc1",
                "\u0ca8\u0cbe\u0cb5\u0cc1",
                "\u0ca4\u0cbf\u0cb3\u0cbf\u0ca6\u0cbf\u0cb0\u0cc1\u0cb5",
                "\u0cb9\u0cc6\u0cb8\u0cb0\u0ca8\u0ccd\u0ca8\u0cc1",
                "\u0c97\u0ccd\u0cb0\u0cc0\u0c95\u0ccd",
                "\u0c87\u0ca4\u0cbf\u0cb9\u0cbe\u0cb8\u0c95\u0cbe\u0cb0",
                "\u0cb8\u0ccd\u0c9f\u0ccd\u0cb0\u0cbe\u0cac\u0ccb",
                "\u0ca8\u0c82\u0ca4\u0cb0",
                "\u0cb9\u0cc6\u0cb8\u0cb0\u0cbf\u0cb8\u0cbf\u0ca6\u0cb0\u0cc1",
                "\u0c97\u0ccd\u0cb0\u0cc7\u0c9f\u0ccd",
                "\u0c85\u0cb2\u0cc6\u0c95\u0ccd\u0cb8\u0cbe\u0c82\u0ca1\u0cb0\u0ccd",
                "\u0c9c\u0ca8\u0cbf\u0cb8\u0cbf\u0ca6",
                "\u0ca6\u0cbf\u0ca8\u0cb5\u0cc7",
                "\u0ca6\u0cc7\u0cb5\u0cb8\u0ccd\u0ca5\u0cbe\u0ca8\u0cb5\u0ca8\u0ccd\u0ca8\u0cc1",
                "\u0ca7\u0ccd\u0cb5\u0c82\u0cb8",
                "\u0cae\u0cbe\u0ca1\u0cb2\u0cbe\u0caf\u0cbf\u0ca4\u0cc1"
            ],
            "y": 100
        },
        "query": [
            "Join the elements of {x} with {a} and pad the result with zeros to make its length {y}.",
            "Combine the items in {x} using {a} as a separator and pad with zeros to ensure the total length is {y}.",
            "Merge the elements in {x} with {a} and add leading zeros to make the length {y}."
        ],
        "language": "kan_Knda"
    },
    {
        "solution": "```python\nanswer = a.strip().upper().count(x)\nprint(answer)\n```",
        "variables": {
            "a": "V\u0113l bez balto smil\u0161u pludmal\u0113m un kalnu ainav\u0101m, \u0161aj\u0101 valst\u012b atrodas eiropie\u0161u vec\u0101k\u0101 pils\u0113ta Amerikas kontinentos, kas \u0161obr\u012bd ir da\u013ca no Santodomingo.",
            "x": "A"
        },
        "query": [
            "Trim whitespace from {a}, convert it to uppercase, and count the occurrences of {x}.",
            "Remove leading and trailing spaces from {a}, change it to uppercase, and find how many times {x} appears.",
            "Strip spaces from {a}, turn it into uppercase letters, and count the number of times {x} occurs."
        ],
        "language": "lvs_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].center(z, ' ')\nprint(answer)\n```",
        "variables": {
            "a": "\u062a\u0639\u062f \u0633\u064a\u0631\u064a\u0646\u0627 \u0645\u062d\u0637\u0651\u0629 \u0627\u0644\u062d\u0631\u0633 \u0627\u0644\u0648\u062d\u064a\u062f\u0629 \u0627\u0644\u0644\u064a \u062a\u0642\u062f\u0651\u0645 \u0627\u0644\u0633\u0651\u0643\u0646 \u0641\u064a \u0635\u0627\u0644\u0629 \u0646\u0648\u0645 \u0645\u0634\u062a\u0631\u0643\u0629 \u0648\u0648\u062c\u0628\u0627\u062a \u0633\u0627\u062e\u0646\u0629 \u0628\u0627\u0644\u0625\u0636\u0627\u0641\u0629 \u0625\u0644\u0649 \u0627\u0644\u062a\u0651\u062e\u064a\u064a\u0645. \u062a\u0642\u062f\u0651\u0645 \u0645\u062d\u0637\u0651\u0627\u062a \u0644\u0627 \u0644\u064a\u0648\u0646\u0627 \u0648\u0633\u0627\u0646 \u0628\u064a\u062f\u0631\u064a\u0644\u0644\u0648 \u0648\u0644\u0648\u0633 \u0628\u0627\u062a\u0648\u0633 \u0627\u0644\u062a\u0651\u062e\u064a\u064a\u0645 \u0628\u0633 \u0628\u062f\u0648\u0646 \u062e\u062f\u0645\u0629 \u0637\u0639\u0627\u0645.",
            "x": 10,
            "y": 20,
            "z": 30
        },
        "query": [
            "Center the substring from {x} to {y} in {a} within a field of {z} characters.",
            "Align the substring from index {x} to {y} in {a} to the center within a width of {z} characters.",
            "Place the substring from {x} to {y} in {a} in the center of a field that is {z} characters wide."
        ],
        "language": "acq_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:y].ljust(z, '0')\nprint(answer)\n```",
        "variables": {
            "a": "\u062f \u0628\u0627\u063a \u0634\u0627\u0648\u062e\u0648\u0627 \u0689\u06cc\u0631 \u0631\u0633\u062a\u0648\u0631\u0627\u0646\u0648\u0646\u0647 \u062f\u064a \u0627\u0648 \u062f \u0645\u0627\u0633\u067e\u069a\u06cc\u0646 \u0627\u0648 \u0645\u0627\u0633\u062e\u062a\u0646 \u0628\u0647 \u0648\u062e\u062a \u06a9\u06d0 \u062f \u0645\u0646\u0681\u0646\u06cd \u06ab\u0632\u06cc\u0628\u0648 \u0685\u062e\u0647 \u0681\u06cc\u0646\u06cc \u0648\u062e\u062a \u0628\u06cc \u067e\u06cc\u0633\u0648 \u06a9\u0627\u0646\u0633\u0631\u062a\u0648\u0646\u0647 \u067e\u06a9\u06d0 \u0648\u0631\u06a9\u0648\u0644 \u06a9\u06d0\u0696\u06cc",
            "x": 10,
            "y": 20,
            "z": 30
        },
        "query": [
            "Left-align the substring from {x} to {y} in {a} within a field of {z} characters, filling with zeros.",
            "Align the substring from index {x} to {y} in {a} to the left within a width of {z} characters, padding with zeros.",
            "Take the substring from {x} to {y} in {a}, left-align it in a space of {z} characters, and pad with zeros."
        ],
        "language": "pbt_Arab"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).strip().isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Mwoso yo kejiya odizwi dya kimbanda, omaba atokala ni kutuwama anga ni kusambukila akala ilombolwelu yengi.",
            "x": 100,
            "y": " "
        },
        "query": [
            "Verify if the centered version of {a} with width {x} and padding {y}, after trimming, contains only letters.",
            "Check if the centered string of {a} with a total width of {x} and padding character {y}, after being stripped, consists solely of alphabetic characters.",
            "Determine if the string {a}, when centered to a width of {x} using {y} as padding and then stripped, is made up entirely of letters."
        ],
        "language": "kmb_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('ascii').decode('ascii').startswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0648\u0627\u0644\u062f\u06cc\u062a \u06a9\u06cc \u0645\u0646\u0635\u0648\u0628\u06c1 \u0628\u0646\u062f\u06cc \u0645\u06cc\u06ba \u067e\u06cc\u0633\u0648\u06ba \u06a9\u06d2 \u062e\u0631\u0686 \u06a9\u0631\u0646\u06d2 \u0627\u0648\u0631 \u0627\u0633 \u06a9\u06cc \u0631\u067e\u0648\u0631\u0679 \u06a9\u0631\u0646\u06d2 \u0633\u06d2 \u0645\u062a\u0639\u0644\u0642 \u0632\u06cc\u0631 \u0627\u0644\u062a\u0648\u0627\u0621 \u062a\u0641\u062a\u06cc\u0634 \u06a9\u06cc \u0648\u062c\u06c1 \u0633\u06d2 \u06a9\u0648\u0645\u06cc\u0646 \u06a9\u06cc \u067e\u0627\u0644\u06cc\u0633\u06cc \u0646\u06d2 \u0645\u0646\u0635\u0648\u0628\u06c1 \u0628\u0646\u062f \u0648\u0627\u0644\u062f\u06cc\u062a \u06a9\u0648 \u0646\u0627\u0627\u06c1\u0644 \u0642\u0631\u0627\u0631 \u062f\u06d2 \u062f\u06cc\u0627 \u06c1\u06d2\u060c \u062c\u0633 \u06a9\u06cc \u062a\u062d\u0642\u06cc\u0642\u0627\u062a \u0646\u0645\u0627\u0626\u0646\u062f\u06c1 \u06a9\u0644\u06cc\u0641 \u0627\u0633\u0679\u06cc\u0626\u0631\u0646\u0633 \u06a9\u06d2 \u0630\u0631\u06cc\u0639\u06c1 \u06a9\u06cc \u062c\u0627\u0631\u06c1\u06cc \u06c1\u06d2\u06d4",
            "x": "\u0648\u0627\u0644\u062f\u06cc\u062a"
        },
        "query": [
            "Does {a}, after encoding and decoding with ASCII, start with {x}?",
            "After encoding and decoding {a} using ASCII, does it begin with {x}?",
            "Is {x} the starting substring of {a} after ASCII encoding and decoding?"
        ],
        "language": "urd_Arab"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).title().istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Pel cap baix, cal cal\u00e7at amb soles adequades. Les sabates d'estiu normalment s\u00f3n molt relliscoses sobre el gel i la neu, fins i tot algunes botes d'hivern s\u00f3n deficients.",
            "x": "cal\u00e7at",
            "y": "sabates"
        },
        "query": [
            "Verify if {a} is in title case after replacing {x} with {y} and converting it to title case.",
            "Check if {a} becomes title case after substituting {x} with {y} and applying title case conversion.",
            "Determine if {a} is in title case after {x} is replaced by {y} and the string is converted to title case."
        ],
        "language": "cat_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::z].swapcase().find(y)\nprint(answer)\n```",
        "variables": {
            "a": "Fred waa duufaantii ugu xooga badneyd ee weligeed laga diiwaamiyay koonfurta iyo bariga tan iyo markii la bilaabay sawirka dayax gacmeedka, waana duufaanta saddexaad ee ugu weyneyd ee riroorka bariga 35\u00b0W.",
            "x": 10,
            "y": "D",
            "z": 3
        },
        "query": [
            "Find the index of {y} in the substring of {a} from {x} to the end, every {z} characters, after swapping the case of each character.",
            "Determine the position of {y} in the case-swapped substring of {a} starting from position {x} to the end, taking every {z}th character.",
            "Locate the index of {y} in the substring of {a} starting at index {x} and taking every {z} characters, after changing the case of each character."
        ],
        "language": "som_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('utf-8').capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "SIJS nisqakunaqa i\u00f1iyninkuta gurmat nispan sutichanku, punjabi simitaq tikrakun \u201cGuru nisqap \u00f1annin\u201d. Gur\u00fa nisqaqa india suyupi chanin i\u00f1iyninmi ichaqa SIJISmo nisqapas chanintan riqsikun chay kitipi."
        },
        "query": [
            "Encode {a} in UTF-8, decode it back, and then capitalize the first character.",
            "Convert {a} to UTF-8, decode it, and capitalize the initial letter.",
            "Transform {a} to UTF-8 encoding, revert it, and capitalize the first letter."
        ],
        "language": "quy_Latn"
    },
    {
        "solution": "```python\nanswer = a[:x].zfill(y).isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u0633\u062a\u0628\u062a\u0644 \u0645\u0644\u0627\u0628\u0633\u0643 \u0628\u0643\u0644 \u062a\u0623\u0643\u064a\u062f \u0625\u0630\u0627 \u0639\u0628\u0631\u062a \u0627\u0644\u062c\u0633\u0631 \u0623\u0648 \u062a\u0645\u0634\u064a\u062a \u0639\u0644\u0649 \u0637\u0648\u0644 \u0627\u0644\u0637\u0631\u0642 \u0627\u0644\u0645\u0644\u062a\u0648\u064a\u0629 \u0628\u0627\u0644\u0642\u0631\u0628 \u0645\u0646 \u0634\u0644\u0627\u0644\u0627\u062a \u0641\u064a\u0643\u062a\u0648\u0631\u064a\u0627.",
            "x": 10,
            "y": 15
        },
        "query": [
            "Take the first {x} characters of {a}, pad it with zeros to make it {y} characters long, and check if it is numeric.",
            "Extract the first {x} characters from {a}, zero-fill it to a length of {y}, and determine if it consists only of digits.",
            "Get the initial {x} characters of {a}, pad them with leading zeros to reach {y} characters, and verify if the result is numeric."
        ],
        "language": "arb_Arab"
    },
    {
        "solution": "```python\nanswer = a[::-1].isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\"\u041c\u043e \u04b3\u0430\u043c\u0430 \u0434\u0430\u0440 \u0441\u0430\u0434\u0430\u043c\u043e\u0442 \u049b\u0430\u0440\u043e\u0440 \u0434\u043e\u0448\u0442\u0435\u043c,\" \u0438\u0437\u04b3\u043e\u0440 \u043d\u0430\u043c\u0443\u0434 \u043c\u043e\u0434\u0430\u0440."
        },
        "query": [
            "Check if the reverse of {a} is made up of alphanumeric characters only.",
            "Verify if the reversed string of {a} contains only alphanumeric characters.",
            "Determine if the reverse of {a} consists solely of alphanumeric characters."
        ],
        "language": "tgk_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x::z].rfind(y)\nprint(answer)\n```",
        "variables": {
            "a": "<\u2d37\u2d49\u2d62 \u2d4f \u2d59\u2d30\u2d4e\u2d4e\u2d53\u2d59 skycraper \u2d5c\u2d30\u2d4f <\u2d62\u2d4f\u2d30<\u2d4f<\u2d4f \u2d3c\u2d30\u2d4d <\u2d37\u2d30\u2d34 <\u2d36\u2d4d\u2d30 \u2d42\u2d30\u2d54 \u2d30\u2d36\u2d53\u2d37\u2d49,<\u2d4d\u2d30 <\u2d42\u2d30\u2d4f\u2d37\u2d30\u2d34 \u2d61\u2d30\u2d4f <\u2d59<\u2d3e\u2d49\u2d4d \u2d37 \u2d30\u2d3c\u2d30\u2d54\u2d30\u2d36 \u2d61\u2d30\u2d4f <\u2d59\u2d53\u2d3e\u2d5c\u2d30 \u2d37\u2d30\u2d57 \u2d30\u2d4e\u2d4e\u2d30\u2d59 \u2d4f<\u2d5c.",
            "x": 10,
            "y": "\u2d4f",
            "z": 2
        },
        "query": [
            "Find the last occurrence of {y} in the segment of {a} from {x} onwards, stepping by {z}.",
            "Locate the final instance of {y} in the slice of {a} starting at index {x} with a step of {z}.",
            "Determine the last position of {y} within the portion of {a} beginning at {x} and incrementing by {z}."
        ],
        "language": "taq_Tfng"
    },
    {
        "solution": "```python\nanswer = a.rsplit(x, y)[z].isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u0646\u0641\u0631 \u0646\u0686\u0647 \u0627\u0635\u0644\u06cc \u06a9\u067e\u06cc \u0631\u0627\u06cc\u062a \u0635\u0627\u062d\u0628\u06cc\u0646 \u062f\u0641\u062a\u0631\u06cc\u0646 \u0627\u0634\u06cc\u06cc\u0646\u062f\u0647 \u0627\u0639\u062a\u0631\u0627\u0636 \u0627\u0644\u062f\u06cc\u0644\u0631  200 \u0644\u0646\u062f\u0646\u062f\u0647 \u062a\u0642\u0631\u06cc\u0628\u0627\u064b",
            "x": " ",
            "y": 3,
            "z": 0
        },
        "query": [
            "Split {a} by {x} from the end {y} times, take the {z}-th segment, and check if it is numeric.",
            "From the end, split {a} by {x} {y} times, select the {z}-th part, and verify if it is a number.",
            "Split {a} using {x} from the end {y} times, get the {z}-th section, and determine if it is numeric."
        ],
        "language": "azb_Arab"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u0f5a\u0f7c\u0f51\u0f0b\u0f62\u0fa9\u0f72\u0f66\u0f0b\u0f63\u0f9f\u0f62\u0f0b\u0f53\u0f0b\u0f66\u0f0b\u0f42\u0f7c\u0f0b\u0f63\u0f60\u0f72\u0f0b\u0f50\u0f7c\u0f42\u0f0b\u0f63\u0fb7\u0f74\u0f44\u0f0b\u0f56\u0f60\u0f72\u0f0b\u0f66\u0f90\u0f62\u0f0b\u0f62\u0fa1\u0f7c\u0f0b24000\u0f53\u0f44\u0f0b\u0f53\u0f66\u0f0d \u0f42\u0f5f\u0f60\u0f0b\u0f46\u0f7a\u0f53\u0f0b\u0f58\u0f72\u0f42\u0f0b\u0f51\u0f58\u0f62\u0f0b\u0f50\u0f7c\u0f42\u0f0b\u0f53\u0f66\u0f0b\u0f56\u0fb1\u0f74\u0f44\u0f0b\u0f41\u0f74\u0f44\u0f66\u0f0b\u0f51\u0f44\u0f0b\u0f66\u0f60\u0f72\u0f0b\u0f42\u0f7c\u0f0b\u0f63\u0f60\u0f72\u0f0b\u0f50\u0f7c\u0f42\u0f0b\u0f63\u0fb7\u0f74\u0f44\u0f0b\u0f56\u0f60\u0f72\u0f0b\u0f66\u0f90\u0f62\u0f0b\u0f62\u0fa1\u0f7c\u0f0b\u0f41\u0fb1\u0f7c\u0f53\u0f0b34\u0f63\u0f66\u0f0b\u0f58\u0f7a\u0f51\u0f0b\u0f66\u0f90\u0f7c\u0f62\u0f0b\u0f42\u0f66\u0f63\u0f0d",
            "x": "\u0f5a\u0f7c\u0f51\u0f0b\u0f62\u0fa9\u0f72\u0f66\u0f0b\u0f63\u0f9f\u0f62\u0f0b\u0f53\u0f0b\u0f66\u0f0b\u0f42\u0f7c\u0f0b\u0f63\u0f60\u0f72\u0f0b\u0f50\u0f7c\u0f42\u0f0b\u0f63\u0fb7\u0f74\u0f44\u0f0b\u0f56\u0f60\u0f72\u0f0b\u0f66\u0f90\u0f62\u0f0b\u0f62\u0fa1\u0f7c\u0f0b"
        },
        "query": [
            "After removing characters in {x} from the start of {a}, is the result alphanumeric?",
            "Is the string obtained by stripping characters in {x} from the beginning of {a} alphanumeric?",
            "Does the string become alphanumeric after removing leading characters in {x} from {a}?"
        ],
        "language": "bod_Tibt"
    },
    {
        "solution": "```python\nanswer = a[::-1].isspace()\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u0644\u0645\u0641\u0647\u0648\u0645 \u0646\u0635 \u0639\u0644\u0649 \u0623\u0646 \u062c\u0645\u064a\u0639 \u0627\u0644\u062f\u0648\u0644 \u0627\u0644\u0623\u0648\u0631\u0648\u0628\u064a\u0629 \u064a\u062c\u0628 \u0623\u0646\u0647\u0627 \u062a\u0633\u0639\u0649 \u0644\u0645\u0646\u0639 \u062f\u0648\u0644\u0629 \u0648\u0627\u062d\u062f\u0629 \u0645\u0646 \u0623\u0646 \u062a\u0635\u0628\u062d \u0642\u0648\u064a\u0629\u060c \u0648\u0628\u0627\u0644\u062a\u0627\u0644\u064a \u0627\u0644\u062d\u0643\u0648\u0645\u0627\u062a \u0627\u0644\u0648\u0637\u0646\u064a\u0629 \u063a\u064a\u0631\u062a \u062a\u062d\u0627\u0644\u0641\u0627\u062a\u0647\u0627 \u0639\u0634\u0627\u0646 \u062a\u062d\u0627\u0641\u0638 \u0639\u0644\u0649 \u0627\u0644\u062a\u0648\u0627\u0632\u0646."
        },
        "query": [
            "Check if all characters in the reverse of {a} are whitespace characters.",
            "Verify if the reversed string of {a} consists entirely of whitespace characters.",
            "Determine if every character in the reversed version of {a} is a whitespace character."
        ],
        "language": "arz_Arab"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).rsplit(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "\u5927\u591a\u6570\u5bfa\u5e99\u90fd\u6709\u4e00\u5e74\u4e00\u5ea6\u7684\u8282\u65e5\uff0c\u4ece\u5341\u4e00\u6708\u5e95\u5f00\u59cb\uff0c\u5230\u4e94\u6708\u4e2d\u65ec\u7ed3\u675f\uff0c\u6bcf\u4e2a\u5bfa\u5e99\u7684\u8282\u65e5\u65f6\u95f4\u5404\u4e0d\u76f8\u540c\u3002",
            "x": 50,
            "y": "\u3002",
            "z": "\uff0c",
            "w": 3
        },
        "query": [
            "Left-justify {a} to length {x} with {y} and then split it from the right by {z} up to {w} times.",
            "Pad {a} to the left to make its length {x} using {y}, then perform a right split by {z} up to {w} times.",
            "Extend {a} to the left to reach a length of {x} with {y}, and then split it from the right by {z} up to {w} times."
        ],
        "language": "cmn_Hans"
    },
    {
        "solution": "```python\nanswer = a.isupper() and a.endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "THE DAILY SHOW ETA THE COLBERT REPORT TELEBISTA SAIOAK SORTU BAINO ASKOZ LEHENAGO, 1988AN, HECK-EK ETA JOHNSON-EK, UW-KO IKASLE ZIRELA, ALBISTE-SAIOEN (ETA ALBISTEEN BERRI EMATEN ZITUZTENEN) PARODIA IZANGO ZEN ARGITALPENA ASMATU ZUTEN.",
            "x": "ZUTEN."
        },
        "query": [
            "Check if {a} is in uppercase and ends with {x}.",
            "Verify if {a} is all uppercase and concludes with {x}.",
            "Determine if {a} is in capital letters and terminates with {x}."
        ],
        "language": "eus_Latn"
    },
    {
        "solution": "```python\nanswer = a.endswith(x) and a.startswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0626\u06d5\u0648 \u06a9\u06d5\u0633\u0627\u0646\u06d5\u06cc \u0628\u06d5\u0634\u062f\u0627\u0631\u0628\u0648\u0648\u0646 \u0628\u06c6 \u0686\u06d5\u0646\u062f\u0627\u0646 \u0633\u0627\u06b5\u060c \u06cc\u0627\u0631\u0645\u06d5\u062a\u06cc\u062f\u06d5\u0631\u0645\u0627\u0646 \u0628\u0648\u0648\u0646 \u0644\u06d5\u0648\u06d5\u06cc \u067e\u06ce\u0632\u0627\u0646\u06cc\u0646\u0645\u0627\u0646 \u0647\u06d5\u0628\u06ce\u062a \u0628\u06c6 \u0644\u0627\u06cc\u06d5\u0646\u06d5 \u0628\u06d5\u0647\u06ce\u0632\u06d5\u06a9\u0627\u0646\u0645\u0627\u0646 \u0648 \u0644\u0627\u06cc\u06d5\u0646\u06d5 \u062c\u06c6\u0634\u062f\u0627\u0631\u06cc\u06cc\u06d5\u06a9\u0627\u0646\u0645\u0627\u0646 \u0644\u06d5 \u0647\u06d5\u0645\u0627\u0646\u06a9\u0627\u062a\u062f\u0627 \u0647\u06d5\u06b5\u0633\u06d5\u0646\u06af\u0627\u0646\u062f\u0646\u06cc \u0633\u06d5\u062e\u062a\u06cc\u06cc\u06d5\u06a9\u0627\u0646 \u0648 \u062a\u06d5\u0646\u0627\u0646\u06d5\u062a \u0634\u06a9\u0633\u062a\u06d5\u06a9\u0627\u0646\u06cc\u0634.",
            "x": "\u0634\u06a9\u0633\u062a\u06d5\u06a9\u0627\u0646\u06cc\u0634.",
            "y": "\u0626\u06d5\u0648 \u06a9\u06d5\u0633\u0627\u0646\u06d5\u06cc"
        },
        "query": [
            "Check if the string {a} ends with the substring {x} and starts with the substring {y}.",
            "Verify if the string {a} has the substring {x} at the end and the substring {y} at the beginning.",
            "Determine if the string {a} starts with {y} and ends with {x}."
        ],
        "language": "ckb_Arab"
    },
    {
        "solution": "```python\nanswer = a.count(x) > y\nprint(answer)\n```",
        "variables": {
            "a": "\u0938\u094d\u092a\u0947\u0938\u0935\u0915\u0928\u093f \u091c\u094b\u092c\u0925\u093e\u092f\u093e\u0935 \u092c\u0947 \u0938\u094d\u092a\u0947\u0938 \u0938\u094d\u091f\u0947\u0936\u0928 \u092e\u093f\u0936\u0928\u093e\u0935 \u0938\u093f\u0917\u093e\u0919\u093e\u0935 \u0917\u0902\u0938\u0947 \u0917\u093e\u092f\u0930'\u0938\u094d\u0915\u092a \u0917\u094b\u092e\u093e\u092c\u094d\u0932\u093e\u092c\u094b \u092c\u0947 \u0938\u094d\u0924\u0947\u0936\u0928\u093e \u0917\u093e\u0935\u0928\u093f \u0906\u0935-\u092b\u093e\u0935\u0916\u094c \u0932\u093e\u0916\u094b\u0926\u094b\u0902\u092e\u094b\u0928\u0964",
            "x": "\u0938\u094d\u092a\u0947\u0938",
            "y": 1
        },
        "query": [
            "Check if the substring {x} appears in {a} more than {y} times.",
            "Determine if {x} occurs in {a} more than {y} times.",
            "Is the substring {x} found in {a} more than {y} times?"
        ],
        "language": "brx_Deva"
    },
    {
        "solution": "```python\nanswer = a.isnumeric() and a.find(x) != -1\nprint(answer)\n```",
        "variables": {
            "a": "\u053f\u0578\u0582\u0562\u0561\u0581\u056b \u0584\u0561\u0572\u0561\u0584\u0561\u0581\u056b\u0576\u0565\u0580\u0568, \u0578\u057e\u0584\u0565\u0580 \u0578\u0582\u0576\u0565\u0576 \u0531\u0544\u0546-\u056b \u0563\u0580\u056b\u0576\u0584\u0561\u0580\u057f\u0565\u0580, \u057a\u0565\u057f\u0584 \u0567 \u0561\u0575\u0581\u0565\u056c\u0565\u0576 \u0537\u056f\u057e\u0561\u0564\u0578\u0580\u056b \u0570\u0575\u0578\u0582\u057a\u0561\u057f\u0578\u057d\u0561\u0580\u0561\u0576, \u0578\u0580\u057a\u0565\u057d\u0566\u056b \u0561\u0575\u057d \u057a\u0561\u0570\u0561\u0576\u057b\u056b\u0581 \u0561\u0566\u0561\u057f\u0578\u0582\u0574 \u057d\u057f\u0561\u0576\u0561\u0576:",
            "x": "\u0531\u0544\u0546"
        },
        "query": [
            "Check if {a} is numeric and contains {x}.",
            "Verify if {a} is a number and includes {x}.",
            "Determine if {a} is numeric and has {x} in it."
        ],
        "language": "hye_Armn"
    },
    {
        "solution": "```python\nanswer = a.rsplit(x, y)[0].isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u0425\u044d\u0434\u0438\u0439\u0433\u044d\u044d\u0440, \u0427\u0430\u0440\u043b\u0438\u0437 \u0438\u0445 \u0441\u0443\u0440\u0433\u0443\u0443\u043b\u044c\u0434 \u043e\u0440\u043e\u0445\u0434\u043e\u043e \u041a\u0435\u043c\u0431\u0440\u0438\u0434\u0436\u0438\u0434 \u0422\u0440\u0438\u043d\u0438\u0442\u0443 \u041a\u043e\u043b\u043b\u0435\u0436\u0438\u0434 \u044f\u0432\u0436, \u0425\u04af\u043d \u0441\u0443\u0434\u043b\u043b\u0430\u043b, \u0410\u0440\u0445\u0438\u043e\u043b\u043e\u0433\u0438 \u0434\u0430\u0440\u0430\u0430 \u043d\u044c \u0422\u04af\u04af\u0445\u0438\u0439\u0433 2:2 \u0433\u043e\u043b\u0447 \u0434\u04af\u043d\u0442\u044d\u0439\u0433\u044d\u044d\u0440 \u0441\u0443\u0440\u0441\u0430\u043d \u0431\u0430\u0439\u043d\u0430. (2\u0440 \u0437\u044d\u0440\u0433\u0438\u0439\u043d \u0434\u043e\u043e\u0434 \u0442\u04e9\u0432\u0448\u0438\u043d\u0438\u0439 \u0431\u0430\u0442\u043b\u0430\u043c\u0436\u0442\u0430\u0439)",
            "x": " ",
            "y": 3
        },
        "query": [
            "Is the first element numeric after splitting {a} by {x} from the right {y} times?",
            "After splitting {a} by {x} from the right {y} times, is the first element a number?",
            "Does the first element contain only digits after splitting {a} by {x} from the right {y} times?"
        ],
        "language": "khk_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).title().isdecimal()\nprint(answer)\n```",
        "variables": {
            "a": "Skur\u00f0l\u00e6knar \u00feekktu \u00fdmsar tegundir r\u00f3andi lyfja, \u00feeir \u00feekktu m.a. morf\u00edn sem unni\u00f0 var \u00far valm\u00faafr\u00e6jum og sk\u00f3p\u00f3lam\u00edn sem unni\u00f0 var \u00far grasafr\u00e6jum.",
            "x": "um."
        },
        "query": [
            "Is the title-cased version of {a} without trailing characters in {x} all decimal digits?",
            "Does the title-cased version of {a} with trailing {x} characters removed consist entirely of decimal digits?",
            "After removing trailing {x} characters from {a} and converting to title case, is the result all decimal digits?"
        ],
        "language": "isl_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().encode('ascii').decode('ascii')\nprint(answer)\n```",
        "variables": {
            "a": "\u12ab\u1265 \u1293\u12ed \u130e\u122e\u122e \u1215\u121b\u121d\u1295 \u1219\u1250\u1275\u1295 \u12c8\u133b\u12a2 \u12a3\u1265 \u133d\u1261\u1255 \u1235\u121a\u12d2\u1275 \u12a5\u12e8 \u12d8\u1208\u12b9 \u1293\u12ed \u1274\u120c\u12ae\u121a\u1292\u12ac\u1272\u1295\u130d \u1235\u122d\u1210\u12ed \u12a5\u12cd\u1295 \u12a3\u1265 \u1293\u12ed \u121d\u1235\u122b\u1215 \u12a3\u124b\u121d \u12a5\u12e8 \u12d8\u1208\u12b9\u1362"
        },
        "query": [
            "Remove leading and trailing whitespace from {a}, encode it to ASCII, and then decode it back to a string.",
            "Trim whitespace from both ends of {a}, convert it to ASCII bytes, and then back to a string.",
            "Strip spaces from the start and end of {a}, encode it in ASCII, and decode it back to a string."
        ],
        "language": "tir_Ethi"
    },
    {
        "solution": "```python\nanswer = a[x::y].count(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0425\u0438\u043d\u0434\u0438 \u0436\u04d9\u043d\u0435 \u0443\u0440\u0434\u0443 \u0442\u0456\u043b\u0434\u0435\u0440\u0456\u043d\u0456\u04a3 \u0441\u04e9\u0437\u0434\u0456\u0433\u0456 \u04b1\u049b\u0441\u0430\u0441, \u0431\u0456\u0440\u0430\u049b \u0436\u0430\u0437\u044b\u043b\u0443\u044b \u04d9\u0440\u0442\u04af\u0440\u043b\u0456. \u041a\u04af\u043d\u0434\u0435\u043b\u0456\u043a\u0442\u0456 \u0441\u04e9\u0439\u043b\u0435\u0441\u0443\u043b\u0435\u0440\u0434\u0435 \u0435\u043a\u0456 \u0442\u0456\u043b\u0434\u0456\u04a3 \u0441\u04e9\u0439\u043b\u0435\u0443\u0448\u0456\u043b\u0435\u0440\u0456 \u04d9\u0434\u0435\u0442\u0442\u0435 \u0431\u0456\u0440 \u0431\u0456\u0440\u0456\u043d \u0442\u04af\u0441\u0456\u043d\u0435 \u0430\u043b\u0430\u0434\u044b.",
            "x": 10,
            "y": 2,
            "z": "\u0456"
        },
        "query": [
            "Count the occurrences of {z} in the substring of {a} starting from position {x} with steps of {y}.",
            "How many times does {z} appear in the substring of {a} starting at index {x} with a step of {y}?",
            "Find the number of times {z} occurs in the substring of {a} that begins at position {x} and steps by {y}."
        ],
        "language": "kaz_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.strip().encode('ascii', errors='ignore')\nprint(answer)\n```",
        "variables": {
            "a": "\u130d\u1295 \u12a8\u12a3 \u12a3\u1265 \u12ab\u120d\u12a6\u1275 \u1295\u12d3\u12bb \u12dd\u1215\u12f5\u1231\u12bb \u12dd\u12bd\u12a5\u1209 \u1263\u12ad\u1270\u122a\u12ee\u120e\u1302\u12ad \u134e\u12cd\u1293 \u12d8\u1208\u12ce\u121d \u12ad\u134b\u120b\u1275 \u12d3\u1208\u121d\u1363 \u123d\u130d\u122b\u1275 \u12a8\u130b\u1325\u1219\u12bb \u12dd\u12eb\u12f3 \u1270\u12bd\u12a5\u120e \u12a3\u1208\u12ab\u1362"
        },
        "query": [
            "Remove leading and trailing whitespaces from {a} and encode it in ASCII, ignoring errors.",
            "Trim whitespaces from both ends of {a} and convert it to ASCII, ignoring any errors.",
            "Strip spaces from the start and end of {a} and encode it as ASCII, ignoring errors."
        ],
        "language": "tir_Ethi"
    },
    {
        "solution": "```python\nanswer = a.casefold().isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "Muwonz\u01dd awowa taidaza fafaltain, do amma ad\u01dd futu amsoye gozana d\u01ddn kara sa k\u01ddla \u201cDisney World ro lezain ro\u201d manazaiya."
        },
        "query": [
            "Convert {a} to casefold and check if it consists solely of digit characters.",
            "Transform {a} to casefold and verify if it is made up entirely of digit characters.",
            "Change {a} to casefold and determine if it contains only digit characters."
        ],
        "language": "knc_Latn"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).rfind(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0995\u09b0\u09bf\u0997\u09c1\u09ae\u09cd\u09ac\u09be \u09b2\u09cb\u0995-\u0996\u09c1\u09b2\u09be\u0987\u0997\u09c0 \u09b2\u09be\u0987\u0993\u0982\u09b6\u09bf\u0982 \u0985\u09b8\u09bf \u0985\u09a6\u09c1\u09ae\u0995 \u0995\u09a8\u09a6\u09a8\u09be \u09b2\u09c8\u09b0\u09ac\u09a6\u09bf \u0985\u09a8\u09be\u09ac\u09be \u09ae\u09c0\u0993\u0987\u09b6\u09bf\u0982\u09a8\u09be \u09ae\u0996\u09cb\u09df\u0997\u09c0 \u09a8\u09cb\u0982\u09ae\u0997\u09c0 \u09a5\u09ac\u0995-\u09a5\u09cc\u09b0\u09ae\u09b6\u09bf\u0982 \u09aa\u09be\u0999\u09a5\u09cb\u0995\u09aa\u0997\u09c0 \u0996\u09c1\u09a4\u09cd\u09a5\u09be\u0982\u09a6\u09be \u0985\u09a4\u09cb\u09aa\u09cd\u09aa\u09be \u09ae\u09c0\u0993\u0987\u09b6\u09bf\u0982\u09a6\u09be \u09ae\u0996\u09be \u09a4\u09be\u09a8\u09be \u09b6\u09a8\u09cd\u09a6\u09cb\u09b0\u0995\u09aa\u09be \u09df\u09be\u09ac\u0997\u09c0 \u0985\u0995\u09bf\u09ac\u09be \u09b2\u09c8\u0964",
            "x": "\u0964",
            "y": "\u09ae\u09c0\u0993\u0987\u09b6\u09bf\u0982"
        },
        "query": [
            "Remove trailing {x} from {a} and find the last occurrence of {y}.",
            "Trim trailing {x} from {a} and locate the last position of {y}.",
            "Strip trailing {x} from {a} and determine the last index of {y}."
        ],
        "language": "mni_Beng"
    },
    {
        "solution": "```python\nanswer = a[:x].swapcase().endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "Kansi, kumonana ya maziamu na yandi na 1922 salaka nde yandi zabana. Ata bamaziamu mingi ya ntangu ya ntama bo me yibaka yo, maziamu na yandi kele kibeni kaka mutindu yo vandaka.",
            "x": 50,
            "y": "YANDI"
        },
        "query": [
            "Check if the first {x} characters of {a} with swapped case end with {y}.",
            "Determine if the initial {x} characters of {a} after swapping case end with {y}.",
            "Verify if the first {x} characters of {a} after changing case end with {y}."
        ],
        "language": "ktu_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('ascii').decode('ascii').isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u0f58\u0f0b\u0f66\u0f0b\u0f41\u0f7c\u0f44\u0f0b\u0f49\u0f74\u0f44\u0f0b\u0f58\u0f50\u0f62\u0f0b2009 \u0f42\u0f72\u0f0b\u0f60\u0f42\u0fb2\u0f53\u0f0b\u0f66\u0fa1\u0f74\u0f62\u0f0b\u0f63\u0fb7\u0f42\u0f0b\u0f58\u0f0b\u0f62\u0fa3\u0f58\u0f66\u0f0b\u0f53\u0f66\u0f0b\u0f55\u0fb1\u0f72\u0f62\u0f0b\u0f60\u0f50\u0f7a\u0f53\u0f0b\u0f56\u0fb1\u0f0b\u0f62\u0f92\u0fb1\u0f74\u0f0d"
        },
        "query": [
            "Encode {a} to ASCII and decode it back, then check if the result is printable.",
            "Convert {a} to ASCII and back, then verify if the output is a printable string.",
            "Transform {a} to ASCII and revert it, then determine if the resulting string is printable."
        ],
        "language": "bod_Tibt"
    },
    {
        "solution": "```python\nanswer = a.istitle() and a.isascii()\nprint(answer)\n```",
        "variables": {
            "a": "\u2018Oh lheuh pertandingan, King of Clay kheun, \"L\u00f4n seunang that jeut gisa u babak final dari event pal\u00e9ng peunt\u00e9ng. L\u00f4n di sinoe cuba l\u00f4n peumeunang pertandingan nyoe.\""
        },
        "query": [
            "Check if {a} follows title case capitalization and contains only ASCII characters.",
            "Verify if {a} is in title case and consists solely of ASCII characters.",
            "Determine if {a} adheres to title case rules and includes only ASCII characters."
        ],
        "language": "ace_Latn"
    },
    {
        "solution": "```python\nanswer = a.isprintable() and a.isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0907\u0938\u0915\u0940 \u090f\u0915 \u0939\u0940 \u0906\u0923\u0935\u093f\u0915 \u0938\u0902\u0930\u091a\u0928\u093e \u0939\u0948 \u091a\u093e\u0939\u0947 \u0935\u0939 \u0917\u0948\u0938, \u0924\u0930\u0932 \u092f\u093e \u0920\u094b\u0938 \u0939\u094b."
        },
        "query": [
            "Verify that all characters in {a} are printable and that {a} is a valid Python identifier.",
            "Check if all characters in {a} are printable and if {a} is a valid Python identifier.",
            "Ensure that every character in {a} is printable and that {a} qualifies as a valid Python identifier."
        ],
        "language": "hin_Deva"
    },
    {
        "solution": "```python\nanswer = a.strip().title().isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "Zo ti k\u00f6d\u00f6r\u00f6 ti br\u00e9zil ayeke na ya ponon na l\u00eag\u00eb so lo wara mbeni kota k\u00e4 na li ti lo na peko ti so lo t\u00ee na ngoi ti mandako ti Hongrie na ngu 2009."
        },
        "query": [
            "Verify if the stripped and title-cased version of {a} is a valid identifier.",
            "Check if the title-cased and stripped version of {a} is a valid identifier.",
            "Determine if the stripped and title-cased form of {a} qualifies as a valid identifier."
        ],
        "language": "sag_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().split(x)[y].isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u0626\u0649\u0642\u062a\u0649\u0633\u0627\u062f\u0649\u064a \u0686\u06d5\u0643\u0644\u0649\u0645\u06d5 \u06cb\u06d5 \u064a\u0627\u06cb\u0631\u0648\u067e\u0627 \u0626\u0649\u062a\u062a\u0649\u067e\u0627\u0642\u0649\u0646\u0649\u06ad \u062e\u0627\u0645 \u0646\u06d0\u0641\u0649\u062a \u0626\u06d0\u0643\u0633\u067e\u0648\u0631\u062a\u0649\u0646\u0649 \u0686\u06d5\u0643\u0644\u0649\u0634\u0649 \u0634\u06c7\u0646\u0649\u06ad \u0626\u0649\u0686\u0649\u062f\u06d5\u060c \u0626\u0649\u0631\u0627\u0646\u0646\u0649\u06ad 80% \u062a\u0627\u0634\u0642\u0649 \u0643\u0649\u0631\u0649\u0645\u0649 \u0634\u06c7\u0646\u0649\u06ad\u062f\u0649\u0646 \u0643\u06d0\u0644\u06d5\u062a\u062a\u0649.",
            "x": " ",
            "y": 10
        },
        "query": [
            "Check if the {y+1}-th segment of {a} split by {x} after stripping whitespace is numeric.",
            "Determine if the {y+1}-th part of {a} obtained by splitting with {x} and removing leading/trailing spaces is a number.",
            "Verify if the {y+1}-th section of {a} after splitting by {x} and trimming spaces is numeric."
        ],
        "language": "uig_Arab"
    },
    {
        "solution": "```python\nanswer = a.strip(x).encode('ascii', 'ignore')\nprint(answer)\n```",
        "variables": {
            "a": "\u0628\u064a\u0627\u0633\u0648\u06bd\u0648 \u0627\u0648\u0631\u06a0 \u062a\u0648 \u0645\u0627\u0646\u0627\u0648\u0627\u0631\u0646 \u0647\u0627\u0631\u0627\u06ac\u0648 \u0646\u0646 \u0644\u0627\u0628\u064a\u0647 \u062a\u064a\u06a0\u0762\u064a \u062f\u0627\u0646 \u06a4\u0627\u0644\u0627\u064a\u0627\u0646\u0646 \u0643\u0648\u0621\u0627\u0644\u064a\u062a\u0647 \u0646\u0646 \u0631\u0646\u0686\u0642\u06d4 \u0627\u06bd\u0648 \u062a\u0627\u0643\u0648\u0646\u0686 \u0633\u0627\u0647\u064a\u06a0\u06ac\u0648 \u0633\u0648\u0644\u0642 \u0627\u0648\u0646\u062a\u0648\u0621\u0642 \u062f\u064a\u0645\u0627\u062a\u0648 \u0645\u0627\u062a\u0648.",
            "x": "\u0628\u064a\u0627\u0633\u0648\u06bd\u0648"
        },
        "query": [
            "Strip characters in {x} from both ends of {a} and encode the result in ASCII, ignoring non-encodable characters.",
            "Remove characters in {x} from the start and end of {a}, then encode the result in ASCII, ignoring characters that can't be encoded.",
            "Trim characters in {x} from both sides of {a} and convert the result to ASCII, skipping any characters that can't be encoded."
        ],
        "language": "min_Arab"
    },
    {
        "solution": "```python\nanswer = a.split(x)[::-1]\nprint(answer)\n```",
        "variables": {
            "a": "\u2d5c\u2d49\u2d54\u2d42\u2d30 \u2d4f \u2d49\u2d4e\u2d30\u2d4f \u2d37 \u2d4d\u2d36\u2d30\u2d5b\u2d30\u2d57 \u2d30\u2d31\u2d30\u2d37\u2d30 \u2d4d\u2d4d\u2d30\u2d4f \u2d37\u2d30\u2d36 \u2d30\u2d61\u2d30\u2d37<\u2d4e \u2d37\u2d30\u2d36 \u2d5c\u2d30\u2d4e<\u2d37\u2d37\u2d53\u2d54\u2d5c-\u2d4f\u2d49\u2d5c, \u2d49\u2d4d\u2d30 \u2d30\u2d31\u2d30\u2d37\u2d30 \u2d42\u2d30\u2d54<\u2d5c \u2d49\u2d62<\u2d4f \u2d30\u2d61\u2d30 \u2d5c<\u2d54\u2d4f<\u2d37 \u2d37\u2d30\u2d36 \u2d49\u2d42\u2d49\u2d54\u2d49 \u2d30\u2d59 \u2d5c<\u2d4e\u2d4e\u2d53\u2d59<\u2d37 \u2d30\u2d61\u2d30\u2d37<\u2d4e \u2d49\u2d54\u2d42\u2d30\u2d4e \u2d49\u2d4e\u2d30\u2d4f-\u2d4f\u2d49\u2d5c \u2d57\u2d30\u2d59",
            "x": "<"
        },
        "query": [
            "Split {a} by {x} and then reverse the resulting list.",
            "Divide {a} using {x} as the delimiter and reverse the order of the elements.",
            "Break {a} at each occurrence of {x} and then invert the sequence of the parts."
        ],
        "language": "taq_Tfng"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode('utf-8').isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u0648\u0631\u06a0 \u062f\u06a0\u0646 \u062a\u064a\u06a4\u0649 \u06a4\u0645\u064a\u0643\u064a\u0631\u0646 \u06bd\u064a \u06a4\u0648 \u06a4\u0645\u064a\u0643\u064a\u0631\u0646 \u06bd\u06a0 \u0644\u0648\u0762\u064a\u0633, \u0633\u06a0\u0762\u0648\u06a4 \u0762\u0627\u064a\u06a0\u062a \u06a4\u0648\u0644\u0627, \u06a4\u0633\u0644\u0633\u064a \u0645\u0633\u0626\u0627\u0644\u0647 \u06a0\u0646 \u06a4\u0628\u0648\u062a \u062a\u064a\u0633 \u0639\u0644\u0645\u064a\u0647.",
            "x": "ace_Arab"
        },
        "query": [
            "Encode {a} using {x} encoding, replace unencodable characters, decode it back to UTF-8, and check if the result is printable.",
            "Using {x} encoding, encode {a}, replace any characters that can't be encoded, decode it back to UTF-8, and determine if the result is printable.",
            "Encode the string {a} with {x} encoding, replace unencodable characters, decode it to UTF-8, and check if the decoded string is printable."
        ],
        "language": "ace_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:].isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Choncho, onse aku Belgium olankhula chi Falansa ndi aku Switzerland amene adaphunzira chifalansa ku sukulu, kuti azitha kukumvani ngakhale mukagwilitsa ntchito chifalansa polemba ma nambala.",
            "x": 10
        },
        "query": [
            "Check if the substring of {a} from {x} onwards consists only of ASCII characters.",
            "Verify if the substring of {a} starting from index {x} contains only ASCII characters.",
            "Determine if the portion of {a} from position {x} to the end is made up solely of ASCII characters."
        ],
        "language": "nya_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('ascii', errors='ignore').decode('ascii').find(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0422\u04f1\u04a5\u0430\u043b\u0442\u044b\u0448\u0442\u0435 \u043e\u0442\u0440\u043e\u0448\u0442\u043e \u0442\u0430\u0438\u043d\u043e \u0434\u0435\u043d \u043a\u0430\u0440\u0438\u0431-\u0432\u043b\u0430\u043a \u0438\u043b\u0435\u043d\u044b\u0442. \u041a\u0430\u0440\u0438\u0431-\u0432\u043b\u0430\u043a - \u0442\u0438\u0434\u0435 \u0430\u0440\u0430\u0432\u0430\u043a \u0439\u044b\u043b\u043c\u044b\u043b\u0430 \u0434\u0435\u043d\u0435 \u043e\u0439\u043b\u044b\u0448\u043e \u0434\u0430 \u043c\u0435\u043c\u043d\u0430\u043d \u044d\u0440\u0430 \u0434\u0435\u0447 10 000 \u0438\u0439 \u043d\u0430\u0440\u0435 \u043e\u043d\u0447\u044b\u0447 \u043b\u0435\u043a\u0448\u0435 \u043a\u0430\u043b\u044b\u043a-\u0432\u043b\u0430\u043a.",
            "x": "a"
        },
        "query": [
            "Encode {a} in ASCII ignoring errors, decode it back, and find the index of {x}.",
            "Convert {a} to ASCII ignoring errors, decode it, and locate the position of {x}.",
            "Transform {a} to ASCII format ignoring errors, decode it, and determine the index of {x}."
        ],
        "language": "mhr_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.isnumeric() and a.isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0938\u0941\u0930\u0902\u0917\u0928\u093f"
        },
        "query": [
            "Check if {a} consists solely of numeric characters and also meets the criteria for an identifier.",
            "Determine if {a} is made up entirely of numeric characters and qualifies as an identifier.",
            "Verify whether {a} contains only numeric characters and is a valid identifier."
        ],
        "language": "brx_Deva"
    },
    {
        "solution": "```python\nanswer = a[:x].isalpha() and a[x:].isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "Abranguen restrici\u00f3ns financeiras e a prohibici\u00f3n da Uni\u00f3n Europea \u00e1 exportaci\u00f3n de petr\u00f3leo, da que a econom\u00eda iraniana recibe o 80 % dos seus ingresos exteriores.",
            "x": 10
        },
        "query": [
            "Verify if the first {x} characters of {a} are alphabetic and the rest are digits.",
            "Check if the initial {x} characters of {a} are letters and the remaining characters are numbers.",
            "Determine if the first {x} characters in {a} are alphabetic and the subsequent characters are numeric."
        ],
        "language": "glg_Latn"
    },
    {
        "solution": "```python\nanswer = a.lower().rsplit(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Mitmes sellise seadusega riigis tegelevad registeerimisega kohalikud hotellid (k\u00fcsige kindlasti \u00fcle).",
            "x": " ",
            "y": 5
        },
        "query": [
            "Convert {a} to lowercase and split it into a list of substrings at each occurrence of {x}, with a maximum of {y} splits, starting from the right.",
            "Transform {a} to lowercase and divide it into a list of substrings at each instance of {x}, with up to {y} splits, starting from the right.",
            "Change {a} to lowercase and break it into a list of substrings at each {x}, with a limit of {y} splits, beginning from the right."
        ],
        "language": "ekk_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode(x).isupper()\nprint(answer)\n```",
        "variables": {
            "a": "Sumala han istorya, an iya motibasyon amo an pagin sikat bisan ano man an magin kabalyo. Ha kasinahon han mga Ephesians, ira igin-anunsyo nga diri igrekord an ngaran ni Herostratus bisan san-o.",
            "x": "war_Latn"
        },
        "query": [
            "Verify if the string {a} encoded and then decoded with {x} encoding is in uppercase.",
            "Check if the string {a} remains in uppercase after being encoded and decoded using {x} encoding.",
            "Determine if the string {a} is still in uppercase after encoding and decoding it with {x} encoding."
        ],
        "language": "war_Latn"
    },
    {
        "solution": "```python\nanswer = a.casefold().replace(x, y).isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "Leta zunze ubumwe za Amerika zivuga ko zaronse ayo makuru avuye ahantu h\u2019ibanga, kandi ko ayo makuru avuga cane cane ko iryo koreshwa ry\u2019abiyahuzi ari kugirango baturitse \"ibibanza bikomakomeye\" muri Etiyopiya na Kenya.",
            "x": "a",
            "y": "1"
        },
        "query": [
            "Check if the string {a} with all characters casefolded and {x} replaced by {y} consists only of digits.",
            "Determine if the string {a}, after casefolding and replacing {x} with {y}, is composed entirely of digits.",
            "Verify if the casefolded string {a} with {x} substituted by {y} contains only numeric characters."
        ],
        "language": "run_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].swapcase().isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "A t\u025bm\u025bn\u0254n y'a yira k'a f\u0254 ko a \u0272\u0254g\u0254n pankurun ma dan k\u0254segili la dugukolo kan, min t\u025bm\u025b na k\u0254salata kan m\u025b kalo 1969 o min k\u025bra pankurun Apolo X k\u0254segili sen f\u025b.",
            "x": 50,
            "y": 54
        },
        "query": [
            "Determine if the substring of {a} from index {x} to {y} with swapped case is numeric.",
            "Check if the substring of {a} from index {x} to {y} with its case swapped is a number.",
            "Is the substring of {a} from index {x} to {y} with swapped case a numeric value?"
        ],
        "language": "bam_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().split(x)[y].istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Kujeji be watta ha baabal deena kerala bel\u0257um larugo, be nyiwa je be fauni, gimol baabal man ko kujeji nanugo bel\u0257um feere.",
            "x": " ",
            "y": 0
        },
        "query": [
            "Check if the {y+1}-th segment of {a} split by {x} after stripping whitespace is in title case.",
            "Determine if the {y+1}-th part of {a} obtained by splitting with {x} and removing leading/trailing spaces is in title case.",
            "Verify if the {y+1}-th section of {a} after splitting by {x} and trimming spaces is in title case."
        ],
        "language": "fuv_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::y].encode('ascii')\nprint(answer)\n```",
        "variables": {
            "a": "\u039f \u03ba\u03b1\u03bb\u03cd\u03c4\u03b5\u03c1\u03bf\u03c2 \u03c4\u03c1\u03cc\u03c0\u03bf\u03c2 \u03bd\u03b1 \u03b4\u03b5\u03af\u03c4\u03b5 \u03c4\u03b9\u03c2 \u03c4\u03bf\u03c0\u03bf\u03b8\u03b5\u03c3\u03af\u03b5\u03c2 \u03ba\u03b1\u03b9 \u03c4\u03b7\u03bd \u03ac\u03b3\u03c1\u03b9\u03b1 \u03b6\u03c9\u03ae \u03c4\u03c9\u03bd \u0393\u03ba\u03b1\u03bb\u03b1\u03c0\u03ac\u03b3\u03ba\u03bf\u03c2 \u03b5\u03af\u03bd\u03b1\u03b9 \u03bc\u03b5 \u03c3\u03ba\u03ac\u03c6\u03bf\u03c2, \u03cc\u03c0\u03c9\u03c2 \u03ad\u03ba\u03b1\u03bd\u03b5 \u03ba\u03b1\u03b9 \u03bf \u039a\u03ac\u03c1\u03bf\u03bb\u03bf\u03c2 \u0394\u03b1\u03c1\u03b2\u03af\u03bd\u03bf\u03c2 \u03c4\u03bf 1835.",
            "x": 10,
            "y": 2
        },
        "query": [
            "Encode the substring of {a} starting from position {x} to the end, stepping by {y}, in ASCII.",
            "Convert the substring of {a} from index {x} to the end, with a step of {y}, to ASCII encoding.",
            "Get the substring of {a} starting at index {x} and stepping by {y}, then encode it in ASCII."
        ],
        "language": "ell_Grek"
    },
    {
        "solution": "```python\nanswer = a.rsplit(x, y)[0].isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u0648\u064a\u0646\u0647 \u062f \u0632\u0693\u0647 \u0646\u0647 \u067e\u0647 \u0631\u06ab\u0648\u0646\u0648 \u06a9\u06d0 \u0686\u06d0 \u0634\u0631\u06cc\u0627\u0646\u0648\u0646\u0647 \u0646\u0648\u0645\u06cc\u0696\u06cc \u0628\u062f\u0646 \u062a\u0647 \u0681\u06cc \u0627\u0648 \u0628\u06cc\u0631\u062a\u0647 \u062f \u0648\u0631\u062f\u064a\u062f\u0648\u0646\u0648 \u067e\u0647 \u0646\u0627\u0645\u0647 \u0631\u06ab\u0648\u0646\u0648 \u06a9\u06d0 \u0632\u0693\u0647 \u062a\u0647 \u0631\u0627\u0681\u06cc . \u062a\u0631 \u067c\u0648\u0644\u0648 \u06a9\u0648\u0686\u0646\u06cc \u0631\u06ab\u0648\u0646\u0647 \u06cc\u06d0 \u0639\u0631\u0648\u0642 \u0634\u0639\u0631\u06cc\u0647 \u0646\u0648\u0645\u06d0\u0696\u064a",
            "x": " ",
            "y": 3
        },
        "query": [
            "Is the first segment of {a} after splitting it at each {x}, with at most {y} splits from the end, alphanumeric?",
            "After splitting {a} at each {x} with up to {y} splits from the end, is the first segment alphanumeric?",
            "Does the first part of {a}, obtained by splitting it at each {x} with a maximum of {y} splits from the end, consist only of alphanumeric characters?"
        ],
        "language": "pbt_Arab"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x)[:y]\nprint(answer)\n```",
        "variables": {
            "a": "\u091c\u0942\u092e\t\u0932\u0947\u0902\u0938\t\u0915\u0947\t\u0916\u0930\u093e\u092c\u0940\t\u0908\t\u0939\t\u0915\u0940\t\u0915\u0908\t\u0917\u094b\t\u092b\u094b\u0915\u0938\t\u0926\u0942\u0930\u0940\t\u092a\u093e\u0935\u0947\t\u0916\u093e\u0924\u093f\u0930\t\u092a\u094d\u0930\u093e\u0907\u092e\t\u0932\u0947\u0902\u0938\t\u0915\u0947\t\u0924\u0941\u0932\u0928\u093e\t\u092e\u0947\u0902\t\u090f\u092e\u0947\u0902\t\u092b\u094b\u0915\u0938\t\u0915\u0947\t\u091c\u091f\u093f\u0932\u0924\u093e\t\u092c\u0939\u0941\u0924\t\u092c\u093e\t\u0906\t\u090f\u092e\u0947\u0902\t\u0932\u0947\u0902\u0938\t\u0915\u0947\t\u0915\u0908\t\u0917\u094b\t\u0926\u0942\u0938\u0930\t\u0905\u0935\u092f\u0935\t\u092d\u0940\t\u091a\u093e\u0939\u0940\u0902.",
            "x": 4,
            "y": 50
        },
        "query": [
            "What are the first {y} characters of {a} after expanding tabs to {x} spaces?",
            "After converting tabs to {x} spaces in {a}, what are the first {y} characters?",
            "If tabs in {a} are expanded to {x} spaces, what are the first {y} characters?"
        ],
        "language": "bho_Deva"
    },
    {
        "solution": "```python\nanswer = a[x::z].upper().endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "Yaqhip qurpa siqititinakanx sarkirpachan inspiksyunanakax lurasi ukat ukanakar sarxatasax walir jaqi chimpun\u00ef\u00f1amawa.",
            "x": 10,
            "y": "WAWA.",
            "z": 3
        },
        "query": [
            "Check if the section of {a} from {x} to the end with a step of {z}, converted to uppercase, ends with {y}.",
            "Determine if the substring of {a} starting at index {x} with steps of {z}, when converted to uppercase, ends with {y}.",
            "Verify if the slice of {a} beginning at {x} and taking every {z}th character, in uppercase, ends with {y}."
        ],
        "language": "ayr_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x, y)[z].isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u0645\u0627 \u0647\u0631\u06af\u0632 \u0645\u0648\u062a\u0631 \u062e\u0648\u062f \u0631\u0627 \u0627\u0648\u0631\u0627\u0642 \u0646\u062e\u0648\u0627\u0647\u06cc\u0645 \u06a9\u0631\u062f\u060c \u0641\u0648\u0627\u0631\u0647 \u0622\u0628\u06cc \u0631\u0627 \u062f\u0631 \u062d\u0648\u06cc\u0644\u06cc \u062e\u0648\u062f \u0646\u062e\u0648\u0627\u0647\u06cc\u0645 \u0633\u0627\u062e\u062a\u060c \u0648 \u0628\u0631\u0627\u06cc \u062f\u06cc\u062f\u0646 \u0648\u06cc\u0631\u0627\u0646\u0647 \u0647\u0627\u06cc \u0628\u0627\u0633\u062a\u0627\u0646\u06cc \u0628\u0647 \u067e\u0631\u0648 \u0633\u0641\u0631 \u0646\u062e\u0648\u0627\u0647\u06cc\u0645 \u06a9\u0631\u062f \u06cc\u0627 \u062e\u0627\u0646\u0647 \u0647\u0645\u0633\u0627\u06cc\u0647 \u062e\u0648\u062f \u0631\u0627 \u062a\u063a\u06cc\u06cc\u0631 \u0645\u062f\u0644 \u0646\u0645\u06cc \u062f\u0647\u06cc\u0645.",
            "x": "\u060c",
            "y": 2,
            "z": 1
        },
        "query": [
            "Split {a} at {x} with a maximum of {y} splits, then check if the {z}-th segment is printable.",
            "Divide {a} by {x} up to {y} times, and determine if the {z}-th part is printable.",
            "Break {a} at {x} with a limit of {y} splits, then verify if the {z}-th section is printable."
        ],
        "language": "prs_Arab"
    },
    {
        "solution": "```python\nanswer = a.split(x, y)\nanswer = [s.upper() for s in answer]\nprint(answer)\n```",
        "variables": {
            "a": "Pir\u0254t\u0254ni\u0331 t\u00e4 k\u025bn k\u025b ka\u0331ra\u0331b\u025b mi\u0331 bum ku\u025b laa ni\u0331 \u0263\u00f6\u00f6 nie\u0331wt\u0254r\u0254ni\u0331 thi\u025bl\u025b k\u025b ka\u0331ra\u0331b\u025b. \u0190la il\u025bkt\u0254r\u0254ni\u0331 kuiy ka\u0331ra\u0331b\u025b di\u025bn.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Split {a} at {x} into a list of substrings, with no more than {y} splits, and convert each substring to upper case.",
            "Divide {a} by {x} into a list of parts, limiting to {y} splits, and change each part to uppercase.",
            "Break {a} at {x} into a list of sections, with a maximum of {y} splits, and transform each section to uppercase."
        ],
        "language": "nus_Latn"
    },
    {
        "solution": "```python\nanswer = a.casefold().islower()\nprint(answer)\n```",
        "variables": {
            "a": "Kwaliba no kukansa ubulangisho ubwali no kuba pa War Memorial Stadium iya mu Maui, ukwalingile ukusangwa abantu 9,000, elyo kabili kwaliba no kulomba ubwelelo ku bantu abatemwa ukutamba."
        },
        "query": [
            "Check if the casefolded version of {a} is entirely in lowercase.",
            "Determine if the casefolded string of {a} is completely in lowercase.",
            "Is the casefolded form of {a} fully in lowercase?"
        ],
        "language": "bem_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::y].isdecimal()\nprint(answer)\n```",
        "variables": {
            "a": "\u07dd\u07cc\u07ec\u07db\u07cc \u07df\u07ce\u07ec \u07e3\u07cc\u07eb \u07de\u07cf\u07df\u07cf\u07f2\u07db\u07cf\u07f2 \u07e0\u07ce\u07ec \u07d8\u07cc\u07eb \u07db\u07cb\u07eb \u07d5\u07ca\u07ec\u07e1\u07cc\u07f2\u07ec \u07e0\u07ca\u07eb \u07d7\u07cf\u07ef\u07e6\u07ca \u07d8\u07cf\u07eb \u07d8\u07d0\u07eb \u07de\u07ca\u07ec \u07d8\u07cf\u07f2\u07ec \u07de\u07cd\u07e2\u07ca\u07eb \u07dc\u07d8\u07cd\u07eb \u07d8\u07d0\u07eb \u07de\u07f5\u07ca\u07ec \u07d5\u07d8\u07cd\u07ec \u07ca\u07ec \u07e1\u07ca\u07eb \u07e1\u07ca\u07e6\u07df\u07cd\u07ec\u07e1\u07ca\u07f2\u07eb.",
            "x": 5,
            "y": 3
        },
        "query": [
            "Check if the substring of {a} starting from position {x} with every {y}-th character is made up of decimal characters.",
            "Verify if the substring of {a} starting at index {x} and taking every {y}-th character consists only of decimal digits.",
            "Determine if the substring of {a} beginning at {x} and including every {y}-th character contains only decimal numbers."
        ],
        "language": "nqo_Nkoo"
    },
    {
        "solution": "```python\nanswer = a.isprintable() and a.endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0422\u0430 \u04e9\u043d\u0433\u04e9\u0440\u0441\u04e9\u043d \u0446\u0430\u0433 \u0446\u0430\u0433 \u0445\u0443\u0433\u0430\u0446\u0430\u0430\u0433 \u044d\u0440\u0433\u044d\u0445 \u04af\u0439\u043b\u0438\u0439\u043d \u0434\u0430\u0442\u0430\u043c\u0436\u0438\u0439\u0433 \u0442\u044d\u043c\u0434\u044d\u0433\u043b\u044d\u0436 \u0445\u0430\u0440\u0436 \u0431\u043e\u043b\u043d\u043e. \u042d\u0440\u0433\u044d\u043b\u0442\u0442\u044d\u0439 \u0445\u04e9\u0434\u04e9\u043b\u0433\u04e9\u04e9\u043d \u0433\u044d\u0434\u044d\u0433 \u043d\u044c \u0431\u0430\u0439\u043d\u0433\u0430 \u0434\u0430\u0445\u0438\u043d \u0434\u0430\u0445\u0438\u043d \u0434\u0430\u0432\u0442\u0430\u0433\u0434\u0430\u0445 \u04af\u0439\u043b\u0438\u0439\u0433 \u0445\u044d\u043b\u043d\u044d.",
            "x": "\u0445\u044d\u043b\u043d\u044d."
        },
        "query": [
            "Determine if {a} is printable and ends with {x}.",
            "Check if {a} can be printed and if it ends with {x}.",
            "Verify whether {a} is a printable string and if it concludes with {x}."
        ],
        "language": "khk_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.split(x, y)[0].isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u062a\u0627\u063a\u0642\u0627 \u064a\u0627\u0645\u0649\u0634\u0649\u0634 \u064a\u0627\u0643\u0649 \u063a\u0627\u064a\u06d5\u062a \u0632\u0648\u0631 \u062a\u06d0\u06af\u0649 \u0628\u0627\u0631 \u0642\u06c7\u062a\u06c7\u067e\u0642\u0627 \u064a\u06d0\u062a\u0649\u067e \u0628\u06d0\u0631\u0649\u0634 \u0626\u06c8\u0686\u06c8\u0646\u060c \u0626\u0627\u0631\u0649\u0644\u0627\u067e \u0626\u0648\u0631\u06c7\u0646\u0644\u0627\u0634\u062a\u06c7\u0631\u06c7\u0644\u063a\u0627\u0646 \u0645\u06d5\u062e\u0633\u06c7\u0633 \u0626\u0627\u06cb\u0649\u0626\u0627\u062a\u0633\u0649\u064a\u06d5 \u0633\u0627\u064a\u0627\u06be\u06d5\u062a\u0686\u0649\u0644\u0649\u0643\u0649 \u0626\u0649\u0686\u0643\u0649 \u0642\u06c7\u0631\u06c7\u0642\u0644\u06c7\u0642\u0642\u0649\u0686\u06d5 \u064a\u06d0\u062a\u0649\u067e \u0628\u0627\u0631\u0649\u062f\u06c7.",
            "x": " ",
            "y": 3
        },
        "query": [
            "Split {a} at {x} with at most {y} splits, then check if the first segment is alphanumeric.",
            "Divide {a} by {x} up to {y} times and verify if the initial part is alphanumeric.",
            "Break {a} at {x} with a maximum of {y} splits and determine if the first portion is alphanumeric."
        ],
        "language": "uig_Arab"
    },
    {
        "solution": "```python\nanswer = a.capitalize().rjust(x, y).isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Hakuna mtu mwingine aliyewahi kujitokeza zaidi au kufungia klabu mabao mengi kuliko Bobek.",
            "x": 100,
            "y": " "
        },
        "query": [
            "Check if the capitalized version of {a}, right-aligned in a field of {x} characters with {y} as the fill character, contains only ASCII characters.",
            "Determine if the capitalized string {a}, padded to {x} characters wide with {y}, is composed entirely of ASCII characters.",
            "Verify whether the capitalized form of {a}, aligned to the right within a width of {x} using {y} as padding, consists solely of ASCII characters."
        ],
        "language": "swh_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].title().isdecimal()\nprint(answer)\n```",
        "variables": {
            "a": "Vair\u0101kus t\u016bksto\u0161us gadu laiku ir p\u0113t\u012bju\u0161i reli\u0123iozie, filozofiskie un zin\u0101tniskie p\u0113tnieki.",
            "x": 10,
            "y": 20
        },
        "query": [
            "Verify if the substring of {a} from {x} to {y}, converted to title case, contains only decimal characters.",
            "Check if the substring of {a} ranging from {x} to {y}, when converted to title case, consists solely of decimal digits.",
            "Determine if the substring of {a} between {x} and {y}, after being converted to title case, is composed entirely of decimal numbers."
        ],
        "language": "lvs_Latn"
    },
    {
        "solution": "```python\nanswer = a.casefold().replace(x, y).endswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "Yoodhuma Ejansootni baayeen galmee bakka qabachuu idilee fudhachuuf barbaadaniyyuu, ejantootni hedduun kan isaan baayee irratti hirmaatan imalaa bifa addaa ta\u2019e, akkasumaas hamma baajataa yookiin bakka ga\u2019umsaa irratti.",
            "x": "a",
            "y": "o",
            "z": "tti."
        },
        "query": [
            "Convert {a} to lowercase, replace {x} with {y}, and check if the result ends with {z}.",
            "Transform {a} to lowercase, substitute {x} with {y}, and verify if it ends with {z}.",
            "Change {a} to lowercase, swap {x} with {y}, and determine if it ends with {z}."
        ],
        "language": "gaz_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y:z].upper()\nprint(answer)\n```",
        "variables": {
            "a": "Te\u015fqele di 1\u00ea \u00e7iley\u00ea pa\u015f\u00een de bi duz\u00eeneyan \u015f\u00ean\u00ee ji ber nesitandina kart\u00ean xwe y\u00ean 'adet\u00ee \u00fb y\u00ean salane ya sala n\u00fb li Postexaneya Obanazawa dest bi gil\u00eekirin\u00ea kirin e\u015fkere b\u00fb.",
            "x": 10,
            "y": 50,
            "z": 3
        },
        "query": [
            "Convert every {z}-th character from {x} to {y} in {a} to uppercase.",
            "Change every {z}-th character to uppercase in the substring of {a} from index {x} to {y}.",
            "Make every {z}-th character uppercase in the segment of {a} starting at index {x} and ending at index {y}."
        ],
        "language": "kmr_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='ignore').decode(x).islower()\nprint(answer)\n```",
        "variables": {
            "a": "Dispela band i kenselim (cancel) 'show' bilong ol we i bai kamap long Maui's War Memorial Stadium, we 9, 000 manmeri i laik kam long en, na ol i tok sori long ol lain i save laikim band bilong ol.",
            "x": "tpi_Latn"
        },
        "query": [
            "Is {a} in lowercase after encoding to {x} and decoding back?",
            "Does {a} remain in lowercase after being encoded with {x} and then decoded?",
            "After encoding {a} to {x} and decoding it back, is it still in lowercase?"
        ],
        "language": "tpi_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::z].capitalize().isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "Yu mas sekim gut olsem dispela 'agent' we yu tokim em long makim spes em i wanpela man o meri we i gat planti save long Galapagos na ol kainkain sip.",
            "x": 10,
            "z": 3
        },
        "query": [
            "Check if the characters from {a} starting at index {x} and taking every {z}-th step, capitalized, can be used as an identifier.",
            "Determine if the substring of {a} starting at index {x} and taking every {z}-th character, when capitalized, is a valid identifier.",
            "Verify if the capitalized version of the substring from {a} starting at index {x} with a step of {z} can be used as a valid identifier."
        ],
        "language": "tpi_Latn"
    },
    {
        "solution": "```python\nanswer = a.partition(x)[2].startswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "13 \u0633\u0627\u0644\u0646 \u062c\u0648 \u067e\u064a\u067d\u0631 \u0644\u064a\u0646\u0632 \u0627\u0646\u068a\u064a\u0627\u0646\u0627\u067e\u0648\u0644\u0633 \u0645\u0648\u067d\u0631 \u0627\u0633\u067e\u064a\u068a \u0648\u064a \u062a\u064a \u062d\u0627\u062f\u062b\u064a \u06fe \u0634\u0627\u0645\u0644 \u067f\u064a\u06bb \u06a9\u0627\u0646\u067e\u0648\u0621\u0650 \u0645\u0631\u064a \u0686\u06aa\u0648 \u0622\u0647\u064a.",
            "x": "\u067e\u064a\u067d\u0631",
            "y": "\u0644\u064a\u0646\u0632"
        },
        "query": [
            "Check if the substring after the first occurrence of {x} in {a} starts with {y}.",
            "Determine if the part of {a} after the first {x} begins with {y}.",
            "Verify if the section following the initial {x} in {a} commences with {y}."
        ],
        "language": "snd_Arab"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].endswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u0621\u064a\u0627 \u0627\u062f\u0648\u0644\u0647 \u0686\u0648\u0646\u062a\u0648\u0647 \u0644\u0627\u0621\u0646\u06bd\u0648\u06d4 \u0633\u0627\u06bd\u0627\u0621\u0648 \u0643\u0648 \u062a\u0627\u0628\u0646\u062a\u0648\u0621\u0642 \u062f\u0631\u064a \u062f\u0648\u0648 \u0627\u062a\u0648\u0645 \u0647\u064a\u062f\u0631\u0648\u0762\u064a\u0646 \u062c\u0648 \u0686\u064a\u0642 \u0627\u062a\u0648\u0645 \u0627\u0648\u06a9\u0633\u064a\u0762\u0646.",
            "x": " ",
            "y": 3,
            "z": "\u0644\u0627\u0621\u0646\u06bd\u0648\u06d4"
        },
        "query": [
            "Check if the {y}-th segment of {a} split by {x} ends with {z}.",
            "Determine if the {y}-th part of {a} when split by {x} has {z} at the end.",
            "Verify if the {y}-th section of {a} divided by {x} concludes with {z}."
        ],
        "language": "min_Arab"
    },
    {
        "solution": "```python\nanswer = a.strip().title().endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "Konpanhia a\u00e9riu Turku ta bai pa 39 distinus na 30 pa\u00eds Afrikanus a partir di 2014.",
            "x": "2014."
        },
        "query": [
            "Does the title-cased version of {a} without leading and trailing spaces end with {x}?",
            "Is the title-cased version of {a} without any leading or trailing spaces ending with {x}?",
            "After removing leading and trailing spaces from {a} and converting it to title case, does it end with {x}?"
        ],
        "language": "kea_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:].find(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u9b5a\u306e\u4e3b\u306a\u6b7b\u56e0\u306e1\u3064\u306f\u6c34\u4e2d\u306b\u9ad8\u6fc3\u5ea6\u306e\u6bd2\u7d20\u3067\u3059\u3002",
            "x": 5,
            "y": "\u6bd2\u7d20"
        },
        "query": [
            "Find the position of {y} in the substring of {a} starting from position {x}.",
            "Locate the index of {y} within the substring of {a} beginning at {x}.",
            "Determine the position of {y} in the part of {a} that starts from position {x}."
        ],
        "language": "jpn_Jpan"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode(x).casefold()\nprint(answer)\n```",
        "variables": {
            "a": "Igoti r\u0129a m\u0169caara r\u0129koragwo r\u0129bang\u0129two na nj\u0129ra itigith\u0169kan\u0129te mab\u0169r\u0169ri-in\u0129 ng\u0169\u0169rani, na mar\u0129hi ma igoti na ik\u0129ro ciamo n\u0129 ng\u0169\u0169rani kuuma b\u0169r\u0169ri-in\u0129 \u0169mwe nginya \u0169r\u0129a \u0169ng\u0129.",
            "x": "kik_Latn"
        },
        "query": [
            "Encode {a} using {x} encoding, replace unencodable characters, decode it back, and convert to lowercase.",
            "Using {x} encoding, encode {a}, replace characters that can't be encoded, decode it back, and change to lowercase.",
            "Convert {a} to {x} encoding, replace any characters that can't be encoded, decode it back, and make it lowercase."
        ],
        "language": "kik_Latn"
    },
    {
        "solution": "```python\nanswer = a[:y].replace(x, '').isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u0ba8\u0bc7\u0bb0\u0bbf\u0b9f\u0bc8 \u0bb5\u0b9f\u0bbf\u0bb5\u0bae\u0bc8\u0baa\u0bcd\u0baa\u0bbf\u0bb1\u0bcd\u0b95\u0bc1 \u0b8a\u0b9f\u0b95 \u0b89\u0bb1\u0bcd\u0baa\u0ba4\u0bcd\u0ba4\u0bbf \u0b95\u0bc1\u0bb1\u0bbf\u0ba4\u0bcd\u0ba4 \u0b89\u0b99\u0bcd\u0b95\u0bb3\u0bcd \u0b85\u0ba9\u0bc1\u0bae\u0bbe\u0ba9\u0b99\u0bcd\u0b95\u0bb3\u0bc8 \u0bae\u0bb1\u0bc1 \u0bae\u0ba4\u0bbf\u0baa\u0bcd\u0baa\u0bc0\u0b9f\u0bc1 \u0b9a\u0bc6\u0baf\u0bcd\u0baf \u0bb5\u0bc7\u0ba3\u0bcd\u0b9f\u0bc1\u0bae\u0bcd \u0bae\u0bb1\u0bcd\u0bb1\u0bc1\u0bae\u0bcd \u0bae\u0bb0\u0baa\u0bc1 \u0bb5\u0bb4\u0bbf\u0baf\u0bc8 \u0bae\u0bc0\u0bb1\u0bbf \u0b9a\u0bbf\u0ba8\u0bcd\u0ba4\u0bbf\u0b95\u0bcd\u0b95 \u0b95\u0bb1\u0bcd\u0bb1\u0bc1\u0b95\u0bcd\u0b95\u0bca\u0bb3\u0bcd\u0bb3 \u0bb5\u0bc7\u0ba3\u0bcd\u0b9f\u0bc1\u0bae\u0bcd.",
            "x": "\u0b89",
            "y": 50
        },
        "query": [
            "Check if the substring of {a} up to {y} with all instances of {x} removed is printable.",
            "Determine if the substring of {a} up to index {y} with all occurrences of {x} removed is printable.",
            "Verify if the portion of {a} up to {y} with {x} removed is a printable string."
        ],
        "language": "tam_Taml"
    },
    {
        "solution": "```python\nanswer = a[x:y].isspace() and a[y:z].isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u0c12\u0c15\u0c35\u0c47\u0c33 \u0c2e\u0c02\u0c1c\u0c42\u0c30\u0c41 \u0c1a\u0c47\u0c38\u0c3f\u0c28\u0c1f\u0c4d\u0c32\u0c2f\u0c3f\u0c24\u0c47, \u0c15\u0c2e\u0c3f\u0c37\u0c28\u0c30\u0c4d \u0c2c\u0c46\u0c2f\u0c3f\u0c32\u0c4d \u0c38\u0c46\u0c1f\u0c4d \u0c1a\u0c47\u0c38\u0c3f, \u0c05\u0c30\u0c46\u0c38\u0c4d\u0c1f\u0c4d \u0c1a\u0c47\u0c38\u0c3f\u0c28 \u0c05\u0c27\u0c3f\u0c15\u0c3e\u0c30\u0c3f \u0c26\u0c4d\u0c35\u0c3e\u0c30\u0c3e \u0c26\u0c3e\u0c16\u0c32\u0c41 \u0c1a\u0c47\u0c2f\u0c2c\u0c21\u0c4d\u0c21 \u0c05\u0c2d\u0c3f\u0c2f\u0c4b\u0c17\u0c3e\u0c32\u0c28\u0c41 \u0c32\u0c3e\u0c02\u0c1b\u0c28\u0c2a\u0c4d\u0c30\u0c3e\u0c2f\u0c02\u0c17\u0c3e \u0c32\u0c3e\u0c02\u0c1b\u0c28\u0c2a\u0c4d\u0c30\u0c3e\u0c2f\u0c02\u0c17\u0c3e \u0c28\u0c2e\u0c4b\u0c26\u0c41 \u0c1a\u0c47\u0c38\u0c4d\u0c24\u0c41\u0c02\u0c26\u0c3f. \u0c06 \u0c24\u0c30\u0c4d\u0c35\u0c3e\u0c24 \u0c15\u0c47\u0c38\u0c41 \u0c28\u0c41 \u0c1f\u0c4d\u0c30\u0c3e\u0c15\u0c4d \u0c1a\u0c47\u0c38\u0c47 \u0c30\u0c3e\u0c37\u0c4d\u0c1f\u0c4d\u0c30 \u0c15\u0c02\u0c2a\u0c4d\u0c2f\u0c42\u0c1f\u0c30\u0c4d \u0c35\u0c4d\u0c2f\u0c35\u0c38\u0c4d\u0c25\u0c32\u0c4b\u0c15\u0c3f \u0c1b\u0c3e\u0c30\u0c4d\u0c1c\u0c40\u0c32\u0c28\u0c41 \u0c28\u0c2e\u0c4b\u0c26\u0c41 \u0c1a\u0c47\u0c38\u0c4d\u0c24\u0c41\u0c28\u0c4d\u0c28\u0c3e\u0c30\u0c41.",
            "x": 5,
            "y": 10,
            "z": 15
        },
        "query": [
            "Check if the substring of {a} from {x} to {y} contains only whitespace characters and the substring from {y} to {z} contains only digits.",
            "Verify if the segment of {a} between {x} and {y} is all whitespace and the segment from {y} to {z} is all numeric.",
            "Determine if the part of {a} from {x} to {y} consists solely of spaces and the part from {y} to {z} consists solely of numbers."
        ],
        "language": "tel_Telu"
    },
    {
        "solution": "```python\nanswer = a.strip().replace(x, y).isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u0d31\u0d3f\u0d38\u0d7c\u0d35\u0d47\u0d37\u0d7b \u0d24\u0d41\u0d1f\u0d19\u0d4d\u0d19\u0d41\u0d28\u0d4d\u0d28 \u0d06\u0d26\u0d4d\u0d2f \u0d26\u0d3f\u0d28\u0d02 \u0d24\u0d28\u0d4d\u0d28\u0d46 \u0d32\u0d2d\u0d3f\u0d15\u0d4d\u0d15\u0d41\u0d28\u0d4d\u0d28 \u0d05\u0d2d\u0d4d\u0d2f\u0d7c\u0d24\u0d4d\u0d25\u0d28\u0d15\u0d7e \u0d15\u0d4a\u0d23\u0d4d\u0d1f\u0d4d \u0d2b\u0d3e\u0d7b\u0d31\u0d4d\u0d31\u0d02 \u0d31\u0d3e\u0d1e\u0d4d\u0d1a\u0d3f\u0d28\u0d4d \u0d05\u0d1f\u0d41\u0d24\u0d4d\u0d24\u0d41\u0d33\u0d4d\u0d33 \u0d2c\u0d4d\u0d30\u0d48\u0d31\u0d4d\u0d31\u0d4d \u0d0e\u0d2f\u0d4d\u0d1e\u0d4d\u0d1a\u0d7d \u0d15\u0d4d\u0d2f\u0d3e\u0d2e\u0d4d\u0d2a\u0d4d\u0d17\u0d4d\u0d30\u0d57\u0d23\u0d4d\u0d1f\u0d4d \u0d2a\u0d4b\u0d32\u0d46\u0d2f\u0d41\u0d33\u0d4d\u0d33 \u0d1c\u0d28\u0d2a\u0d4d\u0d30\u0d3f\u0d2f\u0d2e\u0d3e\u0d2f \u0d38\u0d4d\u0d25\u0d32\u0d19\u0d4d\u0d19\u0d7e \u0d28\u0d3f\u0d31\u0d2f\u0d41\u0d02.",
            "x": " ",
            "y": "_"
        },
        "query": [
            "Remove leading and trailing spaces from {a}, replace {x} with {y}, and check if the result is alphanumeric.",
            "Trim spaces from the start and end of {a}, substitute {x} with {y}, and verify if the final string is alphanumeric.",
            "Strip spaces from both ends of {a}, change {x} to {y}, and determine if the outcome is alphanumeric."
        ],
        "language": "mal_Mlym"
    },
    {
        "solution": "```python\nanswer = a.strip(x).upper().isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Komite mpuzamakungu iraba ivy'inkino za Olempike ryemeje gushiramwo izo nkino mu nama y'abakuru yabereye i Berlin uno munsi. Urukino rwa rigibi, urwitwa neza na neza \u00abrigibi ya cumi na batanu\u00bb, hamwe n'urwa golf vyatowe mu gishingo c'izindi zitantu ngo zizoshirwe mu Nkino za Olempike.",
            "x": " "
        },
        "query": [
            "Verify if {a} is alphabetic after stripping {x} and converting to uppercase.",
            "Check if {a} is composed of only letters after removing {x} and changing to uppercase.",
            "Determine if {a} contains only alphabetic characters after {x} is stripped and it is converted to uppercase."
        ],
        "language": "run_Latn"
    },
    {
        "solution": "```python\nanswer = a.title().encode('ascii').decode('ascii')\nprint(answer)\n```",
        "variables": {
            "a": "Amanyathelo amatye abekwe ecaleni kwendlela, kwaye kumacandelo anyukayo iintambo zentsimbi zinceda ngokubamba ngesandla."
        },
        "query": [
            "Convert {a} to title case and then encode and decode it using ASCII.",
            "Transform {a} to title case, then perform ASCII encoding and decoding.",
            "Change {a} to title case and subsequently encode and decode it with ASCII."
        ],
        "language": "xho_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode(x).isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Di m\u00e9smu manera, un viajanti Brit\u00e1niku na Spanha pode konfundi un adeuz ku palmu mon viradu pa kel pesoa ki sa ta sana (enves di un pesoa ki sa ta sanadu) komu un j\u00e9stu pa volta.",
            "x": "kea_Latn"
        },
        "query": [
            "Is {a} purely alphabetic after encoding and decoding with {x}?",
            "Does {a} remain alphabetic after being encoded and decoded using {x}?",
            "After encoding and decoding {a} with {x}, is it still purely alphabetic?"
        ],
        "language": "kea_Latn"
    },
    {
        "solution": "```python\nanswer = a[:y:z].isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0f66\u0f0b\u0f66\u0fa8\u0f74\u0f42\u0f0b\u0f42\u0f72\u0f0b\u0f66\u0fa6\u0f7a\u0f0b \u0f56\u0f66\u0f90\u0f63\u0f0b\u0f58\u0f7a\u0f0b\u0f60\u0f42\u0f66\u0f0b\u0f42\u0f0b\u0f58\u0f0b\u0f60\u0f42\u0f66\u0f0b \u0f58\u0f42\u0f74\u0f0b\u0f50\u0f7c\u0f58\u0f0b\u0f53\u0f72\u0f0b\u0f42\u0f72\u0f0b \u0f42\u0f5e\u0f72\u0f0b\u0f45\u0f72\u0f42\u0f0b\u0f63\u0f74\u0f0b\u0f60\u0f42\u0fb1\u0f74\u0f62\u0f0b\u0f53\u0f74\u0f42",
            "y": 10,
            "z": 2
        },
        "query": [
            "Is the substring of {a} from the start to the {y}-th character at intervals of {z} a valid identifier?",
            "Does the substring of {a} up to the {y}-th character, taken every {z} characters, form a valid identifier?",
            "Can the substring of {a} from the beginning to the {y}-th character, sampled every {z} characters, be considered a valid identifier?"
        ],
        "language": "dzo_Tibt"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].isdecimal()\nprint(answer)\n```",
        "variables": {
            "a": "\u092f\u0903 \u0935\u0928\u0938\u094d\u092a\u0924\u093f\u0903 \u0938\u094d\u0925\u0942\u0932, \u0938\u094d\u0925\u0942\u0932 \u092a\u0924\u094d\u0930\u0938\u094d\u092f \u092e\u0941\u0915\u0941\u091f\u0947\u0928 \u0938\u0939 \u0938\u094d\u0925\u0942\u0932 \u0924\u095c \u0935\u0943\u0915\u094d\u0937 \u092f\u0938\u094d\u092f \u0926\u0943\u0936\u094d\u092f\u0924\u0903 \u0964",
            "x": " ",
            "y": 3
        },
        "query": [
            "When {a} is split by {x}, is the {y}-th element composed entirely of decimal characters?",
            "If you split {a} using {x}, does the {y}-th segment consist only of decimal digits?",
            "After splitting {a} by {x}, is the {y}-th part made up solely of decimal numbers?"
        ],
        "language": "san_Deva"
    },
    {
        "solution": "```python\nanswer = a[:x].rjust(y, z).isupper()\nprint(answer)\n```",
        "variables": {
            "a": "P\u028bway\u0269 l\u025b, pa\u0263t\u028b l\u0269z\u0269yaa mba paka\u0263-w\u025b l\u0269z\u028b\u028b p\u0269na\u0263 2015 yaa 2016 taa y\u0254 paka\u0263 tas\u028b\u028b taz\u028b\u028b HJR-3 taa se p\u0269sa n\u025b kiwolo p\u0269-y\u0254\u0254.",
            "x": 10,
            "y": 15,
            "z": " "
        },
        "query": [
            "Check if the first {x} characters of {a}, right-aligned within {y} characters filled with {z}, are all uppercase.",
            "Determine if the initial {x} characters of {a}, padded to the right to a total length of {y} with {z}, are uppercase.",
            "Verify whether the first {x} characters of {a}, right-justified to {y} characters using {z}, are in uppercase."
        ],
        "language": "kbp_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::y].join(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u04e8\u0439\u0442\u043a\u0435\u043d\u0456 \u0440\u043e\u0437\u0435\u0442\u043a\u0430 \u0456\u0448\u0456\u043d\u0435 \u043d\u0435\u043c\u0435\u0441\u0435 \u04d9\u043b\u0456 \u0456\u0448\u0456\u043d\u0430\u0440\u0430 \u0440\u043e\u0437\u0435\u0442\u043a\u0430\u0434\u0430 \u0431\u043e\u043b\u0493\u0430\u043d\u0434\u0430 \u043b\u04d9\u043c\u043f\u0456\u0448\u043a\u0435\u043d\u0456\u04a3 \u043c\u0435\u0442\u0430\u043b\u043b \u0442\u04af\u043f\u0448\u0435\u0441\u0456\u043d\u0435 \u0442\u0438\u0441\u0435\u04a3\u0456\u0437, \u043b\u04d9\u043c\u043f\u0456\u0448\u043a\u0435\u043d\u0456\u04a3 \u043c\u0435\u0442\u0430\u043b\u043b \u0431\u04e9\u043b\u0456\u0433\u0456 \u0442\u04b1\u0440\u0430\u0442\u044b\u043d \u0440\u043e\u0437\u0435\u0442\u043a\u0430\u0493\u0430 \u0430\u0493\u0430\u0442\u044b\u043d \u044d\u043b\u0435\u043a\u0442\u0440 \u0442\u043e\u0433\u044b \u0441\u0456\u0437\u0434\u0456 \u044d\u043b\u0435\u043a\u0442\u0440 \u0442\u043e\u0433\u044b\u043c\u0435\u043d \u049b\u0430\u0442\u0442\u044b \u0441\u043e\u0493\u0443\u044b \u043c\u04af\u043c\u043a\u0456\u043d.",
            "x": 10,
            "y": 3,
            "z": [
                "\u0431\u0456\u0440",
                "\u0435\u043a\u0456",
                "\u04af\u0448"
            ]
        },
        "query": [
            "Insert the substring of {a} starting from position {x} with step {y} between each element of the iterable {z}.",
            "Join the elements of {z} with the substring of {a} starting at index {x} and taking every {y}th element.",
            "Combine the elements of {z} using the substring of {a} that starts at index {x} and skips every {y} elements."
        ],
        "language": "kaz_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.encode(x, errors='replace').decode(x).isspace()\nprint(answer)\n```",
        "variables": {
            "a": "\u0cb2\u0cbe\u0cb8\u0ccd  \u0c8f\u0c82\u0c9c\u0cb2\u0cc0\u0cb8\u0ccd \u0caa\u0cca\u0cb2\u0cc0\u0cb8\u0ccd  \u0c87\u0cb2\u0cbe\u0c96\u0cc6\u0caf \u0cb5\u0c95\u0ccd\u0ca4\u0cbe\u0cb0, \u0c95\u0ccd\u0cb0\u0cbf\u0cb8\u0ccd\u0c9f\u0ccb\u0cab\u0cb0\u0ccd \u0c97\u0cbe\u0cb0\u0ccd\u0cb8\u0cbf\u0caf,  \u0cb6\u0c82\u0c95\u0cbf\u0ca4 \u0caa\u0cc1\u0cb0\u0cc1\u0cb7 \u0c85\u0caa\u0cb0\u0cbe\u0ca7\u0cbf\u0caf \u0ca4\u0ca8\u0cbf\u0c96\u0cc6, \u0cb5\u0cbf\u0ca7\u0ccd\u0cb5\u0c82\u0cb8\u0c95 \u0c95\u0cc3\u0ca4\u0ccd\u0caf\u0ca6 \u0cac\u0ca6\u0cb2\u0cc1 \u0c85\u0ca4\u0cbf\u0c95\u0ccd\u0cb0\u0cae\u0ca3 \u0caa\u0ccd\u0cb0\u0cb5\u0cc7\u0cb6\u0ca6  \u0c86\u0cb0\u0ccb\u0caa\u0ca6 \u0cae\u0cc7\u0cb2\u0cc6  \u0c95\u0cc8\u0c97\u0cca\u0cb3\u0ccd\u0cb3\u0cb2\u0cbe\u0c97\u0cc1\u0ca4\u0ccd\u0ca4\u0ca6\u0cc6  \u0c8e\u0c82\u0ca6\u0cc1 \u0cb9\u0cc7\u0cb3\u0cbf\u0ca6\u0cb0\u0cc1.",
            "x": "kan_Knda"
        },
        "query": [
            "Verify if {a}, after encoding and decoding with {x} and replacing errors, consists only of whitespace characters.",
            "Check if {a} is only whitespace after encoding and decoding with {x} and replacing errors.",
            "Determine if {a} contains only whitespace characters after being encoded and decoded with {x} and replacing errors."
        ],
        "language": "kan_Knda"
    },
    {
        "solution": "```python\nanswer = a[x:y:z].isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u0628\u06cc\u0645\u0627\u0631\u06cc \u0639\u0641\u0648\u0646\u06cc \u0646\u0648\u0639\u06cc \u0628\u06cc\u0645\u0627\u0631\u06cc \u0627\u0633\u062a \u06a9\u0647 \u067e\u0627\u062a\u0648\u0698\u0646\u06cc \u0646\u0638\u06cc\u0631 \u0648\u06cc\u0631\u0648\u0633\u060c \u0628\u0627\u06a9\u062a\u0631\u06cc\u060c\u200c \u0642\u0627\u0631\u0686 \u06cc\u0627 \u0633\u0627\u06cc\u0631 \u0627\u0646\u06af\u0644\u200c\u0647\u0627 \u0639\u0627\u0645\u0644 \u0622\u0646 \u0645\u06cc\u200c\u0628\u0627\u0634\u062f.",
            "x": 0,
            "y": 10,
            "z": 1
        },
        "query": [
            "Check if the substring of {a} from index {x} to {y}, taking every {z}-th character, contains only digits.",
            "Verify if the sliced string of {a} from {x} to {y} with a step of {z} consists solely of digits.",
            "Determine if the segment of {a} starting at index {x} and ending at index {y} with a step size of {z} is composed entirely of numeric characters."
        ],
        "language": "pes_Arab"
    },
    {
        "solution": "```python\nanswer = a.isupper() and x in a\nprint(answer)\n```",
        "variables": {
            "a": "ADD NISQAQA WAQLLICHINMI KUNPANTIN KAWSAYTA, UK IRQIKUNAQA MANA HAMUTANKUCHU IMANATINMI CHAY INATA KAWSANKU, IMANAPTINMI QILLQANKU CHAY INATA NISPA IMA.",
            "x": "NISQAQA"
        },
        "query": [
            "Check if {a} is entirely uppercase and contains {x}.",
            "Verify if {a} is all uppercase and includes {x}.",
            "Determine if {a} is completely in uppercase and has {x} in it."
        ],
        "language": "quy_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].capitalize().isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "Hotellissasi tai is\u00e4nnill\u00e4si (mik\u00e4li y\u00f6vyt vierasmajassa tai yksityisasunnossa) on todenn\u00e4k\u00f6isesti WiFi tai Internetiin kytketty tietokone, ja kaikista asutuskeskuksista l\u00f6ytyy Internet-kahvila tai paikka, jossa on julkinen WiFi-verkko.",
            "x": 10,
            "y": 20
        },
        "query": [
            "Extract the substring of {a} from {x} to {y}, capitalize it, and check if it is a valid identifier.",
            "Get the substring from {a} starting at index {x} and ending at index {y}, capitalize it, and determine if it is a valid identifier.",
            "Take the substring of {a} from index {x} to {y}, capitalize it, and verify if it is a valid identifier."
        ],
        "language": "fin_Latn"
    },
    {
        "solution": "```python\nanswer = a.zfill(x).istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Bidimu dikumi bidi bipita, nansha muvua ditunga dikale anu dia kominisme, Chine uvua muyishe kumpala ditanta dia bisalu.",
            "x": 100
        },
        "query": [
            "After padding {a} with zeros to make its length {x}, is it in title case?",
            "Is the string {a} in title case after padding it with zeros to reach a length of {x}?",
            "When {a} is padded with zeros to a length of {x}, does it become title case?"
        ],
        "language": "lua_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y:z].isdecimal()\nprint(answer)\n```",
        "variables": {
            "a": "\u10d0\u10db\u10d4\u10e0\u10d8\u10d9\u10d4\u10da\u10d4\u10d1\u10d8\u10e1 \u10d2\u10d4\u10d2\u10db\u10d0 \u10e1\u10d0\u10db\u10d8 \u10e1\u10ee\u10d5\u10d0\u10d3\u10d0\u10e1\u10ee\u10d5\u10d0 \u10db\u10d8\u10db\u10d0\u10e0\u10d7\u10e3\u10da\u10d4\u10d1\u10d8\u10d3\u10d0\u10dc \u10d9\u10dd\u10dd\u10e0\u10d3\u10d8\u10dc\u10d8\u10e0\u10d4\u10d1\u10e3\u10da\u10d8 \u10e8\u10d4\u10e2\u10d4\u10d5\u10d8\u10e1 \u10d3\u10d0\u10ec\u10e7\u10d4\u10d1\u10d0\u10e1 \u10d2\u10e3\u10da\u10d8\u10e1\u10ee\u10db\u10dd\u10d1\u10d3\u10d0.",
            "x": 10,
            "y": 20,
            "z": 2
        },
        "query": [
            "Verify if the substring of {a} from {x} to {y} with every {z}-th step is decimal.",
            "Check if the sliced string of {a} from index {x} to {y} with a step of {z} is a decimal number.",
            "Determine if the segment of {a} starting at index {x}, ending at index {y}, and taking every {z}-th character is a decimal."
        ],
        "language": "kat_Geor"
    },
    {
        "solution": "```python\nanswer = a[::-1].isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Schumacher, ng\u01b0\u1eddi \u0111\u00e3 ngh\u1ec9 h\u01b0u n\u0103m 2006 sau b\u1ea3y l\u1ea7n v\u00f4 \u0111\u1ecbch gi\u1ea3i \u0111ua C\u00f4ng th\u1ee9c 1, \u0111\u01b0\u1ee3c s\u1eafp x\u1ebfp \u0111\u1ec3 thay th\u1ebf Felipe Massa b\u1ecb th\u01b0\u01a1ng."
        },
        "query": [
            "Check if the reverse of {a} consists solely of letters.",
            "Verify if the reversed string of {a} contains only alphabetic characters.",
            "Determine if the reverse of {a} is made up entirely of letters."
        ],
        "language": "vie_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).title().encode('ascii', errors='ignore')\nprint(answer)\n```",
        "variables": {
            "a": "E wara mbeni kpale ti konomi a sara ngu oko, na a kiri a gu\u00e9 na li ni na ya ti anze use so ahon so, me aye a tonda ti kiri na l\u00eag\u00eb ni awe.",
            "x": "a",
            "y": "o"
        },
        "query": [
            "Replace {x} with {y} in {a}, convert the result to title case, and encode it to ASCII, ignoring errors.",
            "Substitute {x} with {y} in {a}, change the result to title case, and encode it to ASCII while ignoring errors.",
            "Swap {x} with {y} in {a}, transform the result to title case, and encode it to ASCII, ignoring any errors."
        ],
        "language": "sag_Latn"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\uc624\ub298 \uc81c\ud504 \uc6e8\uc774\uc988\uc640 9\uba85\uc758 \ud76c\uc0dd\uc790 \uc911 3\uba85\uc758 \uc7a5\ub840\uc2dd\uc774 \uac70\ud589\ub418\uba74\uc11c, 3\uc6d4 21\uc77c \ud559\uad50 \ucd1d\uaca9 \uc0ac\uac74\uacfc \uad00\ub828\ud558\uc5ec \ub610 \ud55c \uba85\uc758 \ud559\uc0dd\uc774 \uccb4\ud3ec\ub418\uc5c8\ub2e4\ub294 \ub274\uc2a4\uac00 \ub808\ub4dc \ub808\uc774\ud06c \ucee4\ubba4\ub2c8\ud2f0\uc5d0 \ud655\uc0b0\ub418\uc5c8\uc2b5\ub2c8\ub2e4.",
            "x": "\uc624\ub298 \uc81c\ud504 \uc6e8\uc774\uc988\uc640 "
        },
        "query": [
            "Remove leading characters in {x} from {a} and check if the result is a valid identifier.",
            "Strip leading characters found in {x} from {a} and determine if the outcome is a valid identifier.",
            "Check if the string {a} becomes a valid identifier after removing leading characters specified in {x}."
        ],
        "language": "kor_Hang"
    },
    {
        "solution": "```python\nanswer = a.lower().replace(x, y).isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "Nzila ya kuluta pete ya kuyantika kisalu ya kusonika mambu ya nzietelo kele kuvanda ti mayele ya kusonika blog ya ke tubila nzietelo.",
            "x": "ya",
            "y": "na"
        },
        "query": [
            "Convert {a} to lowercase, replace {x} with {y}, and check if the result is printable.",
            "Transform {a} to lowercase, substitute {x} with {y}, and verify if the outcome is printable.",
            "Change {a} to lowercase, swap {x} with {y}, and determine if the final string is printable."
        ],
        "language": "ktu_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:].swapcase().endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "Igra se na travi, a trava oko rupe se kosi krac\u0301e i naziva se zelena trava.",
            "x": 10,
            "y": "ZELENA TRAVA."
        },
        "query": [
            "Does the swapped case version of the substring of {a} starting at index {x} end with {y}?",
            "Is the substring of {a} starting from index {x} with swapped case ending with {y}?",
            "Check if the substring of {a} from {x} with swapped case ends with {y}."
        ],
        "language": "bos_Latn"
    },
    {
        "solution": "```python\nanswer = a.title().replace(x, y).isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Sophocles ni Aristophanes ku ha ri vatsari va mintlangu lava tiviwaka ngopfu nakambe va tekiwa ku ri van\u2019wana va vatsari lava nga emahlweni emisaveni.",
            "x": "a",
            "y": "o"
        },
        "query": [
            "After converting {a} to title case and replacing {x} with {y}, are all characters ASCII?",
            "Is the string ASCII after converting {a} to title case and replacing {x} with {y}?",
            "When {a} is converted to title case and {x} is replaced with {y}, does the string contain only ASCII characters?"
        ],
        "language": "tso_Latn"
    },
    {
        "solution": "```python\nanswer = a.capitalize()[x:y].islower()\nprint(answer)\n```",
        "variables": {
            "a": "Balaa ibiddaa sana booda, masaraan dahannaa sun bakkatti deebifamee akkasumas eegameera, hawwata Bihutaanii namatti tolan keessa isa tokko ta\u2019ee hafuudhaan.",
            "x": 10,
            "y": 20
        },
        "query": [
            "Is the substring from {x} to {y} of the capitalized version of {a} in lowercase?",
            "Check if the substring from index {x} to {y} of the capitalized string {a} is in lowercase.",
            "Determine if the section from {x} to {y} in the capitalized form of {a} is all lowercase."
        ],
        "language": "gaz_Latn"
    },
    {
        "solution": "```python\nanswer = a[::z].lower().startswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "Nadia, butukaka na ngonda ya Nana kilumbu ya 17, mvula ya 2007, nzila ya mbele na nzo ya mbutulu ya lupitalu ya bamvuama na Aleisk, insi ya Russie, na 17 ya bakilo mingi.",
            "x": "n",
            "z": 3
        },
        "query": [
            "Does the string formed by taking every {z}-th character of {a} and converting it to lowercase start with {x}?",
            "Is the string created by selecting every {z}-th character from {a} and making it lowercase starting with {x}?",
            "Does the lowercase string obtained by taking every {z}-th character from {a} begin with {x}?"
        ],
        "language": "ktu_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:].count(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u04ae\u04af\u043d\u0434 \u0442\u0443\u0445\u0430\u0439\u043d \u043e\u0440\u043e\u043d \u043d\u0443\u0442\u0433\u0438\u0439\u043d \u0446\u0430\u0433\u0434\u0430\u0430\u0433\u0438\u0439\u043d \u0433\u0430\u0437\u0430\u0440\u0442 \u043c\u0430\u044f\u0433\u0442 \u0431\u04e9\u0433\u043b\u04e9\u0445 \u044d\u0441\u0432\u044d\u043b \u0446\u0430\u0433\u0430\u0430\u0447\u043b\u0430\u043b\u044b\u043d \u0430\u043b\u0431\u0430\u043d\u0434 \u043e\u0447\u0438\u0445 \u0448\u0430\u0430\u0440\u0434\u043b\u0430\u0433\u0430\u0442\u0430\u0439 \u0431\u0430\u0439\u0436 \u0431\u043e\u043b\u043d\u043e.",
            "x": 10,
            "y": "\u0446\u0430\u0433\u0434\u0430\u0430\u0433\u0438\u0439\u043d"
        },
        "query": [
            "Count how many times {y} appears in the substring of {a} starting from index {x}.",
            "Determine the number of occurrences of {y} in the substring of {a} beginning at index {x}.",
            "Find the frequency of {y} in the portion of {a} starting from index {x}."
        ],
        "language": "khk_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8', errors='ignore').decode('utf-8').istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Si w ap itilize yon dw\u00f2nn, verifye byen alavans sa ou otorize pou filme epi ki p\u00e8mi oswa lisans anplis ki neses\u00e8 yo."
        },
        "query": [
            "Is the string {a} in title case after encoding to UTF-8 and ignoring errors?",
            "After encoding {a} to UTF-8 and ignoring errors, is it in title case?",
            "Does the string {a} remain in title case after being encoded to UTF-8 with errors ignored?"
        ],
        "language": "hat_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].isdigit() and a[x:y].isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Na vula sa oti, e dua na vakudrukudru levu e a caka mai Poladi na gauna e sainitaka kina na ACTA, ka ,mai vakavuna na kena rube tu vakawawa na kena vakadinadinataki na veidinadinati.",
            "x": 10,
            "y": 20
        },
        "query": [
            "Check if the substring of {a} from {x} to {y} is both numeric and alphabetic.",
            "Determine if the segment of {a} between indices {x} and {y} contains only digits and letters.",
            "Verify if the part of {a} from position {x} to {y} is both a number and a letter."
        ],
        "language": "fij_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].islower() and a[x:y].isupper()\nprint(answer)\n```",
        "variables": {
            "a": "Il-familji bi tfal \u017cg\u0127ar jista\u2019 jkollhom b\u017conn aktar preparamenti, i\u017cda \u0121urnata barra hija possibbli fa\u010bilment anke bi trabi u tfal \u017cg\u0127ar.",
            "x": 10,
            "y": 20
        },
        "query": [
            "Check if the substring of {a} from {x} to {y} is both lowercase and uppercase.",
            "Determine if the substring of {a} between indices {x} and {y} contains both lowercase and uppercase letters.",
            "Verify if the substring of {a} from position {x} to {y} is in both lowercase and uppercase."
        ],
        "language": "mlt_Latn"
    },
    {
        "solution": "```python\nanswer = a.casefold().isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "Tema\u015feger, away\u00ean xuyay\u00ee y\u00ean j\u00eeyan\u00ee yan p\u00eakan\u00een\u00ean xurtkirina tecr\u00eebeyan dikin mebest taq\u00eeb dikin."
        },
        "query": [
            "Check if the casefolded version of {a} is a valid identifier.",
            "Determine if the casefolded string {a} is a valid identifier.",
            "Verify if the casefolded form of {a} qualifies as a valid identifier."
        ],
        "language": "kmr_Latn"
    },
    {
        "solution": "```python\nanswer = a.upper().split(x)\nprint(answer)\n```",
        "variables": {
            "a": "Ilbaxnimada Indus Valley ayaa ahaa ilbaxnimo Muddadii Naxaaska ee ku yaalay waqooyi bari ee qaarada Hindiga oo koobayay halka dawladda Baakistaan ee maaanta ku taalo iyo qayb ka mid ah waqooyi galbeed ee Hindiya iyo waqooyi bari ee Afghanistan.",
            "x": " "
        },
        "query": [
            "Convert {a} to uppercase and then split it by {x}.",
            "Transform {a} to uppercase and then divide it by {x}.",
            "Change {a} to uppercase and then separate it by {x}."
        ],
        "language": "som_Latn"
    },
    {
        "solution": "```python\nanswer = a[::-1].upper().endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "Tha gaoth suas ri 480 km/h (133 m/s; 300 mph) sna biastan de stoirmean seo.",
            "x": "OES"
        },
        "query": [
            "Check if the reversed and uppercased version of {a} ends with {x}.",
            "Determine if {a} reversed and converted to uppercase ends with {x}.",
            "See if the uppercase version of the reversed {a} has {x} at the end."
        ],
        "language": "gla_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].upper().replace(b, c)\nprint(answer)\n```",
        "variables": {
            "a": "Masu zanga-zangar suna zaton samun takaddama mai dauke da sa hannun mutum miliyan 1.2 domin kaddamarwa a taron majalisar kasa cikin watan Nuwamba.",
            "x": 5,
            "y": 20,
            "b": "ZANGA",
            "c": "TARO"
        },
        "query": [
            "Convert the substring of {a} from index {x} to {y} to uppercase and replace {b} with {c}.",
            "Change the substring of {a} from position {x} to {y} to uppercase and substitute {b} with {c}.",
            "Transform the substring of {a} from index {x} to {y} to uppercase and swap {b} with {c}."
        ],
        "language": "hau_Latn"
    },
    {
        "solution": "```python\nanswer = a[::-1].find(b)\nprint(answer)\n```",
        "variables": {
            "a": "\u0935\u0947\u0928\u0947\u091d\u0941\u090f\u0932\u093e\u091a\u094d\u092f\u093e \u0932\u094b\u0915\u093e\u0902\u0938\u093e\u0920\u0940 \u092e\u0939\u0924\u094d\u0935\u093e\u091a\u093e \u0909\u0926\u094d\u092f\u094b\u0917 \u092e\u094d\u0939\u0923\u091c\u0947 \u0924\u0947\u0932, \u0915\u0947\u0935\u0933 \u090f\u0915 \u091f\u0915\u094d\u0915\u093e \u0932\u094b\u0915 \u0924\u0947\u0932 \u0909\u0926\u094d\u092f\u094b\u0917\u093e\u0924 \u0915\u093e\u092e \u0915\u0930\u0924 \u0905\u0938\u0932\u0947 \u0924\u0930\u0940, \u0939\u093e \u0926\u0947\u0936 \u090f\u0915 \u0928\u093f\u0935\u094d\u0935\u0933 \u0928\u093f\u0930\u094d\u092f\u093e\u0924\u0926\u093e\u0930 \u0906\u0939\u0947.",
            "b": "\u0924\u0947\u0932"
        },
        "query": [
            "Find the position of {b} in the reverse of {a}.",
            "Locate the index of {b} in the reversed string of {a}.",
            "Determine the position of {b} within the reversed version of {a}."
        ],
        "language": "mar_Deva"
    },
    {
        "solution": "```python\nanswer = a.replace(b, c).split(d)\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u0644\u062c\u0648 \u0627\u0644\u0645\u0638\u0644\u0651\u0645 \u0628\u062f\u0648\u0627\u064a\u0631 \u0627\u0644\u0645\u0639\u0628\u062f \u0648\u0627\u0644\u0637\u0644\u0651\u0629 \u0645\u062a\u0627\u0639\u0648 \u0639\u0644\u0649 \u0628\u062d\u064a\u0631\u0629 \"\u062a\u0648\u0646\u0644\u064a \u0633\u0627\u0628\" \u062a\u0639\u0637\u064a \u0642\u064a\u0645\u0629 \u0628\u0627\u0628\u0627\u0634 \u062a\u0637\u0644\u0639 \u0627\u0644\u062a\u0644.",
            "b": "\u0627\u0644\u0645\u0638\u0644\u0651\u0645",
            "c": "\u0627\u0644\u0645\u0634\u0645\u0633",
            "d": " "
        },
        "query": [
            "Replace {b} with {c} in {a} and then split the result by {d}.",
            "Substitute {b} with {c} in {a} and then divide the result by {d}.",
            "Change {b} to {c} in {a} and then separate the result by {d}."
        ],
        "language": "aeb_Arab"
    },
    {
        "solution": "```python\nanswer = a.strip(b).startswith(c)\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u06af\u0631\u0686\u0647 \u06a9\u0645 \u0647\u0633\u062a\u0646\u062f\u060c \u0647\u0646\u0648\u0632 \u0628\u0631\u062e\u06cc \u0627\u0632 \u0628\u0627\u0632\u062f\u06cc\u062f \u06a9\u0646\u0646\u062f\u06af\u0627\u0646 \u0633\u0627\u0644\u062e\u0648\u0631\u062f\u0647 \u0647\u0627\u0648\u0627\u06cc\u06cc \u0631\u0627 \u0642\u0628\u0644 \u0627\u0632 \u0627\u06cc\u0646\u06a9\u0647 \u06cc\u06a9\u06cc \u0627\u0632 \u0627\u06cc\u0627\u0644\u062a\u200c\u0647\u0627\u06cc \u0627\u0645\u0631\u06cc\u06a9\u0627 \u0634\u0648\u062f \u0648 \u0628\u062f\u0648\u0646 \u0647\u0645\u0647 \u0647\u062a\u0644\u200c\u0647\u0627\u06cc \u0628\u0632\u0631\u06af \u062a\u0648\u0631\u06cc\u0633\u062a\u06cc \u0648 \u0633\u0627\u06cc\u0631 \u067e\u06cc\u0634\u0631\u0641\u062a\u200c\u0647\u0627\u06cc\u0634 \u0628\u0647 \u06cc\u0627\u062f \u0645\u06cc\u200c\u0622\u0648\u0631\u0646\u062f.",
            "b": " ",
            "c": "\u0627\u06af\u0631\u0686\u0647"
        },
        "query": [
            "Check if {a} starts with {c} after removing leading and trailing {b} characters.",
            "Determine if {a} begins with {c} once {b} characters are stripped from both ends.",
            "Verify if {a} has {c} at the start after trimming {b} characters from the edges."
        ],
        "language": "pes_Arab"
    },
    {
        "solution": "```python\nanswer = a.lower().count(b)\nprint(answer)\n```",
        "variables": {
            "a": "Olombaolo vina vipita cosi ya calunga yapangiwa cofeka yo Alemanya vaytukola vo ati U- Boats. Vakwetu vofeka yacovapamaco k\u2019okulinga olombapolo vyavo.",
            "b": "o"
        },
        "query": [
            "Count the occurrences of {b} in {a} after converting it to lowercase.",
            "How many times does {b} appear in {a} when {a} is in lowercase?",
            "Find the number of times {b} occurs in {a} after changing {a} to lowercase."
        ],
        "language": "umb_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].rjust(z, b)\nprint(answer)\n```",
        "variables": {
            "a": "\u10db\u10d8\u10e3\u10ee\u10d4\u10d3\u10d0\u10d5\u10d0\u10d3 \u10d8\u10db\u10d8\u10e1\u10d0, \u10e0\u10dd\u10db \u10d0\u10e0\u10e1\u10d4\u10d1\u10d8\u10d7 \u10d3\u10d0\u10d6\u10d8\u10d0\u10dc\u10d4\u10d1\u10d4\u10d1\u10e1 \u10d0\u10d3\u10d2\u10d8\u10da\u10d8 \u10d0\u10e0 \u10f0\u10e5\u10dd\u10dc\u10d8\u10d0, \u10d0\u10e4\u10d4\u10d7\u10e5\u10d4\u10d1\u10d8\u10e1 \u10d0\u10d3\u10d2\u10d8\u10da\u10d0\u10e1 \u10e1\u10e3\u10da \u10db\u10ea\u10d8\u10e0\u10d4 \u10ee\u10e3\u10d7 \u10d0\u10d3\u10d0\u10db\u10d8\u10d0\u10dc\u10e1 \u10d2\u10d0\u10db\u10dd\u10d4\u10ee\u10d0\u10e2\u10d4\u10d1\u10dd\u10d3\u10d0 \u10e8\u10dd\u10d9\u10d8\u10e1 \u10e1\u10d8\u10db\u10de\u10e2\u10dd\u10db\u10d8.",
            "x": 10,
            "y": 20,
            "z": 30,
            "b": "\u10d0"
        },
        "query": [
            "Right justify the substring of {a} from index {x} to {y} within {z} characters, using {b} for padding.",
            "Pad the substring of {a} from index {x} to {y} to the right with {b} until it reaches {z} characters.",
            "Make the substring of {a} from index {x} to {y} right-aligned within {z} characters, padding with {b}."
        ],
        "language": "kat_Geor"
    },
    {
        "solution": "```python\nanswer = a.replace(b, c).title()\nprint(answer)\n```",
        "variables": {
            "a": "Apis mar Icelandic Meteorological Office bende nochiwo ripot ni ne onge yiengni mar piny moro amora mane osetimore kwom seche 48 mosekalo.",
            "b": "Icelandic Meteorological Office",
            "c": "IMO"
        },
        "query": [
            "Replace {b} with {c} in {a} and then convert the result to title case.",
            "Substitute {b} with {c} in {a} and change the result to title case.",
            "Change {b} to {c} in {a} and then transform the result to title case."
        ],
        "language": "luo_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(b)[x].capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "I lico\u00ee illegali peuan contegn\u00ee diverse impurit\u00e6 peigose, tra e qu\u00e6 o metan\u00f6lo, ch\u2019o peu caxon\u00e2 a cecit\u00e6 \u00f2 a m\u00f2rte anche in quantit\u00e6 picci\u00f1e.",
            "b": " ",
            "x": 5
        },
        "query": [
            "Split {a} by {b} and capitalize the {x+1}-th segment.",
            "Divide {a} using {b} as the delimiter and capitalize the {x+1}-th part.",
            "Break {a} at each {b} and capitalize the {x+1}-th section."
        ],
        "language": "lij_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].swapcase().center(z, b)\nprint(answer)\n```",
        "variables": {
            "a": "Yaa b\u0169mb s\u1ebdn toe w\u028bsgo s\u00e3n yaa ne a Bohr makr s\u1ebdn booge s\u1ebdn t\u1ebdn-s\u028bk b\u0169mb b\u00f5n-b\u00e3ooneg s\u1ebdn zoet\u1ebd ginda, b\u0169mb s\u1ebdn yaa wa \u00e3d\u0169ni w\u00e3 z\u0129isa s\u1ebdn gilgd w\u0129ndga-ges-a yal\u0269 1.1.",
            "x": 4,
            "y": 15,
            "z": 30,
            "b": "*"
        },
        "query": [
            "Swap the case of the substring of {a} from index {x} to {y} and center it within {z} characters, using {b} for padding.",
            "Change the case of the substring of {a} from position {x} to {y} and align it in the center of {z} characters, using {b} as the padding character.",
            "Convert the case of the substring of {a} from index {x} to {y} and place it in the center of a {z}-character wide field, padded with {b}."
        ],
        "language": "mos_Latn"
    },
    {
        "solution": "```python\nanswer = a.lstrip(b).zfill(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u0644\u0642\u062f\u0633 \u0639\u0627\u0635\u0645\u0629 \u0625\u0633\u0631\u0627\u0626\u064a\u0644 \u0648\u0623\u0643\u0628\u0631 \u0645\u062f\u0646\u0647\u0627 \u0631\u063a\u0645 \u0623\u0646 \u0645\u0639\u0638\u0645 \u0627\u0644\u062f\u0648\u0644 \u0627\u0644\u062b\u0627\u0646\u064a\u0629 \u0648\u0627\u0644\u0623\u0645\u0645 \u0627\u0644\u0645\u062a\u062d\u062f\u0629 \u0645\u0634 \u0645\u0639\u062a\u0631\u0641\u0629 \u0628\u0647\u0627 \u0643\u0639\u0627\u0635\u0645\u0629 \u0644\u0647\u0627.",
            "b": "\u0627\u0644",
            "x": 100
        },
        "query": [
            "Remove leading {b} characters from {a} and then pad the result with zeros until it is {x} characters long.",
            "Strip leading {b} characters from {a} and zero-fill the result to make it {x} characters in length.",
            "Eliminate leading {b} characters from {a} and add leading zeros to the result until its length is {x} characters."
        ],
        "language": "acq_Arab"
    },
    {
        "solution": "```python\nanswer = a.rsplit(x, y)[z].isdecimal()\nprint(answer)\n```",
        "variables": {
            "a": "\u05d4\u05e9\u05d9\u05d0 \u05e9\u05dc \u05e0\u05d3\u05d0\u05dc \u05d1\u05e8\u05d0\u05e9 \u05d1\u05e8\u05d0\u05e9 \u05de\u05d5\u05dc \u05d4\u05e7\u05e0\u05d3\u05d9 \u05d4\u05d5\u05d0 7-2.",
            "x": "-",
            "y": 1,
            "z": 1
        },
        "query": [
            "Split {a} at {x} into segments, performing up to {y} splits starting from the end, and check if the {z+1}-th segment is composed entirely of decimal characters.",
            "Divide {a} by {x} into parts, making up to {y} splits from the right, and verify if the {z+1}-th part consists solely of decimal digits.",
            "Break {a} at {x} into sections, doing up to {y} splits from the end, and determine if the {z+1}-th section contains only decimal numbers."
        ],
        "language": "heb_Hebr"
    },
    {
        "solution": "```python\nanswer = a.rjust(x, y).lower()\nprint(answer)\n```",
        "variables": {
            "a": "Ayo inaphuisa katalilo wakusasulula meso apwe ca ndando ikehe, ikalu kuzalanhihacihela pangu likehe liliho hangi kuishi kuyemuna.",
            "x": 150,
            "y": "-"
        },
        "query": [
            "Right-align {a} within {x} characters, filled with {y}, and convert the result to lowercase.",
            "Align {a} to the right within a width of {x} characters, using {y} as the fill character, and make it lowercase.",
            "Pad {a} to the right to make it {x} characters long with {y}, then change it to lowercase."
        ],
        "language": "cjk_Latn"
    },
    {
        "solution": "```python\nanswer = a.rsplit(x, y)[0].isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u12a5\u1272 \u1245\u122d\u133a\u1273\u1275 \u1265\u12dd\u130d\u1263\u12a5 \u12d3\u1219\u1255 \u12ad\u12b8\u12cd\u1295 \u12a3\u1208\u12ce\u1361 5 \u121a\u121c(1/5 \u12a2\u1295\u127d) \u12c8\u12ed \u12ab\u1265\u12a1 \u1295\u120b\u12d5\u120a\u1361 \u12a5\u1272 \u12dd\u1235\u1228\u1210\u1209 \u1295\u12cb\u1275 \u12f5\u121b \u12a3\u1265 \u12db\u1215\u120a \u120d\u1235\u1209\u1235 \u12ad\u12b8\u12cd\u1295 \u12a3\u1208\u12ce\u1362",
            "x": "\u1361",
            "y": 2
        },
        "query": [
            "Split {a} by {x} up to {y} times from the right and check if the first segment is numeric.",
            "Check if the first part is numeric after splitting {a} by {x} from the right up to {y} times.",
            "Determine if the initial segment is a number after splitting {a} by {x} from the right {y} times."
        ],
        "language": "tir_Ethi"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).replace(z, '')\nprint(answer)\n```",
        "variables": {
            "a": "\u062e\u06c6\u0634\u0628\u06d5\u062e\u062a\u0627\u0646\u06d5 \u0647\u06cc\u0686\u0645 \u0628\u06d5\u0633\u06d5\u0631\u062f\u0627 \u0646\u06d5\u0647\u0627\u062a \u0628\u06d5\u06b5\u0627\u0645 \u062f\u06cc\u0645\u06d5\u0646\u06ce\u06a9\u06cc \u0646\u0627\u062e\u06c6\u0634\u0645 \u0628\u06cc\u0646\u06cc \u06a9\u0627\u062a\u06ce\u06a9 \u062e\u06d5\u06b5\u06a9\u06cc \u062f\u06d5\u06cc\u0627\u0646\u0648\u06cc\u0633\u062a \u067e\u06d5\u0646\u062c\u06d5\u0631\u06d5\u06a9\u0627\u0646 \u0628\u0634\u06a9\u06ce\u0646\u0646 \u0628\u06c6 \u0626\u06d5\u0648\u06d5\u06cc \u0628\u0686\u0646\u0647\u200c \u062f\u0647\u200c\u0631\u0647\u200c\u0648\u0647\u200c.",
            "x": 100,
            "y": " ",
            "z": "\u06d5"
        },
        "query": [
            "Center {a} in a string of length {x} with {y} padding, then remove all {z} characters.",
            "Pad {a} to a total length of {x} using {y} and eliminate all {z} characters.",
            "Align {a} centrally in a string of length {x} with {y} padding and strip out all {z} characters."
        ],
        "language": "ckb_Arab"
    },
    {
        "solution": "```python\nanswer = a.isascii() and a.isspace()\nprint(answer)\n```",
        "variables": {
            "a": " "
        },
        "query": [
            "Check if {a} consists only of ASCII characters and is made up of whitespace characters.",
            "Determine if {a} contains only ASCII characters and is entirely composed of whitespace.",
            "Verify whether {a} is made up solely of ASCII characters and consists only of whitespace."
        ],
        "language": "lug_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='ignore').decode(encoding='utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "\u0634\u0650 \u062f\u0650 \u064a\u0650\u0645 \u062a\u064e\u0644\u064e\u0648\u064f\u0648\u064e\u0631\u064f \u0628\u064f\u0648\u0644\u064e \u0623\u0648\u0633\u064e\u0643\u064e \u064a\u0650\u0649 \u062f\u0650\u0646\u0652 \u0628\u064e\u0648\u064f\u0648\u064e\u0646\u064f",
            "x": "knc_Arab"
        },
        "query": [
            "Convert {a} to {x} encoding, ignoring unencodable characters, and then decode it back to utf-8.",
            "Encode {a} using {x} encoding, skip characters that can't be encoded, and decode it back to utf-8.",
            "Transform {a} to {x} encoding, omit unencodable characters, and convert it back to utf-8."
        ],
        "language": "knc_Arab"
    },
    {
        "solution": "```python\nanswer = a.capitalize().encode('ascii')\nprint(answer)\n```",
        "variables": {
            "a": "Ahum no a \u025bsii Miami, Florida b\u025by\u025b 3,000 miles no, atumi agyina mframa ano b\u025by\u025b 40 mph (64 kph)."
        },
        "query": [
            "Capitalize {a} and encode it in ASCII.",
            "Convert {a} to capitalized form and encode it using ASCII.",
            "Transform {a} to have its first letter capitalized and then encode it in ASCII."
        ],
        "language": "twi_Latn_asan1239"
    },
    {
        "solution": "```python\nanswer = a.encode('ascii', errors='replace').decode('ascii').title()\nprint(answer)\n```",
        "variables": {
            "a": "Yiengni malich mar piny mane omiyo lokruok obedo, notimore chieng' tarik 10 Mach e bathe kor nyandwat ma ugwe mar hoho manitiere e wi god volkano no."
        },
        "query": [
            "Encode {a} using ASCII, replacing unencodable characters with a question mark, then decode it back and capitalize the first character of each word.",
            "Convert {a} to ASCII, substituting unencodable characters with a question mark, then decode it and capitalize the first letter of each word.",
            "Transform {a} to ASCII, replacing characters that can't be encoded with a question mark, then decode it and capitalize the initial letter of each word."
        ],
        "language": "luo_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::y].isspace()\nprint(answer)\n```",
        "variables": {
            "a": "\u06a4\u06a0\u0646\u062f\u0627\u0644\u064a \u0648\u0644\u0627\u064a\u0647 \u0631\u0648\u0633\u064a\u0627 \u0645\u06a0\u0627\u0643\u062a\u064a\u0641\u0643\u0646 \u062c\u064a\u062a \u0648\u0627\u0646 \u0628\u0633\u064a\u0643\u06a4 \u0646\u0648\u0631\u0645\u0644 \u062f\u0631\u064a \u0633\u062a\u0627\u0633\u064a\u0648\u0646 \u062f\u064a\u0628\u0648\u0644\u064a\u0643\u0627\u0643\u0646.",
            "x": 5,
            "y": 3
        },
        "query": [
            "Check if every {y}-th character from position {x} to the end in {a} is a whitespace character.",
            "Determine if each {y}-th character starting from index {x} in {a} is a space.",
            "Verify if all characters at intervals of {y} starting from position {x} in {a} are whitespace."
        ],
        "language": "bjn_Arab"
    },
    {
        "solution": "```python\nanswer = a.rfind(x) == y and a.islower()\nprint(answer)\n```",
        "variables": {
            "a": "I sciensi\u00e6 stan che travaggian \u00e0 cre\u00e2 un reatt\u00f4 ch'o peu f\u00e2 de l'energia a-a m\u00e6xima mainea.",
            "x": "a",
            "y": 72
        },
        "query": [
            "Check if the last occurrence of {x} in {a} is at index {y} and if {a} is in lowercase.",
            "Verify that {x} appears last at index {y} in {a} and that {a} is all in lowercase.",
            "Determine if the final position of {x} in {a} is {y} and confirm that {a} is entirely in lowercase."
        ],
        "language": "lij_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(x, errors='ignore').decode(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u4eca\u5929\u7ea2\u6e56\u793e\u533a\u4e3a\u6770\u592b\u00b7\u97e6\u65af (Jeff Weise) \u548c\u4e5d\u540d\u53d7\u5bb3\u8005\u4e2d\u7684\u4e09\u4eba\u4e3e\u884c\u846c\u793c\u65f6\u6709\u6d88\u606f\u79f0\uff0c\u53e6\u4e00\u540d\u4e0e 3 \u6708 21 \u65e5\u6821\u56ed\u67aa\u51fb\u6848\u6709\u5173\u7684\u5b66\u751f\u5df2\u88ab\u6355\u3002",
            "x": "cmn_Hans"
        },
        "query": [
            "Encode {a} using {x} encoding, ignoring errors, and then decode it back using {x} encoding.",
            "Using {x} encoding, encode {a} while ignoring errors, and decode it back with the same encoding.",
            "Convert {a} to bytes with {x} encoding ignoring errors, then convert it back to string using the same encoding."
        ],
        "language": "cmn_Hans"
    },
    {
        "solution": "```python\nanswer = a[x:].center(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u041d\u0430\u0443\u0447\u043d\u0438\u0446\u0438\u0442\u0435 \u0440\u0430\u0431\u043e\u0442\u0430\u0442 \u043d\u0430 \u0442\u043e\u0430 \u0434\u0430 \u043d\u0430\u043f\u0440\u0430\u0432\u0430\u0442 \u0440\u0435\u0430\u043a\u0442\u043e\u0440 \u043a\u043e\u0458 \u043c\u043e\u0436\u0435 \u0434\u0430 \u0441\u043e\u0437\u0434\u0430\u0432\u0430 \u0435\u043d\u0435\u0440\u0433\u0438\u0458\u0430 \u043d\u0430 \u0438\u0441\u0442 \u043d\u0430\u0447\u0438\u043d.",
            "x": 10,
            "y": 50,
            "z": " "
        },
        "query": [
            "Center the substring of {a} from {x} to the end in a string of length {y}, padded with {z}.",
            "Pad the substring of {a} starting from index {x} to the end to make it centered in a string of length {y} with {z}.",
            "Take the substring of {a} from position {x} to the end, center it in a string of length {y}, and pad with {z}."
        ],
        "language": "mkd_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x:y].replace(z, w).isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u0a38\u0a48\u0a1f\u0a3f\u0a70\u0a17 \u0a2a\u0a4d\u0a30\u0a1a\u0a40\u0a28 \u0a38\u0a3e\u0a1c\u0a4b-\u0a38\u0a2e\u0a3e\u0a28,\u0a2e\u0a48\u0a28\u0a40\u0a15\u0a3f\u0a0a\u0a30\u0a21 \u0a2e\u0a48\u0a26\u0a3e\u0a28\u0a3e\u0a02 \u0a05\u0a24\u0a47 \u0a38\u0a35\u0a40\u0a2e\u0a3f\u0a70\u0a17 \u0a2a\u0a42\u0a32 \u0a35\u0a3e\u0a32\u0a40 \u0a07\u0a71\u0a15 \u0a07\u0a24\u0a3f\u0a39\u0a3e\u0a38\u0a15 \u0a2a\u0a41\u0a30\u0a3e\u0a23\u0a40 \u0a07\u0a2e\u0a3e\u0a30\u0a24 \u0a39\u0a4b \u0a38\u0a15\u0a26\u0a40 \u0a39\u0a48\u0964",
            "x": 10,
            "y": 30,
            "z": "\u0a38\u0a3e\u0a1c\u0a4b",
            "w": "\u0a38\u0a3e\u0a1c\u0a3e"
        },
        "query": [
            "Check if the substring of {a} from {x} to {y} with {z} replaced by {w} is printable.",
            "Determine if the segment of {a} between {x} and {y} with {z} swapped for {w} is printable.",
            "Verify if the portion of {a} from index {x} to {y} with {z} changed to {w} is printable."
        ],
        "language": "pan_Guru"
    },
    {
        "solution": "```python\nanswer = a[x:y].zfill(z).isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u0d9a\u0dd9\u0dc3\u0dda \u0dc0\u0dd9\u0dad\u0dad\u0dca, \u0dad\u0dbb\u0dca\u0da2\u0db1 \u0db8\u0da7\u0dca\u0da7\u0db8 \u0daf\u0dd0\u0da9\u0dd2 \u0dbd\u0dd9\u0dc3 \u0d85\u0da9\u0dd4 \u0d9a\u0dd2\u0dbb\u0dd3\u0db8\u0dd9\u0db1\u0dca \u0dc3\u0db8\u0dca\u0db4\u0dd6\u0dbb\u0dca\u0dab \u0dad\u0dbb\u0dca\u0da2\u0db1\u0dba \u0db8 \u0d89\u0dc0\u0dad\u0dca \u0dc0\u0dd6 \u0db6\u0dc0 \u0d85\u0dbb\u0dca\u0dae\u0dc0\u0dad\u0dca \u0db1\u0ddc\u0dc0\u0dd9\u0dba\u0dd2.",
            "x": 10,
            "y": 20,
            "z": 15
        },
        "query": [
            "Check if the substring of {a} from {x} to {y} padded with leading zeros to length {z} is numeric.",
            "Determine if the substring of {a} from index {x} to {y}, zero-padded to a length of {z}, consists only of numeric characters.",
            "Verify if the section of {a} between indices {x} and {y}, padded with zeros to reach a length of {z}, is a numeric string."
        ],
        "language": "sin_Sinh"
    },
    {
        "solution": "```python\nanswer = a[x:y].split(z)[w].isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u0905\u092b\u094d\u0930\u0940\u0915\u093e \u0915\u0947 \u092c\u093e\u0939\u0930 \u0909\u0928 \u0938\u092d\u0947 \u0938\u094d\u0925\u093e\u0928 \u0915\u0947 \u0932\u0947\u0932 \u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u0935\u0940\u091c\u093c\u093e, \u092a\u094d\u0930\u0938\u094d\u0925\u093e\u0928 \u0915\u0930, \u092d\u0942\u092e\u093f \u092a\u0930\u093f\u0935\u0939\u0928, \u0906\u0926\u093f \u0915\u0947 \u0905\u0924\u093f\u0930\u093f\u0915\u094d\u0924 \u0932\u093e\u0917\u0924 \u0915\u0947 \u091c\u094b\u0921\u093c\u0928\u093e\u0908 \u0928\u090f \u092d\u0942\u0932\u0947\u0902\u0964",
            "x": 0,
            "y": 50,
            "z": " ",
            "w": 5
        },
        "query": [
            "Verify if the {w+1}-th segment of the substring of {a} from {x} to {y} split by {z} is numeric.",
            "Check if the {w+1}-th part of the substring of {a} from {x} to {y} when split by {z} is a number.",
            "Determine if the {w+1}-th section of the substring of {a} from {x} to {y} divided by {z} is numeric."
        ],
        "language": "mag_Deva"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).encode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "\u0641\u064f\u0648\u0633\u0652\u0633\u0650\u0644\u0652 \u0623\u064e\u062f\u0657\u0631\u064f\u0648 \u0648\u064f\u062a\u0657\u064a\u0652\u064a\u064e\u060c \u0645\u064e\u0627\u0646\u064e\u0646\u0632\u0657 \u064a\u064e\u0643\u0652\u062a\u0657 \u0623\u064e\u062f\u0657 \u0641\u064f\u062a\u064f \u0634\u064e\u062f\u064e \u0645\u064f\u0648\u0644\u0650\u0643\u064f\u0644\u064e\u0627\u064a\u0652 \u062a\u0657\u0645\u064e\u0632\u0657\u0646\u064e\u0622 \u0643\u064f\u0648\u0632\u0657\u0646\u064e\u0631\u064f\u0648 \u062f\u064e\u062a\u0650\u0646\u0652 \u0648\u064e\u0643\u064e\u0648\u064f\u0646\u064f\u0648",
            "x": 4
        },
        "query": [
            "Expand tabs in {a} to {x} spaces and encode the result in UTF-8.",
            "Convert tabs in {a} to {x} spaces and encode the output in UTF-8.",
            "Replace tabs in {a} with {x} spaces and encode the string in UTF-8."
        ],
        "language": "knc_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:y].isdigit() and a[y:z].isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "El jutge va dir a Blake que era \"gaireb\u00e9 inevitable\" que l'enviessin a la pres\u00f3.",
            "x": 3,
            "y": 8,
            "z": 12
        },
        "query": [
            "Check if the substring of {a} from index {x} to {y} consists only of digits and the substring from {y} to {z} consists only of alphabetic characters.",
            "Verify if the part of {a} from {x} to {y} contains only numbers and the part from {y} to {z} contains only letters.",
            "Determine if the section of {a} between {x} and {y} is numeric and the section between {y} and {z} is alphabetic."
        ],
        "language": "cat_Latn"
    },
    {
        "solution": "```python\nanswer = a.capitalize().replace(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Christopher Garcia, kabilo wa mpuka ya ba Kapokola abaku Los Angeles Police Department, atile ntalamisoka umwaume uuletunganishiwa eulefwailikishiwa pa mulandu wa kupita apaleshiwa ukucila umulandu wa bonaushi.",
            "x": "Los Angeles Police Department",
            "y": "LAPD"
        },
        "query": [
            "Capitalize {a} and then replace {x} with {y}.",
            "Make the first letter of {a} uppercase and substitute {x} with {y}.",
            "Change the first character of {a} to uppercase and swap {x} with {y}."
        ],
        "language": "bem_Latn"
    },
    {
        "solution": "```python\nanswer = a.rsplit(x, y)[0].isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Hikwalaho ka sweswo, ku pfuke swiswolo leswikulu eka ntlawa wa vativi va nawu va le Greece hi ku paluxiwa ka swiendlo leswi nga riki enawini leswi Vaavanyisi, vativi va nawu, vadyeleri ni vagqweta va swi endleke hi nkarhi wa malembe lama hundzeke.",
            "x": " ",
            "y": 3
        },
        "query": [
            "Split {a} by {x} from the right up to {y} times and check if the first segment is alphabetic.",
            "Check if the first part of {a} after splitting it by {x} from the right up to {y} times is alphabetic.",
            "Determine if the initial segment of {a} is alphabetic after splitting it by {x} from the right up to {y} times."
        ],
        "language": "tso_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::z].upper().startswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "Kwase, eminyakeni lembalwa leyalandzela nga-1639, i-astronomer lenguMngisi lubito layo kunguJeremiya Horrocks yabukela kuhamba kweVenus.",
            "x": 5,
            "y": "E",
            "z": 3
        },
        "query": [
            "Check if the uppercase version of every {z}-th character in {a} starting from index {x} starts with {y}.",
            "Determine if the uppercase form of every {z}-th character in {a} beginning at index {x} begins with {y}.",
            "Verify if the uppercase version of every {z}-th character in {a} from index {x} onwards starts with {y}."
        ],
        "language": "ssw_Latn"
    },
    {
        "solution": "```python\nanswer = a[y::z].count(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0410\u043a\u043e \u0438\u0441\u043a\u0430\u0442\u0435 \u0434\u0430 \u043f\u0440\u043e\u043f\u0443\u0441\u043d\u0435\u0442\u0435 \u042e\u0436\u043d\u0438\u044f \u0422\u0438\u0445\u0438 \u043e\u043a\u0435\u0430\u043d \u0438 \u0437\u0430\u043f\u0430\u0434\u043d\u0438\u044f \u0431\u0440\u044f\u0433 \u043d\u0430 \u042e\u0436\u043d\u0430 \u0410\u043c\u0435\u0440\u0438\u043a\u0430, \u0442\u043e\u0437\u0438 \u043f\u043e\u043b\u0435\u0442 \u043d\u0435 \u0435 \u0435\u0434\u0438\u043d\u0441\u0442\u0432\u0435\u043d\u0430\u0442\u0430 \u0432\u044a\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442. (\u0432\u0438\u0436\u0442\u0435 \u043f\u043e-\u0434\u043e\u043b\u0443)",
            "x": "\u042e",
            "y": 10,
            "z": 3
        },
        "query": [
            "Count the occurrences of {x} in the substring of {a} starting from position {y} with a step of {z}.",
            "How many times does {x} appear in the substring of {a} that starts at index {y} and steps by {z}?",
            "Find the number of times {x} occurs in the substring of {a} beginning at {y} and taking every {z}th element."
        ],
        "language": "bul_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x:y].title().startswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "Si quies viaxar alredor del mundu nel Hemisferiu Sur, hai menos opciones de vuelos y destinos porque nun hai rutes tresoce\u00e1niques.",
            "x": 3,
            "y": 18,
            "z": "Quies"
        },
        "query": [
            "Does the title-cased substring of {a} from {x} to {y} start with {z}?",
            "Is the title-cased version of the substring of {a} from index {x} to {y} starting with {z}?",
            "Check if the title-cased substring of {a} from position {x} to {y} begins with {z}."
        ],
        "language": "ast_Latn"
    },
    {
        "solution": "```python\nanswer = a.swapcase().ljust(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Jednak w czerwcu 1956 roku dosz\u0142o do konfrontacji obietnic Chruszczowa z zamieszkami w Polsce, gdy robotnicze demonstracje przeciwko brakom \u017cywno\u015bci i ci\u0119ciom p\u0142ac przekszta\u0142ci\u0142y si\u0119 w protest wymierzony w komunizm jako taki.",
            "x": 200,
            "y": "*"
        },
        "query": [
            "What is the left-justified version of {a} with length {x} and padding {y} after swapping case?",
            "How does the left-justified string of {a} look with a total length of {x} and padding character {y} after changing the case?",
            "Show the left-justified form of {a} with a length of {x} and padding {y} after swapping its case."
        ],
        "language": "pol_Latn"
    },
    {
        "solution": "```python\nanswer = a.title().rsplit(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "Babal a walata je chede ko ha a jippi( to ado joda ha sare hobbe ko sare goddo) wawan marugo wifi ko pc je do hauti be internet, bo fattude fu do mari babal internet je lumo ko babal je wifi mere.",
            "x": "ko",
            "y": 3
        },
        "query": [
            "Convert {a} to title case and then split it from the right at {x} up to {y} times.",
            "Change {a} to title case and perform a right split at {x} up to {y} times.",
            "Transform {a} to title case and split it from the right at {x} up to {y} occurrences."
        ],
        "language": "fuv_Latn"
    },
    {
        "solution": "```python\nanswer = a.upper().startswith(x) and a.lower().endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "Han m\u00e5tte d\u00f8mmes annerledes hvis han hadde mistet biln\u00f8klene og det var hans egen bil han pr\u00f8vde \u00e5 bryte seg inn i.",
            "x": "HAN",
            "y": "i."
        },
        "query": [
            "Check if the uppercase version of {a} starts with {x} and the lowercase version ends with {y}.",
            "Verify if {a} in uppercase begins with {x} and in lowercase finishes with {y}.",
            "Determine if {a} when converted to uppercase starts with {x} and when converted to lowercase ends with {y}."
        ],
        "language": "nob_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('ascii').decode('ascii').find(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u5118\u7ba1\u4e86\u89e3\u4e00\u500b\u4eba\u7684\u6b77\u53f2\u4e26\u4e0d\u4ee3\u8868\u4e86\u89e3\u6587\u5316\uff0c\u4f46\u9019\u81f3\u5c11\u53ef\u4ee5\u8b93\u4eba\u7406\u89e3\u4ed6\u5011\u5728\u7d44\u7e54\u7684\u6b77\u53f2\u4e2d\u8655\u5728\u4ec0\u9ebc\u6a23\u7684\u4f4d\u7f6e\u4e0a\u3002",
            "x": "\u6b77\u53f2"
        },
        "query": [
            "Encode {a} to ASCII, decode it back, and find the index of {x}.",
            "Convert {a} to ASCII encoding, revert it, and locate the position of {x}.",
            "Transform {a} to ASCII, revert the transformation, and determine the index of {x}."
        ],
        "language": "cmn_Hant"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('ascii', errors='ignore').isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u0932\u093e\u0924\u094d\u0935\u093f\u092f\u093e \u0906\u0923\u093f \u0938\u094d\u0932\u094b\u0935\u093e\u0915\u093f\u092f\u093e \u0926\u094b\u0918\u093e\u0902\u0928\u0940 ACTA \u092e\u0927\u094d\u092f\u0947 \u0938\u0939\u092d\u093e\u0917\u0940 \u0939\u094b\u0923\u094d\u092f\u093e\u091a\u0940 \u092a\u094d\u0930\u0915\u094d\u0930\u093f\u092f\u093e \u0932\u093e\u0902\u092c\u0923\u0940\u0935\u0930 \u091f\u093e\u0915\u0932\u0940 \u0906\u0939\u0947."
        },
        "query": [
            "Is {a} printable after encoding to 'utf-8' and decoding to 'ascii' while ignoring errors?",
            "Can {a} be printed after converting to 'utf-8' and then to 'ascii' with errors ignored?",
            "Will {a} remain printable after being encoded in 'utf-8' and decoded in 'ascii' with errors ignored?"
        ],
        "language": "mar_Deva"
    },
    {
        "solution": "```python\nanswer = a.upper().rjust(x, y).startswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "Sed en aliaj partoj de la mondo, kie la bakteria fa\u016dno estas nova al vi, estas plej probable, ke vi havos problemojn.",
            "x": 100,
            "y": "*",
            "z": "SED"
        },
        "query": [
            "Does the uppercase version of {a}, right-justified to {x} characters with {y}, start with {z}?",
            "Is the uppercase form of {a}, padded to {x} characters with {y}, beginning with {z}?",
            "When {a} is converted to uppercase and right-justified to {x} characters using {y}, does it start with {z}?"
        ],
        "language": "epo_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].upper().isdecimal()\nprint(answer)\n```",
        "variables": {
            "a": "Metanje bumeranga je priljubljena spretnost, ki si je \u017eeli nau\u010diti veliko turistov.",
            "x": 8,
            "y": 18
        },
        "query": [
            "Determine if the uppercase version of the substring from {x} to {y} in {a} consists only of decimal characters.",
            "Check if the substring from {x} to {y} in {a}, when converted to uppercase, is composed entirely of decimal digits.",
            "Is the uppercase transformation of the substring from {x} to {y} in {a} made up solely of decimal numbers?"
        ],
        "language": "slv_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).center(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0915\u0941\u091b \u0939\u094b\u091f\u0932\u094b\u0902 \u092e\u0947\u0902 \u0938\u094d\u091f\u0940\u092e \u0930\u0947\u0932\u0935\u0947 \u0914\u0930 \u0938\u092e\u0941\u0926\u094d\u0930\u0940 \u0932\u093e\u0907\u0928\u0930 \u0915\u0947 \u0938\u094d\u0935\u0930\u094d\u0923\u093f\u092e \u092f\u0941\u0917 \u0915\u0940 \u092a\u0930\u0902\u092a\u0930\u093e \u0926\u0947\u0916\u0928\u0947 \u0915\u094b \u092e\u093f\u0932\u0924\u0940 \u0939\u0948; \u091c\u094b \u0915\u093f \u0926\u0942\u0938\u0930\u0947 \u0935\u093f\u0936\u094d\u0935 \u092f\u0941\u0926\u094d\u0927 \u0938\u0947 \u092a\u0939\u0932\u0947 19\u0935\u0940\u0902 \u0938\u0926\u0940 \u092f\u093e \u0936\u0941\u0930\u0941\u0906\u0924\u0940 20\u0935\u0940\u0902 \u0938\u0926\u0940 \u0915\u0947 \u0939\u0948\u0902.",
            "x": "\u0938\u094d\u091f\u0940\u092e",
            "y": "\u092d\u093e\u092a",
            "z": 100
        },
        "query": [
            "Replace {x} with {y} in {a} and center the result in a field of {z} characters.",
            "Substitute {x} with {y} in {a} and align the result centrally within a width of {z} characters.",
            "Change {x} to {y} in {a} and center the output in a space of {z} characters."
        ],
        "language": "hin_Deva"
    },
    {
        "solution": "```python\nanswer = a[:x].isnumeric() and a[x:].isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Hi ti REM to hlayanyana hi vusiku byin\u2019wana ni byin\u2019wna, xiyimo lexi u twaka vurhongo bya ntiyiso ni ku hlakarhela ka miri wa wena ku nga endleki ngopfu leswaku ku hundzuka xiphiqo.",
            "x": 5
        },
        "query": [
            "Verify if the first {x} characters of {a} are numeric and the rest are alphabetic.",
            "Check if the initial {x} characters of {a} are digits and the remaining characters are letters.",
            "Determine if the first {x} characters in {a} are numbers and the rest are alphabetic characters."
        ],
        "language": "tso_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).capitalize().endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "su segundo gol di e anochi tabata su di 60 di temporada, birando e prom\u00e9 hungad\u00f3 pa skor 60 \u00f2f mas gol den un temporada for di 1995-96, tempu ku Jaromir Jagr i Mario Lemieux kada unu a alkans\u00e1 e rek\u00f2rt ak\u00ed.",
            "x": "su",
            "y": "ak\u00ed."
        },
        "query": [
            "Strip characters in {x} from both ends of {a}, capitalize the result, and check if it ends with {y}.",
            "Remove characters in {x} from the start and end of {a}, capitalize it, and verify if it concludes with {y}.",
            "Trim characters in {x} from both sides of {a}, capitalize the string, and determine if it finishes with {y}."
        ],
        "language": "pap_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "Ta\u010diau gr\u0117sm\u0117s lygio suma\u017einimas nerei\u0161kia, kad pavojus dingo i\u0161 esm\u0117s\u201c."
        },
        "query": [
            "Remove leading and trailing whitespace from {a} and swap the case of each character.",
            "Trim the whitespace from both ends of {a} and invert the case of each letter.",
            "Strip the spaces around {a} and change the case of every character."
        ],
        "language": "lit_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='ignore').decode(x).isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u1c69\u1c71\u1c64 \u1c6b\u1c5a \u1c71\u1c5a\u1c76\u1c5f \u1c6b\u1c5a \u1c6f\u1c69\u1c65\u1c74\u1c5f\u1c79 \u1c65\u1c5f\u1c7a\u1c66\u1c64\u1c61 \u1c61\u1c6e \u1c69\u1c71\u1c64 \u1c6b\u1c5a \u1c71\u1c64\u1c61\u1c7d\u1c5b\u1c5f \u1c68\u1c6e\u1c71\u1c5f\u1c5c \u1c71\u1c64\u1c66\u1c64\u1c5b \u1c5f\u1c79\u1c6d\u1c6b\u1c5f\u1c79\u1c68\u1c64 \u1c68\u1c6e \u1c6f\u1c5f\u1c79\u1c5b\u1c6d\u1c5f\u1c79\u1c63 \u1c6e\u1c6b \u1c5b\u1c5f\u1c66\u1c6e\u1c71\u1c5f \u1c61\u1c5f\u1c66\u1c5f\u1c78 \u1c68\u1c6e \u1c68\u1c5a \u1c68\u1c6e\u1c71\u1c5f\u1c5c \u1c75\u1c64\u1c6a\u1c5f\u1c79\u1c68 \u1c68\u1c6e\u1c71\u1c5f\u1c5c \u1c5f\u1c65\u1c5f \u1c5b\u1c5f\u1c66\u1c6e\u1c78 \u1c60\u1c5f\u1c71\u1c5f\u1c7e",
            "x": "utf-8"
        },
        "query": [
            "Encode {a} to {x} encoding, ignore errors, decode back to {x}, and check if it is a valid identifier.",
            "Convert {a} to {x} encoding, skip errors, convert back to {x}, and verify if it is a valid identifier.",
            "Transform {a} using {x} encoding, bypass errors, revert to {x}, and determine if it is a valid identifier."
        ],
        "language": "sat_Olck"
    },
    {
        "solution": "```python\nanswer = a[:y].upper().zfill(z)\nprint(answer)\n```",
        "variables": {
            "a": "T\u00edm je zaji\u0161t\u011bno, \u017ee nejvhodn\u011bj\u0161\u00ed lo\u010f pro n\u011b  bude odpov\u00eddat va\u0161im p\u0159\u00edpadn\u00fdm po\u017eadavk\u016fm a/nebo omezen\u00edm.",
            "y": 10,
            "z": 15
        },
        "query": [
            "Take the first {y} characters of {a}, convert them to uppercase, and pad with zeros to length {z}.",
            "Extract the first {y} letters from {a}, change them to uppercase, and zero-fill to make the length {z}.",
            "Get the initial {y} characters of {a}, turn them into uppercase, and pad with zeros to reach a length of {z}."
        ],
        "language": "ces_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8', errors='replace').decode('utf-8').islower()\nprint(answer)\n```",
        "variables": {
            "a": "De-a lungul secolelor, oamenii au construit cu aten\u021bie terase pe terenul accidentat \u0219i abrupt, duc\u00e2nd \u00een sus la st\u00e2ncile cu vedere spre mare."
        },
        "query": [
            "Encode {a} in 'utf-8' replacing errors, decode it back, and check if the result is all lowercase.",
            "Convert {a} to 'utf-8' with error replacement, decode it, and verify if it is entirely in lowercase.",
            "Transform {a} to 'utf-8' encoding with error handling, decode it, and determine if it is completely lowercase."
        ],
        "language": "ron_Latn"
    },
    {
        "solution": "```python\nanswer = a[:x].join(y).isupper()\nprint(answer)\n```",
        "variables": {
            "a": "Xafladaha macbadka Kerala waa qaar aad u xiiso badan in la daawado, iyagoo leh maroodiyo la sharxay, heesaha macbadka iyo dabbaal degyo kale.",
            "x": 10,
            "y": "SOMALIA"
        },
        "query": [
            "Take the first {x} characters of {a}, join them with {y}, and check if the result is in uppercase.",
            "Extract the first {x} characters from {a}, concatenate them with {y}, and determine if the final string is all uppercase.",
            "Get the initial {x} characters of {a}, merge them with {y}, and verify if the combined string is in uppercase."
        ],
        "language": "som_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding='utf-8', errors='replace').decode('utf-8').count(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0643\u0648\u0645\u0628\u0648 \u0633\u0648\u0631\u0648 \u0643\u0627\u0633\u0648 \u064a\u0646 \u0627\u0646\u062c\u0648 \u062f\u064a \u0632\u0648 \u0646\u064a\u0646\u064a. \u0631\u064a\u062f\u0646\u064a\u0645 \u0643\u0648\u0645\u0628\u0648 \u062f\u064a\u0646\u0645\u0628\u0627 \u064a\u0627\u064a \u0631\u064a\u062f\u0646\u064a\u0645 \u064a\u0648\u0645 \u0634\u0627 \u0628\u0648\u0645\u064a\u0646.",
            "x": "\u0643\u0648\u0645\u0628\u0648"
        },
        "query": [
            "Encode {a} to UTF-8, decode it back, and count the occurrences of {x}.",
            "Convert {a} to UTF-8 encoding, revert it, and find the number of times {x} appears.",
            "Transform {a} into UTF-8, decode it, and tally the instances of {x}."
        ],
        "language": "knc_Arab"
    },
    {
        "solution": "```python\nanswer = a.capitalize().isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "Batho ba be ba betha dit\u0161hipi t\u0161a mafesetere ka ditulo, efela mafesetere a be a sa thubege."
        },
        "query": [
            "Capitalize the first character of {a} and check if it is a valid identifier.",
            "Make the first letter of {a} uppercase and verify if it forms a valid identifier.",
            "Convert the first character of {a} to uppercase and determine if it is a valid identifier."
        ],
        "language": "nso_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].strip(z).capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "N\u00ed b\u00ed al\u1eb9\u0301 \u1ecdj\u1ecd\u0301 k\u1eb9san o\u1e63\u00f9 k\u1eb9j\u1ecd, oj\u00fa Morakot k\u00f2 ju \u00e0\u00e1d\u1ecd\u0301rin k\u00ecl\u00f3m\u00edt\u00e0 s\u00ed agbegb\u00e8 Fujian \u00e0w\u1ecdn Chines.",
            "x": 10,
            "y": 30,
            "z": "\u1ecd\u0301"
        },
        "query": [
            "Strip characters in {z} from the substring of {a} from {x} to {y} and capitalize the result.",
            "Remove characters in {z} from the slice of {a} between {x} and {y}, then capitalize the output.",
            "Trim characters in {z} from the section of {a} ranging from {x} to {y} and capitalize the final string."
        ],
        "language": "yor_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x, y)[0].isupper()\nprint(answer)\n```",
        "variables": {
            "a": "Vistus di studanti normalmenti ten rikizitus y prusidimentu di pididu diferenti di vistu normal di turista \u00f4 vistu di neg\u00f3siu.",
            "x": " ",
            "y": 3
        },
        "query": [
            "Split {a} using {x} as delimiter up to {y} times, then check if the first segment is in uppercase.",
            "Using {x} as the delimiter, split {a} up to {y} times and determine if the first part is in uppercase.",
            "Check if the first part of {a} is in uppercase after splitting it with {x} up to {y} times."
        ],
        "language": "kea_Latn"
    },
    {
        "solution": "```python\nanswer = a.swapcase()[::-1]\nprint(answer)\n```",
        "variables": {
            "a": "Tys l\u012bk sliduotuojam pasagr\u012bzt. Ka slidys sasasver pa labi, sliduotuojs gr\u012b\u017e\u0101s pa labi, ka slidys sasasver pa kreisi, sliduotuojs gr\u012b\u017e\u0101s pa kreisi."
        },
        "query": [
            "Reverse the string {a} after swapping its case.",
            "Swap the case of the string {a} and then reverse it.",
            "After changing the case of each character in {a}, reverse the string."
        ],
        "language": "ltg_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::y].rfind(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u05d1\u05e0\u05d5\u05e1\u05e3, \u05d9\u05e9 \u05e4\u05d7\u05d5\u05ea \u05de\u05d2\u05d1\u05dc\u05d5\u05ea \u05d6\u05de\u05df \u05d5\u05d0\u05e4\u05e9\u05e8\u05d5\u05ea \u05dc\u05e9\u05e2\u05d5\u05ea \u05e2\u05d1\u05d5\u05d3\u05d4 \u05d2\u05de\u05d9\u05e9\u05d5\u05ea. (\u05d1\u05e8\u05de\u05e8, 1998)",
            "x": 5,
            "y": 2,
            "z": "\u05e2"
        },
        "query": [
            "Find the last occurrence of {z} in the substring of {a} starting from position {x} with every {y}-th character.",
            "Locate the last position of {z} in the slice of {a} beginning at {x} and taking every {y}-th element.",
            "Determine the final index of {z} within the segment of {a} that starts at index {x} and includes every {y}-th character."
        ],
        "language": "heb_Hebr"
    },
    {
        "solution": "```python\nanswer = a[x:y].istitle() and a[x:y].isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Jonny Reid, copiloto taqa A1GP Nueva Zelanda, kunan kawsaypi qawarichirqa aswan utqaytaraq apayninpi, chaka patapi Aucklandpi, Nueva Zelanda, 48 wata \u00f1awpayniyuq, chaninpi.",
            "x": 0,
            "y": 10
        },
        "query": [
            "Check if the substring of {a} from index {x} to {y} is in title case and contains only alphabetic characters.",
            "Verify if the substring of {a} from index {x} to {y} is in title case and consists solely of alphabetic characters.",
            "Determine if the substring of {a} from index {x} to {y} is in title case and only has alphabetic characters."
        ],
        "language": "quy_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode(x).islower()\nprint(answer)\n```",
        "variables": {
            "a": "Goonsdagmiddag leekde de tankopeninge nog altied, woersjijnlek door thermische oetzetting binne de tank.",
            "x": "utf-8"
        },
        "query": [
            "Check if {a} is in lowercase after encoding to 'utf-8' and decoding with {x}.",
            "Verify if {a} remains in lowercase after being encoded in 'utf-8' and decoded using {x}.",
            "Determine if {a} is still in lowercase after encoding it to 'utf-8' and decoding it with {x}."
        ],
        "language": "lim_Latn"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).encode('ascii', errors='replace')\nprint(answer)\n```",
        "variables": {
            "a": "\u0410\u0437\u044b\u0440\u043a\u044b \u0443\u0447\u0443\u0440\u0434\u0430 \u043a\u043e\u043c\u043f\u044c\u044e\u0442\u0435\u0440\u043b\u0435\u0440 \u0441\u04af\u0440\u04e9\u0442\u0442\u04e9\u0440 \u043c\u0435\u043d\u0435\u043d \u0432\u0438\u0434\u0435\u043e\u043b\u043e\u0440\u0434\u0443 \u04e9\u0437 \u043a\u044b\u0437\u044b\u043a\u0447\u044b\u043b\u044b\u0433\u044b\u043d\u0434\u0430 \u043a\u043e\u043b\u0434\u043e\u043d\u0443\u043f \u043a\u0430\u043b\u0434\u044b.",
            "x": 4
        },
        "query": [
            "Convert tabs in {a} to {x} spaces and encode the result to ASCII, replacing unencodable characters.",
            "Replace tabs in {a} with {x} spaces and convert the string to ASCII, substituting any characters that can't be encoded.",
            "Change tabs in {a} to {x} spaces and encode the string to ASCII, using a replacement for characters that cannot be encoded."
        ],
        "language": "kir_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).isspace()\nprint(answer)\n```",
        "variables": {
            "a": "\u0641\u062a\u0649\t\u0644\u0627\u062a\u0648\t\u064a\u0648\u062f\u0649\t\u0627\u064a\u0646\u062f\t\u064a\u0643\u0649\t\u0648\u0646\u0643\t\u063a\u0646\t\u0643\u0644\u0644\t\u0647\u0648\t\u0627\u062f\u0643\u0627\u062a\u0627\u0633\tKV\t62\t(KV\t62)\th\u0628\u0627\u0631\u064a\t\u062a\u0648\u062a\u0646\u0643\u0645\u0648\u063a\u0644.\t1922\t\u0642\u0644\u0644\u0649\t\u0645\u064a\u062f\u0649\t\u0644\u0627\t\u0645\u0639\u0646\t\u0633\u0643\u0627",
            "x": 4
        },
        "query": [
            "Determine if {a} with tabs expanded to {x} spaces consists only of whitespace characters.",
            "Check if the string {a} becomes all whitespace when tabs are expanded to {x} spaces.",
            "Is the string {a} composed entirely of whitespace after expanding tabs to {x} spaces?"
        ],
        "language": "knc_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:y].casefold()\nprint(answer)\n```",
        "variables": {
            "a": "San 1957 Luxembourg k\u025bra j\u025bkulu sigibaga d\u0254 ye min kod\u0254nna bi ni \u0190r\u0254pu T\u0254n ye.",
            "x": 4,
            "y": 12
        },
        "query": [
            "Convert the substring from {x} to {y} in {a} to lowercase using casefold.",
            "Transform the substring in {a} from index {x} to {y} to lowercase with casefold.",
            "Change the substring from {x} to {y} in {a} to lowercase by applying casefold."
        ],
        "language": "bam_Latn"
    },
    {
        "solution": "```python\nanswer = a[::-1].upper().find(x)\nprint(answer)\n```",
        "variables": {
            "a": "Embakan katup punika ngranayang pelepasan tekanan ring sistem tur lengis ngecor ring bantalan ka tangki sane prasida ngawadahin 55,000 barel (2.3 yuta galon).",
            "x": "A"
        },
        "query": [
            "Find the position of {x} in the uppercase version of the reverse of {a}.",
            "Determine the index of {x} in the reversed and uppercased string of {a}.",
            "Locate the position of {x} within the uppercase transformation of the reversed string {a}."
        ],
        "language": "ban_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode(x).rjust(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u5c3d\u7ba1\u667a\u5229\u57281810\u5e74\u5ba3\u5e03\u72ec\u7acb\uff08\u5728\u62ff\u7834\u4ed1\u6218\u4e89\u671f\u95f4\uff0c\u897f\u73ed\u7259\u5728\u6570\u5e74\u4e2d\u6ca1\u6709\u6b63\u5e38\u8fd0\u4f5c\u7684\u4e2d\u592e\u653f\u5e9c\uff09\uff0c\u4f46\u76f4\u52301818\u5e74\u624d\u53d6\u5f97\u5bf9\u897f\u73ed\u7259\u7684\u51b3\u5b9a\u6027\u80dc\u5229\u3002",
            "x": "utf-8",
            "y": 150,
            "z": " "
        },
        "query": [
            "Encode {a} to {x} encoding, replacing unencodable characters, then decode it back and right-justify it to length {y} using {z} as padding.",
            "Convert {a} to {x} encoding, substituting unencodable characters, then convert it back and pad it to the right to length {y} with {z}.",
            "Transform {a} into {x} encoding, handling unencodable characters by replacing them, then revert it and right-align it to length {y} with {z} as the padding character."
        ],
        "language": "cmn_Hans"
    },
    {
        "solution": "```python\nanswer = a.count(x) > 0 and a.endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u2d30\u2d34\u2d53\u2d37\u2d30\u2d54 \u2d30\u2d37\u2d53\u2d31\u2d49\u2d4f \u2d49\u2d37 \u2d37-\u2d30\u2d31\u2d54\u2d30\u2d63\u2d54\u2d30\u2d63\u2d49\u2d4f \u2d4f\u2d5c\u2d30\u2d4f\u2d49\u2d37 \u2d37 \u2d30\u2d3e\u2d30\u2d42\u2d4e\u2d30\u2d4f \u2d4f \u2d30\u2d57\u2d30\u2d54\u2d49\u2d59 \u2d30\u2d37 \u2d30\u2d54\u2d34\u2d30\u2d4d\u2d49\u2d4f \u2d30\u2d4f\u2d53\u2d59\u2d30\u2d54<\u2d4f.",
            "x": "\u2d30\u2d54\u2d34\u2d30\u2d4d\u2d49\u2d4f",
            "y": "\u2d4f."
        },
        "query": [
            "Verify if the substring {x} appears in {a} and if {a} ends with {y}.",
            "Check if {a} contains the substring {x} and ends with {y}.",
            "Determine whether {a} includes {x} and concludes with {y}."
        ],
        "language": "taq_Tfng"
    },
    {
        "solution": "```python\nanswer = a.strip(x).title().replace(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "Heer verloor l\u00e8ts tege Raonic op de Brisbane Open.",
            "x": "Heer",
            "y": "Raonic",
            "z": "Nadal"
        },
        "query": [
            "Strip characters in {x} from {a}, convert to title case, and replace {y} with {z}.",
            "Remove characters in {x} from {a}, change to title case, and substitute {y} with {z}.",
            "Trim characters in {x} from {a}, transform to title case, and switch {y} with {z}."
        ],
        "language": "lim_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].strip().isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u767c\u751f\u8868\u9762\u5f35\u529b\u662f\u56e0\u70ba\u6c34\u9762\u7684\u5206\u5b50\u6703\u5f37\u70c8\u5438\u5f15\u5f7c\u6b64\uff0c\u5f37\u5ea6\u8d85\u904e\u4e0a\u65b9\u7684\u7a7a\u6c23\u5206\u5b50\u3002",
            "x": "\uff0c",
            "y": 1
        },
        "query": [
            "Split {a} by {x}, strip whitespace from the {y}-th segment, and check if it is numeric.",
            "Divide {a} using {x} as the delimiter, remove leading and trailing spaces from the {y}-th part, and verify if it is a number.",
            "Separate {a} based on {x}, trim spaces from the {y}-th section, and determine if it is numeric."
        ],
        "language": "cmn_Hant"
    },
    {
        "solution": "```python\nanswer = a[:x].replace(y, z).isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Umi castillo medieval ymaguare ymaiteguive oinspira umi py'amongeta, omomagiavo umi caballero ku\u00e9ra, karu guasu ha caballeria Arturo ara peguare.",
            "x": 10,
            "y": " ",
            "z": ""
        },
        "query": [
            "Take the first {x} characters of {a}, replace {y} with {z}, and check if the result contains only alphabetic characters.",
            "Extract the first {x} characters from {a}, substitute {y} with {z}, and verify if the outcome consists solely of letters.",
            "Get the initial {x} characters of {a}, change {y} to {z}, and determine if the resulting string is purely alphabetic."
        ],
        "language": "gug_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::z].casefold().startswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "D\u00f3min\u00edska l\u00fd\u00f0veldi\u00f0 (sp\u00e6nska: Rep\u00fablica Dominicana) er land \u00ed Kar\u00edbahafi sem liggur \u00e1 austurhluta eyjunnar Hispaniola, sem \u00fea\u00f0 deilir me\u00f0 Ha\u00edt\u00ed",
            "x": 10,
            "y": "l\u00fd\u00f0",
            "z": 1
        },
        "query": [
            "Check if the substring of {a} starting at index {x} and taking every {z}-th character, in lowercase, starts with {y}.",
            "Verify if the substring of {a} beginning at {x} and selecting every {z}-th character, in lowercase, begins with {y}.",
            "Determine if the substring of {a} from index {x} and taking every {z}-th character, in lowercase, commences with {y}."
        ],
        "language": "isl_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].join(z).islower()\nprint(answer)\n```",
        "variables": {
            "a": "Tha iad ag innse sgeulachdan ri ch\u00e8ile o na bailtean dha am buineadh iad, gan innse sna blasan \u00e0raidh aca fh\u00e8in agus ann an dual-chainnt an \u00e0ite.",
            "x": 10,
            "y": 20,
            "z": "agus"
        },
        "query": [
            "Check if the result of joining {z} with the substring of {a} from {x} to {y} is in lowercase.",
            "Determine if the concatenation of {z} with the slice of {a} from index {x} to {y} is all in lowercase.",
            "Verify whether the combination of {z} and the segment of {a} between {x} and {y} is entirely in lowercase."
        ],
        "language": "gla_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].encode('utf-8').decode('utf-8').isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0926\u093f\u0928\u094d\u0925\u093f\u092e\u0939\u0930\u0948, \u0928\u094b\u0902 \u0938\u094b\u0930\u0916\u094c\u092c\u093e \u0917\u093e\u0930\u093f\u0928\u093f \u0916\u094b\u0930\u0916\u093f \u0938\u093f\u092b\u093e\u092f\u0928\u093e\u092f \u0928\u0941\u092f\u094b\u092c\u094d\u0932\u093e, \u0928\u094b\u0902 \u0938\u093e\u0928\u094d\u0928\u094b \u0939\u093e\u0917\u094c \u092c\u093f\u092f\u094b \u0938\u094b\u0930\u092c\u093e \u0917\u0941\u092c\u0941\u0928\u0928\u093f \u0917\u093e\u0930\u093f \u0916\u093e\u0935\u0928\u094b \u0928\u093e\u091c\u093e\u0926\u094b\u0902\u0964",
            "x": 5,
            "y": 15
        },
        "query": [
            "Check if the substring from {x} to {y} in {a}, after encoding and decoding in 'utf-8', is a valid identifier.",
            "Determine if the substring of {a} from index {x} to {y}, once encoded and decoded in 'utf-8', qualifies as a valid identifier.",
            "Verify if the portion of {a} between indices {x} and {y}, after being encoded and decoded using 'utf-8', is a valid identifier."
        ],
        "language": "brx_Deva"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).split(z)[0].isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Luxemborg a totjorn ensajat de demorar un pa\u00eds neutre mas es estat ocupat a l'enc\u00f2p durant la Primi\u00e8ra Gu\u00e8rra Mondiala e la Segonda Gu\u00e8rra Mondiala per Alemanha.",
            "x": "a",
            "y": "o",
            "z": " "
        },
        "query": [
            "Replace {x} with {y} in {a}, split the result by {z}, and check if the first element contains only ASCII characters.",
            "Substitute {x} with {y} in {a}, divide the outcome by {z}, and verify if the initial segment contains only ASCII characters.",
            "Swap {x} with {y} in {a}, split the string by {z}, and determine if the first part consists solely of ASCII characters."
        ],
        "language": "oci_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\uabc2\uabe5\uabcf\uabd5\uabdb \uabd0\uabd5\uabd2\uabe4 \uabd1\uabe9\uabc9\uabe3\uabdf\uabd7\uabd7\uabe4 \uabc0\uabd4\uabe4\uabc1\uabe8 \uabca\uabe3\uabdb\uabc8\uabe4\uabd7\uabe6, \uabd1\uabd7\uabe8\uabd5\uabe8 \uabc3\uabe4\uabcc\uabe5\uabdd\uabc5 \uabca\uabe3\uabe1\uabc5\uabe5\uabce \uabca\uabe8\uabd2\uabe5\uabcf\uabd7\uabe8\uabc5 \uabca\uabe3\uabdb\uabc5\uabd5 \uabcd\uabe3\uabe0\uabc5\uabc8\uabe4\uabd5 \uabd1\uabd7\uabe8 \uabd1\uabe9\uabcd\uabe5\uabdb\uabc5 \uabd1\uabc9\uabdb\uabc4 \uabd1\uabe3\uabcf\uabc5 \uabce\uabc8\uabe4\uabeb"
        },
        "query": [
            "Check if {a} is a valid identifier after stripping whitespace from both ends.",
            "Determine if {a}, after removing leading and trailing spaces, is a valid identifier.",
            "Verify if {a} is a valid identifier once whitespace is stripped from both ends."
        ],
        "language": "mni_Mtei"
    },
    {
        "solution": "```python\nanswer = a.casefold().rjust(x, y).startswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "Dvije svjetlosne zrake su okrenute tako da pokazuju prema nebu u toku no\u0107i.",
            "x": 80,
            "y": "*",
            "z": "dvije"
        },
        "query": [
            "Check if the casefolded and right-justified version of {a} with length {x} using {y} as the fill character starts with {z}.",
            "Determine if the casefolded string {a}, right-justified to length {x} with {y} as the padding character, begins with {z}.",
            "Verify whether the casefolded and right-justified string {a}, padded to a length of {x} with {y}, starts with {z}."
        ],
        "language": "bos_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).swapcase().count(z)\nprint(answer)\n```",
        "variables": {
            "a": "A \u00e7itt\u00e6 a l\u2019\u00e9 sacra a-e tr\u00e6 religioin monoteiste: ebraismo, crestianeximo e islam, e a fa da centro spirituale, religioso e colturale.",
            "x": "a",
            "y": "o",
            "z": "E"
        },
        "query": [
            "After replacing {x} with {y} in {a} and swapping case, how many times does {z} appear?",
            "How many times does {z} occur after replacing {x} with {y} in {a} and changing the case?",
            "What is the count of {z} after swapping case and replacing {x} with {y} in {a}?"
        ],
        "language": "lij_Latn"
    },
    {
        "solution": "```python\nanswer = a.casefold().split(x)[y].isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Los puxones arranquen \u00e1rboles, estrocen edificios y llancen coches pel aire. El dos por cientu de los tornaos m\u00e1s violentos duren m\u00e1s de tres hores.",
            "x": " ",
            "y": 5
        },
        "query": [
            "After casefolding {a} and splitting by {x}, does the {y}-th segment contain only alphabetic characters?",
            "If you casefold {a} and split it by {x}, is the {y}-th part composed solely of alphabetic characters?",
            "When {a} is casefolded and split using {x}, does the {y}-th segment consist entirely of alphabetic characters?"
        ],
        "language": "ast_Latn"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).capitalize().startswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "Couchsurfing leiutati 2004. aasta jaanuaris p\u00e4rast seda, kui programmeerija Casey Fenton leidis odava lennu Islandile, kuid tal polnud kohta, kus \u00f6\u00f6bida.",
            "x": ".",
            "y": "Couchsurfing"
        },
        "query": [
            "After removing {x} from the end of {a} and capitalizing it, does it start with {y}?",
            "Does {a} start with {y} after removing {x} from its end and capitalizing it?",
            "If you strip {x} from the end of {a} and capitalize it, does it begin with {y}?"
        ],
        "language": "ekk_Latn"
    },
    {
        "solution": "```python\nanswer = a[y:].rjust(x, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u062f \u06a9\u0631\u0646\u0644 \u062c\u0627\u0646 \u0633\u067c\u0627\u0631\u06a9 colonels john stark \u0627\u0648 \u06a9\u0631\u0646\u0644 \u0686\u06d0\u0645\u0632 \u0631\u06cc\u0689 james reed \u0644\u0647 \u062e\u0648\u0627 \u062f \u0647\u06cc\u0645\u067e\u0634\u0627\u06cc\u0631 \u0627\u0648\u0644 \u0627\u0648 \u062f\u0631\u06d0\u0645 \u063a\u0646\u0689 \u062f\u0648\u0647 \u0633\u0648\u0648 \u0639\u0633\u06a9\u0631\u0648 \u067e\u0647 \u0627\u0648\u0644\u0647 \u06a9\u0631\u062e\u0647 \u06a9\u06d0 \u0627\u06a9\u0645\u0627\u0644\u0627\u062a \u062a\u0631 \u0633\u0631\u0647 \u06a9\u0648\u0644 \u0686\u06d0 \u0648\u0631\u0648\u0633\u062a\u0647 (\u0648\u0631\u0648\u0633\u062a\u0647 \u062f\u0648\u0627\u0693\u0647 \u062f \u062c\u0646\u0631\u0627\u0644\u06cc \u0631\u062a\u0628\u06cc \u062a\u0631 \u0644\u0627\u0633\u0647 \u06a9\u0693\u064a )",
            "x": 50,
            "y": 10,
            "z": " "
        },
        "query": [
            "Right-justify the substring of {a} starting from position {y} to length {x} using {z} as padding.",
            "Pad the substring of {a} starting at index {y} to the right to make its length {x} using {z}.",
            "Take the substring of {a} from index {y} and right-justify it to length {x} with {z} as the padding character."
        ],
        "language": "pbt_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:y].replace(z, w).isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u1010\u102e\u1088\u1022\u1031\u1087\u101e\u102f\u1010\u103a\u1038\u1019\u107c\u103a\u1038 \u101e\u1030\u101c\u1030\u101d\u103a\u1087\u1019\u102e\u1038 \u101e\u103d\u1075\u103a\u1038\u1010\u102d\u107c\u103a\u1022\u107c\u103a\u1019\u1085\u107c\u103a\u1088\u1075\u107c\u103a\u1010\u1004\u103a\u1038 \u107d\u1083\u1087\u1010\u102d\u107c\u103a\u101e\u1030\u107c\u107c\u103a\u1089\u101a\u101d\u103a\u1089\u104b \u101e\u103d\u1075\u103a\u1038\u1010\u102d\u107c\u103a\u1076\u1062\u101d\u103a\u1038\u1019\u1086\u1088\u107c\u107c\u103a\u1089 \u1015\u1031\u1083\u1038\u1010\u102d\u102f\u101d\u103a\u1038\u107c\u102d\u1030\u101d\u103a\u107c\u1019\u103a\u1089\u1076\u1085\u1004\u103a \u1022\u1019\u103a\u1087\u107c\u107c\u103a \u107c\u102d\u1030\u101d\u103a\u1019\u1030\u107a\u103a\u107c\u1086\u1078\u102d\u102f\u1004\u103a \u1075\u1019\u103a\u107c\u1019\u103a \u1019\u107c\u103a\u1038\u1010\u1031\u1019\u102d\u102f\u107c\u103a\u1088\u1081\u1085\u1004\u103a\u1038\u101d\u1086\u1089\u101a\u1030\u1087\u101a\u101d\u103a\u1089\u104b \u1010\u1031\u1083\u1087\u107c\u1004\u103a\u1087 \u101e\u103d\u1075\u103a\u1038\u1010\u102d\u107c\u103a\u1076\u1062\u101d\u103a\u1038\u1075\u1010\u103a\u1038 \u101a\u1004\u103a\u1038\u1078\u1062\u1004\u103a\u108a\u1019\u102e\u1038\u101c\u103d\u1004\u103a\u1088\u101a\u1030\u1015\u103a\u1088\u101a\u103d\u1019\u103a\u1038\u101a\u1030\u1087\u101a\u101d\u103a\u1089\u104b",
            "x": 5,
            "y": 20,
            "z": "\u1019\u107c\u103a\u1038",
            "w": "ABC"
        },
        "query": [
            "Check if the substring from {x} to {y} in {a}, with {z} replaced by {w}, contains only alphanumeric characters.",
            "Verify if the section of {a} from index {x} to {y}, after replacing {z} with {w}, is alphanumeric.",
            "Determine if the part of {a} between {x} and {y}, with {z} swapped for {w}, consists solely of alphanumeric characters."
        ],
        "language": "shn_Mymr"
    },
    {
        "solution": "```python\nanswer = a[x:].rjust(y, z).startswith(w)\nprint(answer)\n```",
        "variables": {
            "a": "\u0417\u0443\u0443\u0445\u044b\u0433 \u0433\u0430\u043b\u0430\u0430\u0441 \u0430\u0432\u0441\u0430\u043d \u0445\u0430\u043b\u0443\u0443\u043d \u0447\u0443\u043b\u0443\u0443\u0433\u0430\u0430\u0440 \u0445\u0430\u043b\u0430\u0430\u0434\u0430\u0433, \u044d\u0441\u0432\u044d\u043b \u0437\u0430\u0440\u0438\u043c \u0433\u0430\u0437\u0430\u0440\u0442 \u0433\u0430\u0437\u0440\u044b\u043d \u0433\u04af\u043d\u0438\u0439 \u0445\u0430\u043b\u0443\u0443\u043d \u043d\u044c \u0433\u0430\u0437\u0440\u044b\u043d \u0442\u0443\u0445\u0430\u0439\u043d \u0445\u044d\u0441\u0433\u0438\u0439\u0433 \u0431\u0430\u0439\u0433\u0430\u043b\u0438\u0430\u0441\u0430\u0430 \u0445\u0430\u043b\u0443\u0443\u043d \u0431\u043e\u043b\u0433\u043e\u0436 \u0431\u0430\u0439\u0434\u0430\u0433.",
            "x": 10,
            "y": 50,
            "z": " ",
            "w": "\u0445\u0430\u043b\u0443\u0443\u043d"
        },
        "query": [
            "Check if the part of {a} starting from position {x}, right-aligned in a field of {y} characters with {z} filling the space, starts with {w}.",
            "Determine if the substring of {a} from index {x}, padded to {y} characters with {z}, begins with {w}.",
            "Verify if the section of {a} from position {x}, right-justified to {y} characters using {z}, starts with {w}."
        ],
        "language": "khk_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x:y].center(z, w).isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u1c67\u1c64\u1c6b\u1c5f\u1c79 \u1c68\u1c6e \u1c6a\u1c5a\u1c74\u1c65\u1c6e\u1c68\u1c62\u1c5f \u1c65\u1c6e\u1c71 \u1c64\u1c65\u1c5f\u1c68\u1c5f \u1c5e\u1c5f\u1c79\u1c5c\u1c64\u1c6b \u1c62\u1c5f\u1c68\u1c65\u1c5f\u1c5e \u1c68\u1c6e\u1c6d\u1c5f\u1c5c \u1c75\u1c5f\u1c68\u1c6d\u1c5f \u1c75\u1c64\u1c62 \u1c5b\u1c6e\u1c6d\u1c5f\u1c68 \u1c66\u1c69\u1c6d \u1c5f\u1c60\u1c5f\u1c71\u1c5fI",
            "x": 5,
            "y": 20,
            "z": 30,
            "w": "*"
        },
        "query": [
            "Check if the substring from {x} to {y} in {a}, centered in a field of {z} characters with {w} filling the space, contains only printable characters.",
            "Determine if the substring of {a} from index {x} to {y}, centered to a width of {z} characters with {w} as the fill character, is entirely printable.",
            "Verify whether the substring from {x} to {y} in {a}, when centered to a width of {z} characters using {w} as padding, consists solely of printable characters."
        ],
        "language": "sat_Olck"
    },
    {
        "solution": "```python\nanswer = a[x:y].expandtabs(z).endswith(w)\nprint(answer)\n```",
        "variables": {
            "a": "\u0622\u0641\u062a\u0627\u0628 \u067e\u0648\u0633\u062a\u0647 \u0627\u06cc \u0647\u0645\u0627\u0646\u0646\u062f \u0632\u0645\u06cc\u0646 \u0646\u062f\u0627\u0631\u062f \u06a9\u0647 \u0628\u062a\u0648\u0627\u0646\u06cc\u062f \u0631\u0648\u06cc \u0622\u0646 \u0627\u06cc\u0633\u062a\u0627\u062f\u0647 \u0634\u0648\u06cc\u062f. \u062a\u0645\u0627\u0645\u06cc \u0622\u0641\u062a\u0627\u0628 \u0627\u0632 \u06af\u0627\u0632\u0647\u0627\u060c \u0622\u062a\u0634 \u0648 \u067e\u0644\u0627\u0633\u0645\u0627 \u0633\u0627\u062e\u062a\u0647 \u0634\u062f\u0647 \u0627\u0633\u062a.",
            "x": 0,
            "y": 20,
            "z": 4,
            "w": "\u0627\u06cc"
        },
        "query": [
            "Check if the substring from {x} to {y} in {a}, with tabs expanded to {z} spaces, ends with {w}.",
            "Determine if the substring of {a} from index {x} to {y}, after expanding tabs to {z} spaces, ends with {w}.",
            "Verify if the section of {a} between {x} and {y}, with tabs converted to {z} spaces, concludes with {w}."
        ],
        "language": "prs_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:y:z].title().isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "Biro ya m\u00e9t\u00e9o ya Islande zabisaka kunikana ya ntoto mosi ve na bwala ya Hekla na bantangu 48 yai me luta.",
            "x": 10,
            "y": 50,
            "z": 2
        },
        "query": [
            "Check if the substring from {x} to {y} in {a} with every {z}-th character, converted to title case, is a valid identifier.",
            "Determine if the title-cased substring from {x} to {y} in {a}, taking every {z}-th character, is a valid identifier.",
            "Verify if the substring of {a} from {x} to {y} with every {z}-th character, after converting to title case, is a valid identifier."
        ],
        "language": "ktu_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x, y)[0].isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0622\u0648 \u06c1\u0645 \u0627\u0679\u0644\u06cc \u06a9\u06d2 \u067e\u0644\u0627\u0646\u0633 \u06a9\u06cc \u062a\u0634\u0631\u06cc\u062d \u0633\u06d2 \u0628\u0627\u062a \u0634\u0631\u0648\u0639 \u06a9\u0631\u06cc\u06ba\u06d4 \u0627\u0679\u0644\u06cc \u0628\u0691\u06cc \u062d\u062f \u062a\u06a9 \u062c\u0631\u0645\u0646\u06cc \u0627\u0648\u0631 \u062c\u0627\u067e\u0627\u0646 \u06a9\u0627 \u201d\u0628\u0631\u0627\u062f\u0631\u0650 \u062e\u0648\u0631\u062f\u201c \u062a\u06be\u0627\u06d4",
            "x": " ",
            "y": 3
        },
        "query": [
            "Split {a} by {x} up to {y} times and check if the first segment is a valid identifier.",
            "Divide {a} using {x} as the delimiter up to {y} times and verify if the initial part is a valid identifier.",
            "Break {a} at {x} up to {y} times and determine if the first portion is a valid identifier."
        ],
        "language": "urd_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:].upper().isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Mba pese\u0263 y\u0254 pap\u0269s\u0269\u0263 p\u0254s\u0254\u0254l\u0269 wondu na nat\u028by\u028b \u025bl\u025b wondu ndu t\u0269\u0269s\u0269\u014bn\u0269-w\u025b paa n\u0303\u0269\u0269 nab\u028by\u028b taa.",
            "x": 10
        },
        "query": [
            "Are all characters in the substring of {a} from {x} to the end uppercase and ASCII?",
            "Is the substring of {a} starting from index {x} to the end composed of uppercase ASCII characters?",
            "Does the substring of {a} from position {x} onwards contain only uppercase ASCII characters?"
        ],
        "language": "kbp_Latn"
    },
    {
        "solution": "```python\nanswer = a.title().split(x)[y].isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0160o lielo v\u0113tru v\u0113ja stiprums ir l\u012bdz 480 km/h (133 m/s; 300 j\u016bdzes stund\u0101).",
            "x": " ",
            "y": 3
        },
        "query": [
            "Check if the {y}th word in the title-cased version of {a} split by {x} is a valid identifier.",
            "Determine if the {y}th segment from the title-cased {a} split by {x} is a valid identifier.",
            "Verify if the {y}th element from the title-cased string {a} split by {x} is a valid identifier."
        ],
        "language": "lvs_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].rjust(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "\u0628\u0648 \u0646\u06af\u0631\u0627\u0646\u0686\u0644\u0642 \u0648\u0627\u0631\u062f\u06cc \u06a9\u06cc \u0627\u06cc\u0647 \u0627\u0646\u0641\u0648\u0644\u0627\u0646\u0632\u0627 \u0639\u0644\u0627\u0626\u0645\u06cc \u062e\u0641\u06cc\u0641 \u0642\u0627\u0644\u0627 \u0645\u0631\u06cc\u0636\u0644\u0631 \u0631\u0648\u0632\u0645\u0631\u0647 \u0627\u06cc\u0634\u0644\u0631\u06cc\u0646 \u0627\u0646\u062c\u0627\u0645 \u0648\u0631\u0645\u0627\u0642\u0646\u0627\u0646 \u062f\u0627\u0647\u0627 \u0686\u0648\u062e \u0622\u062f\u0627\u0645\u0644\u0627\u0631\u06cc \u0646\u062e\u0648\u0634\u0644\u0627\u062f\u0627\u062c\u0627\u062e\u0644\u0627\u0631",
            "x": " ",
            "y": 5,
            "z": 20,
            "w": " "
        },
        "query": [
            "Split {a} by {x}, take the {y}-th element, and right-justify it within {z} characters using {w} as padding.",
            "Divide {a} using {x} as the delimiter, select the {y}-th part, and pad it to the right to make it {z} characters long with {w}.",
            "Break {a} at each {x}, pick the {y}-th segment, and right-align it to {z} characters wide, filling with {w}."
        ],
        "language": "azb_Arab"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).upper().isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "Nuddindo do tefa kirseeku, hirrita, ko bo andal hader waayu hakika/be lawru ko labbi.",
            "x": "Nud"
        },
        "query": [
            "Remove characters in {x} from the start of {a}, convert to uppercase, and check if it's a valid identifier.",
            "Strip characters in {x} from the beginning of {a}, change to uppercase, and verify if it's a valid identifier.",
            "Eliminate characters in {x} from the start of {a}, transform to uppercase, and determine if it's a valid identifier."
        ],
        "language": "fuv_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).swapcase().find(y)\nprint(answer)\n```",
        "variables": {
            "a": "Biza fuwura k\u01ddraye d\u01dd ndaso son shart\u01ddwanz\u01dd biza fondoye d\u01ddga b\u01ddlaro tamtam got\u01ddye aw kasuwuye-a gade.",
            "x": "Biza",
            "y": "FONDOYE"
        },
        "query": [
            "Find the position of {y} in {a} with leading and trailing {x} removed and case swapped.",
            "Determine the index of {y} in {a} after removing leading and trailing {x} and swapping the case.",
            "Locate the position of {y} in {a} after stripping {x} from both ends and changing the case."
        ],
        "language": "knc_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].split(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u06a4\u0647\u0646\u0624\u0645 \u0643\u0631\u0648\u0645, \u0661\u0662 \u0643\u0645 \u0633\u0627\u0628\u0627\u0644\u0627\u0647 \u0628\u0627\u0631\u0627\u062a \u062f\u0627\u064a\u0627 \u0645\u0627\u062a\u0627\u0646 \u0633\u064a\u0649\u0645 \u0631\u0649\u0627\u06a4. \u0643\u0648\u064a\u0644 \u062f\u064a \u06a4\u0648\u0646\u0686\u0627\u0643 \u0628\u0648\u0643\u064a\u062a \u06a0\u064a\u0646\u064a \u062f\u064a\u0628\u0627\u0646\u0762\u0648\u0646 \u06a4\u0627\u062f\u0627 \u0643\u0627\u0647\u064a\u0631 \u0627\u0628\u0627\u062f \u0669, \u06a4\u0627\u062f\u0627 \u0645\u0627\u0633\u0627 \u06a4\u0627\u0645\u0627\u0631\u064a\u0646\u062a\u0627\u0647\u0627\u0646 \u0631\u0627\u062c\u0627 \u064a\u0627\u0633\u0648\u0641\u0631\u0645\u0627\u0646.",
            "x": 10,
            "y": 50,
            "z": " "
        },
        "query": [
            "Split the substring of {a} from index {x} to {y} using {z} as the delimiter.",
            "Divide the substring of {a} ranging from index {x} to {y} by the delimiter {z}.",
            "Use {z} to split the substring of {a} that spans from index {x} to {y}."
        ],
        "language": "bjn_Arab"
    },
    {
        "solution": "```python\nanswer = a.encode(x, errors='ignore').decode(x).isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u0648\u0639\u0644\u0649 \u0646\u062d\u0648 \u0645\u0645\u0627\u062b\u0644\u060c \u0642\u062f \u064a\u062e\u0637\u0626 \u0645\u0633\u0627\u0641\u0631 \u0628\u0631\u064a\u0637\u0627\u0646\u064a \u0641\u064a \u0623\u0633\u0628\u0627\u0646\u064a\u0627 \u0641\u064a \u062a\u0644\u0648\u064a\u062d \u0627\u0644\u0648\u062f\u0627\u0639 \u0645\u0646 \u0631\u0627\u062d\u0629 \u0627\u0644\u064a\u062f \u0627\u0644\u0645\u0648\u0627\u062c\u0647\u0629 \u0644\u0644\u0634\u062e\u0635 \u0627\u0644\u0630\u064a \u064a\u0644\u0648\u062d (\u0628\u062f\u0644\u0627\u064b \u0645\u0646 \u0627\u0644\u0634\u062e\u0635 \u0627\u0644\u0630\u064a \u064a\u062a\u0645 \u0627\u0644\u062a\u0644\u0648\u064a\u062d \u0625\u0644\u064a\u0647) \u0643\u0625\u0634\u0627\u0631\u0629 \u0644\u0644\u0639\u0648\u062f\u0629.",
            "x": "arb_Arab"
        },
        "query": [
            "Encode {a} using {x}, ignore errors, decode it back, and check if the result is printable.",
            "Using encoding {x}, encode {a}, ignore any errors, decode it back, and verify if the output is printable.",
            "Encode the string {a} with {x}, ignore errors during encoding, decode it back, and determine if the final result is printable."
        ],
        "language": "arb_Arab"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u06a4\u0627\u062f\u0648 \u062a\u0627\u0648\u0646 \u0661\u0669\u0667\u0660\u060c \u0631\u0627\u064a\u0645\u0648\u0646\u062f \u062f\u0627\u0645\u0627\u062f\u064a\u0627\u0646\u060c \u0633\u0627\u0648\u0631\u06a0 \u062f\u0648\u062a\u0648\u0631 \u0645\u0627\u0631\u06a0\u0643\u06a4 \u06a4\u0627\u0646\u0627\u0644\u064a\u062a\u064a\u060c \u0645\u0627\u0646\u0627\u0645\u0648\u0627\u0646 \u062f\u0627\u0633\u0631 \u0627\u0648\u0646\u062a\u0648\u0627\u0642 \u06a4\u06a0\u06ac\u0648\u0646\u0648\u0627\u0646 \u06a4\u0646\u0686\u062a\u0631\u0623\u0646 \u0631\u0633\u0648\u0646\u0646\u0633 \u0645\u0762\u0646\u064a\u062a\u064a\u06a9 \u0633\u0627\u0628\u0627\u06ac\u0627\u064a \u0627\u0644\u0627\u064a\u0642 \u0627\u0648\u0646\u062a\u0648\u0627\u0642 \u0645\u0627\u0645\u0627\u0631\u0633\u0648 \u0643\u0627\u0633\u0647\u0627\u062a\u0646.",
            "x": "\u0646"
        },
        "query": [
            "Trim trailing characters in {x} from {a} and check if the result is made up of digit characters only.",
            "Remove trailing {x} from {a} and verify if the remaining string consists solely of digits.",
            "Check if the string {a} without the trailing {x} characters is composed entirely of digits."
        ],
        "language": "min_Arab"
    },
    {
        "solution": "```python\nanswer = a[:y].join(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0418\u0430\u043a\u043e \u043f\u043e\u0432\u0435\u045c\u0435\u0442\u043e \u0430\u0433\u0435\u043d\u0446\u0438\u0438 \u0441\u0435 \u0441\u043f\u0440\u0435\u043c\u043d\u0438 \u0437\u0430 \u043d\u0430\u0458\u0433\u043e\u043b\u0435\u043c \u0434\u0435\u043b \u043e\u0434 \u043e\u0431\u0438\u0447\u043d\u0438\u0442\u0435 \u0430\u0440\u0430\u043d\u0436\u043c\u0430\u043d\u0438, \u043c\u043d\u043e\u0433\u0443 \u0430\u0433\u0435\u043d\u0442\u0438 \u0441\u0435 \u0441\u043f\u0435\u0446\u0438\u0458\u0430\u043b\u0438\u0437\u0438\u0440\u0430\u043d\u0438 \u0437\u0430 \u043a\u043e\u043d\u043a\u0440\u0435\u0442\u043d\u0438 \u0432\u0438\u0434\u043e\u0432\u0438 \u043f\u0430\u0442\u0443\u0432\u0430\u045a\u0430, \u0431\u0443\u045f\u0435\u0442\u0438 \u0438\u043b\u0438 \u0434\u0435\u0441\u0442\u0438\u043d\u0430\u0446\u0438\u0438.",
            "x": [
                "\u0435\u043b\u0435\u043c\u0435\u043d\u04421",
                "\u0435\u043b\u0435\u043c\u0435\u043d\u04422",
                "\u0435\u043b\u0435\u043c\u0435\u043d\u04423"
            ],
            "y": 10
        },
        "query": [
            "Join elements of {x} with the first {y} characters of {a}.",
            "Combine elements of {x} using the first {y} characters of {a} as a separator.",
            "Merge elements of {x} with the initial {y} characters of {a} in between."
        ],
        "language": "mkd_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.encode('ascii', errors='ignore').isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Taftilt dinna ilaq ad tettwabeddel. ilaq le\u1e25der deg ubeddel-ines."
        },
        "query": [
            "Does {a} contain only alphabetic characters after encoding to ASCII and ignoring errors?",
            "Is {a} composed solely of alphabetic characters when encoded to ASCII and errors are ignored?",
            "After encoding {a} to ASCII and ignoring errors, does it consist only of alphabetic characters?"
        ],
        "language": "kab_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].upper().istitle()\nprint(answer)\n```",
        "variables": {
            "a": "A a tshama ehotela ya ntlawa emahlweni ka ntlangu lowu a wu kunguhateriwe Sonto va lwisana na Bolonia.",
            "x": 2,
            "y": 9
        },
        "query": [
            "Is the substring from {x} to {y} in {a} in title case after converting to uppercase?",
            "After converting to uppercase, is the substring from {x} to {y} in {a} in title case?",
            "Does the substring from {x} to {y} in {a} become title case when converted to uppercase?"
        ],
        "language": "tso_Latn"
    },
    {
        "solution": "```python\nanswer = a.casefold().rjust(x, y).isupper()\nprint(answer)\n```",
        "variables": {
            "a": "O, ABD Arbiy-de\u00f1iz quvetlerini\u00f1 Yendici flotuna tayin etilgen ve Yaponiyan\u0131\u00f1 Nagasakindeki Saseboda yerle\u015fken edi.",
            "x": 100,
            "y": "*"
        },
        "query": [
            "Is the casefolded version of {a} right-justified with {x} characters and padded with {y} in uppercase?",
            "After converting {a} to casefold, is it right-justified with {x} characters and padded with {y} in uppercase?",
            "When {a} is casefolded, right-justified to {x} characters, and padded with {y}, is it in uppercase?"
        ],
        "language": "crh_Latn"
    },
    {
        "solution": "```python\nanswer = a.partition(x)[y].strip().title()\nprint(answer)\n```",
        "variables": {
            "a": "D\u00e9anann coil\u00edneachta\u00ed an tseang\u00e1in l\u00e9igi\u00fanaigh m\u00e1irse\u00e1il agus nead\u00fa i gc\u00e9imeanna difri\u00fala freisin.",
            "x": "l\u00e9igi\u00fanaigh",
            "y": 2
        },
        "query": [
            "Partition {a} by {x}, take the {y}-th part, strip whitespace, and convert to title case.",
            "Split {a} using {x}, select the {y}-th segment, remove leading and trailing spaces, and capitalize each word.",
            "Divide {a} at {x}, choose the {y}-th section, trim spaces, and change to title case."
        ],
        "language": "gle_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).split(z)[w]\nprint(answer)\n```",
        "variables": {
            "a": "\u0648\u0633\u064a\u0644\u0629 \u0627\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u064a \u0627\u0644\u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0643\u0627\u0646\u062a \u0645\u062e\u062a\u0644\u0641\u0629. \u0644\u0645 \u064a\u0639\u062f \u0627\u0644\u0636\u063a\u0637 \u064a\u062a\u0645\u062b\u0644 \u0641\u064a \u0627\u0644\u062a\u0630\u0643\u0631 \u0627\u0644\u0641\u0631\u062f\u064a\u060c \u0644\u0643\u0646 \u0627\u0644\u0642\u062f\u0631\u0629 \u0639\u0644\u0649 \u062a\u0630\u0643\u0631 \u0627\u0644\u0646\u0635 \u062d\u0635\u0644\u062a \u0639\u0644\u064a \u0627\u0644\u062a\u0631\u0643\u064a\u0632 \u0627\u0644\u0623\u0643\u0628\u0631.",
            "x": "\u0627\u0644\u062a\u0630\u0643\u0631",
            "y": "\u0627\u0644\u0627\u0633\u062a\u0630\u0643\u0627\u0631",
            "z": "\u060c",
            "w": 1
        },
        "query": [
            "Replace {x} with {y} in {a}, then split the result at {z} and retrieve the {w+1}-th segment.",
            "Substitute {x} with {y} in {a}, split the modified string by {z}, and get the {w+1}-th part.",
            "Change {x} to {y} in {a}, then divide the string at {z} and extract the {w+1}-th section."
        ],
        "language": "arb_Arab"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).upper().replace(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "Autokemping je mo\u017en\u00fd v p\u0159\u00edpad\u011b, \u017ee vlastn\u00edte minivan, SUV, sedan nebo kombi se sklopiteln\u00fdmi seda\u010dkami.",
            "x": ".",
            "y": "MINIVAN",
            "z": "KARAVAN"
        },
        "query": [
            "Remove any trailing {x} characters from {a}, convert it to uppercase, and replace {y} with {z}.",
            "Trim trailing {x} from {a}, change to uppercase, and substitute {y} with {z}.",
            "Strip trailing {x} from {a}, make it uppercase, and swap {y} with {z}."
        ],
        "language": "ces_Latn"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).capitalize().encode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "Nende armee ja merev\u00e4gi olid n\u00f5rgemad, ehkki nad olid just enne s\u00f5ja algust ehitanud neli uut laeva.",
            "x": "N"
        },
        "query": [
            "Remove any leading {x} characters from {a}, capitalize it, and encode it in UTF-8.",
            "Strip leading {x} characters from {a}, capitalize the result, and encode it in UTF-8.",
            "Trim leading {x} from {a}, capitalize the string, and convert it to UTF-8 encoding."
        ],
        "language": "ekk_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x, y)[0].zfill(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0412\u04d7\u0441\u0435\u043c \u0443\u0439\u0440\u0103\u043c \u043f\u00ff\u043b\u0115\u043c \u043f\u0435\u043a \u043a\u0443\u0440\u04d1\u043d\u043d\u0103. \u0412\u04d1\u043b \u0447\u0438 \u043f\u0115\u0440\u0440\u0435\u043c\u0115\u0448\u0115 \u0432\u0438\u043b\u04d7 \u043a\u043b\u0435\u0442\u043a\u0103\u0441\u0435\u043d\u0435 \u0442\u04d7\u043f\u0447\u0435\u043a\u0435\u043d \u043f\u0443\u043b\u043d\u04d1.",
            "x": " ",
            "y": 3,
            "z": 20
        },
        "query": [
            "Split {a} at each occurrence of {x} with a maximum of {y} splits, take the first part, and pad it with zeros until its length is {z}.",
            "Divide {a} by {x} up to {y} times, take the initial segment, and zero-fill it to reach a length of {z}.",
            "Break {a} at each {x} up to {y} splits, select the first segment, and pad it with zeros to make its length {z}."
        ],
        "language": "chv_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).islower() and a.isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Zva\u017ete vy\u0161et\u0159en\u00ed o\u010d\u00ed z pohodl\u00ed domova, zejm\u00e9na pokud to kryje va\u0161e pojistka, a vezm\u011bte si s sebou p\u0159edpis, abyste jej mohli vyu\u017e\u00edt.",
            "x": "o\u010d\u00ed",
            "y": "o\u010di"
        },
        "query": [
            "Replace {x} with {y} in {a}, then check if the result is in lowercase and if all characters are ASCII.",
            "Substitute {x} with {y} in {a}, and verify if the outcome is entirely in lowercase and consists of ASCII characters.",
            "Change {x} to {y} in {a}, then determine if the resulting string is all lowercase and contains only ASCII characters."
        ],
        "language": "ces_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].islower() and a[x:y].isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "Kwaliteit merkmonture in zulke gebede kinne twie probleme h\u00f6bbe; somege kinne nep zien, an de ecte zien ge\u00efmporteerd en woersjijnelek deurder es thoes.",
            "x": 10,
            "y": 20
        },
        "query": [
            "Check if the substring from {x} to {y} in {a} is both lowercase and consists of digits.",
            "Verify if the segment of {a} from index {x} to {y} is in lowercase and contains only digits.",
            "Determine if the part of {a} between {x} and {y} is all lowercase letters and numbers."
        ],
        "language": "lim_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::z].title().center(y, w)\nprint(answer)\n```",
        "variables": {
            "a": "Nuf\u00f6rtiden finns det dock etablerade graffitikonstn\u00e4rer, graffitienenemang och \"lagliga\" v\u00e4ggar. I dessa sammanhang liknar graffitim\u00e5lningarna ofta konstverk snarare \u00e4n ol\u00e4sliga taggar.",
            "x": 5,
            "z": 3,
            "y": 50,
            "w": "*"
        },
        "query": [
            "Take every {z}-th character from {x} onwards in {a}, convert it to title case, and center it within a string of length {y} using {w} as padding.",
            "Extract every {z}-th character starting from index {x} in {a}, change it to title case, and center it in a string of length {y} with {w} as the padding character.",
            "From {a}, select every {z}-th character beginning at position {x}, transform it to title case, and center it in a string of length {y} using {w} for padding."
        ],
        "language": "swe_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].count(z) == a[x:y].count(w)\nprint(answer)\n```",
        "variables": {
            "a": "\u06a9\u064f\u0646\u0648\u06c1\u06cc\u0645\u06c1 \u062a\u06c1\u0655 \u0648\u064f\u06c1\u06cc\u0645\u06c1\u0650 \u0635\u062f\u06cc \u062f\u06c4\u0631\u0627\u0646 \u0627\u0648\u0633 \u0648\u0627\u0631\u06c1\u0627\u06c1\u0633 \u0639\u0631\u0635\u06d2 \u062a\u0627\u0645\u060c \u06cc\u06c1 \u062e\u06cc\u0627\u0644 \u06cc\u0648\u0627\u0646 \u06a9\u0631\u0646\u06c1\u0655 \u06a9\u06c1 \u0646\u06cc\u0648\u0632\u06cc \u0644\u06cc\u0646\u0688\u0633 \u0645\u0646\u065a\u0632 \u06af\u06c4\u0688\u0646\u06cc\u062a\u06be \u0631\u0648\u0632\u0646 \u0648\u0672\u0644\u06cd \u0644\u0648\u06a9\u06be \u0672\u0633\u06cd \u0645\u0627\u0648\u0631\u06cc\u060c \u06cc\u0650\u0645\u0648 \u0645\u0648\u0626\u0633 \u0646\u0627\u0648\u06a9\u0650\u0633 \u062f\u06cc\u0648 \u067e\u0631\u0646\u062f \u0633\u064f\u0646\u062f \u0634\u06a9\u0627\u0631 \u06a9\u0648\u0631\u06d4",
            "x": 10,
            "y": 50,
            "z": "\u06c1",
            "w": "\u06cc"
        },
        "query": [
            "Check if the number of occurrences of {z} is equal to the number of occurrences of {w} in the substring from {x} to {y} in {a}.",
            "Verify if {z} appears as many times as {w} in the substring of {a} from index {x} to {y}.",
            "Determine if the count of {z} matches the count of {w} within the substring of {a} ranging from {x} to {y}."
        ],
        "language": "kas_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:y].rjust(z, w).isascii()\nprint(answer)\n```",
        "variables": {
            "a": "\u1eb8ti\u0301 o\u0300kun, \u1ecdgba\u0300 n\u0301la\u0301 a\u0300ti a\u0300w\u1ecdn i\u0300pa\u0300g\u1ecd\u0301 j\u1eb9\u0301 ibi\u0301 ti\u0301 a\u0300w\u1ecdn ari\u0300nri\u0300n-a\u0300jo\u0300-af\u1eb9\u0301 ma\u0301a n\u0301 rin ju\u0300l\u1ecd.",
            "x": 5,
            "y": 15,
            "z": 20,
            "w": "*"
        },
        "query": [
            "Right-justify the substring from {x} to {y} in {a} to length {z} using {w} as padding and check if the result contains only ASCII characters.",
            "Take the substring of {a} from index {x} to {y}, right-justify it to a length of {z} with {w} as the padding character, and verify if the final string contains only ASCII characters.",
            "Extract the substring from {x} to {y} in {a}, pad it on the left with {w} to make its length {z}, and determine if the resulting string is composed solely of ASCII characters."
        ],
        "language": "yor_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::z].isdigit() and a[x::z].isspace()\nprint(answer)\n```",
        "variables": {
            "a": "\u053b\u0576\u0564\u0578\u0582\u057d\u056b \u0570\u0578\u057e\u057f\u056b \u0584\u0561\u0572\u0561\u0584\u0561\u056f\u0580\u0569\u0578\u0582\u0569\u0575\u0578\u0582\u0576\u0568 \u0562\u0580\u0578\u0576\u0566\u0565 \u0564\u0561\u0580\u056b \u0584\u0561\u0572\u0561\u0584\u0561\u056f\u0580\u0569\u0578\u0582\u0569\u0575\u0578\u0582\u0576 \u0567\u0580 \u0570\u0576\u0564\u056f\u0561\u056f\u0561\u0576 \u0565\u0576\u0569\u0561\u0574\u0561\u0575\u0580\u0581\u0561\u0574\u0561\u0584\u056b \u0570\u0575\u0578\u0582\u057d\u056b\u057d-\u0561\u0580\u0587\u0574\u0578\u0582\u057f\u0584\u0578\u0582\u0574, \u0578\u0580\u0576 \u0568\u0576\u0564\u0563\u0580\u056f\u0578\u0582\u0574 \u0567 \u0561\u0575\u057d\u0585\u0580\u057e\u0561 \u054a\u0561\u056f\u056b\u057d\u057f\u0561\u0576\u056b \u0574\u0565\u056e \u0574\u0561\u057d\u0568 \u0587 \u0578\u0580\u0578\u0577 \u0577\u0580\u057b\u0561\u0576\u0576\u0565\u0580\u055d \u0540\u0576\u0564\u056f\u0561\u057d\u057f\u0561\u0576\u056b \u0570\u0575\u0578\u0582\u057d\u056b\u057d-\u0561\u0580\u0587\u0574\u0578\u0582\u057f\u0584\u0578\u0582\u0574 \u0587 \u0531\u0586\u0572\u0561\u0576\u057d\u057f\u0561\u0576\u056b \u0570\u0575\u0578\u0582\u057d\u056b\u057d-\u0561\u0580\u0587\u0565\u056c\u0584\u0578\u0582\u0574:",
            "x": 5,
            "z": 10
        },
        "query": [
            "Check if every {z}-th character from {x} onwards in {a} is both a digit and a whitespace character.",
            "Verify if each {z}-th character starting from index {x} in the string {a} is a digit and a whitespace.",
            "Determine if all characters at every {z}-th position from {x} in {a} are digits and whitespace characters."
        ],
        "language": "hye_Armn"
    },
    {
        "solution": "```python\nanswer = x in a.lower()\nprint(answer)\n```",
        "variables": {
            "a": "Adidibea ahodo\u0254 etwa turo no ho ahyia, w\u0254y\u025b k\u0254ns\u025bte a wongye hwee awiaber\u025b ne anwummer\u025b biara firi central gazebo.",
            "x": "central"
        },
        "query": [
            "Check if the substring {x} is present in the lowercase version of {a}.",
            "Determine if {x} exists within the lowercase form of {a}.",
            "Verify if the lowercase version of {a} contains the substring {x}."
        ],
        "language": "twi_Latn_asan1239"
    },
    {
        "solution": "```python\nanswer = a.strip().upper().endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "J\u012b sauce sevi par mariori, n\u016btyka da\u017eys sadursmis i beiguos mariori tyka iznicynuoti.",
            "x": "IZNICYNOUTI"
        },
        "query": [
            "Check if the trimmed and uppercased version of {a} ends with {x}.",
            "Determine if the uppercase and stripped version of {a} has {x} at the end.",
            "Verify if {a} when trimmed and converted to uppercase ends with {x}."
        ],
        "language": "ltg_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].upper().encode('ascii', errors='ignore')\nprint(answer)\n```",
        "variables": {
            "a": "Almancul 100 personis a jerin ladis ae fieste par celebr\u00e2 il prin aniversari di matrimoni di une cubie che si jere maridade l\u2019an pass\u00e2t.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Split {a} by {x}, take the {y}-th element, convert it to uppercase, and encode it in ASCII, ignoring errors.",
            "Divide {a} using {x} as the delimiter, select the {y}-th part, change it to uppercase, and encode it in ASCII while ignoring errors.",
            "Break {a} at each {x}, pick the {y}-th segment, transform it to uppercase, and encode it in ASCII, ignoring any errors."
        ],
        "language": "fur_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().rsplit(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0411\u0435\u0499\u0433\u04d9 \u0431\u0438\u043b\u0434\u04d9\u043b\u0435 \u0431\u0443\u043b\u044b\u0443\u044b\u043d\u0441\u0430, \u0422\u0438\u0442\u0430\u043d\u0493\u0430 \u04a1\u0430\u0440\u0430\u0493\u0430\u043d\u0434\u0430 \u0499\u0443\u0440\u044b\u0440\u0430\u04a1 \u0434\u0438\u043d\u0430\u043c\u0438\u0437\u043c \u043a\u04af\u0440\u04bb\u04d9\u0442\u04d9 \u0442\u043e\u0440\u0493\u0430\u043d \u0431\u0435\u0440 \u0433\u0435\u043d\u04d9 \u043f\u043b\u0430\u043d\u0435\u0442\u0430\u0440 \u0435\u0441\u0435\u043c \u0431\u0430\u0440, \u04bb\u04d9\u043c \u0443\u043d\u044b\u04a3 \u0438\u0441\u0435\u043c\u0435 - \u0415\u0440\u00bb, - \u0442\u0438\u043f \u04e9\u04ab\u0442\u04d9\u043d\u0435 \u0421\u0442\u043e\u0444\u0430\u043d.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Remove leading and trailing whitespace from {a} and then split it by {x} from the right, with a maximum of {y} splits.",
            "Trim the whitespace from both ends of {a} and then perform a right split by {x}, allowing up to {y} splits.",
            "Strip whitespace from the start and end of {a}, then split it from the right by {x} with a limit of {y} splits."
        ],
        "language": "bak_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode(x).isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u867d\u7136\u7406\u8bba\u4e0a\u4e16\u535a\u4f1a\u53ef\u4ee5\u6bcf\u5e74\u4e3e\u884c\u4e00\u6b21\uff08\u53ea\u8981\u5728\u4e0d\u540c\u7684\u56fd\u5bb6\u4e3e\u529e\u5c31\u884c\uff09\uff0c\u4f46\u5b9e\u9645\u4e0a\u5e76\u975e\u5982\u6b64\u3002",
            "x": "cmn_Hans"
        },
        "query": [
            "Encode {a} in 'utf-8', decode it using {x} encoding, and verify if all characters are printable.",
            "Convert {a} to 'utf-8', then decode it with {x} encoding, and check if the resulting string is fully printable.",
            "Transform {a} into 'utf-8', decode it with {x} encoding, and determine if every character is printable."
        ],
        "language": "cmn_Hans"
    },
    {
        "solution": "```python\nanswer = a[x::z].capitalize().isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "Ol s\u00f2 n\u00f2m a \u2018l \u00e9 anc\u2019m\u00f2 minga cognossud a i autoritaa, anc\u2019isseben I sabe ben qe \u2018l \u00e9 un member de la entia Uighur.",
            "x": 5,
            "z": 3
        },
        "query": [
            "Is the substring of {a} from {x} to the end, every {z} characters, capitalized and alphanumeric?",
            "Does the substring of {a} starting at index {x} and taking every {z}th character, when capitalized, consist only of alphanumeric characters?",
            "When taking every {z}th character from {a} starting at index {x} and capitalizing it, is the result alphanumeric?"
        ],
        "language": "lmo_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].upper().isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "Uk chanin hamutaqkunan willakunku kay qurakunaqa wa\u00f1uchiy kamaqmi nispa, chayraykun dinosaurio nisqa mana mikurqanchu, ichaqa kallakuna qilla ukukuna ima mikunkun chay wa\u00f1uchikuq qurakunap rapinta.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Is the {y}-th element of {a} split by {x}, converted to uppercase, a valid identifier?",
            "After splitting {a} by {x}, is the {y}-th element, when converted to uppercase, a valid identifier?",
            "Check if the {y}-th element of {a} after splitting by {x} and converting to uppercase is a valid identifier."
        ],
        "language": "quy_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).swapcase().isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "A zen\u00e9t gyakran kifinomult sz\u00e1m\u00edt\u00f3g\u00e9pekkel veszik fel \u00e9s azzal dolgozz\u00e1k fel \u00e9s keverik a hangokat.",
            "x": "a",
            "y": "o"
        },
        "query": [
            "Is the string {a}, with {x} replaced by {y} and case swapped, fully printable?",
            "After replacing {x} with {y} in the string {a} and swapping the case, is the result fully printable?",
            "Will the string {a} be fully printable after replacing {x} with {y} and swapping its case?"
        ],
        "language": "hun_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).encode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "\u0915\u0947\u0928\u092f\u094b\u0928\u093f\u0902\u0917 (\u092f\u093e: \u0915\u0947\u0928\u092f\u094b\u0928\u0940\u0930\u093f\u0902\u0917) \u091c\u093f\u0938\u092e\u0947\u0902 \u0932\u094b\u0917 \u092a\u093e\u0928\u0940 \u0935\u093e\u0932\u0940 \u092f\u093e \u0938\u0942\u0916\u0940 \u0916\u093e\u0908 \u0915\u0940 \u0928\u093f\u091a\u0932\u0940 \u0938\u0924\u0939 \u0924\u0915 \u091c\u093e\u0924\u0947 \u0939\u0948\u0902.",
            "x": "\u0915\u0947\u0928\u092f\u094b\u0928\u093f\u0902\u0917",
            "y": "\u0915\u0948\u0928\u094d\u092f\u094b\u0928\u093f\u0902\u0917"
        },
        "query": [
            "Replace {x} with {y} in {a} and encode the result in UTF-8.",
            "Substitute {x} with {y} in {a} and convert the result to UTF-8 encoding.",
            "Change {x} to {y} in {a} and encode the final string in UTF-8."
        ],
        "language": "hin_Deva"
    },
    {
        "solution": "```python\nanswer = a.rsplit(x, y)[z].isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u05d3\u05d9 \u05d0\u05e0\u05d8\u05d9\u05d9\u05dc\u05e0\u05e2\u05de\u05e2\u05e0\u05d3\u05e2 \u05d0\u05d9\u05df \u05d2\u05e2\u05d4\u05e2\u05e8\u05d9\u05d2\u05e2 \u05d0\u05e7\u05d8\u05d9\u05d5\u05d5\u05d9\u05d8\u05e2\u05d8 \u05d4\u05d0\u05d1\u05df \u05d2\u05e2\u05e4\u05d0\u05d3\u05e2\u05e8\u05d8 \u05de\u05e2\u05e8 \u05e9\u05d8\u05d9\u05e6\u05e2 \u05d0\u05d9\u05df \u05d1\u05d0\u05e6\u05d9\u05d0\u05d5\u05e0\u05d2 \u05e6\u05d5 \u05e0\u05e2\u05d2\u05d0\u05d8\u05d9\u05d5\u05d5\u05e2 \u05d1\u05dc\u05d9\u05e7 \u05e4\u05d5\u05df \u05d5\u05d5\u05d9\u05d9\u05d8\u05d0\u05d2 \u05de\u05e2\u05e8\u05e7\u05e0\u05d3\u05d9\u05d2 \u05d3\u05d9 \u05d0\u05d5\u05e0\u05d8\u05e2\u05e8\u05e9\u05d9\u05d9\u05d3\u05df \u05e6\u05d5\u05d5\u05d9\u05e9\u05df \u05e7\u05e8\u05d0\u05e0\u05d9\u05e9\u05e2 \u05d5\u05d5\u05d9\u05d9\u05d8\u05d0\u05d2 \u05d0\u05d5\u05df \u05d0\u05d5\u05de\u05d1\u05d0\u05e7\u05d5\u05d5\u05e2\u05de\u05dc\u05d9\u05db\u05e7\u05d9\u05d9\u05d8 \u05d0\u05d5\u05df \u05d2\u05e2\u05d4\u05e2\u05e8\u05d9\u05d2\u05e2 \u05e4\u05d9\u05d6\u05d9\u05e9\u05e2 \u05d1\u05d0\u05d5\u05d5\u05e2\u05d2\u05d5\u05e0\u05d2.",
            "x": " ",
            "y": 5,
            "z": 2
        },
        "query": [
            "Is the {z}-th segment of {a} split by {x} from the end with at most {y} splits numeric?",
            "Does the {z}-th part of {a} obtained by splitting from the end using {x} up to {y} times consist of only numbers?",
            "Is the {z}-th portion of {a} numeric when split from the end by {x} no more than {y} times?"
        ],
        "language": "ydd_Hebr"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).title().endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "Tingijimi\tkungenteka\ttitive\tshengatsi\ttitsandza\tumkhicito\tlotsite\tngisho\tnanobe\tkute\ttinzuzo\tlotiniketako.",
            "x": 4,
            "y": "Tinzuzo Lotiniketako."
        },
        "query": [
            "Expand tabs in {a} to {x} spaces, convert it to title case, and check if it ends with {y}.",
            "Convert tabs in {a} to {x} spaces, change to title case, and verify if it ends with {y}.",
            "Replace tabs in {a} with {x} spaces, transform to title case, and determine if it ends with {y}."
        ],
        "language": "ssw_Latn"
    },
    {
        "solution": "```python\nanswer = a.title().split(x)[y].istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Den internasjonale olympiske komiteen r\u00f8ysta for \u00e5 inkludere idrettane p\u00e5 eit styreleiarm\u00f8te i Berlin i dag. Rugby, s\u00e6rleg rugby union, og golf vart vald over fire andre idrettar for \u00e5 bli vurdert til \u00e5 delta i dei olympiske leikane.",
            "x": " ",
            "y": 10
        },
        "query": [
            "Verify if the {y+1}-th part of {a} split by {x} after converting {a} to title case follows title case conventions.",
            "Check if the {y+1}-th segment of {a} split by {x} adheres to title case after converting {a} to title case.",
            "Determine if the {y+1}-th section of {a} split by {x} is in title case after converting {a} to title case."
        ],
        "language": "nno_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).upper().startswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "Katika nchi zilizoendelea leo, kuandaa kitanda cha deluksi na kiamshakinywa imeimarishwa kwa aina fulani ya kisanaa.",
            "x": "a",
            "y": "o",
            "z": "KOTIKO"
        },
        "query": [
            "Replace all occurrences of {x} in {a} with {y}, convert the result to uppercase, and check if it starts with {z}.",
            "Substitute every instance of {x} in {a} with {y}, change the resulting string to uppercase, and verify if it begins with {z}.",
            "Change all {x} in {a} to {y}, transform the string to uppercase, and determine if it starts with {z}."
        ],
        "language": "swh_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x).join(y).isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u0421\u0438\u043a\u0445\u0438\u0437\u043c \u2013 \u0443\u043b \u04bb\u0438\u043d\u0434 \u0441\u0443\u0431\u043a\u043e\u043d\u0442\u0438\u043d\u0435\u043d\u0442\u044b\u043d\u0434\u0430\u0493\u044b \u0434\u0438\u043d. \u0423\u043b \u041f\u04d9\u043d\u0434\u0436\u04d9\u0431 \u0442\u04e9\u0431\u04d9\u0433\u0435\u043d\u0434\u04d9 15-\u0441\u0435 \u0431\u044b\u0443\u0430\u0442\u0442\u0430 \u0438\u043d\u0434\u0443\u0438\u0437\u043c \u0442\u0440\u0430\u0434\u0438\u0446\u0438\u044f\u043b\u0430\u0440\u044b\u043d\u0434\u0430 \u043c\u04d9\u0499\u04bb\u04d9\u0431 \u0431\u04af\u043b\u0435\u043d\u0435\u0448\u0435 \u04bb\u04e9\u0499\u04e9\u043c\u0442\u04d9\u04bb\u0435\u043d\u0434\u04d9 \u0431\u0430\u0440\u043b\u044b\u04a1\u04a1\u0430 \u043a\u0438\u043b\u0433\u04d9\u043d.",
            "x": " ",
            "y": ""
        },
        "query": [
            "Split {a} by {x}, join the resulting list with {y}, and check if the final string is numeric.",
            "Divide {a} using {x}, concatenate the parts with {y}, and determine if the resulting string is numeric.",
            "Break {a} at each {x}, merge the segments with {y}, and verify if the final string consists only of digits."
        ],
        "language": "bak_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.partition(x)[y]\nprint(answer)\n```",
        "variables": {
            "a": "\u0644\u0645 \u062a\u064f\u0648\u0636\u062d \u0634\u0631\u0643\u0629 \u0625\u062f\u0627\u0631\u0629 \u0627\u0644\u0641\u0631\u0642\u0629 \"HK Management Inc.\" \u0633\u0628\u0628 \u0623\u0648\u0644\u064a \u0648\u0631\u0627\u0621 \u0627\u0644\u0625\u0644\u063a\u0627\u0621 \u0641\u064a \u064a\u0648\u0645 20 \u0645\u0646 \u0631\u0645\u0636\u0627\u0646\u060c \u0644\u0643\u0646\u0647\u0627 \u0648\u0636\u0639\u062a \u0627\u0644\u0644\u0648\u0645 \u0639\u0644\u0649 \u0627\u0644\u0623\u0633\u0628\u0627\u0628 \u0627\u0644\u0644\u0648\u062c\u0633\u062a\u064a\u0629 \u0628\u062d\u0644\u0648\u0644 \u0627\u0644\u064a\u0648\u0645 \u0627\u0644\u062a\u0627\u0644\u064a.",
            "x": "\u0627\u0644\u0625\u0644\u063a\u0627\u0621",
            "y": 2
        },
        "query": [
            "Partition {a} at the first occurrence of {x} and return the {y}-th element of the result.",
            "Split {a} at the first occurrence of {x} and get the {y}-th part of the split result.",
            "Divide {a} at the first instance of {x} and fetch the {y}-th segment from the result."
        ],
        "language": "ars_Arab"
    },
    {
        "solution": "```python\nanswer = a[x::y].replace(z, w).islower()\nprint(answer)\n```",
        "variables": {
            "a": "O le taaloga ta polo o se taaloga e fa\u2019aaog\u0101 ai e le \u2018au taa\u2019alo kalapu e ta ai le polo i pu.",
            "x": 1,
            "y": 3,
            "z": "a",
            "w": "o"
        },
        "query": [
            "Verify if every {y}-th character in {a} starting from position {x}, after replacing {z} with {w}, is in lowercase.",
            "Check if all characters at every {y}-th position in {a} starting from position {x}, after replacing {z} with {w}, are lowercase.",
            "Determine if each {y}-th character in {a} starting from position {x}, after substituting {z} with {w}, is in lowercase."
        ],
        "language": "smo_Latn"
    },
    {
        "solution": "```python\nanswer = a[:y].isupper() and a[y:].islower()\nprint(answer)\n```",
        "variables": {
            "a": "Bowen Island eignet sich als beliebter Tages- oder Wochenendausflug mit Kajakfahren, Wandern, Shops, Restaurants und vielem mehr.",
            "y": 5
        },
        "query": [
            "Check if the first {y} characters of {a} are uppercase and the rest are lowercase.",
            "Verify if the initial {y} characters of {a} are in uppercase and the remaining characters are in lowercase.",
            "Determine if the first {y} characters of {a} are all uppercase and the rest are all lowercase."
        ],
        "language": "deu_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].strip().isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u062a\u06be \u0645\u0637\u0644\u0642 \u0686\u0650\u06be \u0645\u062e\u062a\u0644\u0641 \u0627\u0646\u062f\u0627\u0632\u06c1 \u06a9\u06c1 \u06a9\u0672\u062a\u06cc\u06c1\u06c1 \u0644\u0648\u06a9\u06be \u0686\u0650\u06be \u06c1\u0646\u062f\u06cc \u0628\u06c4\u0644\u0627\u0646\u06d4 \u0627\u0646\u062f\u0627\u0632\u06c1 \u0698\u0686\u064f\u06be \u0644\u06af\u0627\u0648\u0646\u06c1 \u0622\u0645\u064f\u062a \u06a9\u06c1 \u06cc\u06c1 \u0686\u0650\u06be \u062f\u0646\u06cc\u06c1\u0686 \u062f\u0648\u06cc\u0645\u06c1 \u062a\u06c1 \u062b\u0648\u0631\u0645\u06c1\u0650 \u062f\u0631\u0645\u06cc\u0627\u0646 \u0633\u0627\u0631\u0648\u06cc \u06a9\u06be\u06c4\u062a\u06c1 \u0632\u06cc\u0627\u062f\u06c1 \u0628\u06c4\u0644\u0646 \u0648\u0627\u062c\u0646\u06cd \u0632\u0628\u0627\u0646\u06d4",
            "x": 10,
            "y": 20
        },
        "query": [
            "Check if the trimmed substring of {a} from {x} to {y} consists of digits.",
            "Verify if the substring of {a} from {x} to {y}, after trimming, is made up of digits.",
            "Determine if the trimmed portion of {a} between {x} and {y} is numeric."
        ],
        "language": "kas_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:y].lower().isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "An Cinque Terre, nga an karuyag sidngon Lima nga Katunaan, nagkokompwesto han lima nga gudtiay nga mga baryo ha baybayon han Riomaggiore, Manarola, Corniglia, Vernazza ngan Monterosso nga nahamumutang ha Italian nga rehiyon han Liguria.",
            "x": 10,
            "y": 20
        },
        "query": [
            "Is the substring from {x} to {y} in {a}, when converted to lowercase, fully printable?",
            "Does the lowercase version of the substring from {x} to {y} in {a} contain only printable characters?",
            "When the substring from {x} to {y} in {a} is converted to lowercase, are all characters printable?"
        ],
        "language": "war_Latn"
    },
    {
        "solution": "```python\nanswer = a[y::z].islower()\nprint(answer)\n```",
        "variables": {
            "a": "N\u04d9msufid\u04d9 hakika cotta, au maabudua, au ro jirebea, au Alaa z\u04d9mat\u04d9, au fant\u04d9g\u04d9, au yekint\u04d9 hayabea nganzat\u04d9.",
            "y": 10,
            "z": 3
        },
        "query": [
            "Check if the substring of {a} starting from position {y} with step {z} is in lowercase.",
            "Verify if the substring of {a} beginning at index {y} and taking every {z}th character is all lowercase.",
            "Determine if the section of {a} starting at index {y} and stepping by {z} characters is entirely in lowercase."
        ],
        "language": "knc_Latn"
    },
    {
        "solution": "```python\nanswer = a.rjust(x, y).rstrip(z)\nprint(answer)\n```",
        "variables": {
            "a": "\uabd1\uabc0\uabe5\uabd5 \uabc3\uabe4\uabc5 \uabc2\uabe3\uabcf\uabc5 \uabc7\uabe7\uabd5 \uabd1\uabe3\uabcf\uabd5 \uabc1\uabed\uabc7\uabe6\uabe0 \uabd1\uabe3\uabcf\uabd5\uabc5, \uabd0\uabed\uabc2\uabe3\uabd4\uabe4\uabd7\uabe5\uabc5 \uabc3\uabc8\uabe3\uabcf\uabd2\uabe4 \uabd7\uabe6\uabc2\uabe4\uabd2\uabe6\uabe0 \uabcc\uabe5\uabe1\uabc8\uabe9\uabc3\uabdb \uabd4\uabe3\uabdd\uabc5\uabe4\uabd7 \uabc4\uabe4\uabc8\uabe4, \uabc3\uabc1\uabe4\uabc5 \uabc3\uabcd\uabe5\uabdb\uabc4\uabe8 \uabd4\uabe4\uabc4\uabd5\uabed\uabc2\uabe4\uabc0\uabdf \uabc4\uabe5\uabd4\uabc7\uabe4 \uabc5\uabe3\uabc3\uabe4\uabc5\uabe6\uabc1\uabdf\uabd2\uabe4\uabd7\uabc3\uabdb \uabd0\uabed\uabd4\uabdf\uabe0-\uabd4\uabdf\uabc5\uabd4 \uabd1\uabe3\uabcf\uabc5 \uabc3\uabe5\uabe1 \uabca\uabe5\uabcd\uabdf\uabc8\uabe4\uabeb",
            "x": 100,
            "y": "\uabc0",
            "z": "\uabeb"
        },
        "query": [
            "Right-justify {a} to be {x} characters long using {y} as the padding character, then remove trailing {z} characters.",
            "Pad {a} on the left with {y} to make it {x} characters long, then strip off trailing {z} characters.",
            "Make {a} {x} characters long by padding with {y} on the left, and then remove any trailing {z} characters."
        ],
        "language": "mni_Mtei"
    },
    {
        "solution": "```python\nanswer = a.swapcase().rjust(x, y).isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "U mnogim zemljama u kojima je takav zakon na snazi, lokalni hoteli \u0107e se baviti registracijom (postarajte se da pitate u hotelu).",
            "x": 100,
            "y": "0"
        },
        "query": [
            "After swapping the case of {a} and right-justifying it to {x} characters with {y}, is the result alphanumeric?",
            "Is the result alphanumeric after changing the case of {a} and padding it to the right to make it {x} characters long with {y}?",
            "If you swap the case of {a} and pad it on the left with {y} to make it {x} characters long, is the final string alphanumeric?"
        ],
        "language": "bos_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).swapcase().isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Sanskrit, Avropada istifad\u0259 olunan Lat\u0131n dili il\u0259 m\u00fcqayis\u0259 edil\u0259 bil\u0259n q\u0259dim dil idi.",
            "x": "Sanskrit, Avropada istifad\u0259 olunan Lat\u0131n dili il\u0259 m\u00fcqayis\u0259 edil\u0259 bil\u0259n q\u0259dim dil idi."
        },
        "query": [
            "After removing leading and trailing characters in {x} from {a} and swapping its case, is the result composed entirely of ASCII characters?",
            "If you strip the characters in {x} from both ends of {a} and then swap the case, will the resulting string be made up only of ASCII characters?",
            "Does the string {a} contain only ASCII characters after stripping {x} from its ends and swapping its case?"
        ],
        "language": "azj_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('ascii', errors='replace').decode('ascii').isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Iya pada\u00e9 wettunna silong Hawaii, libu-libukenna \u00e9ro malessi-lessini riaseng \"Hawaii ri awa\"."
        },
        "query": [
            "After encoding {a} with 'ascii' and replacing errors, then decoding it back, is the result entirely alphabetic?",
            "Is the string {a} still alphabetic after encoding it to 'ascii' with error replacement and decoding it back?",
            "When {a} is encoded to 'ascii' with errors replaced and then decoded, does it remain fully alphabetic?"
        ],
        "language": "bug_Latn"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).casefold().istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Formula 1 \u015fampiyonas\u0131n\u0131 yedi kez kazanmas\u0131n\u0131n ard\u0131ndan 2006 senesinde emekliye ayr\u0131lan Schumacher, sakat Felipe Massa'n\u0131n yerini almaya haz\u0131rd\u0131.",
            "x": 150,
            "y": "-"
        },
        "query": [
            "After left-justifying {a} to {x} characters with {y} and converting it to casefold, does the result follow title case rules?",
            "If you left-justify {a} to {x} characters using {y} and then convert it to casefold, will the result be in title case?",
            "Does the string {a}, when left-justified to {x} characters with {y} and converted to casefold, adhere to title case rules?"
        ],
        "language": "tur_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).title().isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u00d4ficjalne wydarzynie rocznicowe \u00f4sta\u0142o zaplanowane na niyskorniyjszy termin, pedzieli byamtry.",
            "x": "\u00f4",
            "y": "o"
        },
        "query": [
            "Replace {x} with {y} in {a}, convert the result to title case, and check if all characters are printable.",
            "Substitute {x} with {y} in {a}, change the result to title case, and verify if all characters are printable.",
            "Swap {x} with {y} in {a}, transform the result to title case, and determine if all characters are printable."
        ],
        "language": "szl_Latn"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).title().swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "C\u00e1ch\tti\u1ebfp\tc\u1eadn\th\u1eadu\thi\u1ec7n\t\u0111\u1ea1i\tv\u1edbi\tvi\u1ec7c\th\u1ecdc\tgi\u00fap\ttho\u00e1t\tkh\u1ecfi\tch\u1ee7\tngh\u0129a\ttuy\u1ec7t\t\u0111\u1ed1i.\tKh\u00f4ng\tch\u1ec9\tc\u00f3\tm\u1ed9t\tc\u00e1ch\th\u1ecdc\tt\u1ed1t\tduy\tnh\u1ea5t.",
            "x": 4
        },
        "query": [
            "Replace tabs in {a} with {x} spaces, convert the result to title case, and then swap the case of each character.",
            "Substitute tabs in {a} with {x} spaces, change the result to title case, and then invert the case of each character.",
            "Expand tabs in {a} to {x} spaces, transform the result to title case, and then toggle the case of each character."
        ],
        "language": "vie_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].swapcase().encode('ascii', errors='replace')\nprint(answer)\n```",
        "variables": {
            "a": "Bwosala olutindo oba bwotambula mu makubo agayita okumpi n'ebiliyiliro, ojja kutoba.",
            "x": 10,
            "y": 20
        },
        "query": [
            "Take the substring of {a} from {x} to {y}, swap its case, and encode it in ASCII, replacing unencodable characters with a question mark.",
            "Extract the substring from {a} starting at index {x} and ending at index {y}, change its case, and encode it to ASCII, substituting unencodable characters with a question mark.",
            "Get the substring of {a} between {x} and {y}, invert its case, and convert it to ASCII encoding, using a question mark for characters that can't be encoded."
        ],
        "language": "lug_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().split(x)[y].title()\nprint(answer)\n```",
        "variables": {
            "a": "M\u1ed9t nh\u00e2n vi\u00ean c\u1ee7a c\u00f4ng ty gas \u0111\u00e3 \u0111\u1ebfn hi\u1ec7n tr\u01b0\u1eddng sau khi m\u1ed9t ng\u01b0\u1eddi h\u00e0ng x\u00f3m g\u1ecdi \u0111i\u1ec7n tho\u1ea1i b\u00e1o c\u00f3 r\u00f2 r\u1ec9 gas.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Strip whitespace from {a}, split by {x}, and title-case the {y}-th segment.",
            "Remove leading and trailing spaces from {a}, split using {x}, and capitalize the {y}-th part.",
            "Trim spaces from {a}, divide by {x}, and capitalize the {y}-th section."
        ],
        "language": "vie_Latn"
    },
    {
        "solution": "```python\nanswer = a.title().swapcase().endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "Kolpela weda (weather) ating em tasol em i wanpela trupela birua we ol lain i no redi long en bai i bungim.",
            "x": "M."
        },
        "query": [
            "Convert {a} to title case, swap the case of all characters, and check if it ends with {x}.",
            "Transform {a} to title case, invert the case of each character, and verify if it concludes with {x}.",
            "Change {a} to title case, reverse the case of every character, and determine if it finishes with {x}."
        ],
        "language": "tpi_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='ignore').decode(x).isdecimal()\nprint(answer)\n```",
        "variables": {
            "a": "\u0423 \u043c\u0456\u043d\u0443\u043b\u044b\u043c \u0433\u043e\u0434\u0437\u0435 \u041a\u0456\u0442\u0430\u0439 \u0443\u043f\u0435\u0440\u0448\u044b\u043d\u044e \u0430\u0431\u0430\u0433\u043d\u0430\u045e \u0413\u0435\u0440\u043c\u0430\u043d\u0456\u044e \u043f\u0430 \u0430\u0431'\u0451\u043c\u0435 \u044d\u043a\u0441\u043f\u0430\u0440\u0442\u0443 \u0430\u045e\u0442\u0430\u043c\u0430\u0431\u0456\u043b\u044f\u045e, \u0430 \u0442\u0430\u043a\u0441\u0430\u043c\u0430 \u043f\u0430\u043a\u0456\u043d\u0443\u045e \u0437\u0430 \u0441\u0430\u0431\u043e\u0439 \u0417\u0428\u0410, \u0441\u0442\u0430\u045e\u0448\u044b \u0441\u0430\u043c\u044b\u043c \u0431\u0443\u0439\u043d\u044b\u043c \u0440\u044b\u043d\u043a\u0430\u043c \u0434\u043b\u044f \u0433\u044d\u0442\u0430\u0439 \u0433\u0430\u043b\u0456\u043d\u044b.",
            "x": "bel_Cyrl"
        },
        "query": [
            "Encode {a} using {x} encoding, ignore errors, decode it back, and check if the result is decimal.",
            "Using {x} encoding, encode {a}, ignore any errors, decode it back, and determine if the result is a decimal number.",
            "Check if the result is decimal after encoding {a} with {x} encoding, ignoring errors, and decoding it back."
        ],
        "language": "bel_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.islower() and x in a\nprint(answer)\n```",
        "variables": {
            "a": "kaso lard\u04d9 ren\u04d9m kot\u04d9ye suro bin\u04d9myen gana laa, cida tiyi mazaktabe gana laa nasha tiyiye samiz\u04d9nad\u04d9ye-a k\u04d9ll\u04d9miya, shima dawari shiyeyi bamawo zaman kasoyed\u04d9ro.",
            "x": "gana laa"
        },
        "query": [
            "Check if {a} is in lowercase and contains the substring {x}.",
            "Verify if the string {a} is all lowercase and includes {x}.",
            "Determine if {a} is entirely in lowercase and has the substring {x}."
        ],
        "language": "knc_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().replace(x, y).isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": " \u05d3\u05e2\u05e8 \u05d1\u05d0\u05e0\u05d5\u05e5 \u05e4\u05d5\u05df \u05d3\u05e2\u05e8 \u05d0\u05d9\u05e0\u05d8\u05e2\u05e8\u05e0\u05e2\u05d8 \u05d0\u05d5\u05df \u05d3\u05e2\u05e8 \u05d5\u05d5\u05d0\u05e8\u05dc\u05d3 \u05d5\u05d5\u05d9\u05d9\u05d3 \u05d5\u05d5\u05e2\u05d1 \u05e2\u05e8\u05dc\u05d5\u05d9\u05d1\u05d8 \u05dc\u05e2\u05e8\u05e0\u05e2\u05e8 \u05e6\u05d5 \u05d4\u05d0\u05d1\u05df \u05e6\u05d5\u05d8\u05e8\u05d9\u05d8 \u05e6\u05d5 \u05d0\u05d9\u05e0\u05e4\u05d0\u05e8\u05de\u05d0\u05e6\u05d9\u05e2 \u05d0\u05d9\u05df \u05d9\u05e2\u05d3\u05e2 \u05e6\u05d9\u05d9\u05d8. ",
            "x": " ",
            "y": ""
        },
        "query": [
            "Strip whitespace from {a}, replace {x} with {y}, and check if the result is numeric.",
            "Remove leading and trailing spaces from {a}, substitute {x} with {y}, and verify if the final string is numeric.",
            "Trim spaces from {a}, swap {x} with {y}, and determine if the outcome is a numeric value."
        ],
        "language": "ydd_Hebr"
    },
    {
        "solution": "```python\nanswer = a.rsplit(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0918\u0930 \u092a\u0930 \u0906\u0902\u0916 \u0915\u0947 \u091c\u093e\u0902\u091a \u0915\u0930\u093e\u090f \u092a\u0930 \u0935\u093f\u091a\u093e\u0930 \u0915\u0930\u0947\u0902, \u0916\u093e\u0938\u0915\u0930 \u0905\u0917\u0930 \u092c\u0940\u092e\u093e \u090f\u0917\u094b\u0930\u093e \u0915\u0935\u0930 \u0915\u0930\u094b \u0939\u092f, \u0905\u0909 \u0928\u0941\u0938\u094d\u0916\u093e \u0915\u0947 \u0915\u0939\u0940\u0902 \u0905\u0909 \u0926\u093e\u0916\u093f\u0932 \u0915\u0930\u0947 \u0915\u0947 \u0932\u0917\u0940 \u0938\u093e\u0925\u0947 \u0932\u093e\u090f\u0902\u0964",
            "x": " ",
            "y": 3
        },
        "query": [
            "Split {a} from the right by {x} up to {y} times.",
            "Divide {a} from the end using {x} as the delimiter, up to {y} occurrences.",
            "Separate {a} starting from the right at {x}, limiting to {y} splits."
        ],
        "language": "mag_Deva"
    },
    {
        "solution": "```python\nanswer = a.partition(x)[y].swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "Het basistempo waarmee kennis werd vergaard veranderde, omdat de mogelijkheid om kennis te vergaren en te leren op de manier zoals hierboven wordt beschreven veranderde.",
            "x": "omdat",
            "y": 2
        },
        "query": [
            "Partition {a} by {x} and swap the case of the {y}-th part.",
            "Split {a} using {x} and change the case of the {y}-th segment.",
            "Divide {a} at {x} and invert the case of the {y}-th section."
        ],
        "language": "nld_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('ascii').decode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "\u092a\u0930\u094d\u0935\u0924\u093e\u0930\u094b\u0939\u0923\u0915 \u0932\u0947\u0932 \u0935\u093e \u0927\u094d\u0930\u0941\u0935 \u0927\u0930\u093f \u092a\u0939\u0941\u0901\u091a\u092c\u093e\u0915 \u0932\u0947\u0932 \u0915\u0916\u0928\u0939\u0941\u0902-\u0915\u093e\u0932 \u0935\u093f\u0936\u0947\u0937\u091c\u094d\u091e \u0939\u0935\u093e\u0908 \u092f\u093e\u0924\u094d\u0930\u093e \u0938\u092d \u0905\u0902\u0924\u0930\u094d\u0926\u0947\u0936\u0940\u092f \u0938\u094d\u0925\u0932 \u092a\u0930 \u091c\u093e\u0907\u0924 \u091b\u0925\u093f, \u091c\u0924\u090f \u090f\u0915\u091f\u093e \u092a\u0948\u0918 \u0906\u0927\u093e\u0930 \u0938\u094d\u0925\u0932 \u0905\u091b\u093f\u0964"
        },
        "query": [
            "Encode {a} in ASCII and then decode it back to UTF-8.",
            "Convert {a} to ASCII encoding and then back to UTF-8.",
            "Transform {a} by encoding it in ASCII and decoding it in UTF-8."
        ],
        "language": "mai_Deva"
    },
    {
        "solution": "```python\nanswer = a.partition(x)[2].isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u041e\u0448\u043e\u043b \u044d\u043b\u0435 \u0443\u0431\u0430\u043a\u0442\u0430 \u0430\u043b \u0420\u043e\u0443\u043d\u0443\u043d \u0447\u0435\u0447\u0438\u043c\u0438\u043d\u0435 \u043a\u04e9\u0437 \u043a\u0430\u0440\u0430\u043d\u0434\u044b \u0431\u043e\u043b\u0433\u043e\u043d \u043a\u0443\u043f\u0443\u044f\u043b\u044b\u043a\u043a\u0430 \u0431\u0430\u0439\u043b\u0430\u043d\u044b\u0448\u0442\u0443\u0443 \u0431\u043e\u0436\u043e\u043c\u043e\u043b\u0434\u043e\u043e\u0433\u043e \u0442\u0430\u044f\u043d\u0433\u0430\u043d\u044b\u043d \u044b\u0440\u0430\u0441\u0442\u0430\u043f \u0431\u0435\u0440\u0434\u0438.",
            "x": " "
        },
        "query": [
            "Partition {a} at the first occurrence of {x} and check if the substring after {x} is numeric.",
            "Split {a} at the first occurrence of {x} and determine if the part after {x} is a number.",
            "Divide {a} at the first instance of {x} and verify if the segment following {x} consists of digits."
        ],
        "language": "kir_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].strip().capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "\u0189\u00f3 vogbigb\u0254n me n\u00f9 kanl\u00ecn g\u0115 en\u025b \u0256e l\u025b \u0254\u201a n\u00f9 \u0256i gb\u00e8t\u0254 n\u00f9k\u0254n t\u0254n l\u025b n\u0254 zan al\u0254 bo n\u0254n \u0256i z\u0254nl\u00ec alo bo n\u0254n ze agban alo bo n\u0254n da ayih\u00f9n gb\u0254n atin me l\u025b a.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Split {a} by {x}, take the {y}-th segment, strip whitespace, and capitalize it.",
            "Divide {a} using {x} as the delimiter, select the {y}-th part, remove leading and trailing spaces, and capitalize the result.",
            "Using {x} to split {a}, get the {y}-th section, trim any surrounding spaces, and convert it to capitalized form."
        ],
        "language": "fon_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).upper().replace(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "Aqueles eveniments duran normalament entre tres e si\u00e8is meses, e se tenon sus de sits que son pas mai pichons que 50 ectaras.",
            "x": "A",
            "y": "e",
            "z": "E"
        },
        "query": [
            "Trim characters in {x} from both ends of {a}, convert it to uppercase, and replace {y} with {z}.",
            "Remove characters in {x} from the start and end of {a}, change it to uppercase, and substitute {y} with {z}.",
            "Strip {x} from the beginning and end of {a}, turn it to uppercase, and swap {y} with {z}."
        ],
        "language": "oci_Latn"
    },
    {
        "solution": "```python\nanswer = a.swapcase().rjust(x, y).split(z)\nprint(answer)\n```",
        "variables": {
            "a": "In het noorden van New Mexico zijn bijvoorbeeld grote problemen met rijden onder invloed. De concentratie dronken bestuurders is het hoogst in de buurt van bars in dorpjes.",
            "x": 150,
            "y": "*",
            "z": " "
        },
        "query": [
            "Swap the case of {a}, right-justify it to {x} characters with {y}, and split it by {z}.",
            "Change the case of {a} to the opposite, pad it to the right to {x} characters using {y}, and then split it by {z}.",
            "Convert the case of {a}, pad it on the left to {x} characters with {y}, and divide it by {z}."
        ],
        "language": "nld_Latn"
    },
    {
        "solution": "```python\nanswer = a.islower() and a[::-1].islower()\nprint(answer)\n```",
        "variables": {
            "a": "An mga banabana naabot tikang ha 340 ka milyon tubtob 500 ka milyon nga nagyayakan, ngan sugad kadamu han 800 ka milyon ka tawo nga nakakaintindi han yinaknan."
        },
        "query": [
            "Verify if {a} and its reverse are both in lowercase.",
            "Check if both {a} and its reverse are in lowercase.",
            "Determine if {a} and its reverse are entirely in lowercase."
        ],
        "language": "war_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).upper().count(z)\nprint(answer)\n```",
        "variables": {
            "a": "E wi mano, jang'ad bura maduong' Evangelos Kalousis oketi e twech nikech ne oyude gi ketho mar mibadhi kod timbe maok nikare.",
            "x": "jang'ad",
            "y": "lawyer",
            "z": "E"
        },
        "query": [
            "Replace {x} with {y} in {a}, convert it to uppercase, and count occurrences of {z}.",
            "Substitute {x} with {y} in {a}, change it to uppercase, and count how many times {z} appears.",
            "Swap {x} with {y} in {a}, turn it to uppercase, and count the number of {z}."
        ],
        "language": "luo_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().split(x).join(y)\nprint(answer)\n```",
        "variables": {
            "a": " \u0b38\u0b2c\u0b41\u0b20\u0b3e\u0b30\u0b41 \u0b2c\u0b5c \u0b28\u0b3f\u0b2f\u0b41\u0b15\u0b4d\u0b24\u0b3f \u0b15\u0b4d\u0b37\u0b47\u0b24\u0b4d\u0b30\u0b17\u0b41\u0b5c\u0b3f\u0b15 \u0b39\u0b47\u0b09\u0b1b\u0b3f \u0b2c\u0b43\u0b24\u0b4d\u0b24\u0b3f\u0b17\u0b24 \u0b38\u0b47\u0b2c\u0b3e, \u0b38\u0b30\u0b15\u0b3e\u0b30\u0b40, \u0b05\u0b30\u0b4d\u0b25, \u0b2c\u0b3e\u0b23\u0b3f\u0b1c\u0b4d\u0b5f \u0b0f\u0b2c\u0b02 \u0b2a\u0b30\u0b4d\u0b2f\u0b4d\u0b5f\u0b1f\u0b28\u0964 ",
            "x": ",",
            "y": " | "
        },
        "query": [
            "Trim whitespace from {a}, split it by {x}, and join the elements with {y}.",
            "Remove leading and trailing spaces from {a}, divide it by {x}, and concatenate the parts with {y}.",
            "Strip spaces from {a}, break it by {x}, and merge the segments with {y}."
        ],
        "language": "ory_Orya"
    },
    {
        "solution": "```python\nanswer = a.lower().count(x) > y\nprint(answer)\n```",
        "variables": {
            "a": "Hpaji rawng ni gaw dai lam hpe radio shapraw na matu ngun jaw ai ngut shaga ma ai hpamajaw nga yang atom ni hpe wan ni kaw na ngun kaw ai, wan na photon shapraw ai hpe byin shangun ai majaw re ngut nna wan gaw radio myu mi re.",
            "x": "a",
            "y": 10
        },
        "query": [
            "Does the lowercase version of {a} contain more than {y} occurrences of {x}?",
            "Is the count of {x} in the lowercase version of {a} greater than {y}?",
            "Are there more than {y} instances of {x} in the lowercase form of {a}?"
        ],
        "language": "kac_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].capitalize().encode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "Jardin de la Union.Meerahan waxaa loo dhisay sidii dhismayaashii qarnigii 17 aad qarnigii la dumin jiray Tempedon San Diego waa dhismaha keliya ee kabadbaaday.",
            "x": 21,
            "y": 28
        },
        "query": [
            "Extract the substring of {a} from index {x} to {y}, capitalize it, and encode it in UTF-8.",
            "Get the substring of {a} from position {x} to {y}, convert it to capitalized form, and encode it using UTF-8.",
            "Take the substring from {a} starting at index {x} and ending at index {y}, capitalize the result, and encode it in UTF-8."
        ],
        "language": "som_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('ascii').decode('ascii').zfill(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u5229\u7528\u53ef\u80fd\u306a\u5bbf\u6cca\u5148\u306e\u4e00\u89a7\u306f\u3001\u5370\u5237\u7269\u3084\u30aa\u30f3\u30e9\u30a4\u30f3\u3067\u63d0\u4f9b\u3055\u308c\u3001\u4ed6\u306e\u65c5\u884c\u8005\u306b\u3088\u308b\u8a55\u4fa1\u3084\u610f\u898b\u304c\u63b2\u8f09\u3055\u308c\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002",
            "x": 50
        },
        "query": [
            "Encode {a} in ASCII, decode it back, and pad it with zeros to make its length {x}.",
            "Convert {a} to ASCII, revert it, and add leading zeros to reach a length of {x}.",
            "Transform {a} to ASCII, convert it back, and prepend zeros until the length is {x}."
        ],
        "language": "jpn_Jpan"
    },
    {
        "solution": "```python\nanswer = a.swapcase()[x:y]\nprint(answer)\n```",
        "variables": {
            "a": "Na nayinzi kele mvukani ya ba mbanza mingi mutindu Amerika na Canada, mpaku na mbongo yina muntu ke zwaka ke katukaka bisika zole na na kisika mbula matadi na bamfumu ya bwala, na kiteso mpi mbongo yina me ku tezwa kele ya luswaswanu na ba mbanza.",
            "x": 10,
            "y": 50
        },
        "query": [
            "Swap the case of {a} and then extract the substring from {x} to {y}.",
            "Change the case of {a} and then get the substring from index {x} to {y}.",
            "Convert the case of {a} and then slice the string from {x} to {y}."
        ],
        "language": "ktu_Latn"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "Thoth\tjowuoth\tmotegno\tkendo\tmonyalo\tosehew\tgi\tnyien\tmar\twuodh\tpinje\tmadongore,\tkama\tlokruok\tmatin\tmar\tkido\tgi\ttimbe\tnyalo\tlandore\tpiyo\tahinya.",
            "x": 4
        },
        "query": [
            "Replace each tab in {a} with {x} spaces, then swap the case of all characters.",
            "Convert tabs in {a} to {x} spaces and then invert the case of each character.",
            "Change each tab in {a} to {x} spaces and then toggle the case of all characters."
        ],
        "language": "luo_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::z]\nprint(answer)\n```",
        "variables": {
            "a": "\u041f\u043e\u0442\u0456\u043c \u041c\u0430\u0440\u0443\u0447\u0456\u0434\u043e\u0440 \u043f\u0435\u0440\u0435\u043c\u0456\u0433 \u041a\u0430\u0431\u043e\u043b\u044e\u043a\u0442\u0443\u0440\u0443 \u0443 \u043f\u0456\u0432\u0444\u0456\u043d\u0430\u043b\u0456.",
            "x": 6,
            "z": 3
        },
        "query": [
            "Extract the substring from {a} starting at index {x} and taking every {z}-th character.",
            "Get the substring from {a} beginning at index {x} and selecting every {z}-th character.",
            "Retrieve the substring from {a} starting at position {x} and picking every {z}-th character."
        ],
        "language": "ukr_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.lower()\nprint(answer)\n```",
        "variables": {
            "a": "Mu yoso, kwakala mawutelu avulu adiwanguna alungu ni kunwa kafe mu ngongo yoso asoko phala kufikisa."
        },
        "query": [
            "Convert all characters in {a} to lowercase.",
            "Change all letters in {a} to lowercase.",
            "Transform every character in {a} to lowercase."
        ],
        "language": "kmb_Latn"
    },
    {
        "solution": "```python\nanswer = a.title()\nprint(answer)\n```",
        "variables": {
            "a": "Pero, mayda nira iba nga klase hin kaopay ngan kaanyag durante han panahon han kathagkot, nga may-ada damu nga mga istasyon han bungtod nga nakakakarawat hin hura an kadamu hin mga nyebe ngan nagtatanyag hin mga aktibidad sugad han pag-ski ngan snowboarding."
        },
        "query": [
            "Capitalize the first letter of each word in {a}.",
            "Make the first letter of each word in {a} uppercase.",
            "Convert the first character of each word in {a} to uppercase."
        ],
        "language": "war_Latn"
    },
    {
        "solution": "```python\nanswer = a[::z]\nprint(answer)\n```",
        "variables": {
            "a": "\u0a07\u0a39 \u0a2f\u0a15\u0a40\u0a28\u0a40 \u0a2c\u0a23\u0a3e\u0a13 \u0a15\u0a3f \u0a24\u0a41\u0a38\u0a40\u0a02 \u0a07\u0a39 \u0a1c\u0a3e\u0a23\u0a26\u0a47 \u0a39\u0a4b \u0a15\u0a3f \u0a24\u0a41\u0a38\u0a40\u0a02 \u0a15\u0a3e\u0a28\u0a42\u0a70\u0a28\u0a40 \u0a38\u0a40\u0a2e\u0a3e\u0a35\u0a3e\u0a02 \u0a26\u0a47 \u0a05\u0a70\u0a26\u0a30 \u0a15\u0a41\u0a1d \u0a35\u0a40 \u0a32\u0a3f\u0a06 \u0a38\u0a15\u0a26\u0a47 \u0a39\u0a4b \u0a05\u0a24\u0a47 \u0a15\u0a40 \u0a28\u0a39\u0a40\u0a02 \u0a32\u0a3f\u0a06 \u0a38\u0a15\u0a26\u0a47 \u0a39\u0a4b \u0a05\u0a24\u0a47 \u0a07\u0a38 \u0a2c\u0a3e\u0a30\u0a47 \u0a18\u0a4b\u0a36\u0a3f\u0a24 \u0a35\u0a40 \u0a15\u0a30 \u0a38\u0a15\u0a26\u0a47 \u0a39\u0a4b\u0964",
            "z": 3
        },
        "query": [
            "Select every {z}-th character from the string {a}.",
            "Extract every {z}-th character from the string {a}.",
            "Get every {z}-th character from the string {a}."
        ],
        "language": "pan_Guru"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace')\nprint(answer)\n```",
        "variables": {
            "a": "\u0645\u0646 \u0627\u0644\u0635\u0639\u0628 \u0623\u0646 \u0646\u062c\u062f \u0627\u0644\u0639\u062f\u064a\u062f \u0645\u0646 \u0627\u0644\u062d\u064a\u0648\u0627\u0646\u0627\u062a \u0627\u0644\u063a\u0631\u064a\u0628\u0629\u060c \u0648\u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u0623\u062d\u064a\u0627\u0646 \u0642\u062f \u062a\u0643\u0648\u0646 \u0644\u0644\u062d\u062f\u0627\u0626\u0642 \u0627\u0644\u0639\u0627\u0645\u0629 \u0642\u0648\u0627\u0639\u062f \u062e\u0627\u0635\u0629 \u0628\u0634\u0623\u0646 \u0627\u0644\u062a\u0642\u0627\u0637 \u0627\u0644\u0635\u0648\u0631 \u0627\u0644\u0641\u0648\u062a\u0648\u063a\u0631\u0627\u0641\u064a\u0629 \u0644\u0623\u063a\u0631\u0627\u0636 \u062a\u062c\u0627\u0631\u064a\u0629.",
            "x": "ars_Arab"
        },
        "query": [
            "Encode the string {a} using {x} encoding, replacing unencodable characters with a question mark.",
            "Convert the string {a} to {x} encoding, substituting unencodable characters with a question mark.",
            "Transform the string {a} with {x} encoding, using a question mark for characters that can't be encoded."
        ],
        "language": "ars_Arab"
    },
    {
        "solution": "```python\nanswer = a[x]\nprint(answer)\n```",
        "variables": {
            "a": "\u04ae\u0439-\u0431\u04af\u043b\u04e9\u043b\u04e9\u0440 \u04af\u0447\u04af\u043d \u0441\u0430\u043f\u0430\u0442\u044b \u0436\u043e\u0433\u043e\u0440\u0443 \u0431\u043e\u043b\u0433\u043e\u043d \u0442\u0430\u043d\u0434\u043e\u043e\u043b\u043e\u0440\u0434\u0443\u043d \u043a\u04e9\u043f\u0442\u04af\u0433\u04af \u2014 \u0422\u04af\u043d\u0434\u04af\u043a \u041a\u0430\u0440\u043e\u043b\u0438\u043d\u0430\u043d\u044b\u043d \u0428\u0430\u0440\u043b\u043e\u0442\u0442 \u0448\u0430\u0430\u0440\u044b\u043d\u044b\u043d \u044d\u04a3 \u043a\u04af\u0447\u0442\u04af\u04af \u0436\u0430\u043a\u0442\u0430\u0440\u044b\u043d\u044b\u043d \u0431\u0438\u0440\u0438 \u0431\u043e\u043b\u0443\u043f \u044d\u0441\u0435\u043f\u0442\u0435\u043b\u0435\u0442.",
            "x": 10
        },
        "query": [
            "Retrieve the character at index {x} from the string {a}.",
            "Get the character located at position {x} in the string {a}.",
            "Fetch the character at the {x}th index of the string {a}."
        ],
        "language": "kir_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.find(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0d15\u0d41\u0d34\u0d3f \u0d12\u0d28\u0d4d\u0d28\u0d41\u0d15\u0d3f\u0d7d \u0d24\u0d40\u0d2f\u0d3f\u0d7d \u0d1a\u0d41\u0d1f\u0d4d\u0d1f\u0d15\u0d32\u0d4d\u0d32\u0d41\u0d15\u0d7e \u0d15\u0d4a\u0d23\u0d4d\u0d1f\u0d4d \u0d1a\u0d42\u0d1f\u0d3e\u0d15\u0d4d\u0d15\u0d41\u0d28\u0d4d\u0d28\u0d41, \u0d05\u0d24\u0d32\u0d4d\u0d32\u0d46\u0d19\u0d4d\u0d15\u0d3f\u0d7d \u0d1a\u0d3f\u0d32 \u0d38\u0d4d\u0d25\u0d32\u0d19\u0d4d\u0d19\u0d33\u0d3f\u0d7d \u0d1c\u0d3f\u0d2f\u0d4b \u0d24\u0d46\u0d7c\u0d2e\u0d7d \u0d24\u0d3e\u0d2a\u0d02, \u0d06 \u0d38\u0d4d\u0d25\u0d32\u0d24\u0d4d\u0d24\u0d46 \u0d38\u0d4d\u0d35\u0d3e\u0d2d\u0d3e\u0d35\u0d3f\u0d15\u0d2e\u0d3e\u0d2f\u0d3f \u0d1a\u0d42\u0d1f\u0d4d \u0d2a\u0d3f\u0d1f\u0d3f\u0d2a\u0d4d\u0d2a\u0d3f\u0d15\u0d4d\u0d15\u0d41\u0d28\u0d4d\u0d28\u0d41.",
            "x": "\u0d1a\u0d42\u0d1f\u0d4d"
        },
        "query": [
            "Find the first occurrence of the substring {x} in {a}.",
            "Locate the initial position of the substring {x} within {a}.",
            "Determine the starting index of the first appearance of {x} in {a}."
        ],
        "language": "mal_Mlym"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u041f\u0440\u043e\u0442\u0435, \u043e\u0447\u0456\u043a\u0443\u0439\u0442\u0435, \u0449\u043e \u0432\u0438 \u043d\u0435 \u0437\u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u0434\u0438\u0445\u043d\u0443\u0442\u0438 \u043f\u043e\u0432\u0456\u0442\u0440\u044f \u0456 \u043f\u043e\u0434\u0431\u0430\u0439\u0442\u0435 \u043f\u0440\u043e \u0431\u0456\u043b\u044c\u0448 \u043a\u0440\u0443\u0442\u0456 \u0434\u0456\u043b\u044f\u043d\u043a\u0438, \u043e\u0441\u043e\u0431\u043b\u0438\u0432\u043e \u043a\u043e\u043b\u0438 \u0432\u043e\u043d\u0438 \u043c\u043e\u043a\u0440\u0456, \u0442\u0430\u043a \u044f\u043a \u0432\u043e\u043d\u0438 \u043c\u043e\u0436\u0443\u0442\u044c \u0441\u0442\u0430\u0442\u0438 \u043d\u0435\u0431\u0435\u0437\u043f\u0435\u0447\u043d\u0438\u043c\u0438 \u0432 \u043a\u043e\u0440\u043e\u0442\u043a\u0438\u0439 \u043f\u0440\u043e\u043c\u0456\u0436\u043e\u043a \u0447\u0430\u0441\u0443.",
            "x": "\u0443."
        },
        "query": [
            "Remove trailing characters in {x} from the end of {a}.",
            "Strip characters in {x} from the end of {a}.",
            "Trim characters in {x} from the right side of {a}."
        ],
        "language": "ukr_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.join(x)\nprint(answer)\n```",
        "variables": {
            "a": ", ",
            "x": [
                "\u0420\u0435\u043b\u0438\u0433\u0438\u043e\u0437\u043d\u044b\u0435",
                "\u0444\u0438\u043b\u043e\u0441\u043e\u0444\u0441\u043a\u0438\u0435",
                "\u0438",
                "\u043d\u0430\u0443\u0447\u043d\u044b\u0435",
                "\u0438\u0441\u0441\u043b\u0435\u0434\u043e\u0432\u0430\u0442\u0435\u043b\u0438",
                "\u0438\u0437\u0443\u0447\u0430\u044e\u0442",
                "\u0432\u0440\u0435\u043c\u044f",
                "\u043d\u0430",
                "\u043f\u0440\u043e\u0442\u044f\u0436\u0435\u043d\u0438\u0438",
                "\u0442\u044b\u0441\u044f\u0447\u0435\u043b\u0435\u0442\u0438\u0439"
            ]
        },
        "query": [
            "Join the elements in {x} using {a} as the separator.",
            "Combine the items in {x} with {a} as the delimiter.",
            "Use {a} to concatenate the elements in {x}."
        ],
        "language": "rus_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x:y].capitalize().isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "PBS laida yra gavusi daugiau kaip du tuzinus Emmy apdovanojim\u0173, ji rodyta trumpiau tik u\u017e \u201eSesame Street\u201c ir \u201eMister Rogers' Neighborhood\u201c.",
            "x": 4,
            "y": 9
        },
        "query": [
            "Ensure that the substring from {x} to {y} in {a} with the first character capitalized consists solely of letters.",
            "Verify that the substring from index {x} to {y} in {a}, when capitalized, contains only alphabetic characters.",
            "Check if the substring from {x} to {y} in {a}, after capitalizing the first letter, is composed entirely of letters."
        ],
        "language": "lit_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].casefold().startswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "Kay telescopio nisqankuna kamachikusqa iskay lentekuna hukllawasqata imakunapas karupi kaqta rikurichinanpaq mana llumpay karupi hinatachu chaynallataq ancha hatunta hina.",
            "x": 4,
            "y": 20,
            "z": "telescopio"
        },
        "query": [
            "Check if the substring from {x} to {y} in {a} converted to casefold starts with {z}.",
            "Determine if the casefolded substring of {a} from index {x} to {y} begins with {z}.",
            "Verify if the substring of {a} from {x} to {y}, when casefolded, starts with {z}."
        ],
        "language": "quy_Latn"
    },
    {
        "solution": "```python\nanswer = a[::-1].replace(x, y).isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "A trav\u00e9s del seguimiento de un mapeo del fondo marino, se encontr\u00f3 el naufragio con el uso de un ROV.",
            "x": "o",
            "y": "a"
        },
        "query": [
            "Reverse {a}, replace {x} with {y}, and check if the result is alphabetic.",
            "Reverse the string {a}, substitute {x} with {y}, and verify if the outcome contains only letters.",
            "Flip {a}, change {x} to {y}, and determine if the final string is purely alphabetic."
        ],
        "language": "spa_Latn"
    },
    {
        "solution": "```python\nanswer = a.swapcase().isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "Noen av bergartene, som er sv\u00e6rt sjeldne p\u00e5 jorden, selges fra 11 000 dollar til 22 500 dollar per unse, noe som er omtrent ti ganger mer enn kostnaden for gull."
        },
        "query": [
            "Check if the case-inverted version of {a} is alphanumeric.",
            "Determine if the swapped case version of {a} contains only alphanumeric characters.",
            "Is the case-swapped version of {a} alphanumeric?"
        ],
        "language": "nob_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x, y)[-1].upper()\nprint(answer)\n```",
        "variables": {
            "a": "Sada funkcionira kao sredi\u0161nji trg i uvijek se na njemu mnogo toga doga\u0111a, danju i no\u0107u.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Split {a} by {x} up to {y} times, then convert the last segment to uppercase.",
            "Divide {a} using {x} as the delimiter up to {y} times, and change the final part to uppercase.",
            "Break {a} into parts by {x} up to {y} times, then make the last part uppercase."
        ],
        "language": "hrv_Latn"
    },
    {
        "solution": "```python\nanswer = a[x].isupper()\nprint(answer)\n```",
        "variables": {
            "a": "Bobek, o a tsholetsweng kwa motsemoshate wa Croatia o o bidiwang Zagreb, o sele a tuma thata fa a tshamekela Partizan Belgrade.",
            "x": 0
        },
        "query": [
            "Check if the character at position {x} in {a} is uppercase.",
            "Determine if the character at index {x} in {a} is an uppercase letter.",
            "Is the character at position {x} in the string {a} an uppercase character?"
        ],
        "language": "tsn_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x, y).join(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u092e\u0928\u0941\u0915\u094d\u0916 \u0930\u0939\u093f\u0924 \u0932\u0942\u0928\u0930 \u0911\u0930\u094d\u092c\u093f\u091f \u091a\u0902\u0926\u094d\u0930\u092f\u093e\u0928 - 1 \u0928\u0947 \u0905\u092a\u0928\u0947 \u092e\u0942\u0928 \u0907\u092e\u094d\u092a\u0948\u0915\u094d\u091f \u092a\u094d\u0930\u094b\u092c ( \u090f\u092e\u0906\u0908\u092a\u0940 ) \u0917\u0940 \u091b\u094b\u095c\u0940 \u0926\u093f\u0924\u094d\u0924\u093e, \u091c\u0947\u0939\u094d\u200c\u200c\u095c\u093e 1.5 \u0915\u093f\u0932\u094d\u0932\u094b\u092e\u0940\u091f\u0930 \u092a\u094d\u0930\u0924\u093f \u0938\u0948\u0915\u0902\u0921 (3000 \u092e\u0940\u0932 \u092a\u094d\u0930\u0924\u093f \u0918\u0948\u0902\u091f\u0947 ) \u092a\u0930 \u091a\u0902\u0926\u094d\u0930\u092e\u093e \u0926\u0940 \u0938\u0924\u0939 \u0915\u0928\u094d\u0928\u0948 \u091f\u0915\u0930\u093e\u092f\u093e \u0939\u093e \u0924\u0947 \u0938\u092b\u0932\u0924\u093e\u092a\u0942\u0930\u094d\u0935\u0915 \u091a\u0928\u094d\u0928 \u0926\u0947 \u0926\u0915\u094d\u0916\u0928\u0940 \u0927\u094d\u0930\u0941\u0935 \u092a\u0930 \u0909\u0924\u0930\u0947\u0906 \u0939\u093e .",
            "x": " ",
            "y": 5,
            "z": "-"
        },
        "query": [
            "Split {a} at {x} into a list of substrings with no more than {y} splits, then join them with {z}.",
            "Divide {a} by {x} into a list with a maximum of {y} splits, then concatenate them using {z}.",
            "Break {a} at {x} into a list of up to {y} parts, then merge them with {z}."
        ],
        "language": "dgo_Deva"
    },
    {
        "solution": "```python\nanswer = a.rsplit(x, y).reverse()\nprint(answer)\n```",
        "variables": {
            "a": "\u5f7c\u5973\u306f\u30a2\u30c8\u30e9\u30f3\u30bf\u3067\u306e\u6ede\u5728\u4e2d\u306b\u6279\u8a55\u5bb6\u304b\u3089\u79f0\u8cdb\u3055\u308c\u3001\u9769\u65b0\u7684\u306a\u90fd\u5e02\u6559\u80b2\u306b\u3064\u3044\u3066\u8a8d\u3081\u3089\u308c\u307e\u3057\u305f\u3002",
            "x": "\u3001",
            "y": 2
        },
        "query": [
            "Split {a} at each {x}, making a maximum of {y} splits from the end, then reverse the list.",
            "Divide {a} by {x} from the end, up to {y} times, and then reverse the resulting list.",
            "Perform a reverse split on {a} using {x} up to {y} times, then reverse the order of the elements."
        ],
        "language": "jpn_Jpan"
    },
    {
        "solution": "```python\nanswer = a.rjust(x, y).replace(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "\u30b3\u30b9\u30c6\u30ed\u6c0f\u306f\u3001\u539f\u5b50\u529b\u767a\u96fb\u3067\u7d4c\u6e08\u7684\u306b\u63a1\u7b97\u304c\u53d6\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3089\u3001\u30aa\u30fc\u30b9\u30c8\u30e9\u30ea\u30a2\u306f\u539f\u5b50\u529b\u767a\u96fb\u306e\u5229\u7528\u3092\u8ffd\u6c42\u3059\u3079\u304d\u3060\u3068\u8ff0\u3079\u307e\u3057\u305f\u3002",
            "x": 100,
            "y": " ",
            "z": "\u539f\u5b50\u529b\u767a\u96fb",
            "w": "\u6838\u30a8\u30cd\u30eb\u30ae\u30fc"
        },
        "query": [
            "Right-justify {a} within {x} characters using {y} for padding, then replace {z} with {w}.",
            "Pad {a} to the right within {x} characters using {y}, then substitute {z} with {w}.",
            "Align {a} to the right within {x} characters using {y} as padding, then change {z} to {w}."
        ],
        "language": "jpn_Jpan"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).replace(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0645\u0646 \u0628\u0648\u0646\u0627\u0646 \u06a9\u06cc \u0628\u0639\u0636\u06cc \u0622\u062f\u0627\u0645\u0644\u0627\u0631 \u0648\u0627\u0631\u062f\u0644\u0627\u0631 \u06a9\u06cc \u0645\u0646\u0646 \u062d\u0645\u0627\u06cc\u062a \u0627\u0626\u0644\u06cc\u0644\u0644\u0631 \u0633\u06cc\u0648\u0646\u0631\u0645.",
            "x": "\u0631",
            "y": "\u0645\u0646\u0646",
            "z": "\u0628\u06cc\u0632\u06cc\u0645"
        },
        "query": [
            "Remove trailing characters in {x} from {a} and replace {y} with {z} in the result.",
            "Trim the trailing {x} characters from {a} and substitute {y} with {z} in the outcome.",
            "Get rid of trailing {x} from {a} and change {y} to {z} in the resulting string."
        ],
        "language": "azb_Arab"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).swapcase().endswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "Go \u0161et\u0161e go begwa ka Seisemane le Sejapane, lekgotla la lefase le thomi\u0161a mananeo a leleme la Spanish, Italian, le Korean, bakeng sa telebi\u0161ene, wepe, le di diri\u0161wa t\u0161a megala.",
            "x": "le",
            "y": "LE",
            "z": "MEGALA."
        },
        "query": [
            "After replacing {x} with {y} in {a} and swapping the case, does it end with {z}?",
            "Does {a} end with {z} after replacing {x} with {y} and swapping the case?",
            "If you replace {x} with {y} in {a} and swap the case, will it end with {z}?"
        ],
        "language": "nso_Latn"
    },
    {
        "solution": "```python\nanswer = a[:y:z].find(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0bb9\u0bbf\u0ba8\u0bcd\u0ba4\u0bbf\u0baf\u0bc1\u0bae\u0bcd \u0b89\u0bb0\u0bc1\u0ba4\u0bc1\u0bae\u0bcd \u0b8e\u0bb4\u0bc1\u0ba4\u0bcd\u0ba4\u0bc1 \u0bb5\u0b9f\u0bbf\u0bb5\u0bbf\u0bb2\u0bcd \u0bb5\u0bc7\u0bb1\u0bc1\u0baa\u0b9f\u0bcd\u0b9f\u0bbf\u0bb0\u0bc1\u0ba8\u0bcd\u0ba4\u0bbe\u0bb2\u0bc1\u0bae\u0bcd \u0b85\u0bb5\u0bb1\u0bcd\u0bb1\u0bbf\u0ba9\u0bcd \u0b9a\u0bca\u0bb2\u0bcd \u0b85\u0b95\u0bb0\u0bbe\u0ba4\u0bbf\u0baf\u0bbf\u0bb2\u0bcd \u0baa\u0bb2 \u0b92\u0bb1\u0bcd\u0bb1\u0bc1\u0bae\u0bc8\u0b95\u0bb3\u0bcd \u0b89\u0bb3\u0bcd\u0bb3\u0ba9. \u0ba4\u0bbf\u0ba9\u0b9a\u0bb0\u0bbf \u0baa\u0bc7\u0b9a\u0bcd\u0b9a\u0bc1\u0bb5\u0bbe\u0bb0\u0bcd\u0ba4\u0bcd\u0ba4\u0bc8\u0b95\u0bb3\u0bbf\u0bb2\u0bcd \u0b87\u0bb0\u0bc1 \u0bae\u0bca\u0bb4\u0bbf\u0baf\u0bbf\u0bb2\u0bcd \u0baa\u0bc7\u0b9a\u0bc1\u0baa\u0bb5\u0bb0\u0bcd\u0b95\u0bb3\u0bc1\u0bae\u0bcd \u0b92\u0bb0\u0bc1\u0bb5\u0bb0\u0bc8\u0baf\u0bca\u0bb0\u0bc1\u0bb5\u0bb0\u0bcd \u0b9a\u0bc1\u0bb2\u0baa\u0bae\u0bbe\u0b95 \u0baa\u0bc1\u0bb0\u0bbf\u0ba8\u0bcd\u0ba4\u0bc1 \u0b95\u0bca\u0bb3\u0bcd\u0bb5\u0bb0\u0bcd.",
            "x": "\u0b9a\u0bca\u0bb2\u0bcd",
            "y": 50,
            "z": 2
        },
        "query": [
            "Find the position of {x} in the first {y} characters of {a} with a step of {z}.",
            "Locate the index of {x} within the first {y} characters of {a}, considering every {z}th character.",
            "Determine the position of {x} in the initial {y} characters of {a}, taking every {z}th character into account."
        ],
        "language": "tam_Taml"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].capitalize().endswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "Nyam\u0169 cionekanaga k\u0169nd\u0169 g\u0169othe th\u0129 yothe. Ni cienjaga th\u0129, igatub\u0129ra iria-in\u0129, na ikomb\u0169k\u0129ra ig\u0169r\u0169.",
            "x": " ",
            "y": 3,
            "z": "e"
        },
        "query": [
            "Does the {y+1}-th segment of {a} split by {x}, when capitalized, end with {z}?",
            "When {a} is split by {x}, does the {y+1}-th part, after being capitalized, end with {z}?",
            "If you split {a} by {x}, does the {y+1}-th segment, once capitalized, end with {z}?"
        ],
        "language": "kik_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).encode('utf-8').decode('ascii', errors='ignore')\nprint(answer)\n```",
        "variables": {
            "a": "\u092a\u0942\u0930\u093f \u095b\u093f\u0932 \u091b\u0941 \u092a\u0928\u093f \u092e\u0941\u0928\u092b\u0930\u093f\u0921 \u0924\u093e\u0930\u0940\u0916\u0940 \u0915\u0926\u0930\u093f \u0916\u0947\u0924\u0930\u093f UNESCO \u0906\u0932\u092e\u0940 \u0938\u0915\u093e\u092b\u0924\u0940 \u0935\u0930\u093e\u0938\u094d\u0924\u0940 (World Heritage Site) \u0924\u094b\u0930 \u092a\u0947\u0920 \u0928\u093e\u092e\u095b\u0926 \u0915\u0930\u0928\u093f \u0906\u092e\u0941\u0924 \u0964 \u0924\u093f \u090f\u092e\u093f \u091c\u093e\u092f\u0926\u0926\u093f\u091a \u0907\u0915\u0926\u093e\u0930 \u091b\u093e \u092e\u0941\u0932\u0915\u093f\u0915\u0947\u0928 \u0906\u0932\u093e \u0924\u0930\u0940\u0928 \u092e\u0915\u093e\u092e\u093e\u0924\u0928 \u092e\u0902\u095b \u0936\u093e\u092e\u093f\u0932 \u0964",
            "x": "\u095b\u093f\u0932",
            "y": "\u091c\u093f\u0932\u093e"
        },
        "query": [
            "Replace {x} with {y} in {a}, encode to UTF-8, and decode to ASCII ignoring errors.",
            "Substitute {x} with {y} in {a}, convert to UTF-8, and then decode to ASCII while ignoring errors.",
            "Change {x} to {y} in {a}, encode in UTF-8, and decode to ASCII, ignoring any errors."
        ],
        "language": "kas_Deva"
    },
    {
        "solution": "```python\nanswer = a[x::y].encode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u0644\u0648\u0644\u0627\u064a\u0627\u062a \u0627\u0644\u0645\u062a\u062d\u062f\u0629 \u0628\u062a\u062d\u0643\u064a \u0627\u0646\u0647\u0627 \u0627\u0633\u062a\u0644\u0645\u062a \u0645\u0639\u0644\u0648\u0645\u0627\u062a \u0645\u0646 \u0645\u0635\u062f\u0631 \u0645\u0627 \u062d\u0643\u0649 \u0639\u0646 \u062d\u0627\u0644\u0647 \u0628\u062d\u0643\u064a \u062e\u0635\u0648\u0635\u0627\u064b \u0639\u0646 \u0627\u0633\u062a\u062e\u062f\u0627\u0645 \u0645\u0641\u062c\u0631\u064a\u0646 \u0627\u0646\u062a\u062d\u0627\u0631\u064a\u064a\u0646 \u0644\u064a\u0641\u062c\u0631\u0648\u0627 \"\u0645\u0639\u0627\u0644\u0645 \u0628\u0627\u0631\u0632\u0629\" \u0641\u064a \u0625\u062b\u064a\u0648\u0628\u064a\u0627 \u0648\u0643\u064a\u0646\u064a\u0627.",
            "x": 5,
            "y": 3
        },
        "query": [
            "Extract every {y}-th character from {a} starting at index {x} and encode the result in UTF-8.",
            "From the string {a}, take every {y}-th character beginning at index {x} and encode it in UTF-8.",
            "Starting at position {x} in {a}, select every {y}-th character and encode the selection in UTF-8."
        ],
        "language": "apc_Arab_sout3123"
    },
    {
        "solution": "```python\nanswer = a.replace('\\t', ' ' * x)\nprint(answer)\n```",
        "variables": {
            "a": "\u062a\u0627\u06a4\u064a\u060c \u062c\u064a\u0643\u0648\u0642 \u0627\u064a\u0643\u0648 \u062a\u0627\u062c\u0627\u062f\u060c \u0645\u0648\u06a0\u06a9\u064a\u0646 \u0627\u0646\u062f\u0642 \u0643 \u062a\u0627\u062c\u0627\u062f\u064a \u0627\u0648\u0646\u062a\u0648\u0621\u0642 \u0648\u0627\u0643\u0627\u062a\u0648 \u0646\u0646 \u0644\u0627\u0645\u0648\u06d4 \u0628\u0646\u062a\u06a0-\u0628\u0646\u062a\u06a0 \u0633\u0627\u06a0\u0627\u0621\u0642 \u062a\u0627\u06a4\u0646\u0686-\u06a4\u0646\u0686 \u0633\u0627\u0647\u064a\u06a0\u06ac\u0648 \u0627\u062f\u0648 \u062c\u0627\u0631\u0642 \u062a\u0631\u064a\u0644\u064a\u0648\u0646\u0646 \u0645\u064a\u0644 \u062f \u0627\u0646\u062a\u0627\u0631\u0648 \u0628\u0646\u062a\u06a0-\u0628\u0646\u062a\u06a0 \u0646\u0646 \"\u0628\u0627\u062f\u0627\u0643\u0643\u0646\".",
            "x": 4
        },
        "query": [
            "Substitute tabs in {a} with {x} spaces.",
            "Replace all tabs in {a} with {x} spaces.",
            "Convert tabs in {a} to {x} spaces."
        ],
        "language": "min_Arab"
    },
    {
        "solution": "```python\nanswer = a[x].upper()\nprint(answer)\n```",
        "variables": {
            "a": "Es deleixen els uns amb els altres amb hist\u00f2ries de les seves ciutats natals, explicades amb els seus diferents accents i argot local.",
            "x": 2
        },
        "query": [
            "Convert the {x+1}-th character of {a} to uppercase.",
            "Change the {x+1}-th character of {a} to its uppercase form.",
            "Make the {x+1}-th character of {a} uppercase."
        ],
        "language": "cat_Latn"
    },
    {
        "solution": "```python\nanswer = a.title().encode('ascii')\nprint(answer)\n```",
        "variables": {
            "a": "Particularmente, o sistema de numera\u00e7\u00e3o na B\u00e9lgica e na Su\u00ed\u00e7a franc\u00f3fonas tem algumas leves peculiaridades que s\u00e3o diferentes do franc\u00eas falado na Fran\u00e7a, e a pron\u00fancia de algumas palavras \u00e9 ligeiramente diferente."
        },
        "query": [
            "Convert {a} to title case and encode it in ASCII.",
            "Transform {a} to title case and encode it using ASCII.",
            "Change {a} to title case and encode it in ASCII format."
        ],
        "language": "por_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].strip(z).islower()\nprint(answer)\n```",
        "variables": {
            "a": "\u1e0ceffer aw\u01ddn ad aqlen s afella s \u0103mine\u01e7, ad \u0103ssuk\u01ddn da\u0263 ful ti\u0263ezziwin Mara, \u1e0deffer a\u01e7enna wan Abril.",
            "x": 7,
            "y": 20,
            "z": " "
        },
        "query": [
            "Check if the stripped substring from index {x} to {y} in {a} contains only lowercase characters.",
            "Determine if the substring from {a} between indices {x} and {y}, after stripping {z}, is entirely lowercase.",
            "Verify if the section of {a} from {x} to {y}, once {z} is stripped, consists solely of lowercase letters."
        ],
        "language": "taq_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::y].isupper()\nprint(answer)\n```",
        "variables": {
            "a": "\u00cen primul r\u00e2nd, New Mexico de nord are probleme semnificative cu condusul sub influen\u021ba b\u0103uturilor alcoolice, iar propor\u021bia de \u0219oferi be\u021bi este mare \u00een compara\u021bie cu barurile de ora\u0219 mic.",
            "x": 5,
            "y": 10
        },
        "query": [
            "Check if every {y}-th character starting from position {x} in {a} is uppercase.",
            "Verify if each {y}-th character from index {x} in {a} is an uppercase letter.",
            "Determine if all characters at every {y}-th position starting from position {x} in {a} are uppercase."
        ],
        "language": "ron_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].title().count(z)\nprint(answer)\n```",
        "variables": {
            "a": "Ru\u0254\u0308nic timt\u00f6k ku bu\u0254t k\u00e4 dho\u014buan ku thi\u00e4rdho\u014buan ku dh\u00efc yen ac\u00ef kuany ke ye raan \u014bi\u00ebc thu\u00eb\u00ebc c\u00efn raan  w\u03b5r yen k\u00e4\u00e4\u014b Partizan.",
            "x": 10,
            "y": 50,
            "z": "Ku"
        },
        "query": [
            "How many times does {z} appear in the title-cased substring from {x} to {y} in {a}?",
            "Count the occurrences of {z} in the title-cased section of {a} from index {x} to {y}.",
            "What is the number of times {z} appears in the title-cased substring of {a} between {x} and {y}?"
        ],
        "language": "dik_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].swapcase().isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "Cinque Terre, wat vijf len beteikend, besteit oet vijf kleine k\u00f6spl\u00e4\u00f6tskes: Riomaggiore, Manarola, Corniglia, Vernazza en Monterosso in de Italiaanse regio Liguri\u00eb.",
            "x": 15,
            "y": 30
        },
        "query": [
            "Is the substring from {x} to {y} in {a} alphanumeric after swapping case?",
            "After swapping case, is the substring from {x} to {y} in {a} alphanumeric?",
            "Does the substring from {x} to {y} in {a} become alphanumeric after changing its case?"
        ],
        "language": "lim_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('ascii', 'ignore').find(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u1011\u102d\u102f\u1037\u1015\u103c\u1004\u103a \u1015\u102d\u102f\u1019\u102d\u102f\u1015\u1030\u1014\u103d\u1031\u1038\u101e\u1031\u102c \u101b\u102c\u101e\u102e\u1025\u1010\u102f\u1010\u103d\u1004\u103a \u1018\u1000\u103a\u1010\u102e\u1038\u101b\u102e\u1038\u101a\u102c\u1038\u1019\u103b\u102c\u1038\u101e\u100a\u103a \u1015\u102d\u102f\u1019\u103c\u1014\u103a\u1019\u103c\u1014\u103a \u1000\u103c\u102e\u1038\u1011\u103d\u102c\u1038\u1015\u103c\u102e\u1038 \u1000\u102d\u102f\u101a\u103a\u1001\u1014\u1039\u1013\u102c\u1015\u103c\u1004\u103a\u1015\u1010\u103d\u1004\u103a \u1015\u102d\u102f\u1000\u103c\u102c\u1000\u103c\u102c \u1021\u101e\u1000\u103a\u101b\u103e\u1004\u103a\u1014\u102d\u102f\u1004\u103a\u101e\u100a\u103a\u104b",
            "x": "\u1015"
        },
        "query": [
            "What is the position of {x} in {a} after encoding to UTF-8 and decoding to ASCII, ignoring errors?",
            "After converting {a} to UTF-8 and then to ASCII while ignoring errors, where does {x} appear?",
            "Find the index of {x} in {a} after it is encoded in UTF-8 and decoded in ASCII, ignoring any errors."
        ],
        "language": "mya_Mymr"
    },
    {
        "solution": "```python\nanswer = a.casefold().replace(x, y).islower()\nprint(answer)\n```",
        "variables": {
            "a": "Ke adh\u025b\u0308\u025b\u0308r kene diit ka ku panyde th\u00f6\u00f6k k\u0254u ace leu bi k\u0254c b\u0254 t\u025b\u0308\u014b g\u00ebl.",
            "x": "k",
            "y": "z"
        },
        "query": [
            "Replace {x} with {y} in the casefolded version of {a} and check if the result is in lowercase.",
            "After casefolding {a}, replace {x} with {y} and verify if the final string is in lowercase.",
            "Check if the string obtained by replacing {x} with {y} in the casefolded version of {a} is entirely in lowercase."
        ],
        "language": "dik_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).swapcase().count(y)\nprint(answer)\n```",
        "variables": {
            "a": "Iti maysa a pagtambang idiay daya iti Bardia, natiliw dagiti Briton iti Panguluen nga Inhinyero iti Maikasangapulo a Buyot iti Italia, ni Heneral Lastucci.",
            "x": "Iti",
            "y": "a"
        },
        "query": [
            "Trim characters in {x} from both ends of {a}, swap the case of the result, and count occurrences of {y}.",
            "Remove characters in {x} from the start and end of {a}, change the case of the remaining string, and find the number of times {y} appears.",
            "Strip {x} from the edges of {a}, invert the case of the string, and tally the instances of {y}."
        ],
        "language": "ilo_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode(x).rstrip(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0bae\u0b9a\u0bcd\u0b9a\u0bc1 \u0baa\u0bbf\u0b9a\u0bcd\u0b9a\u0bc1\u0bb5\u0bbf\u0ba9\u0bcd \u0bb5\u0b9f\u0b95\u0bcd\u0b95\u0bc1 \u0bae\u0bc1\u0ba9\u0bc8\u0b95\u0bcd\u0b95\u0bc1 \u0bae\u0bc7\u0bb2\u0bc7 \u0b85\u0bae\u0bc8\u0ba8\u0bcd\u0ba4 \u0b87\u0ba8\u0bcd\u0ba4 \u0b9a\u0bc6\u0b99\u0bcd\u0b95\u0bc1\u0ba4\u0bcd\u0ba4\u0bbe\u0ba9 \u0bae\u0bb2\u0bc8, \u0baa\u0bc6\u0bb0\u0bc1\u0bae\u0bcd\u0baa\u0bbe\u0bb2\u0bc1\u0bae\u0bcd \u0b87\u0b9f\u0bbf\u0baa\u0bbe\u0b9f\u0bc1\u0b95\u0bb3\u0bbf\u0ba9\u0bcd \u0baa\u0bb2 \u0baa\u0bc1\u0b95\u0bc8\u0baa\u0bcd\u0baa\u0b9f\u0b99\u0bcd\u0b95\u0bb3\u0bbf\u0bb2\u0bcd \u0baa\u0bbf\u0ba9\u0bcd\u0baa\u0bc1\u0bb2\u0bae\u0bbe\u0b95 \u0b95\u0bbe\u0ba3\u0baa\u0bcd\u0baa\u0b9f\u0bc1\u0b95\u0bbf\u0bb1\u0ba4\u0bc1.",
            "x": "utf-8",
            "y": "."
        },
        "query": [
            "Encode {a} with {x}, replace non-encodable characters, decode it back, and remove trailing {y} characters.",
            "Using {x} encoding, encode {a}, replace characters that can't be encoded, decode it back, and strip trailing {y} characters.",
            "Encode {a} using {x}, replace unencodable characters, decode it back, and trim trailing {y} characters."
        ],
        "language": "tam_Taml"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).title().isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "A chionn \u2019s gu bheil an stoirm fada air falbh o thalamh, tha e fhathast duilich measadh a dh\u00e8anamh air a\u2019 bhuaidh a dh\u2019fhaodadh e toirt air na SA no air na h-Eileanan Caraibeach.",
            "x": "ch."
        },
        "query": [
            "Check if {a} without trailing {x} and with each word capitalized is printable.",
            "Determine if the string {a} without the trailing {x} and with each word capitalized is printable.",
            "Is the string {a} without the trailing {x} and with each word capitalized printable?"
        ],
        "language": "gla_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::y].capitalize().istitle()\nprint(answer)\n```",
        "variables": {
            "a": "K\u2019etepuluko litito, ciyongola okuwala osapato iwa. Olosapato vyotembo yohuya vixelena calwa eci opita kilu lyosi likwete ovava, toke mw\u1ebdle olombota viwa vikwatisa okwenda.",
            "x": 10,
            "y": 3
        },
        "query": [
            "Check if the substring of {a} from {x} to the end, every {y} characters, when capitalized, is in title case.",
            "Determine if the substring of {a} starting at index {x} and taking every {y}th character, when capitalized, is in title case.",
            "Verify if the substring of {a} from index {x} to the end, taking every {y} characters, when capitalized, is in title case."
        ],
        "language": "umb_Latn"
    },
    {
        "solution": "```python\nanswer = a.isalpha() and a.endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "Gerusalemm",
            "x": "m"
        },
        "query": [
            "Check if {a} contains only letters and ends with {x}.",
            "Verify if {a} is composed solely of alphabetic characters and concludes with {x}.",
            "Determine if {a} consists exclusively of letters and terminates with {x}."
        ],
        "language": "lmo_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('ascii', errors='ignore').isupper()\nprint(answer)\n```",
        "variables": {
            "a": "Teuma, meupadum th\u00f4n ukeu bak th\u00f4n 1639, sidroe astronomi Inggreh nanjih Jeremiah Horrocks geutilek transit Venus."
        },
        "query": [
            "Is {a} in uppercase after encoding to 'utf-8' and decoding to 'ascii' while ignoring errors?",
            "After encoding {a} to 'utf-8' and decoding to 'ascii' with errors ignored, is it in uppercase?",
            "Does {a} remain in uppercase when encoded to 'utf-8' and decoded to 'ascii' with errors ignored?"
        ],
        "language": "ace_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().encode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "\u0b85\u0bb5\u0bc8 \u0b83\u0baa\u0bcb\u0b9f\u0bcd\u0b9f\u0bbe\u0ba9\u0bcd \u0b8e\u0ba9\u0bcd\u0b95\u0bbf\u0bb1 \u0b92\u0bb3\u0bbf\u0baf\u0bbf\u0ba9\u0bcd \u0ba4\u0bc1\u0b95\u0bb3\u0bc8 \u0bb5\u0bc6\u0bb3\u0bbf\u0baf\u0bbf\u0b9f\u0bc1\u0bb5\u0ba4\u0bbe\u0bb2\u0bcd \u0b87\u0ba4\u0bc8\u0b9a\u0bcd \u0b9a\u0bc6\u0baf\u0bcd\u0b95\u0bbf\u0ba9\u0bcd\u0bb1\u0ba9."
        },
        "query": [
            "Remove leading and trailing whitespace from {a} and encode the result in UTF-8.",
            "Trim whitespace from both ends of {a} and convert it to UTF-8 encoding.",
            "Strip spaces from the start and end of {a} and encode it in UTF-8."
        ],
        "language": "tam_Taml"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('utf-8').isspace()\nprint(answer)\n```",
        "variables": {
            "a": "\u090f\u0915\u0930 \u0925\u0915\u093e\u0928 \u0915\u093f\u091b\u0941 \u090f\u0939\u0928\u0947 \u0939\u094b\u0907\u0924 \u0905\u091b\u093f \u091c\u0947\u0928\u093e \u0915\u0940 \u0905\u0939\u093e\u0902 \u0915\u0947\u0902 \u092a\u094d\u0930\u0924\u094d\u092f\u0947\u0915 \u092c\u0940\u0938 \u0935\u093e \u0924\u0940\u0938 \u092e\u093f\u0928\u091f \u092e\u0947 \u0909\u0920\u093f \u0915\u090f \u091f\u0940\u0935\u0940 \u0926\u0947\u0916\u090f \u092a\u0921\u093c\u090f\u0964"
        },
        "query": [
            "Check if {a} consists only of whitespace characters after encoding and decoding with 'utf-8'.",
            "Determine if {a} is made up solely of whitespace characters after being encoded and decoded using 'utf-8'.",
            "Verify if {a} contains only whitespace characters once it has been encoded and decoded with 'utf-8'."
        ],
        "language": "mai_Deva"
    },
    {
        "solution": "```python\nanswer = a.capitalize().join(x)\nprint(answer)\n```",
        "variables": {
            "a": "forsi",
            "x": [
                "se",
                "tiskopri",
                "xarba",
                "sempli\u010bi",
                "li",
                "tista\u2019",
                "tag\u0127milha",
                "g\u0127all-kolazzjon",
                "meta",
                "ter\u0121a\u2019",
                "lura",
                "g\u0127ar-rutina",
                "ta\u2019",
                "kuljum",
                "tieg\u0127ek"
            ]
        },
        "query": [
            "Join the elements of {x} with the capitalized version of {a} as the separator.",
            "Combine the items in {x} using the capitalized form of {a} as the delimiter.",
            "Merge the elements in {x} with the capitalized version of {a} in between."
        ],
        "language": "mlt_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).upper().isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "B\u00fdval\u00fd student \u0159ekl, \u017ee \u201epou\u017e\u00edval b\u011bhem hodin slang, u\u010dil studenty navazovat zn\u00e1mosti pomoc\u00ed psan\u00ed\u010dek a choval se ke student\u016fm jako kamar\u00e1d.\u201c",
            "x": "student",
            "y": "\u017e\u00e1k"
        },
        "query": [
            "Verify if {a} is printable after replacing {x} with {y} and converting to uppercase.",
            "Check if the string {a} is printable after substituting {x} with {y} and changing to uppercase.",
            "Determine if {a} remains printable after replacing {x} with {y} and transforming to uppercase."
        ],
        "language": "ces_Latn"
    },
    {
        "solution": "```python\nanswer = a.isalnum() and b.isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Meletlo123",
            "b": "simolotswe"
        },
        "query": [
            "Check if {a} contains only alphanumeric characters and {b} contains only alphabetic characters.",
            "Verify that {a} has only alphanumeric characters and {b} has only letters.",
            "Determine if {a} is alphanumeric and {b} is alphabetic."
        ],
        "language": "tsn_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::].isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u06cc\u0646 \u0631\u0627 \u0645\u06cc \u062a\u0648\u0627\u0646 \u0628\u0627 \u0645\u0648\u062a\u0631\u06cc \u0645\u0639\u0645\u0648\u0644\u06cc \u0628\u0627 \u067e\u0644\u0627\u0646 \u0631\u06cc\u0632\u06cc \u062f\u0642\u06cc\u0642 \u0627\u0646\u062c\u0627\u0645 \u062f\u0627\u062f\u060c \u0627\u0645\u0627 \u0645\u0648\u062a\u0631 4x4 \u0642\u0648\u06cc\u0627\u064b \u062a\u0648\u0635\u06cc\u0647 \u0645\u06cc \u0634\u0648\u062f \u0648 \u0628\u0633\u06cc\u0627\u0631\u06cc \u0645\u06a9\u0627\u0646 \u0647\u0627 \u0641\u0642\u0637 \u0628\u0627 \u0645\u0648\u062a\u0631 \u062a\u0627\u06cc\u0631 \u0628\u0644\u0646\u062f 4x4 \u0642\u0627\u0628\u0644 \u062f\u0633\u062a\u0631\u0633 \u0647\u0633\u062a\u0646\u062f.",
            "x": 10
        },
        "query": [
            "Check if the substring of {a} starting from position {x} is alphanumeric.",
            "Verify if the part of {a} starting at index {x} contains only alphanumeric characters.",
            "Determine if the section of {a} from position {x} onwards is alphanumeric."
        ],
        "language": "prs_Arab"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).rstrip(y).isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0639\u0634\u0627\u0646 \u062a\u0631\u062c\u0639 \u0644\u0645\u0633\u062a\u0648\u0649 \u0627\u0644\u0637\u0627\u0642\u0629 \u0627\u0644\u0644\u064a \u0641\u0627\u062a\u060c \u064a\u062c\u0628 \u0623\u0646 \u0647\u0645\u0627 \u064a\u062a\u062e\u0644\u0635\u0648\u0627 \u0645\u0646 \u0627\u0644\u0637\u0627\u0642\u0629 \u0627\u0644\u0625\u0636\u0627\u0641\u064a\u0629 \u0627\u0644\u0644\u064a \u062c\u0627\u0628\u0648\u0647\u0627 \u0645\u0646 \u0627\u0644\u0636\u0648\u0621.",
            "x": "\u0639\u0634\u0627\u0646 ",
            "y": " \u0627\u0644\u0636\u0648\u0621."
        },
        "query": [
            "Strip {x} from the start and {y} from the end of {a}, then check if the result is a valid identifier.",
            "Remove {x} from the beginning and {y} from the end of {a}, then verify if the result is a valid identifier.",
            "Trim {x} from the start and {y} from the end of {a}, then determine if the result is a valid identifier."
        ],
        "language": "arz_Arab"
    },
    {
        "solution": "```python\nanswer = a[y:z].upper().count(x)\nprint(answer)\n```",
        "variables": {
            "a": "Vaatamata kommentaaridele \u00fctles ta, et toetab Suurbritannia v\u00f5istlejaid 2012. aastal Londonis toimuvatel ol\u00fcmpiam\u00e4ngudel.",
            "x": "A",
            "y": 10,
            "z": 50
        },
        "query": [
            "Extract the substring of {a} from index {y} to {z}, convert it to uppercase, and count the occurrences of {x}.",
            "Get the substring of {a} from {y} to {z}, change it to uppercase, and find how many times {x} appears.",
            "Take the part of {a} between {y} and {z}, make it uppercase, and count how often {x} occurs."
        ],
        "language": "ekk_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].casefold().endswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "Ng\u01b0\u1eddi n\u00e0y b\u1ecb c\u00e1o bu\u1ed9c \u0111\u00e3 l\u00e1i m\u1ed9t chi\u1ebfc xe ba b\u00e1nh ch\u1ee9a \u0111\u1ea7y ch\u1ea5t n\u1ed5 lao v\u00e0o \u0111\u00e1m \u0111\u00f4ng.",
            "x": 10,
            "y": 30,
            "z": "bu\u1ed9c \u0111\u00e3 l\u00e1i"
        },
        "query": [
            "Check if the substring from {x} to {y} in {a}, converted to lowercase, ends with {z}.",
            "Determine if the lowercase version of the substring from {x} to {y} in {a} ends with {z}.",
            "Verify if the substring from {x} to {y} in {a}, after converting to lowercase, ends with {z}."
        ],
        "language": "vie_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].rstrip(z).isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u12a5\u1272 \u1295\u1260\u1228\u12bd\u1272 \u1266\u1273\u1273\u1275 \u1293\u12ed \u130e\u1265\u1290\u12ed\u1272 \u12c8\u1255\u1272 \u12a3\u1265 \u1293\u12ed \u1205\u1295\u12f2 \u12ad\u1228\u121d\u1272 \u12ed\u1218\u1228\u1345\u1362",
            "x": 4,
            "y": 14,
            "z": "\u1272"
        },
        "query": [
            "Check if the substring from {x} to {y} in {a}, after removing trailing {z}, is a valid identifier.",
            "Determine if the substring of {a} from index {x} to {y}, with trailing {z} removed, is a valid identifier.",
            "Verify if the portion of {a} between {x} and {y}, after trimming trailing {z}, is a valid identifier."
        ],
        "language": "tir_Ethi"
    },
    {
        "solution": "```python\nanswer = a[x:y].title().replace(z, '')\nprint(answer)\n```",
        "variables": {
            "a": "Kum 1960 chho ah ani chu zalenna hmu zo hlim Algeria ramah film siamdan zirtir turin a kir leh a.",
            "x": 4,
            "y": 34,
            "z": "a"
        },
        "query": [
            "Extract the substring from {x} to {y} in {a}, convert it to title case, and remove all occurrences of {z}.",
            "Get the substring from index {x} to {y} in {a}, change it to title case, and eliminate all instances of {z}.",
            "Take the substring from {x} to {y} in {a}, transform it to title case, and delete every occurrence of {z}."
        ],
        "language": "lus_Latn"
    },
    {
        "solution": "```python\nanswer = a[x::y].upper().zfill(z)\nprint(answer)\n```",
        "variables": {
            "a": "An yi shari\u2019ar ne a Virginia saboda nan ne garin kamfanin AOL mai samar da mashigar yanar gizo, kuma kamfanin da ya shigar da karar.",
            "x": 5,
            "y": 3,
            "z": 20
        },
        "query": [
            "Take every {y}-th character from {x} to the end in {a}, convert to uppercase, and pad with zeros to length {z}.",
            "Extract every {y}-th character starting from index {x} in {a}, change to uppercase, and zero-fill to a total length of {z}.",
            "From {a}, get every {y}-th character starting at index {x}, make it uppercase, and pad with zeros until the length is {z}."
        ],
        "language": "hau_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).replace(y, z).islower()\nprint(answer)\n```",
        "variables": {
            "a": "Goobta waxa ay noqon kartaa dhismo qadiimi oo taarikhiya misna leh alaab qadiimi ah, dhul aad loo qurxiyey iyo baraagta dabaasha.",
            "x": "G",
            "y": "qadiimi",
            "z": "casri"
        },
        "query": [
            "Strip characters {x} from both ends of {a}, replace {y} with {z}, and check if the result is all lowercase.",
            "Remove {x} from the start and end of {a}, substitute {y} with {z}, and verify if the final string is in lowercase.",
            "Trim {x} from both sides of {a}, change {y} to {z}, and determine if the resulting string is entirely in lowercase."
        ],
        "language": "som_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).title().count(y)\nprint(answer)\n```",
        "variables": {
            "a": "Oggi i computer sono usati per manipolare immagini e video.",
            "x": "O",
            "y": "I"
        },
        "query": [
            "Strip {x} from both ends of {a}, convert it to title case, and count occurrences of {y}.",
            "Remove {x} from the start and end of {a}, change it to title case, and find the number of times {y} appears.",
            "Trim {x} from the edges of {a}, capitalize each word, and tally the instances of {y}."
        ],
        "language": "ita_Latn"
    },
    {
        "solution": "```python\nanswer = a.lower().replace(x, y).strip(z)\nprint(answer)\n```",
        "variables": {
            "a": "Ef ma\u00f0ur til d\u00e6mis s\u00e6i einhvern brj\u00f3ta b\u00edlr\u00fa\u00f0u myndi ma\u00f0ur l\u00edklega gera r\u00e1\u00f0 fyrir a\u00f0 vi\u00f0komandi v\u00e6ri a\u00f0 reyna a\u00f0 stela b\u00edl einhvers.",
            "x": "b\u00edlr\u00fa\u00f0u",
            "y": "glugga",
            "z": "e."
        },
        "query": [
            "Convert {a} to lowercase, replace {x} with {y}, and then strip characters in {z} from both ends.",
            "Transform {a} to lowercase, substitute {x} with {y}, and remove characters in {z} from the start and end.",
            "Change {a} to lowercase, switch {x} with {y}, and trim characters in {z} from both sides."
        ],
        "language": "isl_Latn"
    },
    {
        "solution": "```python\nanswer = a.upper().split(x, y)[z]\nprint(answer)\n```",
        "variables": {
            "a": "\u1ee4f\u1ecdd\u1ee5, tinyere J\u1ecdn Grant, kwenyere na mbelata mbinye ego na mgbanwe na nka ihe \u1ecdm\u1ee5ma gbasara ndozi ihe ngosi nkuzi ihe so weta maka njedebe ihe ngosi ah\u1ee5.",
            "x": " ",
            "y": 5,
            "z": 2
        },
        "query": [
            "Convert {a} to uppercase, split it by {x} at most {y} times, and return the {z}-th element.",
            "Transform {a} to uppercase, divide it by {x} up to {y} times, and get the {z}-th part.",
            "Change {a} to uppercase, separate it by {x} no more than {y} times, and fetch the {z}-th segment."
        ],
        "language": "ibo_Latn"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).find(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u092f\u093e\t\u0935\u093f\u091a\u093e\u0930\u0927\u093e\u0930\u0947\u0924\u0940\u0932\t\u0938\u0930\u094d\u0935\u093e\u0924\t\u092e\u0939\u0924\u094d\u0935\u093e\u091a\u093e\t\u0918\u091f\u0915\t\u092e\u094d\u0939\u0923\u091c\u0947\u0903\t\u0905\u091a\u0942\u0915\t\u0909\u0924\u094d\u0924\u0930\t\u0915\u0947\u0935\u0933\t\u090f\u0915\u091a\t\u0905\u0938\u0924\u0947.\t\u0906\u092a\u0923\t\u0915\u0947\u0935\u0933\t\u0926\u094b\u0928\t\u0909\u0924\u094d\u0924\u0930\u093e\u0902\u091a\u093e\t\u0935\u093f\u091a\u093e\u0930\t\u0915\u0930\u0924\u093e,\t\u0905\u0928\u0941\u0915\u094d\u0930\u092e\u0947\t\u092c\u0930\u094b\u092c\u0930\t\u0915\u093f\u0902\u0935\u093e\t\u091a\u0942\u0915.",
            "x": 4,
            "y": "\u092e\u0939\u0924\u094d\u0935\u093e\u091a\u093e",
            "z": 0
        },
        "query": [
            "Expand tabs in {a} to {x} spaces, and find the first occurrence of {y} starting from index {z}.",
            "Convert tabs in {a} to {x} spaces, then locate the first instance of {y} beginning at index {z}.",
            "Replace tabs in {a} with {x} spaces, and search for the first appearance of {y} from index {z}."
        ],
        "language": "mar_Deva"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='ignore').decode(x).title()\nprint(answer)\n```",
        "variables": {
            "a": "Lefu la ho Sitwa ho Tsepamisa Maikutlo (kapa ADD) ke \u201clefu la methapokutlo le matshwao a mararo a le kgethollang a akarelletsang ho nkeha maikutlo, ho fapoha habonolo ha kelello le ho ba matjato kapa mahlahahlaha ka tsela e feteletseng\u201d.",
            "x": "sot_Latn"
        },
        "query": [
            "Encode {a} to {x} encoding, ignore errors, decode back to {x}, and convert to title case.",
            "Convert {a} to {x} encoding, skip errors, revert to {x}, and change to title case.",
            "Transform {a} using {x} encoding, bypass errors, decode to {x}, and switch to title case."
        ],
        "language": "sot_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].encode('utf-8').decode('utf-8').isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u092f\u093e\u0924\u094d\u0930\u093e \u0915\u0930\u0924\u0947 \u0938\u092e\u092f \u0938\u094d\u0935\u092f\u0902\u0938\u0947\u0935\u093e \u0915\u0930\u0928\u093e \u0915\u0941\u091b \u0905\u0932\u0917 \u0915\u0930\u0928\u0947 \u0915\u093e \u092c\u0922\u093c\u093f\u092f\u093e \u0924\u0930\u0940\u0915\u093e \u0939\u0948 \u0932\u0947\u0915\u093f\u0928 \u092f\u0939 \u0938\u093f\u0930\u094d\u095e \u0926\u0947\u0928\u0947 \u0915\u0947 \u092c\u093e\u0930\u0947 \u092e\u0947\u0902 \u0928\u0939\u0940\u0902 \u0939\u0948.",
            "x": 10,
            "y": 15
        },
        "query": [
            "Check if the substring of {a} from {x} to {y}, after encoding and decoding in 'utf-8', is numeric.",
            "Determine if the substring of {a} between indices {x} and {y}, after utf-8 encoding and decoding, is numeric.",
            "Verify if the portion of {a} from index {x} to {y}, once encoded and decoded using 'utf-8', consists of numeric characters."
        ],
        "language": "hin_Deva"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).splitlines()[y].isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Hegoaldeko Gales Berriko RSPCAko inspektore nagusi David O'Shannessy-k esan dio ABCri hiltegien zaintza eta ikuskapenek ohiko izan beharko luketela Australian.",
            "x": 4,
            "y": 0
        },
        "query": [
            "Expand tabs in {a} to {x} spaces, split it into lines, and check if the {y}-th line contains only ASCII characters.",
            "Convert tabs in {a} to {x} spaces, break it into lines, and verify if the {y}-th line is composed solely of ASCII characters.",
            "Replace tabs in {a} with {x} spaces, divide it into lines, and determine if the {y}-th line consists only of ASCII characters."
        ],
        "language": "eus_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(y).upper().count(x)\nprint(answer)\n```",
        "variables": {
            "a": "Pase-pase tajadi karano hanyo sabalah Venus (atau Bulannyo) maadok Matoari disinari. Pase-pase Venus ko mandukuang teori Copernicus bahasonyo planet-planet baredar mangaliliangi Matoari.",
            "x": "PASE",
            "y": "Pase"
        },
        "query": [
            "Count the occurrences of {x} in {a} after stripping {y} from both ends and converting to uppercase.",
            "After removing {y} from the start and end of {a} and converting it to uppercase, count how many times {x} appears.",
            "How many times does {x} occur in {a} after trimming {y} from both ends and changing to uppercase?"
        ],
        "language": "min_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x).join(y).isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u0422\u0430\u0441\u0430\u0432\u0432\u0443\u0440 \u043a\u0443\u043d\u0435\u0434, \u043a\u0438 \u0434\u0430\u0440 \u0442\u0430\u0440\u0430\u0431\u0445\u043e\u043d\u0430\u0435 \u0434\u0430\u0440 \u0422\u043e\u0440\u043e\u043d\u0442\u043e \u0434\u0430\u0440 \u0441\u0430\u0440\u0438 \u043c\u0438\u0437 \u043c\u0430\u043d\u043a\u0443\u043d\u0438\u0430\u043d\u04e3, \u0431\u043e\u0441\u0442\u043e\u043d\u04e3, \u044f\u043c\u0430\u0439\u043a\u0430\u0433\u04e3 \u0432\u0430 \u0441\u0438\u0434\u043d\u0435\u0439\u0441\u0430\u0439\u0434\u0435\u0440\u04e3 \u043d\u0438\u0448\u0430\u0441\u0442\u0430, \u0445\u04ef\u0440\u043e\u043a\u0438 \u0448\u043e\u043c \u043c\u0435\u0445\u04ef\u0440\u0430\u043d\u0434.",
            "x": " ",
            "y": "_"
        },
        "query": [
            "Split {a} by {x}, join the result with {y}, and check if it is a valid identifier.",
            "Divide {a} using {x}, concatenate the parts with {y}, and verify if it forms a valid identifier.",
            "Break {a} at each {x}, merge the segments with {y}, and determine if the result is a valid identifier."
        ],
        "language": "tgk_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x:y].zfill(z).isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u0b2e\u0b23\u0b3f\u0b37 \u0b39\u0b1c\u0b3e\u0b30 \u0b39\u0b1c\u0b3e\u0b30 \u0b2c\u0b30\u0b4d\u0b37 \u0b27\u0b30\u0b3f \u0b06\u0b2c\u0b30\u0b4d\u0b26\u0b4d\u0b27\u0b28 \u0b2a\u0b3e\u0b07\u0b01 \u0b32\u0b47\u0b28\u0b4d\u0b38 \u0b24\u0b3f\u0b06\u0b30\u0b3f \u0b15\u0b30\u0b3f \u0b2c\u0b4d\u0b5f\u0b2c\u0b39\u0b3e\u0b30 \u0b15\u0b30\u0b3f \u0b06\u0b38\u0b41\u0b1b\u0b3f\u0964",
            "x": 5,
            "y": 15,
            "z": 20
        },
        "query": [
            "Take the substring from index {x} to {y} in {a}, pad it with zeros to make its length {z}, and check if the result is alphanumeric.",
            "Extract the substring from {a} starting at index {x} and ending at index {y}, zero-fill it to length {z}, and determine if it is alphanumeric.",
            "Get the substring of {a} from index {x} to {y}, pad it with zeros to reach a length of {z}, and verify if the padded string is alphanumeric."
        ],
        "language": "ory_Orya"
    },
    {
        "solution": "```python\nanswer = a.strip(x).capitalize().startswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "Selami tiga dasa warsa, sawireh katetapang secara resmi antuk negara komunis, Cina ngewerdhi ekonomi pasar.",
            "x": "S",
            "y": "Elami"
        },
        "query": [
            "Remove leading and trailing characters in {x} from {a}, capitalize the result, and check if it starts with {y}.",
            "Trim characters in {x} from both ends of {a}, capitalize the trimmed string, and verify if it begins with {y}.",
            "Strip characters in {x} from the start and end of {a}, capitalize the resulting string, and determine if it starts with {y}."
        ],
        "language": "ban_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().encode('ascii', errors='ignore').decode('ascii').isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u0915\u0948\u092b\u093c\u0947\u0928\u0947\u091f \u090f\u0932 \u0938\u094b\u0932 30 \u0905\u092e\u0947\u0930\u093f\u0915\u0928 \u0921\u0949\u0932\u0930 \u090f\u0915 \u0926\u093f\u0928 \u0915\u0947 \u0932\u093f\u090f \u092f\u093e \u0906\u0930\u0915\u094d\u0937\u0923 \u0938\u0947\u0935\u093e \u092a\u094d\u0930\u0926\u093e\u0928 \u0915\u0930\u0928\u0947 \u0915\u0947 \u0932\u093f\u090f 10 \u0905\u092e\u0947\u0930\u093f\u0915\u0928 \u0921\u0949\u0932\u0930 \u0932\u0947\u0924\u093e \u0939\u0948; \u0909\u0928\u0915\u0947 Corcovado \u092a\u0943\u0937\u094d\u0920 \u092a\u0930 \u092a\u0942\u0930\u093e \u0935\u093f\u0935\u0930\u0923 \u0926\u093f\u092f\u093e \u0939\u0941\u0906 \u0939\u0948\u0964"
        },
        "query": [
            "Is the stripped version of {a}, encoded and decoded in ASCII ignoring errors, composed only of printable characters?",
            "Does the stripped version of {a}, after being encoded and decoded in ASCII with errors ignored, consist solely of printable characters?",
            "After stripping {a} and encoding/decoding it in ASCII while ignoring errors, is the result made up entirely of printable characters?"
        ],
        "language": "hin_Deva"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).split(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0930\u093e\u0924 \u0915\u093e \u0909\u0928\u0915\u093e \u0926\u0942\u0938\u0930\u093e \u0917\u094b\u0932 \u0938\u0940\u091c\u093c\u0928 \u0915\u093e \u0909\u0928\u0915\u093e 60\u0935\u093e\u0901 \u0917\u094b\u0932 \u0925\u093e, \u091c\u093f\u0938\u0938\u0947 1995-96 \u0938\u0947 \u0932\u0947\u0915\u0930\u091c\u092c \u091c\u094b\u0930\u094b\u092e\u093f\u0930 \u091c\u093e\u0917\u0930 \u0914\u0930 \u092e\u093e\u0930\u093f\u092f\u094b \u0932\u0947\u092e\u093f\u090f\u0915\u094d\u0938 \u0928\u0947 \u0907\u0924\u0928\u0947 \u0917\u094b\u0932 \u0915\u093f\u090f \u0925\u0947 \u0909\u0938\u0915\u0947 \u092c\u093e\u0926 \u0935\u0939 \u090f\u0915 \u0938\u0940\u091c\u093c\u0928 \u092e\u0947\u0902 60 \u092f\u093e \u0907\u0938\u0938\u0947 \u0905\u0927\u093f\u0915 \u0917\u094b\u0932 \u0915\u0930\u0928\u0947 \u0935\u093e\u0932\u0947 \u092a\u0939\u0932\u0947 \u0916\u093f\u0932\u093e\u0921\u093c\u0940 \u092c\u0928 \u0917\u090f \u0939\u0948\u0902.",
            "x": "\u0939\u0948\u0902.",
            "y": " ",
            "z": 5
        },
        "query": [
            "Remove any trailing {x} characters from {a} and split the result by {y} with a maximum of {z} splits.",
            "Trim trailing {x} from {a} and then split by {y} up to {z} times.",
            "Strip trailing {x} from {a} and split the string by {y} with at most {z} splits."
        ],
        "language": "hin_Deva"
    },
    {
        "solution": "```python\nanswer = a.zfill(y).rfind(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u05d4\u05d5\u05d0 \u05e9\u05d4\u05d4 \u05d1\u05de\u05dc\u05d5\u05df \u05e9\u05dc \u05d4\u05e7\u05d1\u05d5\u05e6\u05d4 \u05dc\u05e4\u05e0\u05d9 \u05d4\u05de\u05e9\u05d7\u05e7 \u05e9\u05ea\u05d5\u05db\u05e0\u05df \u05dc\u05d9\u05d5\u05dd \u05e8\u05d0\u05e9\u05d5\u05df \u05e0\u05d2\u05d3 \u05d1\u05d5\u05dc\u05d5\u05e0\u05d9\u05d4.",
            "x": "\u05d4",
            "y": 60
        },
        "query": [
            "Find the last occurrence of {x} in {a} after padding it with zeros to length {y}.",
            "Locate the final position of {x} in {a} once it has been zero-padded to a length of {y}.",
            "Determine the last index of {x} in {a} after zero-padding it to a length of {y}."
        ],
        "language": "heb_Hebr"
    },
    {
        "solution": "```python\nanswer = a[x:y].replace(z, '').isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Si nun s\u00ec un diplm\u00e0ticu, travagghiari all\u2019\u00e8stiru di s\u00f2litu sign\u00ecfica ca \u00e0i a prinsintari la dichiarazzioni d\u00ee r\u00e8dditi nt\u00f4 pajisi unni ti trovi.",
            "x": 10,
            "y": 30,
            "z": " "
        },
        "query": [
            "Check if the substring of {a} from {x} to {y} with {z} removed contains only alphabetic characters.",
            "Determine if the substring of {a} from index {x} to {y} with {z} removed consists solely of alphabetic characters.",
            "Verify if the substring of {a} between {x} and {y} with {z} removed is made up entirely of letters."
        ],
        "language": "scn_Latn"
    },
    {
        "solution": "```python\nanswer = a.lower().split(x)[y].endswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "Kan hriat theih chinah chuan kan khawvel ang taksa nei Titan aia chet dan phung tha nei chu Earth chiah a ni a ti bawk",
            "x": " ",
            "y": 15,
            "z": "ni"
        },
        "query": [
            "Check if the {y}-th element of {a} split by {x} and converted to lowercase ends with {z}.",
            "Verify if the {y}-th segment of {a} after splitting by {x} and converting to lowercase ends with {z}.",
            "Determine if the {y}-th part of {a} when split by {x} and changed to lowercase ends with {z}."
        ],
        "language": "lus_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).title().encode('ascii', 'ignore')\nprint(answer)\n```",
        "variables": {
            "a": "Th\u00e0inig co-dh\u00f9nadh an NBA \u00e0s d\u00e8idh dearbhadh gun robh bh\u00ecoras COVID-19 air cluicheadair aig Utah Jazz.",
            "x": "bh\u00ecoras",
            "y": "virus"
        },
        "query": [
            "Replace all occurrences of {x} in {a} with {y}, convert the result to title case, and encode it in ASCII, ignoring errors.",
            "Substitute every instance of {x} in {a} with {y}, change the result to title case, and encode it in ASCII while ignoring errors.",
            "Swap all {x} in {a} with {y}, transform the result to title case, and encode it in ASCII, ignoring any errors."
        ],
        "language": "gla_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).upper().isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "S\u2019emendamentu propostu aiat giai coladu sas duas c\u00e0meras in su 2011.",
            "x": " "
        },
        "query": [
            "Determine if {a} without leading and trailing {x}, converted to uppercase, is a valid identifier.",
            "Check if the string {a} with {x} removed from both ends and converted to uppercase is a valid identifier.",
            "Is the string {a}, after stripping {x} from both ends and converting to uppercase, a valid identifier?"
        ],
        "language": "srd_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('ascii', errors='ignore').isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u0631\u06cc\u062f \u067c\u0627\u06cc\u062fred tide \u062f \u06a9\u0631\u06cc\u0646\u06cc\u0627 \u0628\u0631\u06cc\u0648\u0633 karenia brevis \u062f \u0644\u0648\u0693\u06cc \u067e\u0631 \u0681\u0627\u06cc \u062f \u0639\u0627\u062f\u064a \u062a\u0648\u062c\u0647 \u0644\u0647 \u0627\u0645\u0644\u0647 \u0645\u0646\u0681 \u062a\u0647 \u0631\u0627\u0681\u064a \u0686\u06d0 \u067e\u0647 \u0637\u0628\u06cc\u0639\u06cc \u0628\u06bc\u0647 \u06cc\u0648 \u0633\u0645\u0646\u062f\u0631\u06d0 \u062d\u06cc\u0648\u0627\u0646\u0627\u062a \u062f\u064a"
        },
        "query": [
            "Verify if {a} encoded in 'utf-8' and decoded in 'ascii' ignoring errors is alphanumeric.",
            "Check if {a} is alphanumeric after encoding in 'utf-8' and decoding in 'ascii' with errors ignored.",
            "Determine if {a} becomes alphanumeric when encoded in 'utf-8' and decoded in 'ascii' while ignoring errors."
        ],
        "language": "pbt_Arab"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).rstrip(y).isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u0417\u0430\u0440\u0430\u0434\u0438 \u0443\u0441\u043f\u0435\u0445\u0430 \u043d\u0430 \u0433\u0435\u0440\u043c\u0430\u043d\u0446\u0438\u0442\u0435 \u0441 \u043f\u043e\u0434\u0432\u043e\u0434\u043d\u0438\u0446\u0438\u0442\u0435, \u0441\u043b\u0435\u0434 \u0432\u043e\u0439\u043d\u0430\u0442\u0430 \u0438\u043c \u0441\u0435 \u043d\u044f\u043c\u0430 \u0434\u043e\u0432\u0435\u0440\u0438\u0435 \u0434\u0430 \u043f\u0440\u0438\u0442\u0435\u0436\u0430\u0432\u0430\u0442 \u043c\u043d\u043e\u0433\u043e \u043e\u0442 \u0442\u044f\u0445.",
            "x": "\u0417",
            "y": "."
        },
        "query": [
            "Determine if {a} without leading {x} and trailing {y} is printable.",
            "Check if the string {a} is printable after removing leading {x} and trailing {y}.",
            "Is the string {a} printable after stripping leading {x} and trailing {y}?"
        ],
        "language": "bul_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).center(z, w).isdecimal()\nprint(answer)\n```",
        "variables": {
            "a": "\u7bc0\u76ee\u5605\u6bcf\u4e00\u96c6\u5c08\u6ce8\u65bc\u4e00\u672c\u7279\u5b9a\u66f8\u672c\u5605\u4e3b\u984c\uff0c\u8ddf\u4f4f\u901a\u904e\u591a\u500b\u6545\u4e8b\u53bb\u63a2\u8a0e\u55f0\u500b\u4e3b\u984c\u3002",
            "x": "\u4e3b\u984c",
            "y": "123",
            "z": 50,
            "w": " "
        },
        "query": [
            "Verify if {a} becomes decimal after replacing {x} with {y} and centering within {z} characters using {w}.",
            "Check if {a} is a decimal after substituting {x} with {y} and centering it to {z} characters with {w}.",
            "Determine if {a} turns into a decimal after replacing {x} with {y} and centering it to {z} characters using {w}."
        ],
        "language": "yue_Hant"
    },
    {
        "solution": "```python\nanswer = a.lstrip().rjust(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "\u041f\u0435\u0448\u044b\u044f \u043f\u0430\u045e\u043d\u0430\u0432\u0430\u0440\u0442\u0430\u0441\u043d\u044b\u044f \u0442\u044d\u043b\u0435\u0441\u043a\u043e\u043f\u044b, \u0442\u044b\u043c \u043d\u0435 \u043c\u0435\u043d\u0448, \u0437'\u044f\u0432\u0456\u043b\u0456\u0441\u044f \u045e \u0415\u045e\u0440\u043e\u043f\u0435 \u0442\u043e\u043b\u044c\u043a\u0456 \u043f\u0430\u0434 \u0437\u0430\u0441\u043b\u043e\u043d\u0443 16-\u0433\u0430 \u0441\u0442\u0430\u0433\u043e\u0434\u0434\u0437\u044f.",
            "x": 100,
            "y": " "
        },
        "query": [
            "Remove leading whitespace from {a} and right-justify it in a string of length {x}, padded with {y}.",
            "Trim leading spaces from {a} and align it to the right in a string of length {x}, using {y} as padding.",
            "Strip leading whitespace from {a} and pad it to the right in a string of length {x} with {y}."
        ],
        "language": "bel_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x:y].replace(z, '').isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u0634\u062a\u062d\u062a\u0627\u062c \u0625\u0644\u0649 \u0645\u0644\u0627\u062d\u0638\u0629 \u0648\u0636\u0639\u064a\u0629 \u0627\u0644\u0636\u062d\u064a\u0629 \u0648\u0623\u0646\u062a \u062a\u0642\u0631\u0628 \u0644\u0639\u0646\u062f\u0647\u060c \u0648\u0623\u064a \u0645\u0624\u0634\u0631\u0627\u062a \u062e\u0637\u0631 \u062a\u0644\u0642\u0627\u0626\u064a\u0629.",
            "x": 0,
            "y": 10,
            "z": " "
        },
        "query": [
            "Check if the substring of {a} from {x} to {y} with {z} removed is alphanumeric.",
            "Determine if the substring of {a} between {x} and {y} with {z} removed is alphanumeric.",
            "Is the substring of {a} from {x} to {y} with {z} removed alphanumeric?"
        ],
        "language": "acq_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:y].encode('utf-8').decode('ascii', errors='ignore')\nprint(answer)\n```",
        "variables": {
            "a": "\u0939\u093e\u0932\u093e\u0901\u0915\u093f, \u090a\u092a\u0930 \u0938\u0942\u091a\u0940\u092c\u0926\u094d\u0927 \u0932\u0917\u092d\u0917 \u0938\u092d\u0940 \u0915\u0948\u0938\u093f\u0928\u094b \u092a\u0947\u092f \u0926\u0947\u0924\u0947 \u0939\u0948\u0902, \u0914\u0930 \u0909\u0928\u092e\u0947\u0902 \u0938\u0947 \u0915\u0908 \u0928\u093e\u092e-\u092c\u094d\u0930\u093e\u0902\u0921 \u092e\u0928\u094b\u0930\u0902\u091c\u0928 (\u092e\u0941\u0916\u094d\u092f \u0930\u0942\u092a \u0938\u0947 \u092c\u0921\u093c\u0947 \u0905\u0932\u094d\u092c\u0941\u0915\u0930\u094d\u0915 \u0914\u0930 \u0938\u093e\u0902\u0924\u093e \u092b\u093c\u0947 \u0915\u0947 \u0906\u0938\u092a\u093e\u0938 \u0915\u0947 \u092c\u0921\u093c\u0947 \u0935\u093e\u0932\u0947) \u0932\u0947\u0915\u0930 \u0906\u0924\u0947 \u0939\u0948\u0902\u0964",
            "x": 0,
            "y": 10
        },
        "query": [
            "Encode the substring of {a} from {x} to {y} in UTF-8 and decode it in ASCII, ignoring errors.",
            "Take the substring of {a} from index {x} to {y}, encode it in UTF-8, and decode it in ASCII while ignoring errors.",
            "Get the substring of {a} from {x} to {y}, encode it using UTF-8, and decode it using ASCII, ignoring any errors."
        ],
        "language": "hin_Deva"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x)[y:z].isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u0935\u0949\u0936\u093f\u0902\u0917\u094d\u091f\u0928\t\u0915\u0945\u092a\u093f\u091f\u0932\u094d\u0938\u093e\u091a\u094b\t\u0905\u200d\u0945\u0932\u0947\u0915\u094d\u0938\t\u0913\u0935\u0947\u091a\u0915\u093f\u0928\t\u0939\u094b\t\u0906\u092f\u091a\u094b\t\u092a\u094d\u0932\u0947\u092f\u0930\t\u0911\u092b\t\u0926\t\u0921\u0947.",
            "x": 4,
            "y": 10,
            "z": 20
        },
        "query": [
            "Check if the substring from {y} to {z} of {a} with tabs expanded to {x} spaces contains only digits.",
            "Verify if the section from {y} to {z} of {a} with tabs replaced by {x} spaces is numeric.",
            "Determine if the part from {y} to {z} of {a} with tabs expanded to {x} spaces consists solely of digits."
        ],
        "language": "gom_Deva"
    },
    {
        "solution": "```python\nanswer = a[x::y].upper().endswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "Una vegada que t'hagis familiaritzat amb el format i l'edici\u00f3 del lloc web, aleshores podr\u00e0s crear el teu propi lloc.",
            "x": 10,
            "y": 3,
            "z": "LOC."
        },
        "query": [
            "Check if the substring of {a} starting from position {x} with steps of {y} in uppercase ends with {z}.",
            "Verify if the uppercase substring of {a} starting at index {x} with a step of {y} ends with {z}.",
            "Determine if the uppercase version of the substring of {a} starting from position {x} and stepping by {y} ends with {z}."
        ],
        "language": "cat_Latn"
    },
    {
        "solution": "```python\nanswer = a.rsplit(x, y)[0].isascii()\nprint(answer)\n```",
        "variables": {
            "a": "E kompania ta spera di por diversifik\u00e1 su fuentenan di ganashi i atkir\u00ed popularidat den \u00e1reanan kaminda Skype tin un posishon fuerte, manera China, Ost Oropa, i Brasil.",
            "x": " ",
            "y": 3
        },
        "query": [
            "Split {a} from the right by {x} up to {y} times and check if the first segment is ASCII.",
            "Perform a right split on {a} using {x} up to {y} times and determine if the initial segment is ASCII.",
            "Right split {a} by {x} up to {y} times and verify if the first part is ASCII."
        ],
        "language": "pap_Latn"
    },
    {
        "solution": "```python\nanswer = a[::x].isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u041c\u0430\u043b\u043a\u043e \u0441\u043b\u0435\u0434 11:00 \u0447\u0430\u0441\u0430 \u043f\u0440\u043e\u0442\u0435\u0441\u0442\u0438\u0440\u0430\u0449\u0438\u0442\u0435 \u0431\u043b\u043e\u043a\u0438\u0440\u0430\u0445\u0430 \u0434\u0432\u0438\u0436\u0435\u043d\u0438\u0435\u0442\u043e \u043f\u043e \u0441\u0435\u0432\u0435\u0440\u043d\u0430\u0442\u0430 \u043b\u0435\u043d\u0442\u0430 \u0432 \u0423\u0430\u0439\u0442\u0445\u043e\u043b.",
            "x": 3
        },
        "query": [
            "Check if every {x}-th character of {a} forms a valid identifier.",
            "Determine if the substring formed by every {x}-th character of {a} is a valid identifier.",
            "Verify if the sequence of every {x}-th character in {a} is a valid identifier."
        ],
        "language": "bul_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x)[:y].isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u1015\u1031\u1083\u1038\u101e\u1030\u101a\u102d\u107c\u103a\u1038\u1081\u1030\u1089\u101d\u1083\u1088 \u1076\u1082\u103a\u1088\u1078\u1062\u1019\u103a\u1038\u1010\u1030\u107a\u103a\u1038\u101c\u1062\u1086\u1038\u1019\u1082\u103a\u1087\u1078\u102d\u102f\u1004\u103a \u1022\u101d\u103a\u1010\u102d\u102f\u101d\u103a\u1089\u1010\u1062\u1004\u103a\u1038\u1010\u1083\u1087\u1022\u102d\u1010\u103a\u1087\u1015\u1035\u107c\u103a\u107c\u1019\u103a\u1089 \u1022\u1019\u103a\u1087\u107c\u107c\u103a \u1022\u102d\u1010\u103a\u1087\u1015\u1035\u107c\u103a\u1022\u1030\u107c\u103a\u101e\u1031 \u1081\u1035\u1010\u103a\u1038\u107c\u1019\u103a\u1089\u1019\u1062\u1075\u103a\u1087\u1019\u1086\u1089\u1010\u1030\u107a\u103a\u1038\u101c\u1084\u1088\u104b",
            "x": "\u104b",
            "y": 10
        },
        "query": [
            "Determine if the first {y} characters of {a} after trimming trailing {x} are numeric.",
            "Check if the first {y} characters of {a} are numeric after removing trailing {x}.",
            "Are the first {y} characters of {a} numeric after trimming the trailing {x}?"
        ],
        "language": "shn_Mymr"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode(x).isspace()\nprint(answer)\n```",
        "variables": {
            "a": "\u0e42\u0e23\u0e07\u0e41\u0e23\u0e21\u0e2b\u0e23\u0e37\u0e2d\u0e40\u0e08\u0e49\u0e32\u0e1a\u0e49\u0e32\u0e19\u0e02\u0e2d\u0e07\u0e04\u0e38\u0e13 (\u0e01\u0e23\u0e13\u0e35\u0e17\u0e35\u0e48\u0e04\u0e38\u0e13\u0e1e\u0e31\u0e01\u0e43\u0e19\u0e40\u0e01\u0e2a\u0e15\u0e4c\u0e40\u0e2e\u0e32\u0e2a\u0e4c\u0e2b\u0e23\u0e37\u0e2d\u0e1a\u0e49\u0e32\u0e19\u0e2a\u0e48\u0e27\u0e19\u0e15\u0e31\u0e27) \u0e21\u0e31\u0e01\u0e08\u0e30\u0e21\u0e35 wifi \u0e2b\u0e23\u0e37\u0e2d\u0e04\u0e2d\u0e21\u0e1e\u0e34\u0e27\u0e40\u0e15\u0e2d\u0e23\u0e4c\u0e17\u0e35\u0e48\u0e15\u0e48\u0e2d\u0e01\u0e31\u0e1a\u0e2d\u0e34\u0e19\u0e40\u0e17\u0e2d\u0e23\u0e4c\u0e40\u0e19\u0e47\u0e15 \u0e41\u0e25\u0e30\u0e17\u0e38\u0e01\u0e0a\u0e38\u0e21\u0e0a\u0e19\u0e08\u0e30\u0e21\u0e35\u0e23\u0e49\u0e32\u0e19\u0e2d\u0e34\u0e19\u0e40\u0e17\u0e2d\u0e23\u0e4c\u0e40\u0e19\u0e47\u0e15\u0e2b\u0e23\u0e37\u0e2d\u0e1a\u0e32\u0e07\u0e17\u0e35\u0e48\u0e01\u0e47\u0e21\u0e35 wifi \u0e2a\u0e32\u0e18\u0e32\u0e23\u0e13\u0e30",
            "x": "tha_Thai"
        },
        "query": [
            "Assess if the string {a}, after being encoded and decoded with {x}, consists only of whitespace characters.",
            "Determine if the string {a}, once encoded and decoded using {x}, is made up entirely of whitespace characters.",
            "Check if the string {a}, after encoding and decoding with {x}, contains only whitespace characters."
        ],
        "language": "tha_Thai"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x)[:y].islower()\nprint(answer)\n```",
        "variables": {
            "a": "Er\u00e9\u0301\t\u00ecd\u00e1ray\u00e0\t\u1eb9l\u1eb9\u0301g\u1eb9\u0301d\u1eb9\u0301,\tj\u00edja\t\u1eb9\u0300s\u1eb9\u0301\t\u00e0ti\tp\u1eb9\u0300l\u00fa\t\u00ecp\u00e1\t\u00e0ti\tsisare\tohun\tt\u00e1y\u00e0\tl\u1eb9\u0301s\u1eb9\u0300\tb\u00e0t\u00e0\tgb\u00ecy\u00e0nj\u00fa\tl\u00e1ti\tj\u1eb9\u0301\t\u00f2kan\tl\u00e1ra\t\u0301\u00e0w\u1ecdn\u0300\t\u00e8t\u00f2\tOlympicg\u1eb9\u0301g\u1eb9\u0301\tbi\tb\u1ecdlu\t\u00e0f\u1ecdw\u1ecd\u0301gb\u00e1\tati-on\u00ec\tf\u00f9k\u1eb9\u0300f\u00f9k\u1eb9\u0300,\t\u00e0w\u1ecdn\u0300\t\u00e8y\u00ed\tt\u00ed\ta\ty\u1ecdk\u00far\u00f2\tn\u00edpa\t\u00ecd\u00ecb\u00f2\tk\u00far\u00f2\tn\u00edn\u00fa\t\u00e0w\u1ecdn\ter\u00e9\tOlympici\tn\u00ed\t\u1ecdd\u00fan\t200.",
            "x": 4,
            "y": 50
        },
        "query": [
            "Verify if the first {y} characters of {a} after expanding tabs to {x} spaces are in lowercase.",
            "Check if the initial {y} characters of {a}, with tabs expanded to {x} spaces, are all lowercase.",
            "Determine if the first {y} characters of {a}, after converting tabs to {x} spaces, are in lowercase."
        ],
        "language": "yor_Latn"
    },
    {
        "solution": "```python\nanswer = a.join(x)[::-1].isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\uabd1\uabc7\uabe3\uabde\uabc4",
            "x": [
                "\uabc7\uabdd\uabca\uabe4\uabd4\uabd5",
                "\uabc5\uabe3\uabe1\uabc2\uabe9",
                "\uabc5\uabe8\uabe1\uabc1\uabe4\uabe0\uabc1\uabe4\uabe1\uabd2",
                "\uabcc\uabe6\uabe1\uabc5\uabd5\uabd7",
                "\uabc7\uabe3\uabd4\uabc5\uabe5\uabd7\uabe3\uabd7\uabe4",
                "\uabd1\uabc4\uabe4\uabdb\uabc4",
                "\uabc3\uabd0\uabdd",
                "\uabc8\uabd4",
                "\uabc8\uabdb\uabc7",
                "\uabca\uabe3\uabdb\uabcf",
                "\uabd1\uabd7\uabe8\uabd5\uabe8",
                "\uabc3\uabc8\uabe3\uabcf\uabc5",
                "\uabc2\uabe5\uabdb\uabc4",
                "\uabc2\uabdd\uabd5\uabe4\uabd7",
                "\uabc2\uabe9\uabd4\uabdd\uabd5",
                "\uabc4\uabe8\uabdd\uabc5\uabc3\uabdb",
                "\uabd1\uabc3\uabe0\uabc7",
                "\uabc8\uabe5\uabdb\uabc7\uabc5",
                "\uabc3\uabe5\uabe1",
                "\uabc7\uabe5\uabdb\uabcd\uabdc\uabc2\uabe4"
            ]
        },
        "query": [
            "Check if the reversed string formed by joining elements of {x} with {a} is alphanumeric.",
            "Determine if the string obtained by joining {x} with {a}, then reversing it, is alphanumeric.",
            "Verify if the reversed result of joining {x} with {a} contains only alphanumeric characters."
        ],
        "language": "mni_Mtei"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y)[::z].isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Qualche setimana fa ddopo che \u0142e informasion publicae dal giorna\u0142ista Makis Triantafylopoulos na so famosa trasmision te\u0142evisiva \u201cZoungla\u201d su Alpha TV, el menbro del parlamento e avocato Petros Mantouvalos ga dato \u0142e dimision parch\u00e9 menbri del so uficio xe st\u00e0 ciap\u00e0i dr\u00e9nto in fatti de corusion.",
            "x": "\u0142",
            "y": "l",
            "z": 2
        },
        "language": "vec_Latn",
        "query": [
            "Verify if the string {a}, after replacing {x} with {y} and taking every {z}-th character, contains only ASCII characters.",
            "Check if the modified string from {a} by replacing {x} with {y} and selecting every {z}-th character is composed solely of ASCII characters.",
            "Determine if the string {a}, once {x} is replaced with {y} and every {z}-th character is taken, consists only of ASCII characters."
        ]
    },
    {
        "solution": "```python\nanswer = a.rsplit(x, y)[0].isupper()\nprint(answer)\n```",
        "variables": {
            "a": "Mungkan Lagat Shingjawng hpung a ninghkring wa, sa lagat uhpung ni gaw dan mali hta na gat shingjawng lawm masha law law hte zinghkri nga ai.",
            "x": " ",
            "y": 3
        },
        "query": [
            "Check if the first element of the list obtained by splitting {a} by {x} up to {y} times from the right is in uppercase.",
            "Determine if the first part of the list, after splitting {a} by {x} up to {y} times from the right, is in uppercase.",
            "Verify if the first segment of the list, created by splitting {a} by {x} up to {y} times from the right, is in uppercase."
        ],
        "language": "kac_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(y).upper().startswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "K\u025b j\u025bn c\u00e4\u00e4t  \u025bm\u025b,k\u025b car j\u0254k k\u00e4 ci\u025b\u014b tin te\u0331k\u025b ram in l\u00e4t ta\u0331a\u0331ji\u025b\u025br k\u025bn\u025b tin g\u0254w tin c\u025b je\u0331k lu\u00e4k\u025b naath k\u025b \u0263\u00f6\u00f6 bi\u0331k\u025b  l\u0254ar k\u025b g\u00ebr ri\u025bn k\u025bn\u025b w\u00e4 di\u025bn k\u025b lu\u00e4k kuthni\u0331.",
            "x": "K",
            "y": " "
        },
        "query": [
            "Check if {a} without leading and trailing {y} starts with {x} after converting to uppercase.",
            "Determine if {a} with {y} removed from both ends and converted to uppercase begins with {x}.",
            "Verify if {a}, stripped of {y} from both sides and turned to uppercase, starts with {x}."
        ],
        "language": "nus_Latn"
    },
    {
        "solution": "```python\nanswer = a.title().split(x)[y].isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Ndinotenda kuti, vakawanda vanozoziva kuti chisarudzo chakanakisisa kwavari chenguva refu ndechemushandira pamwe.",
            "x": " ",
            "y": 3
        },
        "query": [
            "Check if the {y}-th segment of {a} split by {x} is alphabetic after converting to title case.",
            "Determine if the {y}-th part of {a} split by {x} is alphabetic after converting to title case.",
            "Verify if the {y}-th section of {a} split by {x} is alphabetic after converting to title case."
        ],
        "language": "sna_Latn"
    },
    {
        "solution": "```python\nanswer = a.isnumeric() and x.isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u0967\u0968\u0969\u096a\u096b",
            "x": "67890"
        },
        "query": [
            "Check if {a} is numeric and {x} consists only of digits.",
            "Verify whether {a} is numeric and {x} contains only digit characters.",
            "Determine if {a} is a numeric value and {x} is composed solely of digits."
        ],
        "language": "npi_Deva"
    },
    {
        "solution": "```python\nanswer = a[:y:z].isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u59d4\u5185\u745e\u62c9\u662f\u77f3\u6cb9\u51c0\u51fa\u53e3\u56fd\uff0c\u5c3d\u7ba1\u53ea\u6709\u767e\u5206\u4e4b\u4e00\u7684\u4eba\u5728\u77f3\u6cb9\u884c\u4e1a\u5de5\u4f5c\uff0c\u4f46\u77f3\u6cb9\u884c\u4e1a\u4ecd\u7136\u662f\u8be5\u56fd\u7684\u91cd\u8981\u4ea7\u4e1a\u3002",
            "y": 10,
            "z": 2
        },
        "query": [
            "Is the substring of {a} from the start to the {y}-th character, taking every {z}-th character, printable?",
            "Can the substring of {a} up to the {y}-th character, with every {z}-th character taken, be printed?",
            "Is the segment of {a} from the beginning to the {y}-th character, selecting every {z}-th character, printable?"
        ],
        "language": "cmn_Hans"
    },
    {
        "solution": "```python\nanswer = a.join(x).encode(encoding='ascii', errors='ignore')\nprint(answer)\n```",
        "variables": {
            "a": " ",
            "x": [
                "\u09b0\u09c7\u09ae\u09a8\u09cd\u09a6",
                "\u09a6\u09c7\u09ae\u09be\u09a6\u09bf\u09df\u09a8",
                "\u0995\u09cc\u09ac\u09be",
                "\u09ae\u09c7\u09a6\u09bf\u0995\u09c7\u09b2",
                "\u09a6\u09be\u0995\u09cd\u09a4\u09b0",
                "\u0985\u09ae\u09b8\u09c1\u0982",
                "\u09b0\u09bf\u09b8\u09b0\u09cd\u099a",
                "\u09b8\u09be\u0987\u09a8\u09cd\u09a4\u09bf\u09b8\u09cd\u09a4",
                "\u0985\u09b8\u09bf\u09a8\u09be",
                "\u0987\u0982",
                "1970",
                "\u09a6\u09be",
                "\u09ae\u09c7\u0997\u09cd\u09a8\u09c7\u09a4\u09bf\u0995",
                "\u09b0\u09bf\u099c\u09cb\u09a8\u09c7\u09a8\u09cd\u09b8",
                "\u0987\u09ae\u09c7\u099c\u09bf\u0982\u09ac\u09c1",
                "\u09ae\u09c7\u09a6\u09bf\u0995\u09c7\u09b2",
                "\u09a6\u09be\u0987\u0997\u09cd\u09a8\u09cb\u09b8\u09bf\u09b8\u0995\u09c0\u09a6\u09ae\u0995\u09cd\u09a4\u09be",
                "\u09b6\u09bf\u099c\u09bf\u09a8\u09cd\u09a8\u09ac\u0997\u09c0",
                "\u09ae\u09b0\u09ae",
                "\u09aa\u09c1\u09a5\u09cb\u0995\u0996\u09bf\u0964"
            ]
        },
        "query": [
            "Join the elements of {x} with {a} and encode the result in ASCII, ignoring errors.",
            "Combine the items in {x} using {a} as a separator and encode the string in ASCII, ignoring any errors.",
            "Merge the elements of {x} with {a} and convert the result to ASCII encoding, ignoring errors."
        ],
        "language": "mni_Beng"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).encode(encoding='utf-8', errors='replace')\nprint(answer)\n```",
        "variables": {
            "a": "\u0648\u0644\u0639\u0644\u0651 \u0627\u0644\u0646\u0648\u0639 \u0627\u0644\u0623\u0643\u062b\u0631 \u0634\u064a\u0648\u0639\u0627\u064b \u0645\u0646 \u0627\u0644\u0633\u064a\u0627\u062d\u0629 \u0647\u0648 \u0645\u0627 \u064a\u0642\u0631\u0646\u0647 \u0627\u0644\u0623\u063a\u0644\u0628\u064a\u0629 \u0645\u0646 \u0627\u0644\u0646\u0627\u0633 \u0628\u0627\u0644\u0633\u0641\u0631: \u0623\u064a \u0627\u0644\u0633\u064a\u0627\u062d\u0629 \u0627\u0644\u062a\u0631\u0641\u064a\u0647\u064a\u0629.",
            "x": "\u0648\u0644\u0639\u0644\u0651"
        },
        "query": [
            "Remove leading characters in {x} from {a} and encode the result in UTF-8, replacing unencodable characters with a question mark.",
            "Strip leading characters specified in {x} from {a} and encode the string in UTF-8, substituting unencodable characters with a question mark.",
            "Trim the leading characters found in {x} from {a} and encode the resulting string in UTF-8, using a question mark for characters that cannot be encoded."
        ],
        "language": "ars_Arab"
    },
    {
        "solution": "```python\nanswer = a[::-1].istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Stardust establos novan tuttempan rekordon kiel la plej rapida kosmo\u015dipo revenanta sur la Teron, superante la anta\u016dan rekordon establitan en majo de la jaro 1969 dum la reveno de la komanda modulo de Apollo X."
        },
        "query": [
            "Check if the reverse of {a} is in title case.",
            "Verify if the reversed string of {a} is in title case.",
            "Determine if the reverse of {a} is a title-cased string."
        ],
        "language": "epo_Latn"
    },
    {
        "solution": "```python\nanswer = a.lower().replace(x, y).title()\nprint(answer)\n```",
        "variables": {
            "a": "Bh\u00ed cuma seomra\u00ed orthu. Ba \u00e9 an ch\u00e9ad duine \u00e9 a d'fh\u00e9ach ar chealla marbha.",
            "x": "\u00e9",
            "y": "e"
        },
        "query": [
            "Convert {a} to lowercase, replace {x} with {y}, and then capitalize the first letter of each word.",
            "Transform {a} to all lowercase, substitute {x} with {y}, and then capitalize the initial letter of each word.",
            "Change {a} to lowercase, swap {x} with {y}, and then capitalize the first letter of every word."
        ],
        "language": "gle_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode('utf-8').decode('ascii', errors='ignore').count(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u05d8\u05e8\u05d0\u05d5\u05d5\u05e2\u05dc \u05d0\u05d2\u05e2\u05e0\u05d8\u05d5\u05e8\u05df \u05d6\u05e2\u05e0\u05e2\u05df \u05e9\u05d5\u05d9\u05df \u05d0\u05d9\u05df \u05e7\u05e8\u05d0\u05e4\u05d8 \u05d6\u05d9\u05d9\u05d8 \u05d3\u05d9 19'\u05d8\u05e2 \u05d9\u05d0\u05e8-\u05d4\u05d5\u05e0\u05d3\u05e2\u05e8\u05d8. \u05d0 \u05d8\u05e8\u05d0\u05d5\u05d5\u05e2\u05dc \u05d0\u05d2\u05e2\u05e0\u05d8 \u05d0\u05d9\u05d6 \u05d2\u05e2\u05d5\u05d5\u05e2\u05dc\u05d9\u05da \u05d0 \u05d2\u05d5\u05d8\u05e2 \u05d0\u05d5\u05d9\u05e1\u05d5\u05d5\u05d0\u05dc \u05e4\u05d0\u05e8 \u05d0 \u05e8\u05d9\u05d9\u05d6\u05e2 \u05d5\u05d5\u05d0\u05e1 \u05d2\u05d9\u05d9\u05d8 \u05d0\u05d5\u05d9\u05e1\u05e2\u05e8 \u05d3\u05d9 \u05e8\u05d9\u05d9\u05d6\u05e0\u05d3\u05e2'\u05e1 \u05e4\u05e8\u05d9\u05e2\u05d3\u05d9\u05d2\u05e2 \u05e2\u05e8\u05e4\u05d0\u05e8\u05d5\u05e0\u05d2 \u05e4\u05d5\u05df \u05e0\u05d0\u05d8\u05d5\u05e8, \u05e7\u05d5\u05dc\u05d8\u05d5\u05e8, \u05e9\u05e4\u05e8\u05d0\u05da, \u05d0\u05d3\u05e2\u05e8 \u05e0\u05d9\u05d3\u05e8\u05d9\u05d2-\u05d0\u05d9\u05d9\u05e0\u05e7\u05d5\u05de\u05e3 \u05dc\u05e2\u05e0\u05d3\u05e2\u05e8.",
            "x": "a"
        },
        "query": [
            "Count the occurrences of {x} in {a} after encoding to 'utf-8' and decoding to 'ascii' while ignoring errors.",
            "How many times does {x} appear in {a} after converting to 'utf-8' and then to 'ascii' with errors ignored?",
            "Determine the number of times {x} is found in {a} after encoding to 'utf-8' and decoding to 'ascii' with error handling set to ignore."
        ],
        "language": "ydd_Hebr"
    },
    {
        "solution": "```python\nanswer = a.strip(x).upper().center(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "Nansha bimana mungatshi mua bidimu tshinunu bia tshinyangu, bidi bipepele bua kuteka mu meji mitoyi ni mipuya ya nvita mipita kala, bafuanyika kunvua ne mitoyi ya bikonu pa bibumba ni kunvua mupuya wa powa ifumina mu kazubu ka lupepela ka kundekelu wa etage.",
            "x": "aeiou",
            "y": 150,
            "z": "*"
        },
        "query": [
            "Strip characters in {x} from both ends of {a}, convert the result to uppercase, and center it with {z} to make {y} characters.",
            "Remove characters in {x} from the start and end of {a}, change the result to uppercase, and center it with {z} to reach a length of {y} characters.",
            "Trim characters in {x} from both sides of {a}, transform the result to uppercase, and pad it with {z} to center it to a total of {y} characters."
        ],
        "language": "lua_Latn"
    },
    {
        "solution": "```python\nanswer = a[:x].rjust(y, z).isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "San Francisco yi tumbuluxe miako yo tala ya vupfhumba, laha ku katsekaka tihotela, tindhawu to dyela ni tindhawu to khoma tinhlengeletano eka tona ta xiyimo xale henhla.",
            "x": 10,
            "y": 15,
            "z": " "
        },
        "query": [
            "Check if the right-aligned first {x} characters of {a} padded with {z} are all alphabetic.",
            "Determine if the first {x} characters of {a}, right-aligned and padded with {z}, consist solely of alphabetic characters.",
            "Verify if the initial {x} characters of {a}, after being right-aligned and padded with {z}, are entirely alphabetic."
        ],
        "language": "tso_Latn"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).split(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u30ed\u30d0\u30fc\u30c4\u6c0f\u306f\u3001\u4e2d\u7d76\u306e\u502b\u7406\u3092\u8003\u3048\u308b\u3046\u3048\u3067\u91cd\u8981\u306a\u300c\u547d\u306e\u59cb\u307e\u308a\u306f\u3044\u3064\u306e\u6642\u70b9\u304b\u300d\u3068\u3044\u3046\u7591\u554f\u306b\u3064\u3044\u3066\u3001\u300c\u53ef\u80fd\u6027\u306e\u9ad8\u3044\u30b1\u30fc\u30b9\u306e\u5177\u4f53\u7684\u306a\u5185\u5bb9\u306b\u3064\u3044\u3066\u30b3\u30e1\u30f3\u30c8\u3059\u308b\u306e\u306f\u502b\u7406\u7684\u3067\u306f\u306a\u3044\u300d\u3068\u65ad\u56fa\u3068\u3057\u3066\u62d2\u5426\u3057\u307e\u3057\u305f\u3002",
            "x": 100,
            "y": " ",
            "z": "\u3001"
        },
        "query": [
            "Center {a} in a field of {x} characters with {y}, then split it by {z}.",
            "Align {a} in the middle of a {x}-character wide field using {y}, then divide it by {z}.",
            "Place {a} in the center of a {x}-character wide space filled with {y}, then separate it by {z}."
        ],
        "language": "jpn_Jpan"
    },
    {
        "solution": "```python\nanswer = a.encode('ascii', errors='ignore').decode('ascii').isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u041c\u043e\u043b\u043e \u043f\u0440\u0438\u043c\u0430\u0442-\u0432\u043b\u0430\u043a \u0434\u0435\u043d\u0435 \u0442\u0430\u04a5\u0430\u0441\u0442\u0430\u0440\u044b\u043c\u0430\u0448\u0442\u0435 \u0433\u043e\u043c\u0438\u043d\u0438\u0434-\u0432\u043b\u0430\u043a \u043a\u043e\u0448\u0442\u0430\u0448, \u044d\u04a5\u0435\u0440\u0442\u0430\u0448 \u0430\u043b\u0435 \u0443\u043a\u0448 \u0433\u044b\u0447 \u0443\u043a\u0448\u044b\u0448 \u0442\u04e7\u0440\u0448\u0442\u044b\u043b\u0430\u0448 \u0448\u043a\u0435 \u043a\u0438\u0434\u044b\u0448\u0442\u044b\u043c \u0442\u0435\u0442\u043b\u0430 \u043e\u0433\u044b\u0442 \u043a\u0443\u0447\u044b\u043b\u0442."
        },
        "query": [
            "Encode {a} to ASCII ignoring errors, decode it back, and check if it contains only numeric characters.",
            "Convert {a} to ASCII while ignoring errors, then decode it and verify if it is numeric.",
            "Transform {a} to ASCII ignoring any errors, decode it, and determine if it consists solely of numeric characters."
        ],
        "language": "mhr_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.title().rsplit(x,y)\nprint(answer)\n```",
        "variables": {
            "a": "Konsept, t\u00fcm Avrupa uluslar\u0131n\u0131n tek bir ulusun g\u00fc\u00e7lenmesini engellemek zorunda kalmas\u0131yd\u0131 ve bu nedenle ulusal h\u00fck\u00fcmetler genellikle dengeyi korumak amac\u0131yla ittifaklar\u0131n\u0131 s\u0131k\u00e7a de\u011fi\u015ftiriyorlard\u0131.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Break the title-cased version of {a} into segments at each {x}, with at most {y} splits from the end.",
            "Split the title-cased string {a} at each {x}, performing at most {y} splits from the right.",
            "Divide the title-cased form of {a} into parts at each {x}, with a maximum of {y} splits from the end."
        ],
        "language": "tur_Latn"
    },
    {
        "solution": "```python\nanswer = a.join(x).upper().count(y)\nprint(answer)\n```",
        "variables": {
            "a": " ",
            "x": [
                "Nisperaw",
                "li",
                "\u0127afna",
                "nies",
                "jindunaw",
                "li",
                "l-a\u0127jar",
                "g\u0127a\u017cla",
                "fit-tul",
                "tag\u0127hom",
                "hija",
                "li",
                "ja\u0127dmu",
                "flimkien",
                "mal-o\u0127rajn"
            ],
            "y": "LI"
        },
        "query": [
            "Count the number of times {y} appears in the uppercase version of the string formed by joining elements of {x} with {a}.",
            "Determine how many times {y} occurs in the uppercase string created by joining elements of {x} using {a}.",
            "Find the frequency of {y} in the uppercase string that results from joining elements of {x} with {a}."
        ],
        "language": "mlt_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].lower().split(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "Wong iku dinuga nyetir kendharaan rodha-telu disenjatani kanthi bahan ledhak menyang wong akeh.",
            "x": 10,
            "y": 50,
            "z": " ",
            "w": 5
        },
        "query": [
            "Convert the substring of {a} from index {x} to {y} to lowercase and split it at {z} into at most {w} parts.",
            "Take the substring of {a} from index {x} to {y}, convert it to lowercase, and split it at {z} into a maximum of {w} parts.",
            "Extract the substring of {a} from index {x} to {y}, change it to lowercase, and divide it at {z} into no more than {w} parts."
        ],
        "language": "jav_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].casefold().islower()\nprint(answer)\n```",
        "variables": {
            "a": "Nga-1977, Dokotela Damadian wacedzela kwakhiwa kweMRI scanner yekucala \"yemtimba-wonkhe\" leyabitwa ngekutsi \"Ayitsaniswa\".",
            "x": 10,
            "y": 50
        },
        "query": [
            "Check if the casefolded substring of {a} from index {x} to {y} is entirely in lowercase.",
            "Verify if the substring of {a} from index {x} to {y}, when casefolded, is completely lowercase.",
            "Determine if the casefolded version of the substring from {x} to {y} in {a} is all in lowercase."
        ],
        "language": "ssw_Latn"
    },
    {
        "solution": "```python\nanswer = a[y:].rjust(z, x)\nprint(answer)\n```",
        "variables": {
            "a": "\u06cc\u06c1\u06c1 \u0645\u0633\u062a\u0646\u062f \u06a9\u0645\u06cc\u0648\u0646\u0679\u06cc \u0686\u06be \u0648\u06cc\u0646\u06a9\u0648\u0648\u0631 \u067e\u06cc\u0679\u06be \u062f\u0648\u0631 \u06c1\u0648\u0648 \u0633\u0627\u0624\u0646\u0688\u0633 \u0645\u0646\u0632 \u0648\u0627\u0642\u0639 \u060c \u062a\u06c1 \u0686\u06be \u0634\u06cc\u0688\u0648\u0644 \u0648\u0627\u0679\u0631 \u0679\u06cc\u06a9\u0633\u06cc\u0648\u06ba \u06a9\u06c1 \u0630\u0631\u06cc\u0639 \u0622\u0633\u0627\u0646\u06cc \u0633\u0654\u0646 \u0648\u06cc\u0646\u06a9\u0648\u0648\u0631 \u06a9\u0633 \u0634\u06c1\u0631 \u06af\u0631\u06cc\u0646 \u0648\u06cc\u0644 \u062c\u0632\u06cc\u0631\u0627 \u067e\u06cc\u0679\u06be \u0631\u0648\u0627\u0646\u06c1 \u06af\u0654\u0686\u0627\u0646\u06d4",
            "x": " ",
            "y": 10,
            "z": 100
        },
        "query": [
            "Right justify the substring of {a} starting from position {y} to length {z} using {x} as the fill character.",
            "Pad the substring of {a} starting at index {y} to the right with {x} until it reaches length {z}.",
            "Fill the substring of {a} from position {y} to the right with {x} so that its total length is {z}."
        ],
        "language": "kas_Arab"
    },
    {
        "solution": "```python\nanswer = a.split(x)[1].strip().capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "Ensonga yatandika mu gatonya olusooka 1st enkumu ne nkumu y\u2019abantu ba bulijjo bwe batandika okulaga obutali bu mativu eri Obanazawa wofiisi ya posita nti baali tebanafuna kaada z\u2019enono n\u2019ezibakuliza omwaka.",
            "x": "nti"
        },
        "query": [
            "Split {a} by {x}, take the second part, strip whitespace, and capitalize it.",
            "Divide {a} using {x} as the delimiter, get the second segment, remove leading and trailing spaces, and capitalize the result.",
            "Separate {a} at each occurrence of {x}, select the second portion, trim any surrounding whitespace, and convert it to capitalized form."
        ],
        "language": "lug_Latn"
    },
    {
        "solution": "```python\nanswer = a.rjust(x, y).encode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "\u0636\u0645\u0651\u062a \u062a\u0639\u0632\u064a\u0632\u0627\u062a \u0627\u0644\u0645\u0648\u0627\u0642\u0639 \u0627\u0644\u0623\u0645\u0627\u0645\u064a\u0629 \u0643\u062a\u064a\u0628\u062a\u064a \u0646\u064a\u0648\u0647\u0627\u0645\u0628\u0634\u064a\u0631 \u0627\u0644\u0623\u0648\u0644\u0649 \u0648\u0627\u0644\u062b\u0627\u0644\u062b\u0629 \u0641\u064a \u0635\u0641\u0648\u0641\u0647\u0645\u0627 200 \u0645\u0646 \u0627\u0644\u0631\u062c\u0627\u0644 \u064a\u0642\u0648\u062f\u0647\u0645 \u0627\u0644\u0639\u0642\u064a\u062f \u0686\u0648\u0646 \u0633\u062a\u0627\u0631\u0643 \u0648\u0627\u0644\u0639\u0642\u064a\u062f \u0686\u064a\u0645\u0633 \u0631\u064a\u062f (\u0648\u0627\u0644\u0630\u064a\u0646 \u0623\u0635\u0628\u062d\u0627 \u0628\u0639\u062f\u0647\u0627 \u062c\u0646\u0631\u0627\u0644\u064a\u0646).",
            "x": 150,
            "y": " "
        },
        "query": [
            "Right-align {a} in a string of length {x} using {y} as padding, then encode it in UTF-8.",
            "Pad the string {a} to the right with {y} until it reaches length {x}, then encode it in UTF-8.",
            "Make the string {a} right-aligned with padding {y} to a total length of {x}, and encode it in UTF-8."
        ],
        "language": "arb_Arab"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).lower()\nprint(answer)\n```",
        "variables": {
            "a": "Aing\u0129 a and\u0129ki ao n\u0129 mathi\u0129te na mbere na makegwat\u0129ra \u0169guc\u0129r\u0129ria m\u0169nene har\u0129 tabar\u0129ra ya \u0169ny\u0169r\u0169ria wa mohoro ya Jon Stewart na Stephen Colbert.",
            "x": 150,
            "y": "*"
        },
        "query": [
            "Center {a} in a string of length {x} using {y} as padding, then convert it to lowercase.",
            "Pad {a} to a total length of {x} with {y} and make it lowercase.",
            "Make {a} lowercase after centering it in a string of length {x} with {y} as padding."
        ],
        "language": "kik_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x)[-1].rfind(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u2d59\u2d4e\u2d37 \u2d49\u2d4e\u2d4f\u2d56\u2d49 \u2d4e\u2d33\u2d30\u2d4d \u2d3c\u2d54\u2d30\u2d4f\u2d59\u2d30, \u2d5c\u2d59\u2d59\u2d4f\u2d30 \u2d4d\u2d30\u2d4d\u2d4e\u2d30\u2d4f \u2d30\u2d59\u2d4e\u2d30\u2d54 \u2d49 \u2d53\u2d59\u2d37\u2d53\u2d54\u2d54\u2d49 \u2d4f \u2d5c\u2d33\u2d63\u2d49\u2d54\u2d5c \u2d30 \u2d49\u2d4f\u2d33\u2d4d\u2d30\u2d5c\u2d49\u2d54\u2d54\u2d30.",
            "x": "\u2d49",
            "y": "\u2d54"
        },
        "query": [
            "Split {a} by {x}, take the last part, and find the last occurrence of {y} in it.",
            "Divide {a} using {x} as the delimiter, select the final segment, and locate the last position of {y} within it.",
            "Break {a} at each {x}, get the last section, and determine the last index of {y} in that section."
        ],
        "language": "zgh_Tfng"
    },
    {
        "solution": "```python\nanswer = a[::-1].replace(x, y).isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "\u12ad\u120a \u1271\u122d\u12aa \u120d\u12d5\u120a 1,600 \u12aa\u120e \u121c\u1270\u122d \u12dd\u1295\u12cd\u1213\u1271\u1295 500 \u121a. \u121c. \u12dd\u130d\u134d\u1211\u1295 \u12b0\u12ed\u1291 \u12f3\u122d\u130b \u1255\u1291\u12d5 \u122d\u1261\u12d5 \u12b5\u122d\u1293\u12d5 \u12dd\u1255\u122d\u1339 \u12a5\u12e9\u1362",
            "x": "\u120d",
            "y": "5"
        },
        "query": [
            "Is the reverse of {a} made up of digits only after replacing {x} with {y}?",
            "After reversing {a} and replacing {x} with {y}, is the result composed solely of digits?",
            "Does the reversed version of {a}, after substituting {x} with {y}, consist entirely of digits?"
        ],
        "language": "tir_Ethi"
    },
    {
        "solution": "```python\nanswer = a[x::z].join(y).isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Kupac s gomilom novca mogao bi razmisliti o letu oko svijeta i usput odsjesti u mnogima od ovih hotela.",
            "x": 2,
            "y": "-",
            "z": 3
        },
        "query": [
            "Does the string formed by joining {y} with every {z}-th character from {a} starting at index {x} contain only ASCII characters?",
            "Is the string created by inserting {y} between every {z}-th character of {a} starting from index {x} composed solely of ASCII characters?",
            "Will the string that results from joining {y} with every {z}-th character of {a} starting at position {x} be entirely made up of ASCII characters?"
        ],
        "language": "hrv_Latn"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).startswith(y) and a.endswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0648\u064a\u0645\u0643\u0646 \u0627\u0644\u062d\u0643\u0645 \u0639\u0644\u064a\u0647 \u0628\u0637\u0631\u064a\u0642\u0629 \u0645\u062e\u062a\u0644\u0641\u0629 \u0625\u0630\u0627 \u0636\u064a\u0651\u0639 \u0645\u0641\u0627\u062a\u062d \u0643\u0631\u0647\u0628\u062a\u0648 \u0648\u0643\u0627\u0646\u062a \u0643\u0631\u0647\u0628\u062a\u0648 \u0647\u064a \u0627\u0644\u0644 \u064a\u062d\u0628 \u064a\u062d\u0644\u0647\u0627",
            "x": "\u0647\u0627",
            "y": "\u0648\u064a\u0645\u0643\u0646",
            "z": "\u064a\u062d\u0628 \u064a\u062d\u0644\u0647\u0627"
        },
        "query": [
            "Does {a} start with {y} and end with {z} after removing trailing {x} characters?",
            "After trimming trailing {x} characters from {a}, does it start with {y} and end with {z}?",
            "If trailing {x} characters are removed from {a}, does it begin with {y} and conclude with {z}?"
        ],
        "language": "aeb_Arab"
    },
    {
        "solution": "```python\nanswer = a[x:].isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": "\u8b8a\u7126\u93e1\u982d\u7684\u7f3a\u9ede\u662f\uff0c\u9054\u5230\u4e00\u5b9a\u7126\u8ddd\u7bc4\u570d\u6240\u9700\u7684\u7126\u9ede\u8907\u96dc\u5ea6\u548c\u93e1\u7247\u5143\u4ef6\u6578\u91cf\uff0c\u9060\u5927\u65bc\u5b9a\u7126\u93e1\u982d\u3002",
            "x": 5
        },
        "query": [
            "Verify if the substring of {a} starting from the {x+1}-th character is a valid identifier.",
            "Check if the substring of {a} beginning at the {x+1}-th character is a valid identifier.",
            "Determine if the substring of {a} from the {x+1}-th character onwards is a valid identifier."
        ],
        "language": "cmn_Hant"
    },
    {
        "solution": "```python\nanswer = a.split(x, y)[-1].istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Kek c\u00e4k de t\u025bn k\u00e4t n\u025bm Barcelona ku t\u025bn k\u00e4t  Copenhagen, ac\u00ef rot jal mat th\u00efn t\u025b\u0308n k\u00e4t n\u025bm Prague t\u0254\u0308u Prague ku k\u0254\u0308k.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Split {a} by {x} up to {y} times and check if the last segment is title-cased.",
            "Divide {a} using {x} as the delimiter up to {y} times and verify if the final part is in title case.",
            "Separate {a} by {x} up to {y} times and determine if the last section is title-cased."
        ],
        "language": "dik_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].swapcase().istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Ko pagina internet pe ndahas\u00fdiete ojeike hagu\u00e3, emo\u0129 nte vaer\u00e3 pe direccion internet pegua, ha pea ndahas\u00fdi nemandu'a hagu\u00e3, avei ndahas\u00fdi temimbo'e ku\u00e9ra pe ohai hagu\u00e3, ikatuva otopa hasy'i hina oipuru hagu\u00e3 ko teclado ter\u00e3 tai por\u00e3.",
            "x": 3,
            "y": 20
        },
        "query": [
            "Check if the substring of {a} from index {x} to {y} with swapped case follows title case capitalization.",
            "Determine if the substring of {a} from index {x} to {y} with swapped case is in title case.",
            "Verify if the substring of {a} from index {x} to {y} with swapped case adheres to title case capitalization."
        ],
        "language": "gug_Latn"
    },
    {
        "solution": "```python\nanswer = a.title().swapcase().count(x)\nprint(answer)\n```",
        "variables": {
            "a": "Vet\u00ebm efektet e katastrofizimit dhe jo frika dhe depresioni, ishin t\u00eb kusht\u00ebzuara nga sesionet e p\u00ebrllogaritura javore t\u00eb aktivitetit fizik t\u00eb strukturuar.",
            "x": "E"
        },
        "query": [
            "Convert {a} to title case, swap its case, and count occurrences of {x}.",
            "Transform {a} to title case, invert its case, and find the number of times {x} appears.",
            "Change {a} to title case, reverse its case, and tally the occurrences of {x}."
        ],
        "language": "als_Latn"
    },
    {
        "solution": "```python\nanswer = a.join(x).casefold()\nprint(answer)\n```",
        "variables": {
            "a": " ",
            "x": [
                "Mbanza",
                "ya",
                "ntama",
                "na",
                "Judean",
                "Hills",
                "kele",
                "na",
                "kintama",
                "ya",
                "mbote",
                "me",
                "katuka",
                "na",
                "mafunda",
                "ya",
                "bainvu"
            ]
        },
        "query": [
            "Join the elements in {x} with {a} and convert the result to lowercase.",
            "Combine the items in {x} using {a} and change the output to lowercase.",
            "Merge the elements in {x} with {a} and transform the result to lowercase."
        ],
        "language": "ktu_Latn"
    },
    {
        "solution": "```python\nanswer = a[::-1].replace(x, y).islower()\nprint(answer)\n```",
        "variables": {
            "a": "Nguy\u00ean nh\u00e2n ph\u1ed5 bi\u1ebfn nh\u1ea5t g\u00e2y ra tai n\u1ea1n trong m\u00f9a \u0111\u00f4ng l\u00e0 \u0111\u01b0\u1eddng, v\u1ec9a h\u00e8 v\u00e0 \u0111\u1eb7c bi\u1ec7t l\u00e0 c\u00e1c b\u1eadc thang tr\u01a1n tr\u01b0\u1ee3t.",
            "x": "\u0111",
            "y": "d"
        },
        "query": [
            "Reverse {a}, replace {x} with {y}, and check if the result is in lowercase.",
            "Reverse the string {a}, substitute {x} with {y}, and verify if the final string is in lowercase.",
            "Reverse the input {a}, change {x} to {y}, and determine if the resulting string is all lowercase."
        ],
        "language": "vie_Latn"
    },
    {
        "solution": "```python\nanswer = a[:y].isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u0db4\u0dd2\u0dba\u0dcf \u0d9a\u0dd4\u0db8\u0d9a\u0dca \u0db4\u0dd0\u0dc0\u0dc3\u0dd4\u0dc0\u0dcf \u0daf\u0dd0\u0dba\u0dd2 \u0d87\u0dc3\u0dd6 \u0dc0\u0dd2\u0da7 \u0d87\u0dba \u0db4\u0dd2\u0dc5\u0dd2\u0dad\u0dd4\u0dbb\u0dd4 \u0daf\u0dd4\u0db1\u0dca\u0db1\u0dda \"\u0d94\u0dc4\u0dd4\u0da7 \u0d9a\u0dd2\u0dc3\u0dd2\u0dc0\u0d9a\u0dca \u0db4\u0dd0\u0dc0\u0dc3\u0dd2\u0dba \u0dc4\u0dd0\u0d9a\u0dd2 \u0dc0\u0dd4\u0dab\u0dda \u0db1\u0dd0\u0dc4\u0dd0 - \u0d94\u0dc4\u0dd4 \u0d87\u0dc3\u0dd2\u0db4\u0dd2\u0dba \u0d9c\u0dc3\u0db8\u0dd2\u0db1\u0dca \u0d91\u0dad\u0dd0\u0db1 \u0dc3\u0dd2\u0da7\u0d9c\u0dd9\u0db1 \u0dc3\u0dd2\u0da7\u0dd2\u0dba\u0dcf\" \u0dba\u0db1\u0dd4\u0dc0\u0dd9\u0db1\u0dd2.",
            "y": 5
        },
        "query": [
            "Check if the first {y} characters of {a} are numeric.",
            "Verify if the initial {y} characters of {a} are digits.",
            "Determine if the first {y} characters in {a} are numbers."
        ],
        "language": "sin_Sinh"
    },
    {
        "solution": "```python\nanswer = a[x:y].strip(z).upper()\nprint(answer)\n```",
        "variables": {
            "a": "Lamarin zayyane-zayyane shi ma yana cikin gangamin Taron Birnin Bucharest wanda ya nemi sake kaddamar da hoton babban birnin Romania a matsayin birnin fikirar kirkire-kirkire kuma mai tasiri sosai.",
            "x": 8,
            "y": 30,
            "z": "zayyane"
        },
        "query": [
            "Strip {z} from both ends of the substring of {a} from {x} to {y} and convert it to uppercase.",
            "Remove {z} from the start and end of the substring of {a} ranging from {x} to {y} and change it to uppercase.",
            "Trim {z} from the edges of the substring of {a} between {x} and {y} and turn it into uppercase."
        ],
        "language": "hau_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().capitalize().endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "Its large glazed windows and thin walls would not have been able to resist a determined attack for long.",
            "x": "Long."
        },
        "query": [
            "Check if the trimmed and capitalized version of {a} ends with {x}.",
            "Determine if the capitalized and stripped version of {a} has {x} at the end.",
            "Verify if {a}, when trimmed and capitalized, concludes with {x}."
        ],
        "language": "eng_Latn"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).capitalize().find(y)\nprint(answer)\n```",
        "variables": {
            "a": "Shingrai timung, mungkan ntsa hta chye ging ai kahpi lu ai ladat amyu myu lak lai hkra nga ai.",
            "x": " ai.",
            "y": "Hkra"
        },
        "query": [
            "Find the position of {y} in {a} after trimming trailing {x} characters and capitalizing the first letter.",
            "Determine the index of {y} in {a} after removing trailing {x} characters and capitalizing the first letter.",
            "Locate the position of {y} in {a} after stripping trailing {x} characters and capitalizing the first letter."
        ],
        "language": "kac_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().title().center(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "I\u01e7iten wiya\u0263 emma\u0263en ad eknin an\u01e7i-n-assikel \u01e7ir ssin kallen.",
            "x": 80,
            "y": "*"
        },
        "query": [
            "Trim spaces from {a}, convert it to title case, and center it in a field of {x} characters using {y} as padding.",
            "Remove leading and trailing spaces from {a}, change it to title case, and center it within {x} characters using {y} as the fill character.",
            "Strip spaces from {a}, capitalize each word, and align it centrally in a field of {x} characters with {y} as the padding character."
        ],
        "language": "taq_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='ignore').decode(encoding=x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0d94\u0db6\u0d9c\u0dda \u0dc3\u0dca\u0db8\u0dcf\u0dbb\u0dca\u0da7\u0dca \u0da2\u0d82\u0d9c\u0db8 \u0daf\u0dd4\u0dbb\u0d9a\u0dad\u0db1\u0dba\u0dda GPS \u0dc3\u0d82\u0da0\u0dcf\u0dbd\u0db1 \u0dba\u0dd9\u0daf\u0dd4\u0db8\u0dca \u0db7\u0dcf\u0dc0\u0dd2\u0dad\u0dcf \u0d9a\u0dd2\u0dbb\u0dd3\u0db8, \u0d94\u0db6\u0d9c\u0dda \u0db8\u0dc0\u0dca \u0dbb\u0da7\u0dd9\u0db1\u0dca \u0db4\u0dd2\u0da7\u0dad \u0dc3\u0dd0\u0dbb\u0dd2\u0dc3\u0dd0\u0dbb\u0dd3\u0db8\u0da7 \u0db4\u0dc4\u0dc3\u0dd4\u0db8 \u0dc4\u0dcf \u0dc3\u0dbb\u0dbd\u0db8 \u0d9a\u0dca\u200d\u0dbb\u0db8\u0dba \u0dc0\u0dd2\u0dba \u0dc4\u0dd0\u0d9a\u0dd2 \u0dba.",
            "x": "utf-8"
        },
        "query": [
            "Convert the string {a} to the encoding {x} and then decode it back, ignoring any characters that can't be encoded.",
            "Encode the string {a} using the {x} encoding and then decode it back, ignoring characters that cannot be encoded.",
            "Transform the string {a} to the {x} encoding and decode it back, skipping any characters that can't be encoded."
        ],
        "language": "sin_Sinh"
    },
    {
        "solution": "```python\nanswer = a.strip(x).split(y).index(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0628\u0634\u0643\u0644 \u0639\u0627\u0645\u060c \u064a\u062a\u0637\u0644\u0628 \u0627\u0644\u0628\u0642\u0627\u0621 \u0641\u064a \u0623\u064a \u062f\u0648\u0644\u0629 \u0623\u062c\u0646\u0628\u064a\u0629 \u0644\u0641\u062a\u0631\u0629 \u0637\u0648\u064a\u0644\u0629 \u0627\u0644\u062d\u0635\u0648\u0644 \u0639\u0644\u0649 \u062a\u0623\u0634\u064a\u0631\u0629 \u0645\u0642\u062f\u0645\u0627\u064b.",
            "x": "\u0628",
            "y": " ",
            "z": "\u0627\u0644\u062d\u0635\u0648\u0644"
        },
        "query": [
            "Strip {x} from both ends of {a}, split it by {y}, and find the index of {z}.",
            "Remove {x} from the start and end of {a}, divide it by {y}, and get the position of {z}.",
            "Trim {x} from the edges of {a}, break it by {y}, and locate the index of {z}."
        ],
        "language": "ars_Arab"
    },
    {
        "solution": "```python\nanswer = a.lstrip(x).zfill(y).isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u0644\u0632\u0648\u062c \u0627\u0644\u0628\u0627\u0644\u063a \u0645\u0646 \u0627\u0644\u0639\u0645\u0631 30 \u0639\u0627\u0645\u0627\u064b \u0648\u0627\u0644\u0645\u0648\u0644\u0648\u062f \u0641\u064a \u0628\u0627\u0641\u0644\u0648\u060c \u0643\u0627\u0646 \u0648\u0627\u062d\u062f\u0627\u064b \u0645\u0646 \u0623\u0631\u0628\u0639 \u0642\u064f\u062a\u0644\u0648\u0627 \u0641\u064a \u0625\u0637\u0644\u0627\u0642 \u0627\u0644\u0646\u0627\u0631\u060c \u0644\u0643\u0646 \u0632\u0648\u062c\u062a\u0647 \u0644\u0645 \u062a\u064f\u0635\u0628.",
            "x": "\u0627\u0644\u0632\u0648\u062c",
            "y": 50
        },
        "query": [
            "Remove {x} from the start of {a}, pad it with zeros to make it {y} characters long, and check if it is numeric.",
            "Strip {x} from the beginning of {a}, zero-fill it to a length of {y}, and verify if it is a number.",
            "Eliminate {x} from the start of {a}, add leading zeros to make it {y} characters in length, and determine if it is numeric."
        ],
        "language": "ars_Arab"
    },
    {
        "solution": "```python\nanswer = a.split(x).count(y) > 0\nprint(answer)\n```",
        "variables": {
            "a": "\u101e\u103d\u1031\u1038\u1005\u102e\u1038\u1006\u1004\u103a\u1038\u1019\u103e\u102f\u1000\u102d\u102f \u101b\u1015\u103a\u1010\u1014\u1037\u103a\u101b\u1014\u103a \u101e\u103d\u1031\u1038\u1011\u102d\u1014\u103a\u1038\u1005\u100a\u103a\u1038\u1019\u103b\u102c\u1038\u1014\u103e\u1004\u1037\u103a \u101e\u103d\u1031\u1038\u101c\u103d\u103e\u1010\u103a\u1000\u103c\u1031\u102c\u1021\u1006\u102d\u102f\u1037\u1019\u103b\u102c\u1038\u1021\u1015\u103c\u1004\u103a \u101c\u1030\u1014\u102c\u1019\u103b\u102c\u1038 \u101e\u103d\u1031\u1038\u1015\u102f\u1015\u103a\u1015\u103d\u1001\u103c\u1004\u103a\u1038\u1019\u1016\u103c\u1005\u103a\u1005\u1031\u101b\u1014\u103a \u1016\u103c\u1010\u103a\u1010\u1031\u102c\u1000\u103a\u1019\u103e\u102f\u1010\u103d\u1004\u103a \u1015\u102d\u102f\u1000\u103b\u103d\u1019\u103a\u1038\u1000\u103b\u1004\u103a\u101c\u102c\u101e\u100a\u103a\u104b",
            "x": " ",
            "y": "\u101e\u103d\u1031\u1038"
        },
        "query": [
            "Split {a} by {x} and check if {y} appears in the resulting list.",
            "Divide {a} using {x} and verify if {y} is present in the list.",
            "Separate {a} with {x} and determine if {y} exists in the resulting array."
        ],
        "language": "mya_Mymr"
    },
    {
        "solution": "```python\nanswer = a.encode('ascii', errors='ignore').decode('ascii').endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0633\u0627\u0646 \u0641\u0631\u0627\u0646\u0633\u06cc\u0633\u06a9\u0648\u060c \u0627\u0648\u0644\u06a9\u0647 \u062f\u0647\u060c \u0627\u0646 \u06cc\u0627\u062e\u0634\u06cc \u06cc\u0631 \u0622\u06cc\u0631\u06cc \u0622\u0633\u06cc\u0627\u06cc\u06cc \u063a\u0630\u0627\u0644\u0627\u0631\u06cc\u0646 \u06cc\u0645\u06af\u0647 \u0627\u0648\u0686\u0648\u0646 \u062f\u0647. \u06a9\u0631\u0647 \u0644\u06cc\u060c \u062a\u0627\u06cc\u0644\u0646\u062f\u06cc\u060c \u0647\u0646\u062f\u06cc\u060c \u0648 \u0698\u0627\u067e\u0646\u06cc",
            "x": "\u0698\u0627\u067e\u0646\u06cc"
        },
        "query": [
            "Encode {a} in ASCII, ignoring errors, decode it back, and check if it ends with {x}.",
            "Convert {a} to ASCII, skip errors, convert it back, and verify if it ends with {x}.",
            "Transform {a} to ASCII, ignore any errors, revert it, and see if it ends with {x}."
        ],
        "language": "azb_Arab"
    },
    {
        "solution": "```python\nanswer = a.split(x, y)[z].isnumeric()\nprint(answer)\n```",
        "variables": {
            "a": "\u092e\u093f\u0917\u0940 \u0916\u0941\u0936\u0940 \u0910 \u091c\u0947 \u0932\u094b\u0915 \u092e\u0947\u0930\u093e \u0938\u092e\u0930\u094d\u0925\u0928 \u0915\u0930\u0928\u0947 \u0906\u0938\u094d\u0924\u0948 \u0924\u094d\u092f\u093e\u0930 \u0928 .",
            "x": " ",
            "y": 5,
            "z": 3
        },
        "query": [
            "Split {a} by {x} up to {y} times and check if the {z}-th segment is numeric.",
            "Divide {a} using {x} as the delimiter up to {y} times and verify if the {z}-th part is a number.",
            "Separate {a} by {x} up to {y} times and determine if the {z}-th section is numeric."
        ],
        "language": "dgo_Deva"
    },
    {
        "solution": "```python\nanswer = a.capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "N\u00f9m\u0254n\u00f9 j\u025b z\u0254ga s\u00ecn w\u00f9v\u025b dev\u00f3 w\u025b nyi \u0256\u0254 hunhun \u0256ax\u00f3 n\u00f9m\u0254n\u00f9 \u0254 t\u0254n n\u0254 nyi kp\u025bvi \u0256e(w\u00e8z\u00f9n hih\u0254n)."
        },
        "query": [
            "Make the first character of {a} uppercase and the rest lowercase.",
            "Capitalize the first letter of {a} and make the rest of the letters lowercase.",
            "Convert the first character of {a} to uppercase and the remaining characters to lowercase."
        ],
        "language": "fon_Latn"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y)\nprint(answer)\n```",
        "variables": {
            "a": "\u067e\u0646\u0647\u0646\u062c\u064a \u0634\u0631\u0648\u0639\u0627\u062a\u064a \u068f\u064a\u0646\u0647\u0646 \u06fe \u062e\u0627\u0635 \u0637\u0648\u0631 \u062a\u064a\u060c \u0645\u063a\u0631\u0628\u064a-\u0637\u0631\u0632 \u0627\u067e\u0646\u0627\u0626\u06bb \u06fd \u0645\u0639\u064a\u0627\u0631\u064a \u0647\u0648\u067d\u0644\u060c \u06a9\u0627\u068c\u0646 \u06fd \u062e\u062f\u0645\u062a\u0646 \u062c\u064a \u0639\u0627\u062f\u062a \u0648\u062c\u0647\u06bb \u0644\u0627\u0621\u0650 \u068c\u064a\u0627\u0646 \u068f\u064a\u06bb \u062a\u064a \u063a\u0648\u0631 \u06aa\u0631\u064a\u0648.",
            "x": 100,
            "y": " "
        },
        "query": [
            "Left-align {a} in a string of length {x}, using {y} as the fill character.",
            "Pad the string {a} to the left to make its length {x}, using {y} as the padding character.",
            "Align the string {a} to the left in a field of width {x}, filling with {y}."
        ],
        "language": "snd_Arab"
    },
    {
        "solution": "```python\nanswer = a.isascii()\nprint(answer)\n```",
        "variables": {
            "a": "De\u0331ri\u0331 ta\u0331a\u0331 i  w\u00e4 k\u025b\u025b thaak bil k\u025b ta\u0331a\u0331 in guic i\u0331 j\u025b k\u025b j\u025b mi\u0331 loc\u025b r\u0254 k\u025b wi\u00e4l\u025b. \u0194\u025bn du\u0254\u0331r mi\u0331 locr\u0254 \u025b mi\u0331 wi\u00e4l k\u00e4 wi\u00e4l ni\u0331 k\u00e4 t \u014buan."
        },
        "query": [
            "Determine if all characters in {a} are ASCII.",
            "Check if all characters in {a} are ASCII.",
            "Verify if {a} contains only ASCII characters."
        ],
        "language": "nus_Latn"
    },
    {
        "solution": "```python\nanswer = a.count(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u0644\u06a9\u0647 \u0685\u0646\u06ab\u0647 \u0686\u06d0 \u0648\u062e\u062a \u062a\u06cc\u0631\u06cc\u062f\u0647\u060c \u0689\u06cc\u0631\u06cc \u067c\u06a9\u064a \u0686\u06d0 \u062f \u0622\u0644\u0645\u0627\u0646 \u0644\u0647 \u062a\u0631\u06a9\u06cc\u0628 \u0685\u062e\u0647 \u067e\u0648\u0631 \u0634\u0648\u064a \u062f\u064a. \u062f\u0627 \u062f \u0631\u0648\u069a\u0627\u0646\u062a\u06cc\u0627 \u067e\u06cc\u0644 \u0648.",
            "x": "\u062f"
        },
        "query": [
            "Count the number of times {x} appears in {a}.",
            "How many times does {x} occur in {a}?",
            "Find the frequency of {x} in {a}."
        ],
        "language": "pbt_Arab"
    },
    {
        "solution": "```python\nanswer = a.isspace()\nprint(answer)\n```",
        "variables": {
            "a": "\u1c5b\u1c64\u1c71\u1c5f\u1c79\u1c5c \u1c5c\u1c5f\u1c71 \u1c5b\u1c5f\u1c5e\u1c5f \u1c6e\u1c5b\u1c66\u1c5a\u1c75 \u1c6f\u1c77\u1c64\u1c5e\u1c62 \u1c60\u1c6e\u1c62\u1c68\u1c5f \u1c56 \u1c60\u1c77\u1c5a\u1c71 \u1c56 \u1c65\u1c64\u1c62\u1c5f\u1c79 \u1c6f\u1c77\u1c5a\u1c68\u1c62\u1c5f\u1c74 \u1c68\u1c6e \u1c75\u1c6e\u1c75\u1c77\u1c5f\u1c68\u1c5a\u1c5c \u1c60\u1c5f\u1c71\u1c5f, \u1c70\u1c77\u1c6e\u1c68 \u1c65\u1c5a\u1c74\u1c77\u1c64\u1c60 \u1c66\u1c64\u1c65\u1c5f\u1c79\u1c75 \u1c5b\u1c6e \u1c55\u1c56 \u1c62\u1c64\u1c62\u1c64 \u1c71\u1c5f\u1c60\u1c5f\u1c68\u1c5f\u1c5b\u1c62\u1c5a\u1c60\u1c7e"
        },
        "query": [
            "Check if {a} contains only whitespace characters.",
            "Determine if {a} is composed solely of whitespace characters.",
            "Verify whether {a} consists exclusively of whitespace characters."
        ],
        "language": "sat_Olck"
    },
    {
        "solution": "```python\nanswer = a[::-1].replace(x, y).isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Rin tekic venus lo\u014b ku lo\u014b (wula alo\u014b p\u00ebi)  ci akol ru\u00ebl thin. Atekic venus aci w\u025b\u0308l war ci Copernicus luel ala kuat kat\u0254 nhial arot wiic akol loom.",
            "x": "\u014b",
            "y": "n"
        },
        "query": [
            "Is the reverse of {a} with {x} replaced by {y} composed entirely of ASCII characters?",
            "Does reversing {a} and replacing {x} with {y} result in a string of only ASCII characters?",
            "When {a} is reversed and {x} is replaced by {y}, is the resulting string made up solely of ASCII characters?"
        ],
        "language": "dik_Latn"
    },
    {
        "solution": "```python\nanswer = a.casefold().replace(x, y).isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "Yal tamurt da\u0263en tes\u025ba a\u1e63a\u1e0duf we\u1e25des ya\u025bnan ti\u0263awsiwin n usellek n te\u1e5bwi\u1e25in i yelaq ad ilint di tke\u1e5b\u1e5bust.",
            "x": "a",
            "y": "o"
        },
        "query": [
            "Convert {a} to casefold, replace {x} with {y}, and check if the result is alphanumeric.",
            "Transform {a} to lowercase, substitute {x} with {y}, and verify if the outcome is alphanumeric.",
            "Lowercase {a}, change {x} to {y}, and determine if the final string is alphanumeric."
        ],
        "language": "kab_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].upper().endswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "Dac\u0103 vrei s\u0103 vezi lumea la pre\u021b mic, din necesitate, stil de via\u021b\u0103 sau ca o provocare, exist\u0103 c\u00e2teva moduri de a face asta.",
            "x": " ",
            "y": 5,
            "z": "MIC"
        },
        "query": [
            "Split {a} by {x}, take the {y}-th element, convert it to uppercase, and check if it ends with {z}.",
            "Divide {a} using {x} as the delimiter, select the {y}-th part, change it to uppercase, and verify if it concludes with {z}.",
            "Break {a} at each {x}, pick the {y}-th segment, turn it to uppercase, and see if it finishes with {z}."
        ],
        "language": "ron_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding='utf-8', errors='replace').decode('utf-8').islower()\nprint(answer)\n```",
        "variables": {
            "a": "Dinge 15 as\u0131rda Nanak (1469-1539) gurus\u0131 taraf\u0131ndan temel qoyul\u011fan. On\u0131\u00f1 izinden ard\u0131-s\u0131ranen daa doquz guru ketken."
        },
        "query": [
            "Encode {a} to UTF-8, decode it back, and check if the result is all lowercase.",
            "Convert {a} to UTF-8 encoding, then decode it and verify if it is entirely in lowercase.",
            "Transform {a} to UTF-8, decode it, and determine if the decoded string is completely lowercase."
        ],
        "language": "crh_Latn"
    },
    {
        "solution": "```python\nanswer = a.title().split(x)[y].islower()\nprint(answer)\n```",
        "variables": {
            "a": "Mo le fa\u2019ata\u2019ita\u2019iga, afai e te vaai i se tagata o tata\u2019e le fa\u2019amalama o se taavale, masalo e te mafaufau o lo o taumafai e gaoi le taavale a se tagata \u2018ese.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Is the {y+1}-th segment of {a} split by {x} in lowercase after converting {a} to title case?",
            "After converting {a} to title case and splitting by {x}, is the {y+1}-th segment in lowercase?",
            "When {a} is converted to title case and split by {x}, is the {y+1}-th segment all in lowercase?"
        ],
        "language": "smo_Latn"
    },
    {
        "solution": "```python\nanswer = a.encode(encoding=x, errors='replace').decode(x).zfill(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u1019\u102d\u1030\u107c\u103a\u107c\u1004\u103a\u1087 \u101c\u103d\u1004\u103a\u1088\u1022\u107c\u103a\u1015\u1035\u107c\u103a\u1019\u1083\u1038 \u1075\u103d\u1015\u103a\u1088\u107c\u1086\u1089\u1010\u1084\u1089\u104a \u101c\u103d\u1004\u103a\u1088\u101c\u1086\u1088\u107c\u1083\u1088\u101c\u1030\u1089\u1075\u1082\u1083\u1087\u101a\u103a\u1082\u1087\u101c\u1030\u1004\u103a\u1022\u107c\u103a\u107c\u102d\u102f\u1004\u103a\u1088 \u107c\u103a\u1082\u1038\u1075\u1084\u1088\u1078\u102f\u1019\u103a\u1038\u1078\u102d\u1030\u101d\u103a\u1038\u1015\u1062\u1086\u1038\u1019\u1062\u1086\u1019\u102e\u1088 \u1078\u102d\u102f\u1004\u103a\u1088\u1019\u102d\u1030\u1004\u103a\u1038\u1075\u101b\u102e\u1089\u1076\u101d\u103a \u101a\u103a\u1082\u1087\u1076\u102d\u102f\u107c\u103a\u1088\u1019\u1083\u1038 \u1075\u103d\u1015\u103a\u1088\u1022\u107c\u103a\u1081\u1083\u1022\u103d\u1075\u103a\u1087\u107c\u1084 \u101c\u103d\u1004\u103a\u1088\u1010\u1030\u1004\u103a\u1089\u107c\u102d\u102f\u1004\u103a \u1022\u1019\u103a\u1087\u1078\u103d\u1019\u103a\u1038\u1019\u1062\u1086\u1019\u102e\u1088 \u1022\u107c\u103a\u107d\u1030\u1088\u1011\u1010\u103a\u1038\u101e\u102d\u107c\u103a\u1076\u101d\u103a\u104a \u107d\u1030\u1088\u1010\u1062\u1004\u103a\u101c\u1062\u1010\u103a\u1088\u1076\u101d\u103a\u104a \u107d\u1030\u1088\u1015\u107c\u103a\u1010\u102d\u1030\u1004\u103a\u1087\u1015\u1062\u1004\u103a\u1087\u1019\u1062\u1086\u1019\u102e\u1088\u101c\u1086\u1088\u1076\u101d\u103a \u101c\u1084\u1088 \u107d\u1030\u1088\u1010\u1062\u1004\u103a\u1087\u1015\u107c\u103a\u1075\u1035\u101d\u103a\u1087\u101c\u1030\u107a\u103a\u1088\u1019\u1062\u1086\u1019\u102e\u1088\u1076\u101d\u103a \u1081\u1035\u1010\u103a\u1038\u101e\u1062\u1004\u103a\u1088\u1075\u1082\u1083\u1087 \u107c\u103a\u1082\u1038\u1019\u102d\u1030\u101d\u103a\u1088\u1015\u102e\u1015\u1030\u107c\u103a\u1089\u1019\u1083\u1038\u107c\u107c\u103a\u1089\u101a\u101d\u103a\u1089\u104b",
            "x": "utf-8",
            "y": 500
        },
        "query": [
            "Encode the string {a} using the specified encoding {x}, replace any characters that cannot be encoded, decode it back, and then prefix it with zeros until its length is {y}.",
            "Using the encoding {x}, encode the string {a}, replace unencodable characters, decode it back, and pad it with zeros to make its length {y}.",
            "Take the string {a}, encode it with {x} encoding, replace any characters that can't be encoded, decode it back, and add leading zeros until its length is {y}."
        ],
        "language": "shn_Mymr"
    },
    {
        "solution": "```python\nanswer = a.join(x).isidentifier()\nprint(answer)\n```",
        "variables": {
            "a": " ",
            "x": [
                "\u0413\u0440\u0430\u0434",
                "\u041f\u0435\u043a\u0438\u043d\u0433",
                "\u0443",
                "\u041a\u0438\u043d\u0438",
                "\u045b\u0435",
                "\u0431\u0438\u0442\u0438",
                "\u0434\u043e\u043c\u0430\u045b\u0438\u043d",
                "\u0417\u0438\u043c\u0441\u043a\u0438\u0445",
                "\u043e\u043b\u0438\u043c\u043f\u0438\u0458\u0441\u043a\u0438\u0445",
                "\u0438\u0433\u0430\u0440\u0430",
                "2022",
                "\u0433\u043e\u0434\u0438\u043d\u0435",
                "\u043f\u0430",
                "\u045b\u0435",
                "\u0431\u0438\u0442\u0438",
                "\u043f\u0440\u0432\u0438",
                "\u0433\u0440\u0430\u0434",
                "\u043a\u043e\u0458\u0438",
                "\u0458\u0435",
                "\u0431\u0438\u043e",
                "\u0434\u043e\u043c\u0430\u045b\u0438\u043d",
                "\u0438",
                "\u043b\u0435\u0442\u045a\u0435",
                "\u0438",
                "\u0437\u0438\u043c\u0441\u043a\u0435",
                "\u041e\u043b\u0438\u043c\u043f\u0438\u0458\u0430\u0434\u0435"
            ]
        },
        "query": [
            "If the elements in {x} are joined using {a} as a separator, is the resulting string a valid Python identifier?",
            "Will the string formed by joining elements of {x} with {a} be a valid Python identifier?",
            "Is the string created by joining {x} with {a} a valid identifier in Python?"
        ],
        "language": "srp_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.strip(y).upper().endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "Suro k\u01ddntage October be kag\u01ddnz\u01dd 7-a d\u01ddn injin mara diye bannat\u01ddna woktu mara d\u01dd jiz\u01ddna lan, Sonyayi nduma zau fanz\u01ddnyi. Russiabe allan walt\u01dd Mara II76s be d\u01ddga cuwudo ngawo tajir\u01ddwa diyen.",
            "x": "DIYEN.",
            "y": "Suro k\u01ddntage October be kag\u01ddnz\u01dd 7-a d\u01ddn injin mara diye bannat\u01ddna woktu mara d\u01dd jiz\u01ddna lan, Sonyayi nduma zau fanz\u01ddnyi. Russiabe allan walt\u01dd Mara II76s be d\u01ddga cuwudo ngawo tajir\u01ddwa diyen."
        },
        "query": [
            "After removing characters in {y} from both ends of {a} and converting it to uppercase, does it end with {x}?",
            "Does the string {a} end with {x} after stripping characters in {y} from both ends and converting it to uppercase?",
            "If you strip characters in {y} from both ends of {a} and convert it to uppercase, does it end with {x}?"
        ],
        "language": "knc_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip().replace(x, y).title()\nprint(answer)\n```",
        "variables": {
            "a": "Oku tava kovina haviociliko cipondola oku tepisiwa ndocina cimue ca tiamel\u00e3 ketavo kuenda kefendelo omo okuti ocina cimue cipongolola utima womunu okuete ocisimil\u00f5 caco, enen vali vana vamoleh\u00e3 ndu va kua mbembua, va lunguka, va sanjuka.",
            "x": "oku",
            "y": "Olu"
        },
        "query": [
            "Trim whitespace from {a}, replace {x} with {y}, and capitalize each word.",
            "Remove leading and trailing spaces from {a}, substitute {x} with {y}, and make each word start with a capital letter.",
            "Strip spaces from the beginning and end of {a}, change {x} to {y}, and convert each word to title case."
        ],
        "language": "umb_Latn"
    },
    {
        "solution": "```python\nanswer = a.capitalize().rindex(x)\nprint(answer)\n```",
        "variables": {
            "a": "De h\u00e4r bossarna hade h\u00e5llits kort av Provenzano n\u00e4r han gjorde slut p\u00e5 det Riina-drivna kriget mot staten som kr\u00e4vde maffia-f\u00f6rk\u00e4mparna Giovanni Falcones och Paolo Borsellinos liv 1992.",
            "x": "a"
        },
        "query": [
            "Capitalize {a} and find the last index of {x}.",
            "Convert {a} to capitalized form and locate the last occurrence of {x}.",
            "Find the last position of {x} in the capitalized version of {a}."
        ],
        "language": "swe_Latn"
    },
    {
        "solution": "```python\nanswer = a[:y].find(x)\nprint(answer)\n```",
        "variables": {
            "a": "\u97f3\u6a02\u9304\u88fd\u7684\u65b9\u5f0f\uff0c\u901a\u5e38\u662f\u4ee5\u7cbe\u5bc6\u7684\u96fb\u8166\u8655\u7406\u4e26\u9032\u884c\u6df7\u97f3\u3002",
            "x": "\u96fb\u8166",
            "y": 20
        },
        "query": [
            "Find the position of {x} in the substring of {a} from the start to {y}.",
            "Locate the index of {x} within the substring of {a} up to position {y}.",
            "Determine the position of {x} in the segment of {a} ranging from the beginning to {y}."
        ],
        "language": "cmn_Hant"
    },
    {
        "solution": "```python\nanswer = a[x:y].upper().rjust(z, ' ')\nprint(answer)\n```",
        "variables": {
            "a": "Volgers streve bepaolde menere vaan leve nao, of praktieke die bedoeld zien um die ervaringe te hoejere.",
            "x": 8,
            "y": 15,
            "z": 20
        },
        "query": [
            "Take the substring of {a} from {x} to {y}, convert it to uppercase, and right-justify it within {z} characters.",
            "Extract the substring from {a} starting at index {x} and ending at index {y}, change it to uppercase, and pad it on the left to make it {z} characters long.",
            "Get the substring of {a} between indices {x} and {y}, transform it to uppercase, and align it to the right within a field of {z} characters."
        ],
        "language": "lim_Latn"
    },
    {
        "solution": "```python\nanswer = (x in a[::-1])\nprint(answer)\n```",
        "variables": {
            "a": "\u0410\u0437\u0431\u0430\u0441\u043a\u0438 \u043f\u043e\u0451\u043d\u0438 \u0442\u0435\u0493 \u043a\u0430\u043c\u0442\u0430\u0440 \u043a\u0430\u04b7 \u0430\u0441\u0442, \u0434\u0430\u0440 \u0432\u0430\u049b\u0442\u0435, \u043a\u0438 \u0442\u0435\u0493 \u0431\u0430 \u0438\u043d \u0451 \u0431\u0430 \u043e\u043d \u0442\u0430\u0440\u0430\u0444 \u0445\u0430\u043c \u043c\u0435\u0448\u0430\u0432\u0430\u0434, \u043a\u0430\u043d\u043e\u0440\u0438 \u0431\u043e \u044f\u0445 \u0430\u043b\u043e\u049b\u0430\u043c\u0430\u043d\u0434 \u0431\u0443\u0434\u0430\u0430\u0448 \u043d\u0438\u0437 \u0445\u0430\u043c \u043c\u0435\u0448\u0430\u0432\u0430\u0434.",
            "x": "\u0442\u0435\u0493"
        },
        "query": [
            "Is the substring {x} present in the reverse of {a}?",
            "Does the reverse of {a} contain the substring {x}?",
            "Check if {x} is a substring in the reversed string of {a}."
        ],
        "language": "tgk_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.split(x, y)[-1].isascii()\nprint(answer)\n```",
        "variables": {
            "a": "L\u2019escursionisim di une d\u00ec al cjape dentri distancis di mancul di une mie fin a distancis plui lungjis che si puedin cuvierzi intune sole d\u00ec.",
            "x": " ",
            "y": 5
        },
        "query": [
            "Split {a} at {x} up to {y} times and check if the last segment consists solely of ASCII characters.",
            "Divide {a} by {x} up to {y} times and verify if the final part contains only ASCII characters.",
            "Break {a} at {x} up to {y} times and determine if the last section is made up entirely of ASCII characters."
        ],
        "language": "fur_Latn"
    },
    {
        "solution": "```python\nanswer = a[:y].upper().endswith(x)\nprint(answer)\n```",
        "variables": {
            "a": "Ndambo nzoni ye ti lo ayeke maingo ti ndokua ti lo so ayeke na le ti zo pepe. Alege, akutukutu t\u00ee w\u00ean nga na amangboko a mu agbata, nga akutukutu a pe ti li da yati agbata pepe.",
            "x": "PEPE",
            "y": 100
        },
        "query": [
            "Does the uppercase version of the first {y} characters of {a} end with {x}?",
            "Is {x} the ending of the first {y} characters of {a} when converted to uppercase?",
            "When the first {y} characters of {a} are converted to uppercase, do they end with {x}?"
        ],
        "language": "sag_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].encode('ascii')\nprint(answer)\n```",
        "variables": {
            "a": "\u0939\u093e\u0932\u093e\u0901\u0915\u093f \u0935\u0947 \u0906\u092e\u0924\u094c\u0930 \u092a\u0930 \u0928\u093f\u091c\u0940 \u0938\u094d\u0935\u093e\u092e\u093f\u0924\u094d\u0935 \u092e\u0947\u0902 \u0939\u094b\u0924\u0947 \u0939\u0948\u0902, \u0935\u0947 \u0915\u092d\u0940-\u0915\u092d\u0940 \u0930\u093e\u0937\u094d\u091f\u094d\u0930\u093e\u0927\u094d\u092f\u0915\u094d\u0937\u094b\u0902 \u0914\u0930 \u0905\u0928\u094d\u092f \u0909\u091a\u094d\u091a\u093e\u0927\u093f\u0915\u093e\u0930\u093f\u092f\u094b\u0902 \u0915\u094b \u0920\u0939\u0930\u0928\u0947 \u0915\u0940 \u091c\u0917\u0939 \u0926\u0947\u0924\u0947 \u0939\u0948\u0902.",
            "x": 0,
            "y": 10
        },
        "query": [
            "Encode the substring from {x} to {y} in {a} using ASCII encoding.",
            "Convert the substring of {a} from index {x} to {y} to ASCII encoding.",
            "Get the ASCII encoded version of the substring in {a} from position {x} to {y}."
        ],
        "language": "hin_Deva"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).upper().center(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "Ko ng\u0101 putanga e ai ki te nui o ng\u0101 w\u0101 ka ngana t\u014du roro kia moemoe\u0101 m\u0101ramarama i ia p\u014d.",
            "x": "ng\u0101",
            "y": "NG\u0100",
            "z": 100,
            "w": "*"
        },
        "query": [
            "Replace {x} with {y} in {a}, convert it to uppercase, and center it within {z} characters, padded with {w}.",
            "Substitute {x} with {y} in {a}, change it to uppercase, and center it within {z} characters, using {w} as padding.",
            "Swap {x} for {y} in {a}, make it uppercase, and center it to fit {z} characters, filled with {w}."
        ],
        "language": "mri_Latn"
    },
    {
        "solution": "```python\nanswer = a.capitalize().zfill(x).isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Jis turpynuoja: \"Itei l\u012bta ir n\u016bp\u012btna. Esit dr\u016bss, ka myusu sistema dorboj\u0101s tik labi, kai tai vajadz\u0101tu.\"",
            "x": 100
        },
        "query": [
            "Check if the capitalized and zero-padded version of {a} to length {x} contains only ASCII characters.",
            "Determine if the ASCII-only property holds for the capitalized and zero-padded string of {a} to a length of {x}.",
            "Verify whether the string {a}, when capitalized and zero-padded to a length of {x}, consists solely of ASCII characters."
        ],
        "language": "ltg_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).upper().find(z)\nprint(answer)\n```",
        "variables": {
            "a": "Ez egyre jelent\u00e9ktelenebb probl\u00e9m\u00e1v\u00e1 zsugorodik, mivel a lencsegy\u00e1rt\u00f3k a lencsegy\u00e1rt\u00e1sban egyre nagyobb eredm\u00e9nyeket \u00e9rnek el.",
            "x": "lencsegy\u00e1rt\u00f3k",
            "y": "gy\u00e1rt\u00f3k",
            "z": "ZSUGORODIK"
        },
        "query": [
            "Find the position of {z} in the string {a} after replacing {x} with {y} and converting to uppercase.",
            "After replacing {x} with {y} in {a} and converting it to uppercase, find the index of {z}.",
            "What is the index of {z} in the string {a} after replacing {x} with {y} and making it uppercase?"
        ],
        "language": "hun_Latn"
    },
    {
        "solution": "```python\nanswer = a.rstrip(x).isdecimal()\nprint(answer)\n```",
        "variables": {
            "a": "\u0967\u0968\u0969\u096a\u096b\u096c\u096d\u096e\u096f\u0966",
            "x": "\u0966"
        },
        "query": [
            "After removing trailing {x} from {a}, does the result consist only of decimal characters?",
            "If you strip the trailing {x} from {a}, is the remaining string composed solely of decimal digits?",
            "Does the string {a} contain only decimal characters after trimming the trailing {x}?"
        ],
        "language": "hin_Deva"
    },
    {
        "solution": "```python\nanswer = a.strip(x).split(y)[0].islower()\nprint(answer)\n```",
        "variables": {
            "a": "Gape, maemong a boso a go ruthelanyana dibaketeria di gola gape le go phela nako ye telele ka ntla ga mmele.",
            "x": "Gape, ",
            "y": " "
        },
        "query": [
            "Determine if the first segment of {a}, after stripping characters in {x} and splitting by {y}, is in lowercase.",
            "Check if the first part of {a}, after removing characters in {x} and splitting by {y}, is in lowercase.",
            "Is the first section of {a}, after trimming characters in {x} and dividing by {y}, in lowercase?"
        ],
        "language": "nso_Latn"
    },
    {
        "solution": "```python\nanswer = a.lower().count(x) == y\nprint(answer)\n```",
        "variables": {
            "a": "T\u00e4nane p\u00e4eva m\u00e4ngija on Washington Capitalsi Alex Ovechkin.",
            "x": "a",
            "y": 6
        },
        "query": [
            "Check if the lowercase version of {a} contains {x} exactly {y} times.",
            "Verify if {x} appears exactly {y} times in the lowercase form of {a}.",
            "Determine if the lowercase string of {a} has {x} occurring exactly {y} times."
        ],
        "language": "ekk_Latn"
    },
    {
        "solution": "```python\nanswer = a.rjust(x, y).find(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0397 \u03b1\u03c3\u03c4\u03c5\u03bd\u03bf\u03bc\u03af\u03b1 \u03b4\u03b5\u03bd \u03ad\u03ba\u03b1\u03bd\u03b5 \u03b5\u03c0\u03af\u03c3\u03b7\u03bc\u03b7 \u03b4\u03ae\u03bb\u03c9\u03c3\u03b7 \u03b5\u03ba\u03c4\u03cc\u03c2 \u03b1\u03c0\u03cc \u03c4\u03b7\u03bd \u03b5\u03c0\u03b1\u03bb\u03ae\u03b8\u03b5\u03c5\u03c3\u03b7 \u03c4\u03b7\u03c2 \u03c3\u03b7\u03bc\u03b5\u03c1\u03b9\u03bd\u03ae\u03c2 \u03c0\u03c1\u03bf\u03c3\u03b1\u03b3\u03c9\u03b3\u03ae\u03c2.",
            "x": 100,
            "y": " ",
            "z": "\u03b5\u03c0\u03af\u03c3\u03b7\u03bc\u03b7"
        },
        "query": [
            "Find the position of {z} in the string {a} after right-justifying it to length {x} with padding character {y}.",
            "Determine the index of {z} in the string {a} once it has been right-justified to a length of {x} using {y} as the padding character.",
            "Locate the position of {z} within the string {a} after it has been right-justified to {x} characters with {y} as the padding character."
        ],
        "language": "ell_Grek"
    },
    {
        "solution": "```python\nanswer = a.lower().split(x, y)[z]\nprint(answer)\n```",
        "variables": {
            "a": "La urbo situas tuj apud la akvofaloj kaj ili estas la plej grava vidinda\u0135o, sed \u0109i tiu populara turismejo regalas aventuremulojn kaj ekskursemulojn per multaj ebloj por pli longe resti.",
            "x": " ",
            "y": 5,
            "z": 3
        },
        "query": [
            "Convert {a} to lowercase, split it using {x} as the delimiter up to {y} times, and retrieve the {z}-th element.",
            "Transform {a} to lowercase, split it by {x} up to {y} times, and get the {z}-th part.",
            "Change {a} to lowercase, split it with {x} as the separator up to {y} times, and access the {z}-th segment."
        ],
        "language": "epo_Latn"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).rstrip(z).isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u0b89\u0b99\u0bcd\u0b95\u0bb3\u0bcd \u0b85\u0b9f\u0bbf\u0b95\u0bcd\u0b95\u0b9f\u0bbf \u0baa\u0baf\u0ba3\u0bbf\u0baa\u0bcd\u0baa\u0bb5\u0bb0\u0bc1\u0b95\u0bcd\u0b95\u0bbe\u0ba9 \u0bb5\u0bbf\u0bae\u0bbe\u0ba9\u0ba4\u0bcd\u0ba4\u0bc8 \u0b92\u0bb0\u0bc1 \u0b92\u0baa\u0bcd\u0baa\u0ba8\u0bcd\u0ba4 \u0bae\u0bc1\u0bb1\u0bc8\u0baf\u0bbf\u0bb2\u0bcd \u0b95\u0bb5\u0ba9\u0bae\u0bbe\u0b95 \u0ba4\u0bc7\u0bb0\u0bcd\u0bb5\u0bc1 \u0b9a\u0bc6\u0baf\u0bcd\u0baf \u0bb5\u0bc7\u0ba3\u0bcd\u0b9f\u0bc1\u0bae\u0bcd.",
            "x": 100,
            "y": " ",
            "z": "."
        },
        "query": [
            "Left-justify {a} within {x} characters using {y} for padding, trim trailing characters in {z}, and check if the result is alphanumeric.",
            "Pad {a} to the left within {x} characters using {y}, remove trailing {z}, and verify if the final string is alphanumeric.",
            "Align {a} to the left within a width of {x} characters using {y} as padding, strip trailing {z}, and determine if the resulting string is alphanumeric."
        ],
        "language": "tam_Taml"
    },
    {
        "solution": "```python\nanswer = a.strip(x).count(y) > 0\nprint(answer)\n```",
        "variables": {
            "a": "\uac1c\uccb4\uad70\uc774\ub780 \uc9c0\uc815\ub41c \uc9c0\ub9ac\uc801 \uc601\uc5ed \ub0b4\uc758 \ud2b9\uc815 \uc885\uc758 \uc720\uae30\uccb4 \uc9d1\ud569\uc785\ub2c8\ub2e4.",
            "x": "\uac1c\uccb4",
            "y": "\uc9c0\uc815"
        },
        "query": [
            "Remove leading and trailing characters in {a} that are in {x}, and check if {y} is present in the resulting string.",
            "Trim characters in {x} from both ends of {a} and verify if {y} exists in the modified string.",
            "Strip characters in {x} from the start and end of {a}, then determine if {y} is found in the resultant string."
        ],
        "language": "kor_Hang"
    },
    {
        "solution": "```python\nanswer = a.lower().find(x[::-1])\nprint(answer)\n```",
        "variables": {
            "a": "S\u00ec! El Re Tutankhamun, quaivolta ciam\u00e0\u00e0 \u201cKing Tut\u201d o \u201cThe Boy King\u201d, l\u2019\u00e8 v\u00fcn di re p\u00fcss\u00e9 cognossuu di ant\u00ecg Eg\u00eczi in temp mudern.",
            "x": "King Tut"
        },
        "query": [
            "Convert {a} to lowercase and find the position of the reverse of {x} in it.",
            "Find the index of the reversed {x} in the lowercase version of {a}.",
            "Lowercase {a} and locate the position of the reversed {x}."
        ],
        "language": "lmo_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).title().rjust(z, w)\nprint(answer)\n```",
        "variables": {
            "a": "Ha\u00fdwanlar tutu\u015f \u00fder \u00fd\u00fcz\u00fcnde du\u015f gel\u00fd\u00e4r. Olar \u00fderi k\u00f6w\u00fd\u00e4r, okeanlarda \u00fd\u00fcz\u00fd\u00e4r we asmanda u\u00e7\u00fdar.",
            "x": "\u00fd",
            "y": "y",
            "z": 100,
            "w": "-"
        },
        "query": [
            "Replace all occurrences of {x} in {a} with {y}, convert the result to title case, and right justify it within {z} characters, padding with {w}.",
            "Substitute every instance of {x} in {a} with {y}, change the result to title case, and right align it within {z} characters, using {w} as the padding character.",
            "Change all {x} in {a} to {y}, transform the result to title case, and right justify it to fit {z} characters, padding with {w}."
        ],
        "language": "tuk_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).split(y).count(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0411\u043e\u043b\u044c\u0448\u0438\u043d\u0441\u0442\u0432\u043e \u0442\u0435\u043b\u0435\u0432\u0438\u0437\u043e\u0440\u043e\u0432 \u0441\u0434\u0435\u043b\u0430\u043d\u043e \u0442\u0430\u043a\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c, \u0447\u0442\u043e\u0431\u044b \u0443\u0433\u043e\u0434\u0438\u0442\u044c \u0448\u0438\u0440\u043e\u043a\u043e\u0439 \u043f\u0443\u0431\u043b\u0438\u043a\u0435.",
            "x": "\u0411",
            "y": " ",
            "z": "\u0442\u0435\u043b\u0435\u0432\u0438\u0437\u043e\u0440\u043e\u0432"
        },
        "query": [
            "Remove any {x} characters from the start and end of {a}, split it by {y}, and count the occurrences of {z}.",
            "Trim {a} by removing {x} from both ends, then split by {y} and count how many times {z} appears.",
            "Strip {x} from the beginning and end of {a}, divide it by {y}, and find the number of {z}."
        ],
        "language": "rus_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.lower().rfind(x) == y\nprint(answer)\n```",
        "variables": {
            "a": "Emva kokujonga ubunzulu bamanzi iinxalenye zayo ezaphukileyo zifunyanwe ngokusebenzisa iROV.",
            "x": "i",
            "y": 67
        },
        "query": [
            "Convert {a} to lowercase, find the last occurrence of {x}, and check if it equals {y}.",
            "Transform {a} to lowercase, locate the final position of {x}, and verify if it matches {y}.",
            "Change {a} to lowercase, identify the last index of {x}, and determine if it is equal to {y}."
        ],
        "language": "xho_Latn"
    },
    {
        "solution": "```python\nanswer = a.expandtabs(x).swapcase().isprintable()\nprint(answer)\n```",
        "variables": {
            "a": "\u014an\u0269\t\u025bya\tg\u025bd\u0269\u0263\tpoh\u0254\u014b\tn\u025b\tpat\u028bm\u025b\ttaa\ttom\ty\u0254,\t\u014bna\u0263\t\u025bz\u0269ma\tnabaya\twezou\tca\u0263u\tkpazi\u0263\tyaa\tr\u028bz\u028b\t\u014bgb\u025b\ty\u0254.",
            "x": 4
        },
        "query": [
            "Convert tabs in {a} to {x} spaces, swap the case of each character, and check if all characters are printable.",
            "Replace tabs in {a} with {x} spaces, change the case of each character, and verify if all characters are printable.",
            "Expand tabs in {a} to {x} spaces, invert the case of each character, and determine if all characters are printable."
        ],
        "language": "kbp_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].replace(z, '').upper()\nprint(answer)\n```",
        "variables": {
            "a": "Okugoberera enkola, HJR-3 eja kudamu okwekenenyezebwa wetunatukira mukulambika kwokulonda okudako mu 2015 oba 2016 okusigala munkola.",
            "x": 10,
            "y": 50,
            "z": "e"
        },
        "query": [
            "Extract the substring from the {x+1}-th to the {y}-th character of {a}, remove all instances of {z} from it, and convert the result to uppercase.",
            "Get the substring from the {x+1}-th to the {y}-th character of {a}, eliminate all occurrences of {z} from it, and change the result to uppercase.",
            "Take the substring from the {x+1}-th to the {y}-th character of {a}, delete all instances of {z} from it, and transform the result to uppercase."
        ],
        "language": "lug_Latn"
    },
    {
        "solution": "```python\nanswer = a[x:y].rjust(z, w).startswith(v)\nprint(answer)\n```",
        "variables": {
            "a": "\u092c\u094d\u0930\u093f\u091f\u093f\u0936 \u0905\u0916\u092c\u093e\u0930 \u0926 \u0917\u093e\u0930\u094d\u091c\u093f\u092f\u0928 \u0938\u0941\u091d\u093e\u0935 \u0926\u0947\u0932\u0908 \u0915\u093f \u0921\u094d\u092f\u0942\u0936 \u092c\u0948\u0902\u0915 \u090f\u0917\u094b\u0930\u093e \u092a\u0942\u0930\u093e \u0915\u0930\u0947 \u0915\u0947 \u0932\u0947\u0932 \u0907\u0938\u094d\u0924\u0947\u092e\u093e\u0932 \u0939\u094b\u090f \u0935\u093e\u0932\u093e 1200 \u0936\u0947\u0932 \u0915\u0902\u092a\u0928\u0940 \u092e\u0947\u0902 \u0938\u0947 \u0932\u0917\u092d\u0917 \u090f\u0917\u094b \u0924\u093f\u0939\u093e\u0908 \u0915\u0947 \u0928\u093f\u092f\u0902\u0924\u094d\u0930\u093f\u0924 \u0915\u0932\u0908\u0964",
            "x": 10,
            "y": 30,
            "z": 40,
            "w": "\u0915",
            "v": "\u0915"
        },
        "query": [
            "Check if the right-justified version of the substring from {x} to {y} in {a}, padded to {z} characters with {w}, starts with {v}.",
            "Determine if the substring of {a} from index {x} to {y}, right-justified to {z} characters using {w}, begins with {v}.",
            "Verify if the substring from {x} to {y} in {a}, when right-justified to {z} characters with {w}, starts with {v}."
        ],
        "language": "mag_Deva"
    },
    {
        "solution": "```python\nanswer = a.strip(x).capitalize().center(y, z)\nprint(answer)\n```",
        "variables": {
            "a": "Kel disportu \u00e9 pratikadu prinsipalmenti na formatu di du\u00e9lu, un isgrimista ta bai du\u00e9lu ku kel otu.",
            "x": "ku",
            "y": 100,
            "z": "*"
        },
        "query": [
            "Strip any characters in {x} from both ends of {a}, capitalize the result, and then center it with {z} to make {y} characters.",
            "Remove characters in {x} from the start and end of {a}, capitalize the string, and center it with {z} to a total length of {y} characters.",
            "Trim characters in {x} from both sides of {a}, capitalize the outcome, and center it using {z} to achieve a length of {y} characters."
        ],
        "language": "kea_Latn"
    },
    {
        "solution": "```python\nanswer = a[::-1].startswith(x) and a.endswith(y)\nprint(answer)\n```",
        "variables": {
            "a": "\u0425\u0438\u0439\u0434\u0438\u0439\u043d \u0438\u0445\u044d\u043d\u0445 \u0431\u0430\u044f\u0440 \u043d\u0430\u0430\u0434\u043c\u0443\u0443\u0434\u044b\u0433 \u0445\u0438\u0439\u0434\u0438\u0439\u043d \u043e\u0439\u043d \u0430\u0440\u0433\u0430 \u0445\u044d\u043c\u0436\u044d\u044d \u044d\u0441\u0432\u044d\u043b \u0434\u044d\u044d\u0434 \u0448\u04af\u0442\u044d\u044d\u043d\u0438\u0439 \u043c\u044d\u043d\u0434\u044d\u043b\u0441\u044d\u043d \u04e9\u0434\u04e9\u0440 \u0431\u0430 \u0445\u0438\u0439\u0434\u0442\u044d\u0439 \u0445\u043e\u043b\u0431\u043e\u043e\u0442\u043e\u0439 \u0431\u0443\u0441\u0430\u0434 \u0433\u043e\u043b \u0430\u0440\u0433\u0430 \u0445\u044d\u043c\u0436\u044d\u044d\u043d\u0438\u0439 \u0445\u044d\u0441\u044d\u0433 \u0431\u043e\u043b\u0433\u043e\u043d \u0442\u044d\u043c\u0434\u044d\u0433\u043b\u044d\u0434\u044d\u0433.",
            "x": "\u0433\u0435\u0434\u043b\u0433\u0435\u043c\u0442",
            "y": "\u0433\u044d\u0433\u0434\u043b\u0433\u0435\u043c\u0442"
        },
        "query": [
            "Does the reverse of {a} start with {x} and does {a} end with {y}?",
            "If you reverse {a}, does it start with {x} and does the original {a} end with {y}?",
            "Is it true that the reverse of {a} begins with {x} and the original {a} finishes with {y}?"
        ],
        "language": "khk_Cyrl"
    },
    {
        "solution": "```python\nanswer = a.lower().rjust(x, y).endswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "Kalad \u0103bereqqa n agaraw n musnet d t\u01ddna\u1e0din wer yemun, abas tilla tissust n takatut \u0263ur \u0103gg\u0103dem, bucan adabu n takatut n a\u1e0dris taqqel-d tum\u0103nt hullan.",
            "x": 150,
            "y": " ",
            "z": "hullan."
        },
        "query": [
            "Convert {a} to lowercase, right-justify it with {x} characters using {y} as padding, and check if it ends with {z}.",
            "Transform {a} to lowercase, pad it to the right with {y} until it reaches {x} characters, and verify if it ends with {z}.",
            "Change {a} to lowercase, right-align it to {x} characters with {y} as the padding character, and determine if it ends with {z}."
        ],
        "language": "taq_Latn"
    },
    {
        "solution": "```python\nanswer = a.center(x, y).encode('utf-8').decode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "\u041a\u043e\u043b\u043e\u043d\u0438\u0441\u0442\u0438\u0442\u0435 \u0438\u0441\u0442\u043e \u0442\u0430\u043a\u0430 \u043f\u043e\u0431\u0430\u0440\u0430\u043b\u0435 \u0437\u0430\u0441\u0438\u043b\u0443\u0432\u0430\u045a\u0430 \u043e\u0442\u043a\u0430\u043a\u043e \u0458\u0430 \u0432\u0438\u0434\u0435\u043b\u0435 \u043e\u0432\u0430\u0430 \u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0441\u0442.",
            "x": 100,
            "y": " "
        },
        "query": [
            "Center {a} in a string of {x} characters using {y} for padding, encode it in 'utf-8', and then decode it back to a string.",
            "Pad the string {a} to a total length of {x} characters with {y}, encode it in 'utf-8', and decode it back to a string.",
            "Make the string {a} centered in a field of {x} characters using {y} as padding, encode it in 'utf-8', and decode it back to a string."
        ],
        "language": "mkd_Cyrl"
    },
    {
        "solution": "```python\nanswer = a[x:y].replace(z, w).upper()\nprint(answer)\n```",
        "variables": {
            "a": "Kuenda hashi hiko cikalo, yena munhinguka kuliga yuma hakehe akehe.",
            "x": 7,
            "y": 27,
            "z": "h",
            "w": "H"
        },
        "query": [
            "Take the substring from the {x+1}-th to the {y}-th character of {a}, replace {z} with {w}, and convert the result to uppercase.",
            "Extract the substring from the {x+1}-th to the {y}-th character of {a}, replace {z} with {w}, and change it to uppercase.",
            "Get the substring from the {x+1}-th to the {y}-th character of {a}, substitute {z} with {w}, and transform it to uppercase."
        ],
        "language": "cjk_Latn"
    },
    {
        "solution": "```python\nanswer = a.ljust(x, y).rstrip(z).swapcase()\nprint(answer)\n```",
        "variables": {
            "a": "Owayengumbusi waseMassachusetts uMitt Romney uwina ukhetho oluyinhloko lozoba umongameli weRepublican Party eFlorida ngoLwesibili ngevoti elidlula amaphesenti angu-46.",
            "x": 150,
            "y": " ",
            "z": "."
        },
        "query": [
            "Left-justify {a} within {x} characters using {y} for padding, strip characters in {z} from the end, and swap the case of all characters.",
            "Justify {a} to the left within {x} spaces using {y} as padding, remove trailing {z} characters, and invert the case of each character.",
            "Pad {a} to the left up to {x} characters with {y}, trim {z} from the end, and toggle the case of all letters."
        ],
        "language": "zul_Latn"
    },
    {
        "solution": "```python\nanswer = a[::-1].replace(x, y).split(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0b30\u0b3f\u0b2a\u0b4d\u0b30\u0b47\u0b1c\u0b47\u0b23\u0b4d\u0b1f\u0b47\u0b1f\u0b3f\u0b2d \u0b15\u0b4d\u0b32\u0b3f\u0b2b\u0b4d \u0b37\u0b4d\u0b1f\u0b30\u0b4d\u0b28\u0b38\u0b19\u0b4d\u0b15 \u0b26\u0b4d\u0b35\u0b3e\u0b30\u0b3e \u0b2a\u0b30\u0b3f\u0b1a\u0b3e\u0b33\u0b3f\u0b24 \u0b39\u0b3e\u0b13 \u0b2a\u0b4d\u0b32\u0b3e\u0b28\u0b21\u0b4d \u0b2a\u0b4d\u0b5f\u0b3e\u0b30\u0b47\u0b23\u0b4d\u0b1f\u0b39\u0b41\u0b21 \u0b0f\u0b39\u0b3e\u0b30 \u0b05\u0b30\u0b4d\u0b25 \u0b16\u0b30\u0b4d\u0b1a\u0b4d\u0b1a \u0b15\u0b30\u0b47 \u0b0f\u0b2c\u0b02 \u0b30\u0b3f\u0b2a\u0b4b\u0b30\u0b4d\u0b1f \u0b15\u0b30\u0b47, \u0b24\u0b3e\u0b39\u0b3e \u0b09\u0b2a\u0b30\u0b47 \u0b05\u0b28\u0b41\u0b38\u0b28\u0b4d\u0b27\u0b3e\u0b28 \u0b2c\u0b3f\u0b1a\u0b3e\u0b30\u0b3e\u0b27\u0b40\u0b28 \u0b25\u0b3f\u0b2c\u0b3e \u0b39\u0b47\u0b24\u0b41 \u0b15\u0b4b\u0b2e\u0b47\u0b28\u0b19\u0b4d\u0b15 \u0b28\u0b40\u0b24\u0b3f \u0b2a\u0b4d\u0b32\u0b3e\u0b28\u0b21 \u0b2a\u0b4d\u0b5f\u0b3e\u0b30\u0b47\u0b23\u0b4d\u0b1f\u0b39\u0b41\u0b21\u0b15\u0b41 \u0b05\u0b2f\u0b4b\u0b17\u0b4d\u0b5f \u0b18\u0b4b\u0b37\u0b23\u0b3e \u0b15\u0b30\u0b3f\u0b1b\u0b3f\u0964",
            "x": "\u0b2a\u0b4d\u0b32\u0b3e\u0b28\u0b21",
            "y": "\u0b2a\u0b4d\u0b30\u0b15\u0b33\u0b4d\u0b2a",
            "z": " "
        },
        "query": [
            "Reverse {a}, replace {x} with {y}, and then split the result at {z}.",
            "Reverse the string {a}, substitute {x} with {y}, and split it by {z}.",
            "Take {a}, reverse it, replace {x} with {y}, and split on {z}."
        ],
        "language": "ory_Orya"
    },
    {
        "solution": "```python\nanswer = a[::-1].replace(x, y).upper()\nprint(answer)\n```",
        "variables": {
            "a": "\u1ee4f\u1ecdd\u1ee5, tinyere J\u1ecdn Grant, kwenyere na mbelata mbinye ego na mgbanwe na nka ihe \u1ecdm\u1ee5ma gbasara ndozi ihe ngosi nkuzi ihe so weta maka njedebe ihe ngosi ah\u1ee5.",
            "x": "a",
            "y": "o"
        },
        "query": [
            "Reverse the string {a}, replace {x} with {y}, and convert the result to uppercase.",
            "Take the string {a}, reverse it, substitute {x} with {y}, and change the entire string to uppercase.",
            "Flip the string {a}, swap {x} with {y}, and transform the whole string to uppercase."
        ],
        "language": "ibo_Latn"
    },
    {
        "solution": "```python\nanswer = a.strip(x).replace(y, z).title()\nprint(answer)\n```",
        "variables": {
            "a": "Du\u015fenbe g\u00fcni Stenford uniwersitetini\u0148 Lukman\u00e7ylyk mekdebini\u0148 alymlary \u00f6\u00fdj\u00fckleri g\u00f6rn\u00fc\u015fine g\u00f6r\u00e4 sortlap bil\u00fd\u00e4n t\u00e4ze anykla\u00fdy\u015f guralyny o\u00fdlap tapandyklaryny yglan etdiler: ol, \u00e4htimal, her biri takmynan bir amerikan senti t\u00f6weregi bahadan, standart sepiji printerler arkaly \u00f6nd\u00fcrip bol\u00fdan ki\u00e7ijik \u00e7ap edil\u00fd\u00e4n \u00e7ipdir.",
            "x": "D",
            "y": "uniwersitetini\u0148",
            "z": "universitetini\u0148"
        },
        "query": [
            "Remove leading and trailing characters in {x} from {a}, replace {y} with {z}, and capitalize the first letter of each word.",
            "Trim characters in {x} from both ends of {a}, substitute {y} with {z}, and convert the first letter of each word to uppercase.",
            "Strip {x} from the start and end of {a}, change {y} to {z}, and make the first letter of each word uppercase."
        ],
        "language": "tuk_Latn"
    },
    {
        "solution": "```python\nanswer = a.split(x)[y].lower().endswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "O Perry azwela ni hanji yoso: \u201cKwakala ibuta yofelemu ngongo yatundu mu ukexilu wa imuna phala kubhanga mbandu ku kizokola kidita ku maka ya.\u201d",
            "x": " ",
            "y": 5,
            "z": "yoso:"
        },
        "query": [
            "Split {a} by {x}, take the {y}-th element, convert it to lowercase, and check if it ends with {z}.",
            "Divide {a} using {x} as the delimiter, select the {y}-th part, change it to lowercase, and verify if it ends with {z}.",
            "Break {a} at each {x}, pick the {y}-th segment, turn it to lowercase, and see if it finishes with {z}."
        ],
        "language": "kmb_Latn"
    },
    {
        "solution": "```python\nanswer = a[::-1].replace(x, y).startswith(z)\nprint(answer)\n```",
        "variables": {
            "a": "\u0926\u0915\u094d\u0916\u0928\u0940 \u0927\u094d\u0930\u0941\u0935 \u092a\u093e\u0930\u0917\u092e\u0928 ( \u091c\u093e\u0902 \u091c\u0930\u0928\u0948\u0932\u0940 \u0936\u093f\u0921\u093c\u0915 ) \u0930\u093e\u0938 \u0938\u092e\u0941\u0902\u0926\u0930 \u0909\u092a\u094d\u092a\u0930 \u092e\u0948\u0915\u094d\u092e\u0941\u0930\u094d\u0921\u094b \u0938\u094d\u091f\u0947\u0936\u0928 \u0915\u094b\u0932\u093e \u0927\u094d\u0930\u0941\u0935\u0948 \u0924\u0915\u094d\u0915\u0930 1600 \u0915\u093f.\u092e\u0940. \u0926\u093e \u0930\u0938\u094d\u0924\u093e \u0910\u0964",
            "x": "\u0927\u094d\u0930\u0941\u0935",
            "y": "\u092a\u094b\u0932",
            "z": "\u0910\u0964"
        },
        "query": [
            "Check if the reverse of {a}, after replacing {x} with {y}, starts with {z}.",
            "Determine if reversing {a}, then replacing {x} with {y}, results in a string that starts with {z}.",
            "Verify if the string obtained by reversing {a} and replacing {x} with {y} begins with {z}."
        ],
        "language": "dgo_Deva"
    },
    {
        "solution": "```python\nanswer = a[::-1].startswith(x) and y in a\nprint(answer)\n```",
        "variables": {
            "a": "\u0633\u0644\u0627\u062d \u0627\u0644\u0641\u0631\u0633\u0627\u0646 \u0647\u0648 \u062c\u064a\u0634 \u064a\u0642\u0627\u062a\u0644 \u0645\u0646 \u0639\u0644\u0649 \u0638\u0647\u0648\u0631 \u0627\u0644\u062e\u064a\u0644. \u0643\u0627\u0646 \u0627\u0644\u0633\u0631\u062c \u0628\u0639\u062f\u0647 \u0645\u0627 \u0645\u0648\u062c\u0648\u062f\u060c \u0644\u0630\u0644\u0643 \u0642\u0627\u062a\u0644 \u0627\u0644\u0641\u0631\u0633\u0627\u0646 \u0627\u0644\u0622\u0634\u0648\u0631\u064a\u0648\u0646 \u0639\u0644\u0649 \u0638\u0647\u0648\u0631 \u062e\u064a\u0648\u0644\u0647\u0645 \u0627\u0644\u0639\u0627\u0631\u064a\u0629.",
            "x": "\u0629\u064a\u0631\u0627\u0639\u0644\u0627",
            "y": "\u0627\u0644\u0641\u0631\u0633\u0627\u0646"
        },
        "query": [
            "Check if the reverse of {a} starts with {x} and if {y} is a substring of {a}.",
            "Verify if {a} reversed begins with {x} and contains {y}.",
            "Determine if the reversed string of {a} starts with {x} and includes {y}."
        ],
        "language": "acm_Arab"
    },
    {
        "solution": "```python\nanswer = a[::-1].upper().count(x)\nprint(answer)\n```",
        "variables": {
            "a": "Veviet\u0254e nye be, \u014aku\u028bu\u028bui\u0263eyi\u0263i la tr\u0254 nus\u0254sr\u0254\u0303 kple nunya mama \u0192e m\u0254nu.",
            "x": "E"
        },
        "query": [
            "Count the occurrences of {x} in the reverse of {a} after converting it to uppercase.",
            "How many times does {x} appear in the reversed and uppercased version of {a}?",
            "Find the number of times {x} occurs in the uppercase reverse of {a}."
        ],
        "language": "ewe_Latn"
    },
    {
        "solution": "```python\nanswer = a.lower().endswith(x) and a.isascii()\nprint(answer)\n```",
        "variables": {
            "a": "Nyanzvi dzesainzi dzinodaidza kuita uku vachiti \"kubatsiridzwa kubuda kweradiation\" nekuti maatomu anobatsiridzwa nechiedza chakajeka, zvichisakisa kuburitswa kwephoton yechiedza, zvakare chiedza nderumwe rudzi rwe radiation.",
            "x": "radiation"
        },
        "query": [
            "Convert {a} to lowercase, check if it ends with {x}, and verify if it contains only ASCII characters.",
            "Transform {a} to lowercase, determine if it concludes with {x}, and ensure it has only ASCII characters.",
            "Change {a} to lowercase, see if it finishes with {x}, and confirm it includes only ASCII characters."
        ],
        "language": "sna_Latn"
    },
    {
        "solution": "```python\nanswer = a.replace(x, y).split(z).count(w)\nprint(answer)\n```",
        "variables": {
            "a": "\u0643\u0627\u062f\u0648\u062a\u0623\u0646 \u0627\u0645\u064a\u0631\u064a\u0643 \u0633\u0631\u064a\u0643\u062a \u062f \u0646\u0627\u0621\u064a\u0631\u0648\u0628\u064a\u060c \u0643\u064a\u0646\u064a\u0627\u060c \u0627\u0644\u0647 \u0645\u06a0\u0627\u0644\u0648\u0621\u0646 \u06a4\u0627\u0631\u064a\u06a0\u062a\u0627\u0646 \u0628\u0647\u0633\u0648\u06bd\u0648 \"\u0627\u064a\u0643\u0633\u062a\u0631\u064a\u0645\u0627\u0633 \u062f\u0631\u064a \u0627\u0644\u0635\u0648\u0645\u0627\u0644\"\u0628\u0627\u0631\u0646\u0686\u0627\u0646\u0648 \u0627\u0648\u0646\u062a\u0648\u0627\u0642 \u0645\u0627\u0644\u0627\u0643\u0648\u0627\u0646 \u0628\u0648\u0645 \u0628\u0648\u0646\u0648\u0647 \u062f\u064a\u0631\u064a \u062c\u0648 \u0628\u0648\u0645 \u062f \u0643\u064a\u0646\u064a\u0627 \u062f\u0627\u0646 \u0625\u062b\u064a\u0648\u0628\u064a\u0627.",
            "x": "\u0627",
            "y": "\u0627",
            "z": " ",
            "w": "\u0643\u064a\u0646\u064a\u0627"
        },
        "query": [
            "Replace all occurrences of {x} in {a} with {y}, split the result by {z}, and count the occurrences of {w}.",
            "Substitute every instance of {x} in {a} with {y}, divide the outcome by {z}, and tally the number of {w}.",
            "Change each {x} in {a} to {y}, break the string by {z}, and find how many times {w} appears."
        ],
        "language": "min_Arab"
    },
    {
        "solution": "```python\nanswer = a * b\nprint(answer)\n```",
        "variables": {
            "a": "\u090f \u092c\u093e\u0924 \u0915\u0947 \u0938\u0902\u0938\u094b \u0939\u0947 \u0915\u093f \u0915\u093f \u092b\u094d\u0932\u0942 \u0915\u0947 \u0932\u0915\u094d\u091b\u0928 \u0939\u0932\u094d\u0915\u0947 \u0930\u0939\u0947 \u0932\u0947 \u092e\u0930\u0940\u091c \u0905\u092a\u0928 \u0926\u093f\u0928\u091a\u0930\u094d\u092f\u093e \u0932\u0947 \u091c\u093e\u0926\u093e \u0932\u094b\u0917\u0928 \u0932 \u0938\u0902\u0915\u094d\u0930\u092e\u093f\u0924 \u091c\u093e\u0930\u0940 \u0930\u0916 \u0938\u0915\u0925\u0947\u0964",
            "b": 3
        },
        "query": [
            "Repeat string {a} for {b} times.",
            "Create a string by repeating {a} {b} times.",
            "Duplicate {a} {b} times to form a new string."
        ],
        "language": "hne_Deva"
    },
    {
        "solution": "```python\nanswer = a[::-1] * b\nprint(answer)\n```",
        "variables": {
            "a": "\u064a\u064f\u0639\u064e\u062f \u0627\u0644\u062a\u0633\u062c\u064a\u0644 \u0645\u0637\u0644\u0628 \u0625\u0636\u0627\u0641\u064a \u0644\u0639\u0645\u0644\u064a\u0629 \u0627\u0644\u062a\u0623\u0634\u064a\u0631\u0629\u060c \u0641\u0641\u064a \u0628\u0639\u0636 \u0627\u0644\u0628\u0644\u062f\u0627\u0646 \u064a\u062c\u0628 \u0639\u0644\u064a\u0643 \u062a\u0633\u062c\u064a\u0644 \u062d\u0636\u0648\u0631\u0643 \u0648\u0639\u0646\u0648\u0627\u0646\u0643 \u0644\u062f\u0649 \u0627\u0644\u0633\u0644\u0637\u0627\u062a \u0627\u0644\u0645\u062d\u0644\u064a\u0629 \u062d\u064a\u062b \u062a\u0642\u064a\u0645.",
            "b": 3
        },
        "query": [
            "Repeat the reverse of {a} {b} times.",
            "Create a string by reversing {a} and repeating it {b} times.",
            "Form a new string by reversing {a} and duplicating it {b} times."
        ],
        "language": "arb_Arab"
    },
    {
        "solution": "```python\nanswer = (a + b) * c\nprint(answer)\n```",
        "variables": {
            "a": "\u092a\u094d\u0930\u093e\u0927\u093f\u0915\u093e\u0930\u0940",
            "b": "\u0938\u092d",
            "c": 3
        },
        "query": [
            "Repeat the concatenation of {a} and {b} {c} times.",
            "Create a string by concatenating {a} with {b} and repeating it {c} times.",
            "Duplicate the concatenated string of {a} and {b} {c} times."
        ],
        "language": "mai_Deva"
    },
    {
        "solution": "```python\nanswer = (a * b)[::-1]\nprint(answer)\n```",
        "variables": {
            "a": "\u0647\u064a",
            "b": 3
        },
        "query": [
            "Reverse the string formed by repeating {a} {b} times.",
            "Create a string by reversing the repeated {a} {b} times.",
            "Form a new string by reversing the result of {a} repeated {b} times."
        ],
        "language": "min_Arab"
    },
    {
        "solution": "```python\nanswer = (a * b).upper()\nprint(answer)\n```",
        "variables": {
            "a": "Nufustaki b\u00fct\u00fcn zatlar belli bir fenotipik al\u00e2metine k\u00f6re ayn\u0131 ol\u011fanlar\u0131nda, olar monomorf, dep adland\u0131r\u0131l\u0131r.",
            "b": 2
        },
        "query": [
            "Convert to uppercase the string formed by repeating {a} {b} times.",
            "Create an uppercase string by repeating {a} {b} times.",
            "Form a new string by repeating {a} {b} times and converting it to uppercase."
        ],
        "language": "crh_Latn"
    },
    {
        "solution": "```python\nanswer = (a * b).lower()\nprint(answer)\n```",
        "variables": {
            "a": "Arturs Giness Dublin\u0101",
            "b": 3
        },
        "query": [
            "Convert to lowercase the string formed by repeating {a} {b} times.",
            "Create a lowercase string by repeating {a} {b} times.",
            "Form a new string by repeating {a} {b} times and converting it to lowercase."
        ],
        "language": "lvs_Latn"
    },
    {
        "solution": "```python\nanswer = (a * b).replace(c, d)\nprint(answer)\n```",
        "variables": {
            "a": "RSPCA-\u10e1 \u10d0\u10ee\u10d0\u10da\u10d8 \u10e1\u10d0\u10db\u10ee\u10e0\u10d4\u10d7 \u10e3\u10d4\u10da\u10e1\u10d8\u10e1 \u10db\u10d7\u10d0\u10d5\u10d0\u10e0\u10db\u10d0 \u10d8\u10dc\u10e1\u10de\u10d4\u10e5\u10e2\u10dd\u10e0\u10db\u10d0, \u10d3\u10d4\u10d5\u10d8\u10d3 \u10dd'\u10e8\u10d0\u10dc\u10d4\u10e1\u10d8\u10db, ABC-\u10e1\u10d7\u10d0\u10dc \u10e1\u10d0\u10e3\u10d1\u10e0\u10d8\u10e1\u10d0\u10e1 \u10d0\u10e6\u10dc\u10d8\u10e8\u10dc\u10d0, \u10e0\u10dd\u10db \u10d0\u10d5\u10e1\u10e2\u10e0\u10d0\u10da\u10d8\u10d0\u10e8\u10d8 \u10e1\u10d0\u10e1\u10d0\u10d9\u10da\u10d0\u10dd\u10d4\u10d1\u10d8\u10e1 \u10d6\u10d4\u10d3\u10d0\u10db\u10ee\u10d4\u10d3\u10d5\u10d4\u10da\u10dd\u10d1\u10d0 \u10d3\u10d0 \u10e8\u10d4\u10db\u10dd\u10ec\u10db\u10d4\u10d1\u10d4\u10d1\u10d8 \u10e3\u10dc\u10d3\u10d0 \u10d2\u10d0\u10ee\u10d3\u10d4\u10e1 \u10e1\u10d0\u10e7\u10dd\u10d5\u10d4\u10da\u10d7\u10d0\u10dd.",
            "b": 2,
            "c": "\u10d0",
            "d": "\u10d0"
        },
        "query": [
            "Replace {c} with {d} in the string formed by repeating {a} {b} times.",
            "Create a string by repeating {a} {b} times and replacing {c} with {d}.",
            "Form a new string by replacing {c} with {d} in {a} repeated {b} times."
        ],
        "language": "kat_Geor"
    },
    {
        "solution": "```python\nanswer = (a * b).strip()\nprint(answer)\n```",
        "variables": {
            "a": "\u062f \u0627\u0646\u0633\u0627\u0646 \u0644\u0627\u0633 \u062f \u069a\u067e\u0648 \u06ab\u0648\u062a\u0648 \u067e\u0648\u0631\u064a \u062f \u067e\u069a\u06d0 \u067e\u0647 \u067e\u0631\u062a\u0644\u0647 \u0644\u0646\u0689 \u062f\u06cc\u06d4",
            "b": 3
        },
        "query": [
            "Strip the whitespace from the string formed by repeating {a} {b} times.",
            "Create a string by repeating {a} {b} times and stripping the whitespace.",
            "Form a new string by stripping the whitespace from {a} repeated {b} times."
        ],
        "language": "pbt_Arab"
    },
    {
        "solution": "```python\nanswer = (a * b).capitalize()\nprint(answer)\n```",
        "variables": {
            "a": "Ivindani yii, tuililikana maita kauta mavitu ma tavia ya uviasala na maendeeo mayo ni mateetheisye andu kwitikilana na mitalatala myeu na nzia nzau ya ikanisa yaku.",
            "b": 2
        },
        "query": [
            "Capitalize the string formed by repeating {a} {b} times.",
            "Create a string by repeating {a} {b} times and capitalizing it.",
            "Form a new string by capitalizing {a} repeated {b} times."
        ],
        "language": "kam_Latn"
    },
    {
        "solution": "```python\nanswer = (a * b).title()\nprint(answer)\n```",
        "variables": {
            "a": "Jard\u00edn de la Uni\u00f3n \u0254\u201a t\u025bnm\u025b \u0256\u00e9 w\u025b y\u00e9 gb\u00e1 \u0256\u00ec k\u0254\u0301xota n\u00fa kp\u00e1 r\u0254manu x\u00f3x\u00f3 l\u025b t\u0254n d\u0254hun \u0256\u00f2 xw\u00e8 kanweko 17 g\u0254\u0301\u0254 vlam\u025b\u201a lob\u0254 egb\u00e8 d\u00ecn \u0254 Templo de San Diego x\u0254\u0300 \u0254 k\u025bd\u025b j\u025bn kp\u00f2.",
            "b": 2
        },
        "query": [
            "Convert to title case the string formed by repeating {a} {b} times.",
            "Create a title-cased string by repeating {a} {b} times.",
            "Form a new string by repeating {a} {b} times and converting it to title case."
        ],
        "language": "fon_Latn"
    },
    {
        "solution": "```python\nanswer = (a * b).startswith(c)\nprint(answer)\n```",
        "variables": {
            "a": "\u041c\u0438\u043d \u0438\u04a3 \u043c\u04e9\u04bb\u0438\u043c \u0447\u0430\u0440\u0430\u043b\u0430\u0440\u043d\u044b\u04a3 \u0444\u0438\u043d\u0430\u043b\u044c \u0440\u0430\u0443\u043d\u0434\u043b\u0430\u0440\u044b\u043d\u0430 \u043a\u0430\u0439\u0442\u0443\u044b\u043c\u0430 \u0431\u0438\u043a \u0448\u0430\u0442\u043c\u044b\u043d. \u041c\u0438\u043d \u043c\u043e\u043d\u0434\u0430 \u0497\u0438\u04a3\u0435\u043f \u043a\u0430\u0440\u0430\u0440 \u04e9\u0447\u0435\u043d,",
            "b": 2,
            "c": "\u041c\u0438\u043d \u0438\u04a3 \u043c\u04e9\u04bb\u0438\u043c \u0447\u0430\u0440\u0430\u043b\u0430\u0440\u043d\u044b\u04a3"
        },
        "query": [
            "Check if the string formed by repeating {a} {b} times starts with {c}.",
            "Determine if {a} repeated {b} times starts with {c}.",
            "Verify if the repeated {a} {b} times string begins with {c}."
        ],
        "language": "tat_Cyrl"
    },
    {
        "solution": "```python\nanswer = (a * b).endswith(c)\nprint(answer)\n```",
        "variables": {
            "a": "\u0422\u0438\u0434\u0435 \u043f\u0435\u0448 \u043a\u0443\u043c\u0434\u0430\u043d \u0448\u0430\u0440\u043b\u044b\u0448\u0435 \u044b\u0448\u0442\u0430\u043b\u0442\u0448\u0435 \u043f\u0430\u0448\u0430 \u0433\u044b\u043d\u0430\u0442, \u0442\u0443\u0434\u043e Disney-\u044b\u043d \u043f\u0440\u0430\u0432\u0438\u043b\u0436\u0435 \u0434\u0435\u043d\u0435 \u0447\u0430\u0440\u0430\u043b\u0442\u044b\u043d: \u0431\u0438\u043b\u0435\u0442\u044b\u043c \u0432\u0435\u0441 \u0435\u04a5\u043b\u0430\u043d \u043f\u0443\u0430\u0448 \u043e\u043a \u043b\u0438\u0439.",
            "b": 2,
            "c": "\u043b\u0438\u0439."
        },
        "query": [
            "Check if the string formed by repeating {a} {b} times ends with {c}.",
            "Determine if {a} repeated {b} times ends with {c}.",
            "Verify if the repeated {a} {b} times string finishes with {c}."
        ],
        "language": "mhr_Cyrl"
    },
    {
        "solution": "```python\nanswer = (a * b).count(c)\nprint(answer)\n```",
        "variables": {
            "a": "\u0422\u04af\u0440\u0456\u043a \u0434\u0438\u0432\u0430\u0441\u044b \u0421\u0435\u0437\u0435\u043d \u0410\u043a\u0441\u0443 \u0438\u0442\u0430\u043b\u044c\u044f\u043d\u0434\u044b\u049b \u0442\u0435\u043d\u043e\u0440 \u0410\u043b\u0435\u0441\u0441\u0430\u043d\u0434\u0440\u043e \u0421\u0430\u0444\u0438\u043d\u0430 \u0436\u04d9\u043d\u0435 \u0433\u0440\u0435\u043a \u04d9\u043d\u0448\u0456\u0441\u0456 \u0425\u0430\u0440\u0438\u0441 \u0410\u043b\u0435\u043a\u0441\u0438\u043e\u0443\u043c\u0435\u043d \u0431\u0456\u0440\u0433\u0435 \u04d9\u043d \u0441\u0430\u043b\u0434\u044b.",
            "b": 3,
            "c": "\u04d9\u043d"
        },
        "query": [
            "Count occurrences of {c} in the string formed by repeating {a} {b} times.",
            "Determine the number of times {c} appears in {a} repeated {b} times.",
            "Find how many times {c} occurs in {a} duplicated {b} times."
        ],
        "language": "kaz_Cyrl"
    },
    {
        "solution": "```python\nanswer = (a * b).find(c)\nprint(answer)\n```",
        "variables": {
            "a": "\u0939\u093f\u0928 \u0905\u092e\u0932 \u091c\u094b \u092a\u093e\u0932\u0928\u0941 \u0915\u0902\u0926\u0947, \u090f\u091a.\u091c\u0947.\u0906\u0930.-3 \u091c\u0947 \u0905\u092e\u0932 \u092e\u0947\u0902 \u0930\u0939\u0923 \u0932\u093e\u0907 2015 \u092f\u093e 2016 \u092e\u0947\u0902 \u0908\u0902\u0926\u095c \u091a\u0942\u0902\u0921\u093f\u092f\u0932 \u0935\u093f\u0927\u093e\u0928\u0938\u092d\u093e \u092a\u093e\u0930\u093e\u0902 \u097f\u0940\u0939\u0930 \u091c\u093e\u0907\u095b\u094b \u0935\u0930\u093f\u0924\u094b \u0935\u0947\u0902\u0926\u094b\u0964",
            "b": 2,
            "c": "\u0935\u093f\u0927\u093e\u0928\u0938\u092d\u093e"
        },
        "query": [
            "Find the position of {c} in the string formed by repeating {a} {b} times.",
            "Locate {c} in {a} repeated {b} times.",
            "Determine the index of {c} in the repeated {a} {b} times."
        ],
        "language": "snd_Deva"
    },
    {
        "solution": "```python\nanswer = (a * b).rfind(c)\nprint(answer)\n```",
        "variables": {
            "a": "\u0395\u03ac\u03bd \u03ad\u03c7\u03b5\u03c4\u03b5 \u03b4\u03b9\u03b1\u03b8\u03ad\u03c3\u03b9\u03bc\u03bf \u03c7\u03c1\u03cc\u03bd\u03bf \u03c3\u03c4\u03bf \u03c4\u03b1\u03be\u03af\u03b4\u03b9 \u03c3\u03b1\u03c2, \u03c5\u03c0\u03bf\u03bb\u03bf\u03b3\u03af\u03c3\u03c4\u03b5 \u03c4\u03b1 \u03c3\u03c5\u03bd\u03bf\u03bb\u03b9\u03ba\u03ac \u03c3\u03b1\u03c2 \u03bd\u03b1\u03cd\u03bb\u03b1 \u03b3\u03b9\u03b1 \u03c4\u03bf \u03c4\u03b1\u03be\u03af\u03b4\u03b9 \u03c3\u03c4\u03b7\u03bd \u0391\u03c6\u03c1\u03b9\u03ba\u03ae \u03c3\u03b5 \u03c3\u03cd\u03b3\u03ba\u03c1\u03b9\u03c3\u03b7 \u03bc\u03b5 \u03c4\u03b1 \u03bd\u03b1\u03cd\u03bb\u03b1 \u03c0\u03bf\u03c5 \u03b8\u03b1 \u03b1\u03c0\u03b1\u03b9\u03c4\u03bf\u03cd\u03bd\u03c4\u03b1\u03bd \u03b3\u03b9\u03b1 \u03c4\u03bf \u03b3\u03cd\u03c1\u03bf \u03c4\u03bf\u03c5 \u03ba\u03cc\u03c3\u03bc\u03bf\u03c5.",
            "b": 3,
            "c": "\u03c4\u03b1\u03be\u03af\u03b4\u03b9"
        },
        "query": [
            "Find the last occurrence of {c} in the string formed by repeating {a} {b} times.",
            "Locate the last instance of {c} in {a} repeated {b} times.",
            "Determine the last index of {c} in the repeated {a} {b} times."
        ],
        "language": "ell_Grek"
    },
    {
        "solution": "```python\nanswer = (a * b).index(c)\nprint(answer)\n```",
        "variables": {
            "a": "\u0412\u0435\u043d\u0433\u0440\u0438\u044f\u0434\u0430\u0493\u044b \u0433\u0440\u0430\u043d\u0434 \u043f\u0440\u0438\u0434\u0435 2009 \u0436\u044b\u043b\u044b \u0431\u043e\u043b\u0493\u0430\u043d \u0430\u043f\u0430\u0442\u0442\u0430\u043d \u043a\u0435\u0439\u0456\u043d \u0431\u0440\u0430\u0437\u0438\u043b\u0438\u044f\u043b\u044b\u049b \u0430\u0443\u044b\u0440 \u0431\u0430\u0441 \u0436\u0430\u0440\u0430\u049b\u0430\u0442\u044b\u043d \u0430\u043b\u0434\u044b.",
            "b": 2,
            "c": "\u0431\u0440\u0430\u0437\u0438\u043b\u0438\u044f\u043b\u044b\u049b"
        },
        "query": [
            "Get the index of {c} in the string formed by repeating {a} {b} times.",
            "Find the index of {c} in {a} repeated {b} times.",
            "Determine the position of {c} in the string resulting from {a} duplicated {b} times."
        ],
        "language": "kaz_Cyrl"
    },
    {
        "solution": "```python\nanswer = (a * b).rindex(c)\nprint(answer)\n```",
        "variables": {
            "a": "\u0c87\u0ca6\u0cc1 \u0ca8\u0cc0\u0cb0\u0cbf\u0ca8\u0c82\u0ca4\u0cc6 \u0cb5\u0cb0\u0ccd\u0ca4\u0cbf\u0cb8\u0cb2\u0cbf\u0ca6\u0cc6. ",
            "b": 3,
            "c": "\u0ca8\u0cc0"
        },
        "query": [
            "Get the last index of {c} in the string formed by repeating {a} {b} times.",
            "Find the last index of {c} in {a} repeated {b} times.",
            "Determine the last position of {c} in the string resulting from {a} duplicated {b} times."
        ],
        "language": "kan_Knda"
    },
    {
        "solution": "```python\nanswer = (a * b).split(c)\nprint(answer)\n```",
        "variables": {
            "a": "\u1215\u1309 \u1260\u1270\u127b\u1208 \u134d\u1325\u1290\u1275 \u12a5\u1295\u12f2\u1270\u1308\u1260\u122d \u12a0\u1201\u1295 \u12a8\u1205\u12dd\u1265 \u1324\u1293 \u12a5\u1293 \u12a8\u12c8\u1295\u1300\u120d \u134d\u1275\u1205 \u12a0\u1295\u1343\u122d \u1320\u1243\u121a \u1290\u12cd \u1265\u1208\u12cb\u120d \u12e8\u1218\u1295\u130d\u1225\u1275 \u1243\u120d \u12a0\u1240\u1263\u12ed\u1361\u1361 ",
            "b": 3,
            "c": "\u1361"
        },
        "query": [
            "Split the string formed by repeating {a} {b} times using {c} as the delimiter.",
            "Create a list by splitting {a} repeated {b} times with {c}.",
            "Divide the string resulting from {a} duplicated {b} times by {c}."
        ],
        "language": "amh_Ethi"
    },
    {
        "solution": "```python\nanswer = (a * b).rsplit(c)\nprint(answer)\n```",
        "variables": {
            "a": "\u092c\u094b\u092c\u0947\u0915\u0915\u094b \u0924\u0941\u0932\u0928\u093e\u092e\u093e \u0905\u0930\u0942 \u0915\u0938\u0948\u0932\u0947 \u0915\u0939\u093f\u0932\u094d\u092f\u0948 \u0915\u094d\u0932\u092c\u0915\u093e \u0932\u093e\u0917\u093f \u0905\u0927\u093f\u0915 \u0909\u092a\u0938\u094d\u0925\u093f\u0924\u093f \u0935\u093e \u0905\u0927\u093f\u0915 \u0917\u094b\u0932 \u0917\u0930\u0947\u0915\u093e \u091b\u0948\u0928\u0928\u094d\u0964",
            "b": 2,
            "c": "\u0964"
        },
        "query": [
            "Split the string formed by repeating {a} {b} times from the right using {c} as the delimiter.",
            "Create a list by splitting {a} repeated {b} times from the right with {c}.",
            "Divide the string resulting from {a} duplicated {b} times by {c} from the right."
        ],
        "language": "npi_Deva"
    },
    {
        "solution": "```python\nanswer = (a * b).splitlines()\nprint(answer)\n```",
        "variables": {
            "a": "<\u2d34\u2d42\u2d30\u2d4f \u2d62<\u2d5c\u2d5c\u2d30\u2d54 \u2d37-\u2d3e \u2d30\u2d37 \u2d5c\u2d30\u2d4d<\u2d59\u2d59<\u2d37 \u2d30\u2d59\u2d49\u2d5c<\u2d34 \u2d4f <\u2d4f<\u2d63\u2d36\u2d30\u2d4e-\u2d4f\u2d4f<\u2d3e \u2d3c\u2d53\u2d4d \u2d4e<\u2d37\u2d62\u2d30 \u2d37 \u2d30\u2d37 \u2d5c<\u2d4d\u2d4e<\u2d37<\u2d37 \u2d30\u2d37 \u2d5c<\u2d63\u2d49\u2d4f<\u2d36\u2d53\u2d4e<\u2d37 \u2d59 \u2d30\u2d4e\u2d4e<\u2d3e \u2d61\u2d30\u2d54 <\u2d65\u2d65\u2d30\u2d4d<\u2d4f.",
            "b": 3
        },
        "query": [
            "Split the string formed by repeating {a} {b} times into lines.",
            "Create a list of lines from {a} repeated {b} times.",
            "Divide the string resulting from {a} duplicated {b} times into lines."
        ],
        "language": "taq_Tfng"
    },
    {
        "solution": "```python\nanswer = (a * b).encode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "\u17a7\u1791\u17b6\u17a0\u179a\u178e\u17cd",
            "b": 3
        },
        "query": [
            "Encode the string formed by repeating {a} {b} times in UTF-8.",
            "Create a UTF-8 encoded string from {a} repeated {b} times.",
            "Convert to UTF-8 the string resulting from {a} duplicated {b} times."
        ],
        "language": "khm_Khmr"
    },
    {
        "solution": "```python\nanswer = (a * b).zfill(c)\nprint(answer)\n```",
        "variables": {
            "a": "\u0627\u06cc\u0646 \u0622\u06cc\u06cc\u0646 \u062f\u0631 \u0642\u0631\u0646 \u067e\u0627\u0646\u0632\u062f\u0647\u0645 \u0628\u0647 \u062f\u0633\u062a \u06af\u0648\u0631\u0648 \u0646\u0627\u0646\u0627\u06a9 (1539- 1469) \u0627\u06cc\u062c\u0627\u062f \u0634\u062f. \u067e\u0633 \u0627\u0632 \u0622\u0646\u060c \u0646\u0647 \u0645\u0628\u0644\u063a \u0645\u0630\u0647\u0628\u06cc \u062f\u06cc\u06af\u0631 \u0647\u0645 \u06cc\u06a9\u06cc \u067e\u0633 \u0627\u0632 \u062f\u06cc\u06af\u0631\u06cc \u0622\u0645\u062f\u0646\u062f.",
            "b": 2,
            "c": 300
        },
        "query": [
            "Pad the string formed by repeating {a} {b} times with zeros to a total length of {c}.",
            "Create a zero-padded string from {a} repeated {b} times to reach {c} characters.",
            "Fill the string resulting from {a} duplicated {b} times with zeros up to {c} length."
        ],
        "language": "pes_Arab"
    },
    {
        "solution": "```python\nanswer = (a * b).center(c)\nprint(answer)\n```",
        "variables": {
            "a": "\u1019\u1014\u1000\u103a\u1021\u1005\u1031\u102c\u1015\u102d\u102f\u1004\u103a\u1038\u1019\u103e\u102c",
            "b": 3,
            "c": 50
        },
        "query": [
            "Center the string formed by repeating {a} {b} times within a field of width {c}.",
            "Create a centered string from {a} repeated {b} times to a width of {c}.",
            "Align the string resulting from {a} duplicated {b} times to the center of width {c}."
        ],
        "language": "mya_Mymr"
    },
    {
        "solution": "```python\nanswer = (a * b).ljust(c)\nprint(answer)\n```",
        "variables": {
            "a": "\u0645\u0627 \u0644\u0645 \u062a\u0643\u0646 \u062f\u0628\u0644\u0648\u0645\u0627\u0633\u064a\u064b\u0627\u060c \u0641\u0625\u0646 \u0627\u0644\u0639\u0645\u0644 \u0641\u064a \u0627\u0644\u062e\u0627\u0631\u062c \u064a\u0639\u0646\u064a \u0623\u0646\u0647 \u0633\u064a\u062a\u0639\u064a\u0646 \u0639\u0644\u064a\u0643 \u0628\u0634\u0643\u0644\u064d \u0639\u0627\u0645\u064d \u062a\u0642\u062f\u064a\u0645 \u0636\u0631\u064a\u0628\u0629\u0650 \u062f\u062e\u0644\u064d \u0641\u064a \u0627\u0644\u0628\u0644\u062f \u0627\u0644\u0630\u064a \u062a\u064f\u0642\u064a\u0645 \u0641\u064a\u0647.",
            "b": 2,
            "c": 200
        },
        "query": [
            "Left-justify the string formed by repeating {a} {b} times within a field of width {c}.",
            "Create a left-justified string from {a} repeated {b} times to a width of {c}.",
            "Align the string resulting from {a} duplicated {b} times to the left of width {c}."
        ],
        "language": "arb_Arab"
    },
    {
        "solution": "```python\nanswer = (a * b).rjust(c)\nprint(answer)\n```",
        "variables": {
            "a": "\u0aa4\u0ac7\u0aae\u0aa8\u0abe",
            "b": 3,
            "c": 50
        },
        "query": [
            "Right-justify the string formed by repeating {a} {b} times within a field of width {c}.",
            "Create a right-justified string from {a} repeated {b} times to a width of {c}.",
            "Align the string resulting from {a} duplicated {b} times to the right of width {c}."
        ],
        "language": "guj_Gujr"
    },
    {
        "solution": "```python\nanswer = (a * b).isalnum()\nprint(answer)\n```",
        "variables": {
            "a": "\u0411\u043e \u0432\u0443\u04b7\u0443\u0434\u0438 \u0438\u043d, \u04b3\u043e\u0434\u0438\u0441\u0438 \u043c\u0430\u0437\u043a\u0443\u0440 \u043d\u0430\u0431\u043e\u044f\u0434 \u0448\u0443\u043c\u043e\u0440\u043e \u043d\u043e\u0440\u043e\u04b3\u0430\u0442 \u0441\u043e\u0437\u0430\u0434, \u0437\u0435\u0440\u043e \u0430\u043a\u0441\u0430\u0440 \u0432\u0430\u049b\u0442 \u0441\u0430\u0439\u0451\u04b3\u043e\u043d \u04b3\u0430\u0440\u0430\u043a\u0430\u0442 \u043c\u0435\u043a\u0443\u043d\u0430\u043d\u0434, \u0442\u043e \u043a\u0438 \u043c\u043e\u0448\u0438\u043d\u04b3\u043e \u043f\u0443\u0440 \u0448\u0430\u0432\u0430\u043d\u0434.",
            "b": 2
        },
        "query": [
            "Check if the string formed by repeating {a} {b} times is alphanumeric.",
            "Determine if {a} repeated {b} times contains only alphanumeric characters.",
            "Verify if the string resulting from {a} duplicated {b} times is alphanumeric."
        ],
        "language": "tgk_Cyrl"
    },
    {
        "solution": "```python\nanswer = (a * b).isalpha()\nprint(answer)\n```",
        "variables": {
            "a": "Aja",
            "b": 3
        },
        "query": [
            "Check if the string formed by repeating {a} {b} times is alphabetic.",
            "Determine if {a} repeated {b} times contains only alphabetic characters.",
            "Verify if the string resulting from {a} duplicated {b} times is alphabetic."
        ],
        "language": "ekk_Latn"
    },
    {
        "solution": "```python\nanswer = (a * b).isdigit()\nprint(answer)\n```",
        "variables": {
            "a": "5",
            "b": 3
        },
        "query": [
            "Check if the string formed by repeating {a} {b} times is numeric.",
            "Determine if {a} repeated {b} times contains only numeric characters.",
            "Verify if the string resulting from {a} duplicated {b} times is numeric."
        ],
        "language": "bel_Cyrl"
    },
    {
        "solution": "```python\nanswer = (a * b).isupper()\nprint(answer)\n```",
        "variables": {
            "a": "Kabaha",
            "b": 3
        },
        "query": [
            "Check if the string formed by repeating {a} {b} times is in uppercase.",
            "Determine if {a} repeated {b} times is entirely in uppercase.",
            "Verify if the string resulting from {a} duplicated {b} times is uppercase."
        ],
        "language": "som_Latn"
    },
    {
        "solution": "```python\nanswer = (a * b).islower()\nprint(answer)\n```",
        "variables": {
            "a": "p\u0269-y\u0254\u0254",
            "b": 3
        },
        "query": [
            "Check if the string formed by repeating {a} {b} times is in lowercase.",
            "Determine if {a} repeated {b} times is entirely in lowercase.",
            "Verify if the string resulting from {a} duplicated {b} times is lowercase."
        ],
        "language": "kbp_Latn"
    },
    {
        "solution": "```python\nanswer = (a * b).istitle()\nprint(answer)\n```",
        "variables": {
            "a": "Pelajar juga boleh mengemukakan soalan kepada pengajar pada bila-bila masa sepanjang hari dan menjangkakan jawapan yang pantas, berbanding menunggu sehingga pertemuan bersemuka yang berikutnya.",
            "b": 1
        },
        "query": [
            "Check if the string formed by repeating {a} {b} times is in title case.",
            "Determine if {a} repeated {b} times is entirely in title case.",
            "Verify if the string resulting from {a} duplicated {b} times is title case."
        ],
        "language": "zsm_Latn"
    },
    {
        "solution": "```python\nanswer = a + b\nanswer = answer.upper()\nprint(answer)\n```",
        "variables": {
            "a": "Wei ma skater no dane ne ho.",
            "b": "S\u025b skates no kyea k\u0254 nifa a, skater no dane k\u0254 nifa, na s\u025b skates no kyea k\u0254 benkum a, skater no dane k\u0254 benkum."
        },
        "query": [
            "Concat string {a} and {b}, then convert to uppercase.",
            "Combine {a} and {b} and change the result to uppercase.",
            "Merge {a} and {b}, then make the resulting string uppercase."
        ],
        "language": "twi_Latn_akua1239"
    },
    {
        "solution": "```python\nanswer = (a + b).replace(c, d)\nprint(answer)\n```",
        "variables": {
            "a": "\u2d30\u2d54 \u2d59\u2d59\u2d4f\u2d5c\u2d30\u2d4e\u2d4f \u2d61\u2d49\u2d62\u2d62\u2d30\u2d39 \u2d49\u2d4e\u2d53\u2d59\u2d4f\u2d30\u2d61\u2d4f \u2d49\u2d59 \u2d33\u2d30\u2d4f \u2d49\u2d4e\u2d56\u2d30\u2d62\u2d4f \u2d49\u2d4d\u2d4d\u2d49 \u2d33 \u2d49\u2d4d\u2d4d\u2d30 \u2d40\u2d49\u2d37\u2d4a, \u2d53\u2d54 \u2d49\u2d61\u2d30 \u2d49\u2d33\u2d49 \u2d49\u2d44\u2d49\u2d4f\u2d49 \u2d49\u2d59 \u2d5c\u2d4f\u2d5c \u2d5b\u2d5b\u2d30\u2d4f \u2d49\u2d39\u2d49\u2d4f\u2d53\u2d65\u2d53\u2d55\u2d4f, \u2d4e\u2d47\u2d47\u2d30\u2d54 \u2d37 \u2d30\u2d59\u2d59 \u2d30 \u2d49\u2d56\u2d49\u2d62 \u2d53\u2d4e\u2d45\u2d53\u2d62\u2d4f \u2d37 \u2d61\u2d49\u2d62\u2d62\u2d30\u2d39 \u2d49\u2d33\u2d39\u2d30\u2d39 \u2d30\u2d4e\u2d4e \u2d61\u2d30\u2d3d\u2d53",
            "b": " (\u2d62\u2d30\u2d4f \u2d61\u2d30\u2d62\u2d62\u2d30\u2d61 \u2d4f \u2d49\u2d39\u2d49\u2d4f\u2d53\u2d65\u2d53\u2d55\u2d4f) \u2d30\u2d37 \u2d5b\u2d5b\u2d4f \u2d49\u2d3c\u2d54\u2d30\u2d61\u2d4f \u2d4f\u2d56 \u2d49\u2d33\u2d53\u2d4e\u2d4e\u2d30 \u2d49\u2d4d\u2d30\u2d4f \u2d40\u2d49\u2d37\u2d4a.",
            "c": "\u2d49",
            "d": "a"
        },
        "query": [
            "Concat string {a} and {b}, then replace {c} with {d}.",
            "Combine {a} and {b}, and then substitute {c} with {d}.",
            "Merge {a} and {b}, and then change {c} to {d}."
        ],
        "language": "zgh_Tfng"
    },
    {
        "solution": "```python\nanswer = a + b\nanswer = answer[::-1]\nprint(answer)\n```",
        "variables": {
            "a": "\u0932\u0915\u094d\u091c\u092e\u092c\u0930\u094d\u0917\u0915\u094b",
            "b": "\u0932\u093e\u092e\u094b \u0907\u0924\u093f\u0939\u093e\u0938 \u091b \u0924\u0930 \u092f\u0938\u0915\u094b \u0938\u094d\u0935\u0924\u0928\u094d\u0924\u094d\u0930\u0924\u093e \u0938\u0928\u094d 1839 \u0926\u0947\u0916\u093f \u0938\u0941\u0930\u0941 \u0939\u0941\u0928\u094d\u091b\u0964"
        },
        "query": [
            "Concat string {a} and {b}, then reverse the result.",
            "Combine {a} and {b}, and then reverse the resulting string.",
            "Merge {a} and {b}, then reverse the combined string."
        ],
        "language": "npi_Deva"
    },
    {
        "solution": "```python\nanswer = (a + b).title()\nprint(answer)\n```",
        "variables": {
            "a": "Ol 'interactive design' i nidim yu long skelim bek gen ol tingting bilong yu long",
            "b": "'media production' na lainim long tingting long 'non-linear' we."
        },
        "query": [
            "Concat string {a} and {b}, then convert to title case.",
            "Combine {a} and {b}, then change to title case.",
            "Merge {a} and {b}, then make the resulting string title case."
        ],
        "language": "tpi_Latn"
    },
    {
        "solution": "```python\nanswer = (a + b).find(c)\nprint(answer)\n```",
        "variables": {
            "a": "Callejon del Beso (Alley of the Kiss) ",
            "b": "\u0e23\u0e30\u0e40\u0e1a\u0e35\u0e22\u0e07\u0e2a\u0e2d\u0e07\u0e41\u0e2b\u0e48\u0e07\u0e17\u0e35\u0e48\u0e2d\u0e22\u0e39\u0e48\u0e2b\u0e48\u0e32\u0e07\u0e01\u0e31\u0e19\u0e40\u0e1e\u0e35\u0e22\u0e07 69 \u0e40\u0e0b\u0e19\u0e15\u0e34\u0e40\u0e21\u0e15\u0e23\u0e19\u0e35\u0e49\u0e40\u0e1b\u0e47\u0e19\u0e17\u0e35\u0e48\u0e01\u0e33\u0e40\u0e19\u0e34\u0e14\u0e02\u0e2d\u0e07\u0e15\u0e33\u0e19\u0e32\u0e19\u0e04\u0e27\u0e32\u0e21\u0e23\u0e31\u0e01\u0e17\u0e35\u0e48\u0e40\u0e01\u0e48\u0e32\u0e41\u0e01\u0e48\u0e15\u0e33\u0e19\u0e32\u0e19\u0e2b\u0e19\u0e36\u0e48\u0e07",
            "c": "\u0e15\u0e33\u0e19\u0e32\u0e19"
        },
        "query": [
            "Concat string {a} and {b}, then find the substring {c}.",
            "Combine {a} and {b}, then locate the substring {c}.",
            "Merge {a} and {b}, then search for the substring {c}."
        ],
        "language": "tha_Thai"
    },
    {
        "solution": "```python\nanswer = a + b + c\nprint(answer)\n```",
        "variables": {
            "a": "\u062a\u064a\u0648\u0631\u064a",
            "b": " \u06bd\u0648 \u0645\u062a\u0646\u062a\u06a0 \u062f\u06a0\u0646 \u06a9\u0644\u0627\u064a\u0645 \u0628\u0647\u0648\u0627",
            "c": " \u0628\u0648\u0644\u0646 \u0647\u0627\u0646\u0627 \u0627\u06a9\u062a\u064a\u06cf\u064a\u062a\u0633 \u0762\u064a\u0648\u0644\u0648\u0762\u064a\u0633 \u0628\u0627\u0686\u0648\u062a \u06a4\u064a\u0647."
        },
        "query": [
            "Concat string {a}, {b}, and {c} together.",
            "Combine {a}, {b}, and {c} into a single string.",
            "Merge {a}, {b}, and {c} to form one string."
        ],
        "language": "ace_Arab"
    },
    {
        "solution": "```python\nanswer = (a + b).encode('utf-8')\nprint(answer)\n```",
        "variables": {
            "a": "\u0d91\u0db8\u0dd9\u0db1\u0dca\u0db8, \u0d89\u0d9c\u0dd9\u0db1\u0dd3\u0db8\u0da7 \u0dc4\u0ddc\u0db3 \u0daf\u0dd9\u0dba\u0d9a\u0dca",
            "b": " \u0d87\u0dad\u0dca\u0dad\u0dda \u0d91\u0d9a\u0d9a\u0dca \u0db4\u0db8\u0dab\u0d9a\u0dca \u0db1\u0ddc\u0dc0\u0dda. \u0d89\u0d9c\u0dd9\u0db1 \u0d9c\u0db1\u0dca\u0db1\u0dcf \u0dc3\u0dc4 \u0dbd\u0db6\u0dcf\u0daf\u0dd9\u0db1 \u0daf\u0dd0\u0db1\u0dd4\u0db8 \u0d85\u0dad\u0dbb \u0d85\u0dad\u0dca\u0daf\u0dd0\u0d9a\u0dd3\u0db8 \u0db8\u0dad \u0d89\u0d9c\u0dd9\u0db1\u0dd4\u0db8 \u0dc3\u0dd2\u0daf\u0dd4\u0dc0\u0dda."
        },
        "query": [
            "Concat string {a} and {b}, then encode to UTF-8.",
            "Combine {a} and {b}, then encode the result as UTF-8.",
            "Merge {a} and {b}, then convert the resulting string to UTF-8 encoding."
        ],
        "language": "sin_Sinh"
    },
    {
        "solution": "```python\nanswer = a.lower() + b.upper()\nprint(answer)\n```",
        "variables": {
            "a": "Prasyarat",
            "b": "visa"
        },
        "query": [
            "Concat lowercase {a} and uppercase {b}.",
            "Combine {a} in lowercase with {b} in uppercase.",
            "Merge {a} in lowercase and {b} in uppercase to form one string."
        ],
        "language": "ban_Latn"
    },
    {
        "solution": "```python\nanswer = (a + b).strip(c)\nprint(answer)\n```",
        "variables": {
            "a": "1995 \u092c\u093f\u0916\u094c \u092a\u093e\u0930\u094d\u091f\u093f\u091c\u0928\u0928\u093f",
            "b": " \u091c\u093e\u0930\u093f\u092e\u093f\u0928\u093e\u0935 \u0938\u093e\u092c\u0938\u093f\u0928 \u0917\u0947\u0932\u0947\u0917\u094d\u0930\u093e \u0939\u094b\u0928\u0928\u093e\u0928\u0948 \u092c\u093f\u0938\u093e\u092f\u0916'\u0928\u093e\u092f \u091c\u093e\u0926\u094b\u0902\u092e\u094b\u0928\u0964",
            "c": "1995 "
        },
        "query": [
            "Concat string {a} and {b}, then strip {c} from the result.",
            "Combine {a} and {b}, then remove {c} from the resulting string.",
            "Merge {a} and {b}, then trim {c} from the combined string."
        ],
        "language": "brx_Deva"
    },
    {
        "solution": "```python\nanswer = a + str(b)\nprint(answer)\n```",
        "variables": {
            "a": "\u0628\u0631\u0634\u0627 \u062a\u0633\u0627\u0643\u0631",
            "b": 5
        },
        "query": [
            "Concat string {a} and integer {b} together.",
            "Combine {a} and {b} into a single string.",
            "Merge {a} and {b} to form one string."
        ],
        "language": "aeb_Arab"
    },
    {
        "solution": "```python\nanswer = (a + b).count(c)\nprint(answer)\n```",
        "variables": {
            "a": "\u062a\u0644\u0648\u06cc\u0632\u06cc\u0648\u0646\u0644\u0627\u0631\u0646",
            "b": " \u0686\u0648\u062e\u0646 \u0627\u0644\u0647 \u062c\u0648\u0631\u0631\u06cc\u067e\u0644\u0631 \u06a9\u06cc \u0627\u062f\u0627\u0645\u0644\u0627\u0631\u0646 \u0686\u0648\u062e\u0648\u0646 \u0631\u0627\u0636\u06cc \u0627\u0644\u0633\u06cc\u0646.",
            "c": "\u0686"
        },
        "query": [
            "Concat string {a} and {b}, then count occurrences of {c}.",
            "Combine {a} and {b}, then count the number of times {c} appears.",
            "Merge {a} and {b}, then tally the instances of {c}."
        ],
        "language": "azb_Arab"
    },
    {
        "solution": "```python\nanswer = (a + b).startswith(c)\nprint(answer)\n```",
        "variables": {
            "a": "\u05d0\u05d5\u05dc\u05d9 \u05ea\u05d2\u05dc\u05d5",
            "b": " \u05de\u05e9\u05e7\u05d4 \u05e4\u05e9\u05d5\u05d8 \u05e9\u05ea\u05d5\u05db\u05dc\u05d5 \u05dc\u05d4\u05db\u05d9\u05df \u05dc\u05d0\u05e8\u05d5\u05d7\u05ea \u05d4\u05d1\u05d5\u05e7\u05e8",
            "c": "\u05d0\u05d5\u05dc\u05d9"
        },
        "query": [
            "Concat string {a} and {b}, then check if it starts with {c}.",
            "Combine {a} and {b}, then determine if the result starts with {c}.",
            "Merge {a} and {b}, then see if the resulting string begins with {c}."
        ],
        "language": "heb_Hebr"
    },
    {
        "solution": "```python\nanswer = (a + b).endswith(c)\nprint(answer)\n```",
        "variables": {
            "a": "\u092b\u093f\u0930 \u092d\u0940, ",
            "b": "\u0926\u0941\u0928\u093f\u092f\u093e \u092d\u0930 \u092e\u0947\u0902 \u0915\u0949\u092b\u0940 \u092a\u0940\u0928\u0947 \u0915\u0947 \u0915\u0908 \u0916\u093e\u0938 \u0924\u0930\u0940\u0915\u0947 \u0939\u0948\u0902 ",
            "c": "\u091c\u094b \u0905\u0928\u0941\u092d\u0935 \u0915\u0947 \u0932\u093e\u092f\u0915 \u0939\u0948\u0902."
        },
        "query": [
            "Concat string {a} and {b}, then check if it ends with {c}.",
            "Combine {a} and {b}, then determine if the result ends with {c}.",
            "Merge {a} and {b}, then see if the resulting string finishes with {c}."
        ],
        "language": "hin_Deva"
    },
    {
        "solution": "```python\nanswer = (a + b).islower()\nprint(answer)\n```",
        "variables": {
            "a": "Felicia, rakamboita dutu rechikamu chechina pa",
            "b": " Sikero yeSaffir-Simpson Hurricane, yakaneta kusvika kuderera kwetropical ichizopra neChipiri."
        },
        "query": [
            "Concat string {a} and {b}, then check if the result is all lowercase.",
            "Combine {a} and {b}, then verify if the resulting string is lowercase.",
            "Merge {a} and {b}, then see if the combined string is entirely lowercase."
        ],
        "language": "sna_Latn"
    },
    {
        "solution": "```python\nanswer = (a + b).isupper()\nprint(answer)\n```",
        "variables": {
            "a": "In 1977 is dr. Damadian veerdeg gekoume m\u00e8t de bouw vaan d\u2019n ierste \u201cganse liechaam\u201d",
            "b": " MRI scanner wat heer de \u201cindomitable\u201d neumde."
        },
        "query": [
            "Concat string {a} and {b}, then check if the result is all uppercase.",
            "Combine {a} and {b}, then verify if the resulting string is uppercase.",
            "Merge {a} and {b}, then see if the combined string is entirely uppercase."
        ],
        "language": "lim_Latn"
    }
]